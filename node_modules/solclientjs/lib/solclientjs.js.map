{"version":3,"file":"solclient.js","mappings":"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N,SACJh2C,EAAQ,aACRjM,EAAY,gBACZtH,EAAe,mBACf6I,EAAkB,yBAClB2K,GAAwB,qBACxBC,IACE,EAAQ,MACN,qBACJ69B,GAAoB,eACpB7/D,GAAc,gBACdmjE,GAAe,uBACf48B,GAAsB,QACtB/rD,GAAO,aACPhzC,GAAY,mBACZg/F,GAAkB,iBAClB/+F,GAAgB,kBAChB++D,GAAiB,aACjB+e,GAAY,aACZz9E,IACE,EAAQ,OACN,YACJmwE,GAAW,oBACXE,GAAmB,mBACnB5kD,GAAkB,gBAClB2H,GAAe,mBACfm9C,GAAkB,aAClBC,GAAY,uBACZC,IACE,EAAQ,OACN,SACJxwE,IACE,EAAQ,OACN,eACJiwE,GAAc,kBACdt7B,IACE,EAAQ,OACN,QACJnN,IACE,EAAQ,KAYN+qF,GAAS,CACb5qD,0BACArJ,wBACAtnB,UACAk5B,eACAE,uBACA5kD,sBACA2H,mBACAm9C,sBACAC,gBACAC,0BACA/xE,kBACAiyE,iBACA9xE,cACA+5B,kBACA75B,eACA0vD,UACAx2B,WACA6b,OACAx0C,UACAm0D,qBACAn/C,kBACAkB,iCACAhH,2BACA6c,4BACA7rB,0BACAk0D,kBACAn0D,iBACAi0B,kCACA1M,6BACA+6C,mBACAhqB,cACAplB,qBACAgsE,0BACA2N,sBACAptG,iBACAg8B,kBACAvlB,eACA6V,wBACAC,yBACAs8C,kBACA5sC,uBACAC,mBACA4sC,kBACAqrC,YACA38B,wBACAj+C,sBAMAE,+BACAw7E,4BACA6V,eACAC,mBACAvpF,WACAjM,eACAtH,kBACA6I,qBACA2K,4BACAC,wBACAgS,WACAhzC,gBACAg/F,sBACA/+F,oBACA++D,qBACA+e,gBACA98D,mBACAub,2BACA2F,6BACA7hC,gBACAC,YACA4sD,QACAiH,eACA5c,qBACAg5B,kBACAt7B,qBACAnN,WAEAvc,eAEAunG,UA1FgB,EAAQ,OA6F1BrzI,OAAOwrB,OAAO3J,EAAO3hB,QAASkzI,oBCrO9B,MAAM,KAAEvpG,GAAS,EAAQ,MAgIzBhoB,EAAO3hB,QAAQi1C,aAAetL,EAAKE,IAxHd,CA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","sources":["webpack://solclientjs/./node_modules/fflate/lib/node.cjs","webpack://solclientjs/./modules/solclient-session/lib/session-fsm.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-states.js","webpack://solclientjs/./modules/solclient-util/lib/uuid.js","webpack://solclientjs/./modules/solclient-util/lib/process.js","webpack://solclientjs/./modules/solclient-eskit/lib/iterator.js","webpack://solclientjs/./modules/solclient-session/lib/session-request-types.js","webpack://solclientjs/./modules/solclient-message/lib/message-delivery-mode-types.js","webpack://solclientjs/./modules/solclient-message-consumer/api.js","webpack://solclientjs/external node-commonjs \"buffer\"","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-request-result.js","webpack://solclientjs/./modules/solclient-debug/api.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-capabilities.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-map.js","webpack://solclientjs/./modules/solclient-util/lib/string-utils.js","webpack://solclientjs/./modules/solclient-session/lib/global-context.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-base.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/priority-user-cos-map.js","webpack://solclientjs/./modules/solclient-transport/lib/base-smf-client.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-return-codes.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-properties-validator.js","webpack://solclientjs/./modules/solclient-sdt/lib/validate-sdt-field.js","webpack://solclientjs/./modules/solclient-message/lib/message-outcomes.js","webpack://solclientjs/./node_modules/ws/lib/event-target.js","webpack://solclientjs/./modules/solclient-log/lib/global-binding.js","webpack://solclientjs/./modules/solclient-replaystart/lib/replayStartLocationBeginning.js","webpack://solclientjs/./modules/solclient-destination/lib/destination-util.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-properties-validator.js","webpack://solclientjs/./modules/solclient-factory/lib/solclient-factory-profiles.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/param-parse.js","webpack://solclientjs/./modules/solclient-sdt/api.js","webpack://solclientjs/./modules/solclient-validate/api.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/binary-meta-block.js","webpack://solclientjs/./modules/solclient-eskit/lib/mixin.js","webpack://solclientjs/./modules/solclient-factory/lib/solclient-factory-properties.js","webpack://solclientjs/external node-commonjs \"os\"","webpack://solclientjs/./node_modules/ws/lib/sender.js","webpack://solclientjs/./modules/solclient-session/lib/provision-event.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-fsm-event.js","webpack://solclientjs/./modules/solclient-util/api.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-properties.js","webpack://solclientjs/./node_modules/ws/lib/websocket.js","webpack://solclientjs/./modules/solclient-log/lib/log-levels.js","webpack://solclientjs/./modules/solclient-core/api-internal.js","webpack://solclientjs/./modules/solclient-session/lib/session-fsm-event.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smf-parameter.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-ids.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/decode.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-smp-message-type-flags.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/adprotocol.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/transport-acks.js","webpack://solclientjs/./modules/solclient-destination/lib/queue.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/shuntable-transport.js","webpack://solclientjs/./modules/solclient-fsm/lib/state-context.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-session-base.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-websocket-binary.js","webpack://solclientjs/./modules/solclient-validate/lib/parameter.js","webpack://solclientjs/./modules/solclient-destination/lib/destination-from-network.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-transport-session-message-types.js","webpack://solclientjs/./modules/solclient-session/lib/session-operations.js","webpack://solclientjs/external commonjs2 \"utf-8-validate\"","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-fsm-event-names.js","webpack://solclientjs/./modules/solclient-log/lib/log-impl.js","webpack://solclientjs/./node_modules/ws/lib/websocket-server.js","webpack://solclientjs/./modules/solclient-stats/lib/stat-types.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-access-types.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/client-ctrl.js","webpack://solclientjs/./modules/solclient-message/lib/message.js","webpack://solclientjs/./modules/solclient-transport/lib/node-tls-opts-mixin.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-map.js","webpack://solclientjs/./modules/solclient-eskit/lib/lazy.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-unsupported-value-error.js","webpack://solclientjs/external node-commonjs \"stream\"","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-header.js","webpack://solclientjs/external node-commonjs \"dns\"","webpack://solclientjs/./modules/solclient-message-tracing/api.js","webpack://solclientjs/./modules/solclient-session/lib/message-rx-cb-info.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/transport.js","webpack://solclientjs/./modules/solclient-flow/lib/flow-operation.js","webpack://solclientjs/./modules/solclient-session/lib/capability-types.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-single-element.js","webpack://solclientjs/./modules/solclient-eskit/lib/make-map.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-properties.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-fsm.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-stream.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/queue-browser.js","webpack://solclientjs/./node_modules/ws/lib/constants.js","webpack://solclientjs/./modules/solclient-stats/lib/stats.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-error.js","webpack://solclientjs/./modules/solclient-solcache-session/api.js","webpack://solclientjs/./modules/solclient-log/api.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/http-transport-session.js","webpack://solclientjs/./modules/solclient-queue/lib/endpoint-name-complaint.js","webpack://solclientjs/./modules/solclient-validate/lib/base-checks.js","webpack://solclientjs/./modules/solclient-message/lib/message-types.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-context.js","webpack://solclientjs/./node_modules/ws/lib/permessage-deflate.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smp-message.js","webpack://solclientjs/./modules/solclient-events/lib/timer.js","webpack://solclientjs/external node-commonjs \"zlib\"","webpack://solclientjs/./modules/solclient-transport/lib/web/http/xhr-factory.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-destination-types.js","webpack://solclientjs/./modules/solclient-transport/lib/smf-client.js","webpack://solclientjs/./modules/solclient-session/lib/session-states.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/keep-alive-message.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-events.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-event.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-value-error-subcodes.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-session-states.js","webpack://solclientjs/./node_modules/ws/lib/buffer-util.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-float.js","webpack://solclientjs/./modules/solclient-events/api.js","webpack://solclientjs/./modules/solclient-session/lib/authentication-schemes.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-session-event-codes.js","webpack://solclientjs/./modules/solclient-smf/api.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-state-names.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-smp-message-types.js","webpack://solclientjs/./modules/solclient-fsm/lib/state-machine.js","webpack://solclientjs/./modules/solclient-transport/lib/tsh-state.js","webpack://solclientjs/./node_modules/ws/lib/stream.js","webpack://solclientjs/./modules/solclient-message/lib/message-dump-standard-provider.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-event-names.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-fsm-event-names.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-tcp-tls.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-single-element.js","webpack://solclientjs/./modules/solclient-message/lib/message-dump-flags.js","webpack://solclientjs/./modules/solclient-error/lib/solace-error.js","webpack://solclientjs/./modules/solclient-replaystart/lib/replayStartLocation.js","webpack://solclientjs/./modules/solclient-util/lib/clone.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-binary.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-live-data-actions.js","webpack://solclientjs/./modules/solclient-util/lib/timing-bucket.js","webpack://solclientjs/./modules/solclient-session/lib/subscription-update-timeout-messages.js","webpack://solclientjs/./modules/solclient-factory/api.js","webpack://solclientjs/./modules/solclient-eskit/lib/resolver.js","webpack://solclientjs/external node-commonjs \"events\"","webpack://solclientjs/./modules/solclient-sdt/lib/codec/ieee754lib.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-get-result.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/transport-smf-message.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/queue-browser-properties.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-acknowledge-modes.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-factory.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/encode.js","webpack://solclientjs/external node-commonjs \"tls\"","webpack://solclientjs/./node_modules/ws/lib/limiter.js","webpack://solclientjs/./modules/solclient-factory/lib/profile-binding.js","webpack://solclientjs/./modules/solclient-session/lib/host-list-dns-filter.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/content-summary-element.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-request-types.js","webpack://solclientjs/./node_modules/long/umd/index.js","webpack://solclientjs/./modules/solclient-session/api.js","webpack://solclientjs/./modules/solclient-fsm/lib/exit-point.js","webpack://solclientjs/./modules/solclient-util/lib/api-properties-validators.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-protocols.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-adprotocol-params.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-base64.js","webpack://solclientjs/./modules/solclient-error/lib/error-subcodes.js","webpack://solclientjs/./modules/solclient-destination/lib/destination.js","webpack://solclientjs/./modules/solclient-transport/lib/web/websocket-close-codes.js","webpack://solclientjs/./modules/solclient-error/lib/operation-error.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-protocol-handler.js","webpack://solclientjs/./index.js","webpack://solclientjs/./modules/solclient-session/lib/session-event-cb-info.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-state-names.js","webpack://solclientjs/./modules/solclient-error/lib/error-response-subcode-mapper.js","webpack://solclientjs/./modules/solclient-replaystart/lib/replayStartLocationDate.js","webpack://solclientjs/./modules/solclient-eskit/lib/bidi-map.js","webpack://solclientjs/./modules/solclient-destination/lib/subscription-info.js","webpack://solclientjs/./modules/solclient-factory/lib/solclient-factory.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-destination.js","webpack://solclientjs/external node-commonjs \"https\"","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-stream-container.js","webpack://solclientjs/./modules/solclient-stats/api.js","webpack://solclientjs/./modules/solclient-error/lib/not-implemented-error.js","webpack://solclientjs/./modules/solclient-eskit/lib/assert.js","webpack://solclientjs/./modules/solclient-message-tracing/lib/message-trace-context.js","webpack://solclientjs/./node_modules/ws/lib/validation.js","webpack://solclientjs/./modules/solclient-message-publisher/api.js","webpack://solclientjs/./modules/solclient-fsm/lib/entry-point.js","webpack://solclientjs/./node_modules/ws/lib/extension.js","webpack://solclientjs/./modules/solclient-transport/lib/buffer-smf-client.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/message-publisher-acknowledge-modes.js","webpack://solclientjs/./modules/solclient-events/lib/event-emitter.js","webpack://solclientjs/./modules/solclient-fsm/lib/object.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-descriptor-validator.js","webpack://solclientjs/./modules/solclient-session/lib/session-state-names.js","webpack://solclientjs/./modules/solclient-transport/lib/web/web-transport-fsm.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-types.js","webpack://solclientjs/./modules/solclient-message/api.js","webpack://solclientjs/./modules/solclient-eskit/lib/array-operations.js","webpack://solclientjs/./node_modules/ws/lib/receiver.js","webpack://solclientjs/./modules/solclient-util/lib/url.js","webpack://solclientjs/./modules/solclient-session/lib/session-event-names.js","webpack://solclientjs/./modules/solclient-session/lib/session-event-codes.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/http-connection.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/api.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-tcp-plaintext.js","webpack://solclientjs/./modules/solclient-session/lib/ssl-downgrades.js","webpack://solclientjs/./modules/solclient-session/lib/default-capabilities.js","webpack://solclientjs/./modules/solclient-message/lib/replication-group-message-id.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer.js","webpack://solclientjs/external commonjs2 \"bufferutil\"","webpack://solclientjs/./modules/solclient-env/api.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/client-ctrl-message.js","webpack://solclientjs/./modules/solclient-message/lib/message-user-cos-types.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-properties-validator.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-session.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-cb-info.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-compression.js","webpack://solclientjs/./modules/solclient-error/api.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-dispatcher.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/message-consumer-event-names.js","webpack://solclientjs/external node-commonjs \"crypto\"","webpack://solclientjs/./modules/solclient-message-tracing/lib/message-tracing-support.js","webpack://solclientjs/external node-commonjs \"url\"","webpack://solclientjs/./modules/solclient-session/lib/outstanding-data-request.js","webpack://solclientjs/./modules/solclient-session/lib/mutable-session-properties.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-adprotocol-message-types.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/transport-tls.js","webpack://solclientjs/./modules/solclient-message-tracing/lib/message-trace-context-setter.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-session-properties.js","webpack://solclientjs/./modules/solclient-fsm/lib/state.js","webpack://solclientjs/./modules/solclient-message/lib/message-cache-status.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-session-event.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-field.js","webpack://solclientjs/./modules/solclient-session/lib/host-list.js","webpack://solclientjs/./modules/solclient-fsm/api.js","webpack://solclientjs/./modules/solclient-validate/lib/check.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/send-xhr.js","webpack://solclientjs/./modules/solclient-eskit/api.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-map-container.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-integer.js","webpack://solclientjs/./modules/solclient-session/lib/p2p-util.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/api.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-return-subcodes.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/application-acks.js","webpack://solclientjs/./node_modules/ws/index.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-parameter-types.js","webpack://solclientjs/./modules/solclient-convert/lib/long.js","webpack://solclientjs/./modules/solclient-fsm/lib/event.js","webpack://solclientjs/./modules/solclient-core/api.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-field-types.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-get-result-codes.js","webpack://solclientjs/./modules/solclient-eskit/lib/set-operations.js","webpack://solclientjs/./modules/solclient-transport/lib/tcp/api.js","webpack://solclientjs/./modules/solclient-convert/lib/convert.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/parse-smf.js","webpack://solclientjs/./modules/solclient-session/lib/correlated-request.js","webpack://solclientjs/external node-commonjs \"worker_threads\"","webpack://solclientjs/./modules/solclient-transport/lib/transport-client-stats.js","webpack://solclientjs/./modules/solclient-transport/api.js","webpack://solclientjs/./modules/solclient-session/lib/session-event.js","webpack://solclientjs/./node_modules/ws/lib/subprotocol.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/api.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/content-summary-types.js","webpack://solclientjs/./modules/solclient-queue/lib/abstract-queue-descriptor.js","webpack://solclientjs/./modules/solclient-error/lib/request-event-codes.js","webpack://solclientjs/./modules/solclient-destination/lib/topic.js","webpack://solclientjs/./modules/solclient-debug/lib/debug.js","webpack://solclientjs/./modules/solclient-stats/lib/stat-bymode.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smf-uh.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-session-subscribe-info.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/queue-browser-event-names.js","webpack://solclientjs/./modules/solclient-sdt/lib/sdt-data-types.js","webpack://solclientjs/external node-commonjs \"http\"","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/base-message.js","webpack://solclientjs/./modules/solclient-flow/lib/flow.js","webpack://solclientjs/./modules/solclient-destination/lib/destination-type.js","webpack://solclientjs/./modules/solclient-util/lib/array-utils.js","webpack://solclientjs/./modules/solclient-solcache-session/lib/cache-request.js","webpack://solclientjs/./modules/solclient-flow/api.js","webpack://solclientjs/./modules/solclient-message/lib/message-dump-util.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-field-header.js","webpack://solclientjs/./modules/solclient-error/lib/request-error.js","webpack://solclientjs/./modules/solclient-convert/lib/hex.js","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-flows.js","webpack://solclientjs/./modules/solclient-eskit/lib/enum.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-descriptor.js","webpack://solclientjs/./modules/solclient-transport/lib/web/http/api.js","webpack://solclientjs/external node-commonjs \"util\"","webpack://solclientjs/./modules/solclient-message-consumer/lib/consumer-fsm.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-protocols.js","webpack://solclientjs/./modules/solclient-transport/lib/buffer-queue.js","webpack://solclientjs/external node-commonjs \"constants\"","webpack://solclientjs/./modules/solclient-sdt/lib/codec/parse-integer.js","webpack://solclientjs/external node-commonjs \"net\"","webpack://solclientjs/./modules/solclient-queue/lib/queue-properties.js","webpack://solclientjs/./modules/solclient-replaystart/api.js","webpack://solclientjs/./modules/solclient-util/lib/version.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-discard-behaviors.js","webpack://solclientjs/./modules/solclient-message-tracing/lib/baggage.js","webpack://solclientjs/./modules/solclient-queue/lib/queue-permissions.js","webpack://solclientjs/./modules/solclient-util/lib/api-properties.js","webpack://solclientjs/./modules/solclient-sdt/lib/codec/encode-stream.js","webpack://solclientjs/./modules/solclient-transport/lib/web/api.js","webpack://solclientjs/./modules/solclient-log/lib/console-log-impl.js","webpack://solclientjs/./modules/solclient-session/lib/session.js","webpack://solclientjs/./modules/solclient-transport/lib/web/state-streaming-and-binary.js","webpack://solclientjs/./modules/solclient-destination/api.js","webpack://solclientjs/./modules/solclient-queue/api.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-client-ctrl-message-types.js","webpack://solclientjs/./modules/solclient-session/lib/session-properties.js","webpack://solclientjs/./modules/solclient-smf/lib/smf-client-ctrl-params.js","webpack://solclientjs/./modules/solclient-convert/lib/base64.js","webpack://solclientjs/./modules/solclient-util/lib/string-buffer.js","webpack://solclientjs/./modules/solclient-session/lib/session-properties-validator.js","webpack://solclientjs/./modules/solclient-message-publisher/lib/publisher-fsm-event.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/smf-header.js","webpack://solclientjs/./modules/solclient-flow/lib/private-flow-event-names.js","webpack://solclientjs/./modules/solclient-convert/api.js","webpack://solclientjs/./modules/solclient-smf/lib/message-objects/adprotocol-message.js","webpack://solclientjs/./modules/solclient-convert/lib/bits.js","webpack://solclientjs/external node-commonjs \"fs\"","webpack://solclientjs/./modules/solclient-transport/lib/transport-return-codes.js","webpack://solclientjs/./modules/solclient-smf/lib/codec/smp.js","webpack://solclientjs/./modules/solclient-transport/lib/transport-capabilities.js","webpack://solclientjs/./modules/solclient-transport/lib/web/websocket-transport-session.js","webpack://solclientjs/webpack/bootstrap","webpack://solclientjs/webpack/startup"],"sourcesContent":["\"use strict\";\n// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\n// Mediocre shim\nvar Worker;\nvar workerAdd = \";var __w=require('worker_threads');__w.parentPort.on('message',function(m){onmessage({data:m})}),postMessage=function(m,t){__w.parentPort.postMessage(m,t)},close=process.exit;self=global\";\ntry {\n    Worker = require('worker_threads').Worker;\n}\ncatch (e) {\n}\nvar node_worker_1 = {};\nnode_worker_1[\"default\"] = Worker ? function (c, _, msg, transfer, cb) {\n    var done = false;\n    var w = new Worker(c + workerAdd, { eval: true })\n        .on('error', function (e) { return cb(e, null); })\n        .on('message', function (m) { return cb(null, m); })\n        .on('exit', function (c) {\n        if (c && !done)\n            cb(new Error('exited with code ' + c), null);\n    });\n    w.postMessage(msg, transfer);\n    w.terminate = function () {\n        done = true;\n        return Worker.prototype.terminate.call(w);\n    };\n    return w;\n} : function (_, __, ___, ____, cb) {\n    setImmediate(function () { return cb(new Error('async operations unsupported - update to Node 12+ (or Node 10-11 with the --experimental-worker CLI flag)'), null); });\n    var NOP = function () { };\n    return {\n        terminate: NOP,\n        postMessage: NOP\n    };\n};\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new i32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return { b: b, r: r };\n};\nvar _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b.b, revfd = _b.r;\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >> 8) | ((x & 0x00FF) << 8)) >> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 1; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    return new u8(v.subarray(s, e));\n};\n/**\n * Codes for errors generated within this library\n */\nexports.FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, st, buf, dict) {\n    // source length       dict length\n    var sl = dat.length, dl = dict ? dict.length : 0;\n    if (!sl || st.f && !st.l)\n        return buf || new u8(0);\n    var noBuf = !buf;\n    // have to estimate size\n    var resize = noBuf || st.i != 2;\n    // no state\n    var noSt = st.i;\n    // Assumes roughly 33% compression ratio average\n    if (noBuf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (resize)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17\n        if (resize)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (resize)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                if (bt < dt) {\n                    var shift = dl - dt, dend = Math.min(dt, end);\n                    if (shift + bt < 0)\n                        err(3);\n                    for (; bt < dend; ++bt)\n                        buf[bt] = dict[shift + bt];\n                }\n                for (; bt < end; ++bt)\n                    buf[bt] = buf[bt - dt];\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    // don't reallocate for streams or user buffers\n    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n    d[o + 2] |= v >> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return { t: et, l: 0 };\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return { t: v, l: 1 };\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return { t: new u8(tr), l: mbt };\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return { c: cl.subarray(0, cli), n: s };\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a.t, mlb = _a.l;\n    var _b = hTree(df, 15), ddt = _b.t, mdb = _b.l;\n    var _c = lc(dlt), lclt = _c.c, nlc = _c.n;\n    var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        ++lcfreq[lclt[i] & 31];\n    for (var i = 0; i < lcdt.length; ++i)\n        ++lcfreq[lcdt[i] & 31];\n    var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];\n    if (bs >= 0 && flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >> 5) & 127), p += clct[i] >> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        var sym = syms[i];\n        if (sym > 255) {\n            var len = (sym >> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (sym >> 23) & 31), p += fleb[len];\n            var dst = sym & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (sym >> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[sym]), p += ll[sym];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new i32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, st) {\n    var s = st.z || dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var lst = st.l;\n    var pos = (st.r || 0) & 7;\n    if (lvl) {\n        if (pos)\n            w[0] = st.r >> 3;\n        var opt = deo[lvl - 1];\n        var n = opt >> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new i32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index          l/lind  waitdx          blkpos\n        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;\n        for (; i + 2 < s; ++i) {\n            // hash value\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && (rem > 423 || !lst)) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = i - dif + j & 32767;\n                                    var pti = prev[ti];\n                                    var cd = ti - pti & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += imod - pimod & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one int32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        for (i = Math.max(i, wi); i < s; ++i) {\n            syms[li++] = dat[i];\n            ++lf[dat[i]];\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        if (!lst) {\n            st.r = (pos & 7) | w[(pos / 8) | 0] << 3;\n            // shft(pos) now 1 less if pos & 7 != 0\n            pos -= 7;\n            st.h = head, st.p = prev, st.i = i, st.w = wi;\n        }\n    }\n    else {\n        for (var i = st.w || 0; i < s + lst; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[(pos / 8) | 0] = lst;\n                e = s;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n        st.i = s;\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Adler32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a & 0xFF00) << 8 | (b & 255) << 8 | (b >> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    if (!st) {\n        st = { l: 1 };\n        if (opt.dictionary) {\n            var dict = opt.dictionary.subarray(-32768);\n            var newDat = new u8(dict.length + dat.length);\n            newDat.set(dict);\n            newDat.set(dat, dict.length);\n            dat = newDat;\n            st.w = dict.length;\n        }\n    }\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : (12 + opt.mem), pre, post, st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return fnStr;\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            fnStr = wcln(fns[i], fnStr, td_1);\n        ch[id] = { c: wcln(fns[m], fnStr, td_1), e: td_1 };\n    }\n    var td = mrg({}, ch[id].e);\n    return (0, node_worker_1.default)(ch[id].c + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt]; };\nvar bDflt = function () { return [u8, u16, i32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zls]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get opts\nvar gopt = function (o) { return o && {\n    out: o.size && new u8(o.size),\n    dictionary: o.dictionary\n}; };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) { return strm.push(ev.data[0], ev.data[1]); };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id, ext) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else if (!Array.isArray(dat))\n            ext(dat);\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += (d[10] | d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + (o.filename ? o.filename.length + 1 : 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (o.dictionary && 32);\n    c[1] |= 31 - ((c[0] << 8) | c[1]) % 31;\n    if (o.dictionary) {\n        var h = adler();\n        h.p(o.dictionary);\n        wbytes(c, 2, h.d());\n    }\n};\n// zlib start\nvar zls = function (d, dict) {\n    if ((d[0] & 15) != 8 || (d[0] >> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if ((d[1] >> 5 & 1) == +!dict)\n        err(6, 'invalid zlib data: ' + (d[1] & 32 ? 'need' : 'unexpected') + ' dictionary');\n    return (d[1] >> 3 & 4) + 2;\n};\nfunction StrmOpt(opts, cb) {\n    if (typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n        this.s = { l: 0, i: 32768, w: 32768, z: 32768 };\n        // Buffer length must always be 0 mod 32768 for index calculations to be correct when modifying head and prev\n        // 98304 = 32768 (lookback) + 65536 (common chunk size)\n        this.b = new u8(98304);\n        if (this.o.dictionary) {\n            var dict = this.o.dictionary.subarray(-32768);\n            this.b.set(dict, 32768 - dict.length);\n            this.s.i = 32768 - dict.length;\n        }\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, this.s), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        var endLen = chunk.length + this.s.z;\n        if (endLen > this.b.length) {\n            if (endLen > 2 * this.b.length - 32768) {\n                var newBuf = new u8(endLen & -32768);\n                newBuf.set(this.b.subarray(0, this.s.z));\n                this.b = newBuf;\n            }\n            var split = this.b.length - this.s.z;\n            if (split) {\n                this.b.set(chunk.subarray(0, split), this.s.z);\n                this.s.z = this.b.length;\n                this.p(this.b, false);\n            }\n            this.b.set(this.b.subarray(-32768));\n            this.b.set(chunk.subarray(split), 32768);\n            this.s.z = chunk.length - split + 32768;\n            this.s.i = 32766, this.s.w = 32768;\n        }\n        else {\n            this.b.set(chunk, this.s.z);\n            this.s.z += chunk.length;\n        }\n        this.s.l = final & 1;\n        if (this.s.z > this.s.w + 8191 || final) {\n            this.p(this.b, final || false);\n            this.s.w = this.s.i, this.s.i -= 2;\n        }\n    };\n    return Deflate;\n}());\nexports.Deflate = Deflate;\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6);\n    }\n    return AsyncDeflate;\n}());\nexports.AsyncDeflate = AsyncDeflate;\nfunction deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\nexports.deflate = deflate;\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nfunction deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\nexports.deflateSync = deflateSync;\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    function Inflate(opts, cb) {\n        // no StrmOpt here to avoid adding to workerizer\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);\n        this.s = { i: 0, b: dict ? dict.length : 0 };\n        this.o = new u8(32768);\n        this.p = new u8(0);\n        if (dict)\n            this.o.set(dict);\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        if (!this.p.length)\n            this.p = c;\n        else if (c.length) {\n            var n = new u8(this.p.length + c.length);\n            n.set(this.p), n.set(c, this.p.length), this.p = n;\n        }\n    };\n    Inflate.prototype.c = function (final) {\n        this.s.i = +(this.d = final || false);\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.s, this.o);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexports.Inflate = Inflate;\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    function AsyncInflate(opts, cb) {\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Inflate(ev.data);\n            onmessage = astrm(strm);\n        }, 7);\n    }\n    return AsyncInflate;\n}());\nexports.AsyncInflate = AsyncInflate;\nfunction inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gopt(ev.data[1]))); }, 1, cb);\n}\nexports.inflate = inflate;\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction inflateSync(data, opts) {\n    return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\nexports.inflateSync = inflateSync;\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        this.l += chunk.length;\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, this.s);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    return Gzip;\n}());\nexports.Gzip = Gzip;\nexports.Compress = Gzip;\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8);\n    }\n    return AsyncGzip;\n}());\nexports.AsyncGzip = AsyncGzip;\nexports.AsyncCompress = AsyncGzip;\nfunction gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\nexports.gzip = gzip;\nexports.compress = gzip;\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nfunction gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\nexports.gzipSync = gzipSync;\nexports.compressSync = gzipSync;\n/**\n * Streaming single or multi-member GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    function Gunzip(opts, cb) {\n        this.v = 1;\n        this.r = 0;\n        Inflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        this.r += chunk.length;\n        if (this.v) {\n            var p = this.p.subarray(this.v - 1);\n            var s = p.length > 3 ? gzs(p) : 4;\n            if (s > p.length) {\n                if (!final)\n                    return;\n            }\n            else if (this.v > 1 && this.onmember) {\n                this.onmember(this.r - p.length);\n            }\n            this.p = p.subarray(s), this.v = 0;\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n        // process concatenated GZIP\n        if (this.s.f && !this.s.l) {\n            this.v = shft(this.s.p) + 9;\n            this.s = { i: 0 };\n            this.o = new u8(0);\n            if (this.p.length)\n                this.push(new u8(0), final);\n        }\n    };\n    return Gunzip;\n}());\nexports.Gunzip = Gunzip;\n/**\n * Asynchronous streaming single or multi-member GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    function AsyncGunzip(opts, cb) {\n        var _this_1 = this;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gunzip(ev.data);\n            strm.onmember = function (offset) { return postMessage(offset); };\n            onmessage = astrm(strm);\n        }, 9, function (offset) { return _this_1.onmember && _this_1.onmember(offset); });\n    }\n    return AsyncGunzip;\n}());\nexports.AsyncGunzip = AsyncGunzip;\nfunction gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0], ev.data[1])); }, 3, cb);\n}\nexports.gunzip = gunzip;\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction gunzipSync(data, opts) {\n    var st = gzs(data);\n    if (st + 8 > data.length)\n        err(6, 'invalid gzip data');\n    return inflt(data.subarray(st, -8), { i: 2 }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);\n}\nexports.gunzipSync = gunzipSync;\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f && 4, this.s);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    return Zlib;\n}());\nexports.Zlib = Zlib;\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10);\n    }\n    return AsyncZlib;\n}());\nexports.AsyncZlib = AsyncZlib;\nfunction zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\nexports.zlib = zlib;\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nfunction zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, opts.dictionary ? 6 : 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\nexports.zlibSync = zlibSync;\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    function Unzlib(opts, cb) {\n        Inflate.call(this, opts, cb);\n        this.v = opts && opts.dictionary ? 2 : 1;\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 6 && !final)\n                return;\n            this.p = this.p.subarray(zls(this.p, this.v - 1)), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexports.Unzlib = Unzlib;\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    function AsyncUnzlib(opts, cb) {\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Unzlib(ev.data);\n            onmessage = astrm(strm);\n        }, 11);\n    }\n    return AsyncUnzlib;\n}());\nexports.AsyncUnzlib = AsyncUnzlib;\nfunction unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gopt(ev.data[1]))); }, 5, cb);\n}\nexports.unzlib = unzlib;\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction unzlibSync(data, opts) {\n    return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\nexports.unzlibSync = unzlibSync;\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    function Decompress(opts, cb) {\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n        this.o = StrmOpt.call(this, opts, cb) || {};\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                var _this_2 = this;\n                // enables reuse of this method by AsyncDecompress\n                var cb = function () { _this_2.ondata.apply(_this_2, arguments); };\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(this.o, cb)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(this.o, cb)\n                        : new this.Z(this.o, cb);\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexports.Decompress = Decompress;\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    function AsyncDecompress(opts, cb) {\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n        Decompress.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexports.AsyncDecompress = AsyncDecompress;\nfunction decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\nexports.decompress = decompress;\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nfunction decompressSync(data, opts) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, opts)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, opts)\n            : unzlibSync(data, opts);\n}\nexports.decompressSync = decompressSync;\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return { s: r, r: slc(d, i - 1) };\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (final) {\n            if (r.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = r;\n        this.ondata(s, final);\n    };\n    return DecodeUTF8;\n}());\nexports.DecodeUTF8 = DecodeUTF8;\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexports.EncodeUTF8 = EncodeUTF8;\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nfunction strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\nexports.strToU8 = strToU8;\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nfunction strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td) {\n        return td.decode(dat);\n    }\n    else {\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (r.length)\n            err(8);\n        return s;\n    }\n}\nexports.strFromU8 = strFromU8;\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c < 0 && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >> 1)), b += 4;\n    if (c != -1) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c < 0 ? -c - 2 : c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexports.ZipPassThrough = ZipPassThrough;\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexports.ZipDeflate = ZipDeflate;\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this_1.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexports.AsyncZipDeflate = AsyncZipDeflate;\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this_1 = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u, -1);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this_1.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this_1.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this_1.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this_1.ondata(err, dat, final);\n                    _this_1.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this_1 = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this_1.d & 1))\n                        return;\n                    _this_1.u.splice(-1, 1);\n                    _this_1.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexports.Zip = Zip;\nfunction zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\nexports.zip = zip;\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nfunction zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\nexports.zipSync = zipSync;\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexports.UnzipPassThrough = UnzipPassThrough;\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this_1 = this;\n        this.i = new Inflate(function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexports.UnzipInflate = UnzipInflate;\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this_1 = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this_1.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this_1.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexports.AsyncUnzipInflate = AsyncUnzipInflate;\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this_1 = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this_1.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this_1.k[0] == chks_3 && _this_1.c)\n                                        _this_1.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexports.Unzip = Unzip;\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nfunction unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295 || c == 65535;\n        if (z) {\n            var ze = b4(data, e - 12);\n            z = b4(data, ze) == 0x6064B50;\n            if (z) {\n                c = lft = b4(data, ze + 32);\n                o = b4(data, ze + 48);\n            }\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    if (sc < 320000) {\n                        try {\n                            cbl(null, inflateSync(infl, { out: new u8(su) }));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\nexports.unzip = unzip;\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nfunction unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295 || c == 65535;\n    if (z) {\n        var ze = b4(data, e - 12);\n        z = b4(data, ze) == 0x6064B50;\n        if (z) {\n            c = b4(data, ze + 32);\n            o = b4(data, ze + 48);\n        }\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), { out: new u8(su) });\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\nexports.unzipSync = unzipSync;\n","const ConsumerLib = require('solclient-message-consumer');\nconst PublisherLib = require('solclient-message-publisher');\nconst SMFLib = require('solclient-smf');\nconst SolclientFactoryLib = require('solclient-factory');\nconst TransportLib = require('solclient-transport');\n\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('./capability-types');\nconst { Check } = require('solclient-validate');\nconst { CorrelatedRequest } = require('./correlated-request');\nconst { Destination } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { FsmEvent,\n        State,\n        StateMachine } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\nconst { Message,\n        MessageOutcome,\n        MessageDeliveryModeType } = require('solclient-message');\nconst { P2PUtil } = require('./p2p-util');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionStateName } = require('./session-state-names');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { StatType,\n        StatsByMode } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { SubscriptionUpdateTimeoutMessages } = require('./subscription-update-timeout-messages');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { Convert } = require('solclient-convert');\n\nconst {\n  anythingToBuffer,\n} = Convert;\n\nconst { formatHexString } = Hex;\nconst { stripNullTerminate } = StringUtils;\nconst { STAT_TX_BYMODE_BYTES,\n        STAT_TX_BYMODE_MSGS,\n        STAT_RX_BYMODE_BYTES,\n        STAT_RX_BYMODE_MSGS,\n        STAT_TX_BYMODE_REDELIVERED,\n        STAT_TX_BYMODE_BYTES_REDELIVERED } = StatsByMode;\n\nconst zlib = require('zlib');\nconst fflate = require('fflate');\n\n/**\n * @param {SessionProperties} sessionProperties The shared reference to the properties of the\n *  owning session\n * @param {Session} session The session owning this FSM\n * @extends StateMachine\n * @private\n */\nclass SessionFSM extends StateMachine {\n  constructor(sessionProperties, session, stats, hosts) {\n    super({ name: 'SessionFSM' });\n    const fsm = this;\n    const logFormatter = function logFormatter(...args) {\n      return [\n        `[session-fsm=${fsm.sessionIdHex || '(N/A)'}]`,\n        `[${fsm.getCurrentStateName()}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(logFormatter);\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = logger;\n    this.log = logger.wrap(this.log, this);\n    this._sessionProperties = sessionProperties;\n    this._session = session;\n    this._sessionStatistics = stats;\n    this._hosts = hosts;\n    this._consumers = new ConsumerLib.ConsumerFlows();\n    // This is a function that generates this interface. It takes the flow as a construction\n    // parameter, and for some methods, produces a partial application using that flow.\n\n    this._flowInterfaceFactory = flow => ({\n      getCorrelationTag:               this.getCorrelationTag.bind(this),\n      incStat:                         this.incStat.bind(this),\n      sendData:                        message => this.send(message, flow, false),\n      sendToTransport:                 message => this.sendToTransport(message, flow, false),\n      sendControl:                     message => this.send(message, flow, true),\n      enqueueRequest:                  this.enqueueOutstandingCorrelatedReq.bind(this),\n      createDestinationFromDescriptor: session.createDestinationFromDescriptor.bind(session),\n      createTemporaryDestination:      session.createTemporaryDestination.bind(session),\n      isCapable:                       session.isCapable.bind(session),\n      getCapability:                   session.getCapability.bind(session),\n      getCurrentStateName:             this.getCurrentStateName.bind(this),\n      updateQueueSubscription:         session.updateQueueSubscription.bind(session),\n\n      get sessionIdHex() {\n        return fsm.sessionIdHex;\n      },\n      get canAck() {\n        return session.canAck;\n      },\n    });\n\n    // Keeping track of transport backpressure (but not AD window exhaustion),\n    // so we can relieve it on transport reconnect:\n    this._userBackpressured = false;\n\n    this.clearCurrentError();\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.SessionDisconnected,\n                               context => context.getStateMachine().reset());\n    });\n\n    /**\n     * Handles events in the unhandledEventHandler callback\n     * @param {SessionFSMEvent} sEvent\n     * @private\n     */\n    this.unhandledEventReaction(function onUnhandledEvent(sEvent) {\n      const curState = fsm.getCurrentState();\n      switch (sEvent.getName()) {\n        case SessionEventName.CREATE_SUBSCRIBER:\n          // CREATE_SUBSCRIBER is only handled in CONNECTED state.\n          // In all other states we just add the consumer to our\n          // list of unbound consumers that need to be bound when\n          // the session up occurs.\n          assert(fsm._consumers, 'collection has lifetime of FSM instance');\n          fsm._consumers.add(sEvent.guaranteedFlowObject);\n          return this;\n        case SessionEventName.DISPOSE:\n          LOG_DEBUG('Handling DISPOSE');\n          return curState.terminate(() => fsm.disposeInternal());\n        case SessionEventName.FLOW_UP:\n          LOG_DEBUG(`Ignoring FLOW_UP event from ${sEvent.guaranteedFlowObject}`);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${sEvent.getName()} in state ${fsm.getCurrentStateName()}`);\n          return this;\n      }\n    });\n\n    this.SessionConnecting = new State({\n      name:          SessionStateName.CONNECTING,\n      parentContext: fsm,\n    }, {\n      //\n      //  handleTransportDestroyed is called in response to TRANSPORT_DESTROYED\n      //  event and if transport create throws an exception. In both case there is\n      //  no underlying transport and the FSM must move on to the next host.\n      handleTransportDestroyed() {\n        // clear connectTimer, if it is still running\n        fsm.clearConnectTimer();\n\n        fsm._currentHost = fsm._hosts.getNextHost();\n        if (fsm._currentHost === null) {\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ErrorExit');\n        }\n\n        const { connectWaitTimeInMsecs } = fsm._hosts;\n        LOG_TRACE(`Wait time for this host is ${connectWaitTimeInMsecs}`);\n        if (connectWaitTimeInMsecs > 0 && !fsm._connectWaitTimer) {\n          fsm._connectWaitTimer = setTimeout(() => {\n            fsm._connectWaitTimer = null;\n            fsm.processEvent(new SessionFSMEvent({ name: SessionEventName.CONNECT_WAIT_TIMEOUT }));\n          }, connectWaitTimeInMsecs);\n          return this.transitionTo(fsm.WaitingForInterConnectTimeout);\n        }\n        return this.transitionTo(fsm.WaitingForTransport);\n      },\n    })\n      .entry(() => {\n        fsm.setConnectTimer();\n      })\n      .entryPoint('DisconnectTransport', function onDisconnectTransport() {\n        fsm._hosts.reset({ wasConnected: undefined, disconnected: true });\n        //\n        // Set the error event, as we have reset the\n        // host list with disconnected:true, we always take the\n        // errorExit path to DISCONNECTED state after this entryPoint.\n        //\n        fsm._connectFailEvent = SessionEventCode.DISCONNECTED;\n        fsm._connectSuccessEvent = SessionEventCode.DISCONNECTED;\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .entryPoint('ReconnectTransport', function onReconnectTransport() {\n        //\n        // Set the error event, this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.RECONNECTED_NOTICE;\n        // Should we try to reconnect?\n        const disconnected = fsm._sessionProperties._reconnectRetries === 0;\n        fsm._hosts.reset({ wasConnected: true, disconnected });\n        if (!disconnected) {\n          // workaround to make sure session state is changed to connecting when\n          // application gets the session event\n          // positional parameters for SessionEvent constructor\n          // make sure we get the args and err setup now as by the time\n          // the postEventAction runs currentError will be reset.\n          const err = fsm._currentError || {};\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.setPostEventAction(() => {\n            fsm.setConnectTimer();\n            fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.RECONNECTING_NOTICE, ...args));\n          });\n        }\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .initial(() => {\n        fsm.clearCurrentError();\n        //\n        // Set the error event this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.CONNECT_FAILED_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.UP_NOTICE;\n\n        // Perform host resolution (guaranteed async; replaces a postEventAction)\n        // Do not perform host list operations until this completes (moved to callback)\n        fsm._hosts.resolveHosts((err) => {\n          if (!fsm._hosts) {\n            LOG_TRACE('Ignoring host filter fail because session was disposed');\n            return null;\n          }\n          if (err) {\n            LOG_TRACE('DNS filter failed:', err);\n            fsm.setCurrentError({\n              errorSubcode: ErrorSubcode.UNRESOLVED_HOSTS,\n              eventText:    err,\n            });\n            fsm._hosts.reset({ disconnected: true });\n            return this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n          }\n\n          // Now that the host list has been scanned, we can reset and get next host\n          fsm._hosts.reset({ wasConnected: false });\n          fsm._currentHost = fsm._hosts.getNextHost();\n          return this.processEvent(new SessionFSMEvent(\n            { name: SessionEventName.DNS_RESOLUTION_COMPLETE }\n          ));\n        });\n        return this.transitionTo(fsm.WaitingForDNS);\n      })\n      .reaction(SessionEventName.DNS_RESOLUTION_COMPLETE, function onDNSComplete() {\n        return this.transitionTo(fsm.WaitingForTransport);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* event */) {\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.CONNECT_TIMEOUT, function onConnectTimeout(/* event */) {\n        fsm.setCurrentError({\n          errorSubcode: ErrorSubcode.TIMEOUT,\n          eventText:    'Connect timeout',\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sessionEvent) {\n        LOG_INFO(`SEND_ERROR reached SessionConnecting. ${sessionEvent}`);\n        fsm.setCurrentError(sessionEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        fsm.setCurrentError(errEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        LOG_INFO('TRANSPORT_DESTROYED event');\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(() => {\n        fsm.clearConnectTimer();\n        if (fsm._connectWaitTimer) {\n          clearTimeout(fsm._connectWaitTimer);\n          fsm._connectWaitTimer = null;\n        }\n      })\n      .exitPoint('ConnectedExit', (/* event */) => {\n        // Normal exit to TransportUp.\n        // We need to notify the application they are connected. Use postEventAction to make sure\n        // session state has already changed to TransportUp when application gets the callback.\n        // Use _connectSuccessEvent to send RECONNECTED vs UP depending on entry point.\n        // The text included in the event is currently different for\n        // connect vs reconnect. We should store with as part of _connectSuccessEvent in\n        // the entry point.\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectSuccessEvent,\n                                                  `'${fsm._hosts.currentHostToString()}'`,\n                                                  200, 0, null, null));\n          if (fsm._userBackpressured) {\n            const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                    '', null, 0, null, '');\n            fsm.emitSessionEvent(sessionEvent);\n            fsm._userBackpressured = false;\n          }\n        });\n        // Clear current error as we have successfully connected or\n        // reconnected.\n        fsm.clearCurrentError();\n        return this.transitionTo(fsm.SessionTransportUp);\n      })\n      .exitPoint('ErrorExit', function onExit(/* event */) {\n        // Notify the application they are disconnected. Use postEventAction to make sure session\n        // state has already changed to disconnected when application gets the callback.\n        fsm.setPostEventAction(() => {\n          const err = fsm._currentError || {};\n          // positional parameters for SessionEvent constructor\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectFailEvent, ...args));\n        });\n        return this.transitionTo(fsm.SessionDisconnected);\n      });\n\n    this.WaitingForDNS = new State({\n      name:          SessionStateName.WAITING_FOR_DNS,\n      parentContext: fsm.SessionConnecting,\n    });\n\n    this.DestroyingTransport = new State({\n      name:          SessionStateName.DESTROYING_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('Connecting, disposing transport');\n        fsm.clearConnectTimer(); // clear connectTimer, while destroying the transport\n        fsm.destroyTransportSession('Disconnecting session', 0);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        return fsm.SessionConnecting.handleTransportDestroyed.call(this); // this._transport == null at this point \n      });\n\n    this.WaitingForInterConnectTimeout = new State({\n      name:          SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .reaction(SessionEventName.CONNECT_WAIT_TIMEOUT, function onConnectWaitTimeout(/*event*/) {\n        return this.transitionTo(fsm.WaitingForTransport);\n      });\n\n    this.WaitingForTransport = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(() => {\n        const errorMessage = 'Cannot establish transport session: creation failed';\n        fsm.setConnectTimer();\n        fsm.clearCurrentError();\n        try {\n          fsm.initTransport();\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      });\n\n    this.WaitingForTransportUp = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_UP,\n      parentContext: this.WaitingForTransport,\n    })\n      // This way the code is run only on actual state entry,\n      // not on null transitions (staying in this state)\n      .entry(() => { this._justEntered = true; })\n      .initial(() => {\n        if (!this._justEntered) { return this; }\n        this._justEntered = false;\n        const errorMessage = 'Cannot establish transport session: connection failed';\n        try {\n          const returnCode = fsm._transport.connect();\n          if (returnCode !== TransportLib.TransportReturnCode.OK) {\n            throw new OperationError(\n              errorMessage,\n              ErrorSubcode.CONNECTION_ERROR,\n              TransportLib.TransportReturnCode.describe(returnCode)\n            );\n          }\n          LOG_INFO(`Attempting to connect session '${fsm.sessionId}' to ${fsm._hosts.currentHostToString()}`);\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this;\n      })\n      .reaction(SessionEventName.SEND_ERROR, function doNothing(sEvent) {\n        LOG_INFO(`SEND_ERROR while waiting for transport up, doing nothing. ${sEvent}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_UP, function onTransportUp(sEvent) {\n        fsm.sessionId = sEvent.sessionId || '';\n        const returnCode = fsm.sendClientCtrlLogin();\n        if (returnCode === TransportLib.TransportReturnCode.OK) {\n          return this.transitionTo(fsm.WaitingForLogin);\n        }\n        const err = {\n          eventText:    'Failed to send Client Control Login',\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n          responseCode: 400,\n        };\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.WaitingForLogin = new State({\n      name:          SessionStateName.WAITING_FOR_LOGIN,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        fsm.setClientCtrlTimer();\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL, function onClientCtrl(sEvent) {\n        const clientCtrlMsg = sEvent.smfMsg;\n        const response = clientCtrlMsg.getResponse();\n        const respCode = response.responseCode;\n        const err = {\n          responseCode: respCode,\n        };\n        fsm._responseCode = respCode;\n        if (respCode === 200) {\n          if (!fsm.checkNoLocal(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'No Local is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.NO_LOCAL_NOT_SUPPORTED,\n            });\n          } else if (!fsm.checkCompressedSsl(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'Compressed TLS is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.COMPRESSED_TLS_NOT_SUPPORTED,\n            });\n          } else { // Happy path\n            fsm.updateReadonlySessionProps(clientCtrlMsg);\n            return this.transitionTo(fsm.WaitForTransportChange);\n          }\n        } else {\n          const rawSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode,\n                                                                        response.responseString);\n          const subcode = (rawSubcode === ErrorSubcode.UNKNOWN_ERROR) ?\n            ErrorSubcode.LOGIN_FAILURE : rawSubcode;\n          LOG_INFO(`Login failed. Subcode: ${subcode} respCode: ${respCode} ` +\n            `respString: ${response.responseString}`);\n          Object.assign(err, {\n            eventText:    response.responseString,\n            errorSubcode: subcode,\n          });\n        }\n        LOG_TRACE('ClientCtrl error', err);\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.DOWNGRADE_TIMEOUT, function onDowngradeTimeout(/* event */) {\n        if (!fsm._transport.requestDowngrade || fsm._transport.requestDowngrade('ClientCtrl timeout', ErrorSubcode.TIMEOUT) === false) {\n          fsm.setCurrentError({\n            eventText:    'ClientCtrl timeout',\n            errorSubcode: ErrorSubcode.TIMEOUT,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // Don't recreate the transport, just try to connect it\n        LOG_TRACE('Downgrade accepted, returning to WaitingForTransportUp');\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      })\n      .exit(() => {\n        fsm.clearClientCtrlTimer();\n      });\n\n    // This is an intermediate state after a successful login.\n    // It gives time to the transport factory (more like a dealership at this point)\n    // to enable compression and/or shut down tls.\n    // The factory may return a new transport immediately,\n    // in which case there is no need to stay in this state.\n    // Or it may return null, and pass the new transport to the callback later.\n    // No messages can be sent while waiting for the callback.\n    this.WaitForTransportChange = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_CHANGE,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(function onInitial() {\n        // Operates on the FSM, must be bound to it.\n        const callback = function onTransportChange(newTransport) {\n          this._transport = newTransport;\n          this.processEvent(new SessionFSMEvent(\n                            { name: SessionEventName.TRANSPORT_CHANGE_DONE }\n          ));\n        };\n        const rc = fsm.updateTransportCompression(callback.bind(fsm));\n        if (rc === null) {\n          // Factory needs time, stay in this state.\n          return this;\n        }\n        fsm._transport = rc;\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      })\n      .reaction(SessionEventName.TRANSPORT_CHANGE_DONE, function onTransportChangeDone() {\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      });\n\n    this.ReapplyingSubscriptions = new State({\n      name:          SessionStateName.REAPPLYING_SUBSCRIPTIONS,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('ReapplyingSubscriptions: entry');\n        fsm.copySubscriptionCacheKeys();\n      })\n      .initial(function onInitial() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.transitionTo(fsm.WaitForCanAcceptData);\n      })\n      .reaction(SessionEventName.SUBSCRIBE_TIMEOUT, function onSubscribeTimeout() {\n        const respText = 'Subscription timeout while reapplying';\n        const subcode = ErrorSubcode.TIMEOUT;\n        fsm.setCurrentError({\n          eventText:    respText,\n          errorSubcode: subcode,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(function onExit() {\n        fsm.clearSubscriptionCacheKeys();\n        return this;\n      });\n\n    this.WaitForSubConfirm = new State({\n      name:          SessionStateName.WAITING_FOR_SUBCONFIRM,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_INFO(`Waiting for subscription confirmation, got ${respCode} (${errorSubcode}) ` +\n                    `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyTransport);\n        }\n\n        if (fsm._session.canConnectPublisher &&\n            fsm._defaultPublisher &&\n            fsm._defaultPublisher.isBindWaiting()) {\n          return this.transitionTo(fsm.WaitingForMessagePublisher);\n        }\n        return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n      });\n\n    this.WaitForCanAcceptData = new State({\n      name:          SessionStateName.WAITING_FOR_CAN_ACCEPT_DATA,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        // We are not expecting a SMP response as we have not sent a request-confirm\n        // so this is almost assuredly an error response to a subscription add\n        // check respCode anyway.  if its '200 OK' just ignore it.\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_DEBUG(`Waiting for can accept data, got ${respCode} (subcode ${errorSubcode}) ` +\n            `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // unexpected 200 OK repsonse, log it and continue\n        LOG_INFO(`Unexpected 200 OK response to subscription add for ${subscriptionStr}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onTransportCanAcceptData() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.internalTransition(null);\n      });\n\n    this.WaitingForMessagePublisher = new State({\n      name:          SessionStateName.WAITING_FOR_PUBFLOW,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        // Inform the publisher that the session is up and the flow establishment can begin.\n        fsm._defaultPublisher.connect();\n        fsm.sendPublisherSessionUpEvent(fsm._defaultPublisher);\n      })\n      .reaction(SessionEventName.FLOW_UP, function onEvent() {\n        LOG_TRACE(`Flow up ${this}`);\n        if (!fsm._defaultPublisher.isBindWaiting()) {\n          LOG_TRACE('Publisher up');\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n        }\n        LOG_TRACE('Waiting for more publishers');\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.FLOW_FAILED, function onEvent(sEvent) {\n        fsm.setCurrentError({\n          eventText:    `Guaranteed Message Publisher Failed: ${sEvent.eventText}`,\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.SessionTransportUp = new State({\n      name:          SessionStateName.TRANSPORT_UP,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        fsm.clearConnectTimer(); // clear connectTimer, once we successfully connect\n        return this;\n      })\n      .initial(function onInitial() {\n        if (fsm._session.canConnectConsumer) {\n          // Inform the subscribers that the session is up and the flow establishment can begin.\n          fsm._consumers.flows.forEach(consumer => fsm.sendConsumerSessionUpEvent(consumer));\n          // Reconnecting flows need session state notification too.\n          fsm._consumers.reconnectingFlows.forEach(\n            consumer => fsm.sendConsumerSessionUpEvent(consumer));\n        }\n        return this.transitionTo(fsm.FullyConnected);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionDisconnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        LOG_TRACE('Reconnecting transport after SEND_ERROR (not fully connected)');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sEvent) {\n        fsm.setCurrentError(sEvent);\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED event while transport is up');\n        LOG_TRACE(`TRANSPORT_DESTROYED details: ${sEvent}`);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n\n        fsm.handleSubscriptionUpdateError(respCode, respText, subscriptionStr, undefined, false);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onCanAcceptData(sEvent) {\n        // Notify client for republishing\n        const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                '', null, 0, null, sEvent.toString());\n        fsm.emitSessionEvent(sessionEvent);\n        fsm._userBackpressured = false;\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CREATE_SUBSCRIBER, function onCreateSubscriber(sEvent) {\n        // Inform the consumer that the session is up and the flow establishment can begin.\n        const consumer = fsm._consumers.add(sEvent.guaranteedFlowObject);\n        fsm.sendConsumerSessionUpEvent(consumer);\n        return this;\n      })\n      .exit(function onExit() {\n        fsm.clearKeepAlive();\n        return this;\n      });\n\n    this.FullyConnected = new State({\n      name:          SessionStateName.FULLY_CONNECTED,\n      parentContext: fsm.SessionTransportUp,\n    })\n      .entry(() => {\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm.scheduleKeepAlive();\n      });\n\n    this.SessionDisconnected = new State({\n      name:          SessionStateName.DISCONNECTED,\n      parentContext: fsm,\n    })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.DISCONNECTED));\n        });\n\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CONNECT, function onConnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionConnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(/* sEvent */) {\n        // do nothing\n        return this.internalTransition(null);\n      });\n    this.SessionDisconnecting = new State({\n      name:          SessionStateName.DISCONNECTING,\n      parentContext: fsm,\n    })\n      .initial(() => {\n        LOG_INFO(`Disconnecting session ${fsm}`);\n        return this.transitionTo(fsm.DisconnectingFlows);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        //\n        // As we are in disconnecting state we have initiated the\n        // disconnect and need to preserve the error subcode that\n        // we set before destroying the transport. The transport, having\n        // no error, will usually return a subcode of zero here.\n        //\n        // This only changes the eventCode, not the subcode. Other properties\n        // are preserved.\n        //\n        fsm.setCurrentError({ errEvent });\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(/* sEvent */) {\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED while disconnecting transport');\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n\n    this.DisconnectingFlows = new State({\n      name:          SessionStateName.DISCONNECTING_FLOWS,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      // Get all flows to disconnect. This will need to be called at least once.\n      gatherPendingFlows() {\n        const { MessageConsumerEventName } = ConsumerLib;\n\n        // Don't re-enter synchronously to look for new flows.\n        // Flows disconnect synchronously when they are already disconnected.\n        // If this is the case, they throw; they do not emit an event.\n        // If a consumer flow is up, it will immediately emit a BIND_WAITING event and we\n        // handle that.\n        // Since we know that flow#_disconnectSession neither creates a new flow\n        // nor calls a user callback that could do so, we need not look for new\n        // flows that were created.\n        assert(!this.isGathering);\n        this.isGathering = true;\n\n        const adaptedListenForDestroy = (flow, installfn, downEvents) => {\n          assert(flow, 'Trying to listen to undefined flow');\n          // If we already know about this flow, skip it.\n          if (this.known.has(flow)) return;\n          LOG_TRACE(`Adding pending flow ${flow}`);\n          this.known.add(flow);\n          this.pending.add(flow);\n          const onFlowDown = () => {\n            LOG_TRACE(`Removing flow from pending ${flow}`);\n            downEvents.forEach(event => flow._removeListener(event, onFlowDown));\n            this.pending.delete(flow);\n            if (!this.isGathering) this.checkPendingFlows();\n          };\n          downEvents.forEach(event => installfn.call(flow, event, onFlowDown));\n          try {\n            flow._disconnectSession(); // Session has been disconnected by user\n          } catch (ex) {\n             // Synchronously down\n            LOG_TRACE('Flow disconnect threw');\n            LOG_TRACE(ex);\n            onFlowDown();\n          }\n        };\n\n        // See SOL-13556: sending CloseFlow makes it impossible to recover the flow.\n        // This was the code that sent CloseFlow. I'm leaving it here temporarily\n        // in case we want a clean shutdown that waits for acks.\n        /*\n        const { MessagePublisherEventName } = PublisherLib;\n        if (fsm._defaultPublisher) {\n          adaptedListenForDestroy(fsm._defaultPublisher,\n                                  fsm._defaultPublisher.once,\n                                  [MessagePublisherEventName.DOWN]);\n        }\n        */\n        if (fsm._consumers) {\n          fsm._consumers.flows.forEach((flow) => {\n            adaptedListenForDestroy(flow,\n                                    flow._once,\n                                    [\n                                      MessageConsumerEventName.DOWN,\n                                      MessageConsumerEventName.DOWN_ERROR,\n                                    ]);\n          });\n        }\n\n        this.isGathering = false;\n      },\n      // This function is called whenever a flow comes down, whether sync or async.\n      // The body is wrapped in a basic debounce: if we are re-entering (synchronously),\n      // no new flows will be added.\n      checkPendingFlows() {\n        LOG_TRACE('Waiting for disconnects on', this.pending);\n        if (this.pending.size === 0) {\n          // We are out of pending flows, but look for new flows that were just added\n          this.gatherPendingFlows();\n          // Were any flows just added?\n          if (this.pending.size === 0) {\n            this.proceed();\n          }\n        }\n      },\n      proceed() {\n        // All done!\n        // Clear flow sets so they can be disposed\n        this.known = null;\n        this.pending = null;\n        LOG_INFO('All flows disconnected');\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.FLOWS_DISCONNECTED }));\n      },\n    })\n      .entry(function onEntry() {\n        this.known = new Set();\n        this.pending = new Set();\n        this.checkPendingFlows();\n      })\n      .reaction(SessionEventName.FLOWS_DISCONNECTED, function onFlowsDisconnected() {\n        return this.transitionTo(fsm.FlushingTransport);\n      });\n\n    this.FlushingTransport = new State({\n      name:          SessionStateName.FLUSHING_TRANSPORT,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      flushTransport() {\n        fsm.cleanupSession();\n        fsm.flushTransportSession(() => this.onTransportFlushed());\n        this.sessionId = null;\n      },\n      onTransportFlushed() {\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.TRANSPORT_FLUSHED }));\n      },\n    })\n      .entry(function onEntry() {\n        LOG_INFO('Flushing transport');\n        this.flushTransport();\n      })\n      .reaction(SessionEventName.TRANSPORT_FLUSHED, function onTransportFlushed() {\n        LOG_INFO('Handle Transport Flushed');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n  }\n\n  /**\n   * @param {Destination} destination The topic to add\n   * @private\n   */\n  addToSubscriptionCache(destination) {\n    if (Check.nothing(destination) || !this._subscriptionCache) {\n      return;\n    }\n\n    const { LOG_DEBUG } = this.logger;\n    const key = destination.name;\n    if (this._subscriptionCache[key] === null ||\n        this._subscriptionCache[key] === undefined) {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n      LOG_DEBUG('Increment cache count');\n      this._subscriptionCacheCount++;\n    } else {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n    }\n  }\n\n  /**\n   * @param {String} correlationTag The tag of the request to cancel\n   * @returns {CorrelatedRequest} The cancelled request\n   * @private\n   */\n  cancelOutstandingCorrelatedReq(correlationTag) {\n    if (Check.nothing(correlationTag) || !this._correlatedReqs) {\n      return null;\n    }\n    const req = this._correlatedReqs[correlationTag];\n    if (req === null || req === undefined) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    LOG_DEBUG(`Cancel outstanding ctrl request correlationTag=${correlationTag\n      }`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    return req;\n  }\n\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Clean up session');\n\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n\n    if (this._correlatedReqs) {\n      Object.keys(this._correlatedReqs).forEach(key =>\n        this.cancelOutstandingCorrelatedReq(key));\n    }\n\n    this.clearConnectTimer();\n    this.clearClientCtrlTimer();\n    this.clearKeepAlive();\n    this._consumers.flows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    // Reconnecting flows need session state notification too.\n    this._consumers.reconnectingFlows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.SESSION_DOWN,\n        })\n      );\n    }\n    this._session.cleanupSession();\n  }\n\n  /**\n   * @private\n   */\n  clearClientCtrlTimer() {\n    if (!this._clientCtrlTimer) {\n      return;\n    }\n\n    clearTimeout(this._clientCtrlTimer);\n    this._clientCtrlTimer = null;\n  }\n\n\n  /**\n   * @private\n   */\n  clearConnectTimer() {\n    if (!this._connectTimer) {\n      return;\n    }\n\n    clearTimeout(this._connectTimer);\n    this._connectTimer = undefined;\n  }\n\n  /**\n   * Cancel keep alive task\n   * @private\n   */\n  clearKeepAlive() {\n    const { LOG_INFO } = this.logger;\n\n    if (this._keepAliveTimer) {\n      LOG_INFO('Cancel keepalive timer');\n      clearInterval(this._keepAliveTimer);\n      this._keepAliveTimer = null;\n    }\n\n    this.resetKeepAliveCounter();\n  }\n\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} true if No Local is supported by the router\n   * @private\n   */\n  checkNoLocal(clientCtrlMsg) {\n    let noLocalSupported = true;\n    if (this._sessionProperties.noLocal === true) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps) {\n        noLocalSupported = false;\n      } else {\n        // Guard for undefined OR non-boolean capability\n        noLocalSupported = (typeof caps[CapabilityType.NO_LOCAL] === 'boolean') ? caps[CapabilityType.NO_LOCAL] : false;\n      }\n    }\n    return noLocalSupported;\n  }\n\n  /**\n   * Check against an odd router version which OKs logins with TLS downgrade to compression,\n   * but does not actually support it, and just downgrades to plain text instead.\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} false if router should have rejected login for unsupported compressed TLS.\n   * @private\n   */\n  checkCompressedSsl(clientCtrlMsg) {\n    const { LOG_TRACE } = this.logger;\n    if (this._compressedTLS) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps || typeof caps[CapabilityType.COMPRESSED_SSL] !== 'boolean') {\n        LOG_TRACE('Compressed SSL capability missing.');\n        return false;\n      }\n      return caps[CapabilityType.COMPRESSED_SSL] === true;\n    }\n    return true;\n  }\n\n  /**\n   * Check destination against router capablilities\n   * @param {Destination} destination to verify\n   * @returns {?solace.OperationError} error for caller to throw otherwise null\n   * @private\n   */\n  checkSessionDestinationCapability(destination) {\n    let error = null;\n    if (destination && destination.getType()) {\n      if (destination.getSubscriptionInfo()\n          && (destination.getSubscriptionInfo().isShare\n              || destination.getSubscriptionInfo().isNoExport)\n          && !this._session.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n        error = new OperationError(\n          'Shared subscriptions are not allowed by router for this client',\n          ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED,\n          null);\n      }\n    }\n    return error;\n  }\n\n  /**\n   * Clears the current error exit information for the FSM.\n   */\n  clearCurrentError() {\n    this._currentError = null;\n  }\n\n  /**\n   * @private\n   */\n  clearSubscriptionCacheKeys() {\n    this._subscriptionCacheKeys = null;\n  }\n\n  /**\n   * @private\n   */\n  copySubscriptionCacheKeys() {\n    // reapply subscriptions if applicable\n    this.clearSubscriptionCacheKeys();\n    this._subscriptionCacheKeys = Object.keys(this._subscriptionCache || {});\n\n    // Add the P2P Inbox subscription, so the subscriptionCache always has\n    // at least one subscription.\n    const p2pTopic = P2PUtil.getP2PTopicSubscription(this._sessionProperties.p2pInboxBase);\n    this._subscriptionCacheKeys.push(p2pTopic);\n  }\n\n  createMessagePublisher() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._sessionProperties.publisherProperties.enabled) {\n      LOG_DEBUG('Publisher is disabled');\n      return;\n    }\n\n    const {\n      MessagePublisher,\n      MessagePublisherEventName,\n    } = PublisherLib;\n    const publisher = new MessagePublisher({\n      properties:              this._sessionProperties.publisherProperties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    publisher.on(\n      MessagePublisherEventName.UP,\n      () => this.processEvent(new SessionFSMEvent(\n        { name: SessionEventName.FLOW_UP },\n        { guaranteedFlowObject: publisher })));\n    publisher.on(\n      MessagePublisherEventName.CONNECT_FAILED_ERROR,\n      event => this.processEvent(\n        new SessionFSMEvent(\n          { name: SessionEventName.FLOW_FAILED },\n          {\n            guaranteedFlowObject: publisher,\n            event,\n            eventText:            event.description,\n          })));\n\n    publisher.on(MessagePublisherEventName.REJECTED_MESSAGE, (message, ctrlMessage) => {\n      const header = ctrlMessage.smfHeader;\n      const respCode = header.pm_respcode;\n      const respText = header.pm_respstr;\n      const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respText);\n      const event = SessionEvent.build(SessionEventCode.REJECTED_MESSAGE_ERROR,\n                                       respText,\n                                       respCode,\n                                       errorSubcode,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, (message) => {\n      const event = SessionEvent.build(SessionEventCode.ACKNOWLEDGED_MESSAGE,\n                                       'Message(s) acknowledged',\n                                       undefined,\n                                       0,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.FLOW_NAME_CHANGED, (data) => {\n      const { messages, count } = data;\n      if (count > 0) {\n        const event = SessionEvent.build(SessionEventCode.REPUBLISHING_UNACKED_MESSAGES,\n                                         `Republishing ${count} messages due to ` +\n          'Guaranteed Message Publisher failed to reconnect');\n        event['messages'] = messages; // eslint-disable-line dot-notation\n        event['count'] = count; // eslint-disable-line dot-notation\n        this.emitSessionEvent(event);\n      }\n    });\n    publisher.on(MessagePublisherEventName.CAN_SEND, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                           `${publisher} window is now open and can send`));\n    });\n    publisher.on(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(\n          SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN,\n          'Guaranteed Message Publishing shut down'));\n    });\n    this._defaultPublisher = publisher;\n  }\n\n  sendConsumerSessionUpEvent(consumer) {\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n    const isAD = this._session.canConnectConsumer;\n    const event = new ConsumerFSMEvent({\n      name: isAD\n        ? ConsumerFSMEventNames.SESSION_UP\n        : ConsumerFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = consumer;\n    consumer.processFSMEvent(event);\n  }\n\n  sendPublisherSessionUpEvent(publisher) {\n    const isAD = this._session.canConnectPublisher;\n    const event = new PublisherLib.PublisherFSMEvent({\n      name: isAD\n        ? PublisherLib.PublisherFSMEventNames.SESSION_UP\n        : PublisherLib.PublisherFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = publisher;\n    publisher.processFSMEvent(event);\n  }\n\n  /**\n   * Creates a Guaranteed Messaging Subscriber.\n   *\n   * @param {Object|MessageConsumerProperties} properties Properties for the flow.\n   *  Expected fields: {@link solace.MessageConsumerProperties}\n   * @returns {solace.MessageConsumer} The newly constructed consumer\n   * @private\n   */\n  createMessageConsumer(properties) {\n    const { MessageConsumer } = ConsumerLib;\n    const consumer = new MessageConsumer({\n      properties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    // use the consumer properties instead of properties to ensure the topicEndpointSubscription\n    // has a Topic object\n    const consumerProperties = consumer.getProperties();\n    if (consumerProperties.topicEndpointSubscription) {\n      //check topic supported\n      const error =\n          this.checkSessionDestinationCapability(consumerProperties.topicEndpointSubscription);\n      if (error) {\n        throw error;\n      }\n    }\n\n    const { LOG_WARN } = this.logger;\n\n    // check for whether the broker session supports the capabilities\n    const settlementOutcomes = consumerProperties.requiredSettlementOutcomes;\n    if (settlementOutcomes && settlementOutcomes.length > 0) {\n      // check the capability bit for settlement outcome (NACK) support or throw OperationError()\n      const isNackRequired = settlementOutcomes.some(v => v === MessageOutcome.FAILED || MessageOutcome.REJECTED);\n      if(isNackRequired && !this._session.isCapable(CapabilityType.AD_APP_ACK_FAILED)) {\n        const outcomeNotSupportedError = `Session.capabilitySettlementOutcomeNotSupported: [ ${\n          settlementOutcomes.map(v => `solace.MessageOutcome.${MessageOutcome.nameOf(v)}`).join(', ')\n        } ]`;\n        // log the operation error as a Warning\n        LOG_WARN(outcomeNotSupportedError);\n        // then throw the error here\n        throw new OperationError(outcomeNotSupportedError, ErrorSubcode.INVALID_OPERATION, null);\n      }\n    }\n    const info = { guaranteedFlowObject: consumer };\n    // Will be added to the guaranteed flow collection by dispatching\n    this.processEvent(\n      new SessionFSMEvent({ name: SessionEventName.CREATE_SUBSCRIBER }, info)\n    );\n    return consumer;\n  }\n\n/**\n   * Creates a Queue Browser.\n   *\n   * @param {Object|QueueBrowserProperties} properties Properties for the queue browser.\n   *  Expected fields: {@link solace.QueueBrowserProperties}\n   * @returns {solace.QueueBrowser} The newly constructed queue browser\n   * @private\n   */\n  createQueueBrowser(properties) {\n    const { MessageConsumerAcknowledgeMode, QueueBrowser } = ConsumerLib;\n    const { LOG_DEBUG } = this.logger;\n\n    LOG_DEBUG(`Creating queue browser with properties:  ${properties}`);\n\n    const consumerProperties = {};\n    consumerProperties.queueDescriptor = properties.queueDescriptor;\n    consumerProperties.acknowledgeMode = MessageConsumerAcknowledgeMode.CLIENT;\n    consumerProperties.browser = true;\n\n    // Optional properties\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectTimeoutInMsecs')) {\n      consumerProperties.connectTimeoutInMsecs = properties.connectTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectAttempts')) {\n      consumerProperties.connectAttempts = properties.connectAttempts;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'windowSize')) {\n      consumerProperties.windowSize = properties.windowSize;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeTimeoutInMsecs')) {\n      consumerProperties.transportAcknowledgeTimeoutInMsecs =\n        properties.transportAcknowledgeTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeThresholdPercentage')) {\n      consumerProperties.transportAcknowledgeThresholdPercentage =\n        properties.transportAcknowledgeThresholdPercentage;\n    }\n\n    const consumer = this.createMessageConsumer(consumerProperties);\n    const browser = new QueueBrowser(consumer);\n    return browser;\n  }\n\n  /**\n   * @param {String} msg The status message for the operation\n   * @param {Subcode} subcode The subcode reason for the operation\n   * @private\n   */\n  destroyTransportSession(msg, subcode) {\n    if (Check.nothing(this._transport)) {\n      // Just send the event\n      this.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED })\n      );\n      return;\n    }\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO('Destroy transport session');\n\n    const returnCode = this._transport.destroy(msg, subcode);\n    this._smfClient = null;\n\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_ERROR(`Failed to destroy transport session, return code: ${\n        TransportLib.TransportReturnCode.describe(returnCode)}`);\n    }\n  }\n\n\n  /**\n   * Release all resources associated with the session.\n   * @private\n   */\n  disposeInternal() {\n    if (this._disposed) {\n      return;\n    }\n\n    const operations = {\n      'transport': () => {\n        this.destroyTransportSession('Disposing', 0);\n        this._transport = null;\n        this._smfClient = null;\n      },\n      'session': () => {\n        this.cleanupSession();\n        this._session = null;\n        this._sessionProperties = null;\n        this._correlatedReqs = null;\n        this._flowInterfaceFactory = null;\n      },\n      'statistics': () => {\n        if (this._sessionStatistics) {\n          this._sessionStatistics.resetStats();\n          this._sessionStatistics = null;\n        }\n        this._kaStats = null;\n      },\n      'subscription cache': () => {\n        if (this._subscriptionCache) {\n          Object.keys(this._subscriptionCache).forEach(\n            key => this.removeFromSubscriptionCache(key)\n          );\n          this._subscriptionCache = null;\n        }\n        this.clearSubscriptionCacheKeys();\n        this._subscriptionCacheCount = 0;\n      },\n      'MessagePublishers': () => {\n        if (this._defaultPublisher) {\n          this._defaultPublisher.dispose();\n          this._defaultPublisher = null;\n        }\n      },\n      'MessageConsumers': () => {\n        this._consumers.disposeAll();\n        this._consumers = null;\n      },\n      'host list': () => {\n        this._currentHost = null;\n        this._hosts = null;\n      },\n    };\n\n    Object.keys(operations).forEach((operationKey) => {\n      const { LOG_TRACE, LOG_INFO } = this.logger;\n      const operation = operations[operationKey];\n      try {\n        LOG_TRACE(`Dispose: ${operationKey}`);\n        operation();\n        LOG_TRACE(`Dispose: ${operationKey} succeeded`);\n      } catch (ex) {\n        LOG_INFO(`Dispose: ${operationKey} failed:`, ex, '...continuing');\n      }\n    });\n    this._disposed = true;\n  }\n\n  emitSessionEvent(event) {\n    // Don't log here; callee does it\n    this._session.sendEvent(event);\n  }\n\n  /**\n   * @param {Number} correlationTag The correlation tag\n   * @param {function} reqTimeoutCb The timeout callback\n   * @param {Number} reqTimeout The timeout in milliseconds\n   * @param {Object} correlationKey The correlation key\n   * @param {function} respRecvCallback The success callback\n   * @private\n   */\n  enqueueOutstandingCorrelatedReq(correlationTag,\n                                  reqTimeoutCb,\n                                  reqTimeout,\n                                  correlationKey,\n                                  respRecvCallback) {\n    if (Check.nothing(correlationTag)) {\n      return;\n    }\n\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Enqueue outstanding ctrl request correlationTag=${correlationTag}`);\n    let timer = null;\n    if (reqTimeoutCb) {\n      timer = setTimeout(reqTimeoutCb, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n    }\n\n    const outstandingReq = new CorrelatedRequest(correlationTag,\n      timer,\n      correlationKey,\n      respRecvCallback);\n    this._correlatedReqs[correlationTag] = outstandingReq;\n  }\n\n  /**\n   * @param {String} errorEventText Description of the error\n   * @param {ErrorSubcode} errorSubcode Subcode for the error\n   * @param {String} [eventReason] The reason for the error\n   * @returns {undefined}\n   * @memberof SessionFSM\n   * @private\n   */\n  errorInFsm(errorEventText, errorSubcode, eventReason = null) {\n    const { LOG_INFO } = this.logger;\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.EXCEPTION });\n    LOG_INFO(`Handling error in FSM: ${errorEventText} ${eventReason && eventReason.stack}`);\n    this.setCurrentError({\n      eventText: errorEventText,\n      errorSubcode,\n      eventReason,\n    });\n    return this.processEvent(sEvent);\n  }\n\n  flushTransportSession(callback) {\n    if (this._transport) {\n      this._transport.flush(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * @returns {Number} The next correlation tag\n   * @private\n   */\n  getCorrelationTag() {\n    return this._smfClient.nextCorrelationTag();\n  }\n\n  /**\n   * Get current state name\n   * @returns {String} The name of the current state, or SessionStateName.DISPOSED if the\n   *  FSM is terminated\n   * @private\n   */\n  getCurrentStateName() {\n    const currentState = this.getCurrentState();\n\n    if (!currentState) return null;\n    if (currentState === this.getFinalState()) return SessionStateName.DISPOSED;\n    return this.getCurrentState().getName();\n  }\n\n  /**\n   * Returns the value of a given {@link StatType}.\n   *\n   * @param {StatType} statType The statistic to query.\n   * @returns {?Number} The value for the given stat, if available\n   * @private\n   */\n  getStat(statType) {\n    if (this._sessionStatistics === undefined) {\n      return undefined;\n    }\n    //\n    // TX_TOTAL_DATA_MSGS and TX_TOTAL_DATA_BYTES are summary counters\n    // These stats are calculated as the sum of DIRECT/PERSISTENT/NONPERSISTENT\n    // counters.  This is by design since day one.  As such they do not include\n    // the count of redelivered messages/bytes as TX_PERSISTENT_MSGS and TX_NONPERSISTENT_MSGS\n    // only includes the counts of messages successfully delivered. This is not consistent\n    // with receive stats but it is what it is. This definition is consistent with the other\n    // existing APIs (CCSMP and JCSMP).\n    //\n    if (statType === StatType.TX_TOTAL_DATA_MSGS) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_MSGS);\n    } else if (statType === StatType.TX_TOTAL_DATA_BYTES) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_BYTES);\n    }\n    return this._sessionStatistics.getStat(statType);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} The current status of the transport\n   */\n  getTransportInfo() {\n    if (Check.nothing(this._transport)) {\n      return 'Not connected.';\n    }\n    return this._transport.getInfoStr();\n  }\n\n  /**\n   * Handle an AD CTRL message given the message, its header, and the previously-identified\n   * candidate flow, which is used if the message has no correlation tag.\n   *\n   * @param {AdProtocolMessage} message The message to handle\n   * @param {SMFHeader} header The header of the message\n   * @returns {SessionFSM} This FSM.\n   * @private\n   */\n  handleADCtrlMessage(message, header) {\n    const flowId = message.getFlowId();\n    const respText = header.pm_respstr;\n    const correlationTag = header.pm_corrtag;\n    const { LOG_INFO, LOG_DEBUG, LOG_WARN } = this.logger;\n\n    if (correlationTag) {\n      // Correlation tag is non-null\n      // Session handles correlated request-reply\n      this.updateRxStats(message);\n\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n      // find matching correlationTag to cancel timer\n      const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n      if (Check.nothing(cancelledRequest)) {\n        return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                               ErrorSubcode.INTERNAL_ERROR);\n      }\n\n      if (cancelledRequest.respRecvdCallback) {\n        // call callback referenced by cancelledRequest\n        // login or update property\n        cancelledRequest.respRecvdCallback(message, cancelledRequest);\n        return this;\n      }\n\n      LOG_DEBUG(`Dropping ADCTRL message due to mismatched correlation tag ${correlationTag}`);\n      this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return this;\n    }\n\n    // Unsolicited control message\n    let flow;\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n      case SMFAdProtocolMessageType.CLIENTNACK:\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        if (this._defaultPublisher.flowId === flowId) {\n          flow = this._defaultPublisher;\n        } // else drop.\n        break;\n      default:\n        flow = this._consumers.getFlowById(flowId);\n    }\n\n    if (flow && !flow.disposed) {\n      // Found a matching flow\n      this.updateRxStats(message, flow);\n      flow.handleUncorrelatedControlMessage(message);\n      return this;\n    }\n\n    // No matching flow\n    const response = message.getResponse();\n    const rc = response ? `\"${response.responseCode} ${response.responseString}\" ` : '';\n    LOG_WARN(\n      `Dropping ADCTRL.${SMFLib.SMFAdProtocolMessageType.describe(message.msgType)\n      } ${rc}for unknown flow ${flowId}`\n    );\n    this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n\n    return this;\n  }\n\n  /**\n   * @param {solace.Message} message The AD data message to handle\n   * @param {SMFHeader} header The header for the message\n   * @returns {MessageConsumer} The flow that handled the message, or `null`\n   * @private\n   */\n  handleADTrMessage(message, header) {\n    const { LOG_DEBUG } = this.logger;\n    const flowId = header.pm_ad_flowid;\n    // Get a flow from that ID if possible.\n    const flow = this._consumers.getFlowById(flowId);\n    if (!flow || flow.disposed) {\n      LOG_DEBUG('Dropped incoming AD message for ' +\n                `${flow ? 'disposed' : 'unknown'} flow ID ${flowId}`);\n      this.updateRxStats(message, this._sessionStatistics);\n      this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return null;\n    }\n    this.updateRxStats(message, flow);\n    flow.handleDataMessage(message);\n    return flow;\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out subscription request\n   * @param {String} [timeoutMsg] The reason for the timeout\n   * @private\n   */\n  handleApiSubscriptionTimeout(correlationTag, timeoutMsg) {\n    // remove request from queue\n    if (this._correlatedReqs[correlationTag] === undefined ||\n        this._correlatedReqs[correlationTag] === null) {\n      return;\n    }\n\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO(`${timeoutMsg || 'Subscription timeout'} for correlationTag=${correlationTag}`);\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} message The message to handle\n   * @param {SMFHeader} header The header from the message\n   * @returns {undefined}\n   * @private\n   */\n  handleClientCtrlMessage(message, header) {\n    let correlationTag;\n    const { LOG_INFO } = this.logger;\n    this.updateRxStats(message);\n    if (message.msgType === SMFLib.SMFClientCtrlMessageType.LOGIN) {\n      // Currently, login requests don't use a correlation tag.\n      // Using here a fake internal one to match the request.\n      correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO('Handle SMF response for ClientCTRL Login');\n    } else {\n      correlationTag = header.pm_corrtag;\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n    }\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n    if (Check.nothing(cancelledRequest)) {\n      const respText = header.pm_respstr;\n      return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                             ErrorSubcode.INTERNAL_ERROR);\n    } else if (cancelledRequest.respRecvdCallback) {\n      // call callback referenced by cancelledRequest\n      // login or update property\n      return cancelledRequest.respRecvdCallback(message);\n    }\n\n    LOG_INFO(`Dropping ClientCtrl message due to mismatched correlation tag ${correlationTag}`);\n    return this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to handle\n   * @private\n   */\n  handleClientCtrlResponse(clientCtrlMsg) {\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL });\n    sEvent.smfMsg = clientCtrlMsg;\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @private\n   */\n  handleClientCtrlTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('ClientCtrl timeout for session');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DOWNGRADE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n\n  /**\n   * @private\n   */\n  handleConnectTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Connection timeout. Disconnecting');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * Handle control request timeout\n   * @param {String} correlationTag The correlation tag for the timed out operation\n   * @param {String} timeoutMsg The message associated with the timeout\n   * @private\n   */\n  handleUpdatePropertyTimeout(correlationTag, timeoutMsg) {\n    const { LOG_ERROR } = this.logger;\n    // remove request from queue\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n\n    // notify client\n    const sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                            timeoutMsg,\n                                            null,\n                                            ErrorSubcode.TIMEOUT,\n                                            null,\n                                            null);\n    this.sendEvent(sessionEvent);\n  }\n\n  /**\n   * @param {SMFHeader} header The header from the rejected message\n   * @private\n   */\n  handleRejectedTrMessage(header) {\n    // It is trmsg response. For direct message, it must be a failure response\n    const respCode = header.pm_respcode;\n    // Strip a trailing null character.\n    const topicNameRaw = header.pm_tr_topicname_bytes;\n    const topicName = topicNameRaw ? topicNameRaw.replace(/\\0/g, '') : '';\n    const respText = header.pm_respstr;\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    this.emitSessionEvent(SessionEvent.build(\n      SessionEventCode.REJECTED_MESSAGE_ERROR,\n      respText,\n      respCode,\n      errorSubcode,\n      null, //correlation key\n      `Topic: ${topicName}`)\n    );\n  }\n\n  /**\n   * @param {solace.Message} message The SMF message to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFMessage(message) {\n    try {\n      // Stats for this message might affect both the session and the flow. Need to\n      // determine where the message is handled before handling stats.\n      // Some ADCTRL messages have no flow ID but only a correlation tag.\n      // These are OPENFLOW and we count them as handled by the session.\n\n      const header = message.smfHeader;\n\n      if (header.discardMessage) {\n        // UH==2 on an unknown parameter\n        if (this._sessionStatistics) {\n          this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n        }\n        // do nothing.\n        return null;\n      }\n\n      // Each message type handler must call this.updateRxStats(message, target).\n      // The direct/TRmsg path includes the call here in the switch.\n      switch (header.smf_protocol) {\n        case SMFLib.SMFProtocol.TRMSG:\n          if (header.smf_adf) {\n            return this.handleADTrMessage(message, header);\n          }\n          this.updateRxStats(message, this._sessionStatistics);\n          return header.pm_respcode === 0\n            ? this._session.handleDataMessage(message)\n            : this.handleRejectedTrMessage(header);\n\n        case SMFLib.SMFProtocol.ADCTRL:\n         // console.log('ADCTRL message:');\n         // console.log(message);\n          return this.handleADCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.CLIENTCTRL:\n          return this.handleClientCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.SMP:\n          return this.handleSMPMessage(message, header);\n\n        case SMFLib.SMFProtocol.KEEPALIVE:\n        case SMFLib.SMFProtocol.KEEPALIVEV2:\n          // do nothing\n          return null;\n\n        default:\n          return this.handleUnknownProtocolMessage(message, header);\n      }\n    } catch (e) {\n      const { LOG_ERROR } = this.logger;\n      LOG_ERROR(`Exception in handleSMFMessage, exception: ${e.stack}`);\n      return this.errorInFsm(`Exception in handleSMFMessage: ${e.message}`,\n                             e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                             e);\n    }\n  }\n\n  /**\n   * @param {TransportError} transportError The SMF parsing error passed from the transport\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFParseError(transportError) {\n    // fatal connection error\n\n    // notify client\n    return this.errorInFsm(transportError,\n                           ErrorSubcode.PROTOCOL_ERROR);\n  }\n\n  handleSMPMessage(message, header) {\n    this.updateRxStats(message);\n\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(header.pm_corrtag || '');\n    /*\n     * If we find the correlationTag and it has a callback associated with it\n     * then call that callback.  It is likely calling back straight to the application\n     * due to a call to session.subscribe() or session.unsubscribe() or\n     * session.updateProperty().\n     * Otherwise just send a TRANSPORT_PROTOCOL_SMP event to the FSM.\n     */\n    if (Check.nothing(cancelledRequest) || Check.nothing(cancelledRequest.respRecvdCallback)) {\n      /*\n       * correlation tag not found, probably an error response to a subscription\n       * request that did not request-confirm,  or it could be one of the\n       * FSM generated subscriptions and the callback is the anonymous function\n       * in state WaitingForSubConfirmm\n       */\n      const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_SMP });\n      sEvent.smfMsg = message;\n      return this.processEvent(sEvent);\n    }\n\n    // calling through the callback, this should  be a callback in the _session for\n    // applicated generated subscribe/unsubscribe/updateProperty(clientName)\n    return cancelledRequest.respRecvdCallback(message, cancelledRequest);\n  }\n\n  /**\n   * @param {Number} respCode The router response code\n   * @param {String} respText The router response text\n   * @param {String} subscriptionStr The subscription cache key\n   * @param {CorrelatedRequest} request The associated request\n   * @param {Boolean} confirm Whether the user wanted confirmation for the request\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode, respText, subscriptionStr, request, confirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n\n    //\n    // if it is a not-found or already-present error, it does not affect our subscription\n    // cache, otherwise remove it from the cache.\n    //\n    if (!(errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n      errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)) {\n      // remove from cache\n      this.removeFromSubscriptionCache(subscriptionStr);\n    }\n\n    //\n    // notify the client\n    //\n    this._session.handleSubscriptionUpdateError(respCode,\n                                                respText,\n                                                subscriptionStr,\n                                                request,\n                                                confirm);\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out request\n   * @private\n   */\n  handleSubscriptionTimeout(correlationTag) {\n    // remove request from queue\n    const { LOG_ERROR } = this.logger;\n    try {\n      let result = false;\n      if(this._correlatedReqs) {\n        result = delete this._correlatedReqs[correlationTag];\n      }\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.SUBSCRIBE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @param {TransportSessionEvent} transportEvent The event to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleTransportEvent(transportEvent) {\n    const { LOG_INFO, LOG_WARN } = this.logger;\n    const infoStr = transportEvent.getInfoStr() || '';\n    LOG_INFO(`Receive transport event: ${transportEvent}`);\n\n    let sEvent;\n\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportLib.TransportSessionEventCode.UP_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_UP });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DESTROYED_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = infoStr;\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this._smfClient = null; // calling reset does nothing useful here\n        this._transport = null; // transport has been destroyed\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.CAN_ACCEPT_DATA:\n        //\n        // unblock the publisher too\n        this.GuaranteedFlowControlledRelief();\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_CAN_ACCEPT_DATA });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.SEND_ERROR:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.SEND_ERROR });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = transportEvent.getInfoStr();\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DATA_DECODE_ERROR:\n      case TransportLib.TransportSessionEventCode.PARSE_FAILURE:\n        // fatal connection error\n        return this.errorInFsm(transportEvent.getInfoStr(),\n                               transportEvent.getSubcode());\n      default:\n        LOG_WARN('Received unknown transport session event', transportEvent);\n    }\n\n    return true;\n  }\n\n  /**\n   * @param {BaseMessage|Message} message The message to handle\n   * @param {SMFHeader} [header] The SMF header from the message, if available\n   * @returns {undefined}\n   * @private\n   */\n  handleUnknownProtocolMessage(message, header) {\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    // unknown protocol\n    this.updateRxStats(message);\n    if (header && header.smf_protocol === SMFLib.SMFProtocol.TSESSION) {\n      // change state\n      LOG_ERROR(`Received transport session message instead of SMF message, protocol 0x${\n        formatHexString(header.smf_protocol)}`);\n      LOG_ERROR(`Transport MessageType=${message.messageType}, target sessionId=${\n        formatHexString(message.sessionId)}`);\n      // notify client\n      return this.errorInFsm('Received message with unknown protocol',\n                             ErrorSubcode.PARSE_FAILURE);\n    }\n\n    // Drop message of unknown protocol and increment stats\n    if (this._sessionStatistics) {\n      this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n    }\n    LOG_INFO(`Drop message with unknown protocol 0x${formatHexString(header.smf_protocol)}`);\n    return null;\n  }\n\n\n  /**\n   * Increments a session statistic\n   *\n   * @param {StatType} statType The key to increment\n   * @param {?Number} value The amount to increment the value by\n   * @returns {?Number} The new value for the statistic\n   * @private\n   */\n  incStat(statType, value) {\n    return this._sessionStatistics ? this._sessionStatistics.incStat(statType, value) : undefined;\n  }\n\n  /**\n   * @private\n   */\n  initTransport() {\n    const { LOG_INFO } = this.logger;\n    const host = this._currentHost;\n    LOG_INFO(`Creating transport session ${host}`);\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    this._smfClient = new TransportLib.SMFClient(\n      rxData => this.handleSMFMessage(rxData),\n      rxError => this.handleSMFParseError(rxError),\n      this\n    );\n\n    this._transport = TransportLib.TransportFactory.createTransport(\n      host,\n      transportEvent => this.handleTransportEvent(transportEvent),\n      this._smfClient,\n      this._sessionProperties.clone(),\n      () => this.sessionIdHex\n    );\n    this.injectTransportInterceptor(this._transportInterceptor);\n  }\n\n  /**\n   * Installs a transport interceptor for the current and any future transports.\n   *\n   * The object methods .installed(instance) and .removed(instance) will be called if present, with\n   * the transport instance as a parameter.\n   *\n   * To stop using transport interceptors, supply a null interceptor argument.\n   *\n   * @param {Object} interceptor An object given access to the internals of the transport instance.\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._transportInterceptor = interceptor;\n    if (this._transport) {\n      this._transport.setInterceptor(interceptor);\n    }\n  }\n\n  /**\n   * Call from keep alive scheduled task\n   * @returns {undefined}\n   * @private\n   */\n  keepAliveTimeout() {\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = this.logger;\n    LOG_TRACE('KeepAlive timeout');\n\n    // session is in connected state but hasn't received keep alive response\n    // Less than or equal to because this is the number of *already sent* KAs\n    if (this._keepAliveCounter >= this._sessionProperties.keepAliveIntervalsLimit) {\n      LOG_INFO(`Exceed maximum keep alive intervals limit ${\n                this._sessionProperties.keepAliveIntervalsLimit}`);\n      // stop timers\n      LOG_DEBUG('Stop keep alive timer');\n      if (this._keepAliveTimer) {\n        clearInterval(this._keepAliveTimer);\n      }\n\n      // change session state\n      return this.errorInFsm('Exceed maximum keep alive intervals limit',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    LOG_TRACE('About to send keep alive');\n\n    const clientStats = this._transport.getClientStats();\n    const prestatMsgWritten = clientStats.msgWritten;\n    const prestatBytesWritten = clientStats.bytesWritten;\n\n    const kaMsg = new SMFLib.KeepAliveMessage();\n    const returnCode = this.send(kaMsg, null, true);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      /*\n       * TransportReturnCode.NO_SPACE is not possible.\n       * Send is called with the forceAllowEnqueue parameter.\n       * So whatever error is returned is fatal\n       */\n      return this.errorInFsm('Cannot send keep alive message',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    // We need to avoid incrementing the KA counter if we're in the process of\n    // sending a huge message and we've had no opportunity to write a KA message.\n    // Detection: last KA's snapshot of messages written is unchanged, but number of bytes\n    // written has gone up.\n    if (this._kaStats.lastMsgWritten === prestatMsgWritten &&\n      this._kaStats.lastBytesWritten < prestatBytesWritten) {\n      LOG_DEBUG('Keep alive sent',\n                'Not incrementing keep alive counter due to large message send',\n                `KA count = ${this._keepAliveCounter}`\n      );\n    } else {\n      this._keepAliveCounter++;\n      LOG_TRACE(`Last message written: ${this._kaStats.lastMsgWritten}`);\n      LOG_TRACE(`Last bytes written: ${this._kaStats.lastBytesWritten}`);\n      LOG_TRACE(`Keep alive sent, increment keep alive counter, keep alive count = ${\n        this._keepAliveCounter}`);\n    }\n    this._kaStats.lastBytesWritten = clientStats.bytesWritten;\n    this._kaStats.lastMsgWritten = clientStats.msgWritten;\n\n    return true;\n  }\n\n  /**\n   * Prepares a message for sending and then invoke the transport\n   * send method. For guaranteed messages, pass the transport send\n   * method to the publisher so it can be invoked from there and errors\n   * handled within the publisher FSM.\n   * @param {BaseMessage} message The message to prepare.\n   * @private\n   */\n  prepareAndSendMessage(message) {\n    const {LOG_WARN, LOG_DEBUG} = this.logger\n    if (message instanceof Message) {\n      let returnCode;\n      // Delegate message preparation where appropriate\n      // compress payload if session property is enabled\n      if (this._sessionProperties.payloadCompressionLevel > 0 && ((Check.anything(message._binaryAttachment) && message._binaryAttachment.length > 0) || Check.anything(message._structuredContainer)) ){\n        let compressedAttachment;\n        let origSize = 0;\n        try {\n          if (BUILD_ENV.TARGET_NODE){\n            const options = {\n              level: this._sessionProperties.payloadCompressionLevel,\n              flush: zlib.constants.Z_FINISH\n            };\n            if(Check.anything(message.getSdtContainer())){\n              // const encodedContainer = SDTCodec.encodeSingleElement(message._structuredContainer);\n              const encodedContainer = SDTCodec.encodeSingleElement(message.getSdtContainer());\n              origSize = encodedContainer.length;\n              compressedAttachment = zlib.deflateSync(encodedContainer, options);\n\n            } else {\n              origSize = message._binaryAttachment.length;\n              compressedAttachment = zlib.deflateSync(message._binaryAttachment, options);\n            }\n          } else { //browser\n            const options = {\n              level: this._sessionProperties.payloadCompressionLevel,\n              flush: fflate.Z_FINISH\n            };\n            if(Check.anything(message.getSdtContainer())){\n              const encodedContainer = SDTCodec.encodeSingleElement(message.getSdtContainer());\n\n              const textEncoded = anythingToBuffer(encodedContainer);\n              origSize = textEncoded.length;\n              compressedAttachment = fflate.zlibSync(textEncoded, options);\n            } else {\n              origSize = message._binaryAttachment.length;\n              compressedAttachment = fflate.zlibSync(message._binaryAttachment, options);\n            }\n            compressedAttachment = anythingToBuffer(compressedAttachment);\n          }\n          \n          // This does not consider the size growth from adding \"deflate\" to the ce.\n          // If there alread was a ce: \", deflate\".length = 9 bytes.\n          // If there was no ce but there already was something else in the header map: 15 bytes.\n          // If there was nothing in the header map nor the user property map: 47 bytes.\n          // (use testContext.m_session.getStat(solace.StatType.TX_TOTAL_DATA_BYTES) in a test to \t)\n          if (compressedAttachment.length + 9 < origSize) {\n            message._setCompressedBinaryAttachment(compressedAttachment);\n            Check.nothing(message.getHttpContentEncoding()) ? message._compressedCE = \"deflate\" : message._compressedCE = message.getHttpContentEncoding() + \", deflate\";\n          } else {\n            // It would be nice to cache the encodedContainer instead of re-encoding it right away.\n            LOG_DEBUG(\"Not compressing because it grows the payload! \"+ origSize + \" -> \"+ compressedAttachment.length + \"+ 9\");\n          }\n        } catch(err) {\n          // if error occurred when compressing pass the normal binary attachment\n          LOG_WARN(\"Error occurred while compressing, message attachment was not compressed. Original attachment will be sent. \", err);\n        }\n      }\n    \n      const deliveryMode = message.getDeliveryMode();\n      switch (deliveryMode) {\n\n        case MessageDeliveryModeType.DIRECT:\n          if (!this._transport) return;\n          message._payload_is_memoized = false;\n          message._memoized_csumm = null;\n          message._memoized_payload = null;\n          returnCode = this.sendToTransport(message);\n          break;\n\n        case MessageDeliveryModeType.PERSISTENT:\n        case MessageDeliveryModeType.NON_PERSISTENT:\n          if (!this._defaultPublisher) {\n            const reason = this._session.adLocallyDisabled\n                ? 'locally disabled'\n                : 'remotely unsupported';\n            throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n                                       ErrorSubcode.GM_UNAVAILABLE,\n                                       reason);\n          } else {\n            if (this._gmSendDisallowed) this._gmSendDisallowed(); // throws if present\n            returnCode = this._defaultPublisher.prepareAdMessageAndSend(message);\n          }\n          break;\n\n        default: {\n          const { LOG_ERROR } = this.logger;\n          LOG_ERROR('Unhandled message delivery mode', MessageDeliveryModeType.describe(deliveryMode));\n        }\n      }\n      // Clear internal-use field to free up memory and allow message object reuse by client code.\n      if (Check.anything(message._getCompressedBinaryAttachment())){\n        message._setCompressedBinaryAttachment();\n      }\n      delete message._compressedCE;\n\n      if (returnCode !== TransportLib.TransportReturnCode.OK) {\n        if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n          // Must be DIRECT message because the Publisher handles NO_SPACE returnCode\n          // internally\n          this._userBackpressured = true;\n          throw new OperationError('Cannot send message - no space in transport',\n            ErrorSubcode.INSUFFICIENT_SPACE,\n            TransportLib.TransportReturnCode.describe(returnCode));\n        }\n\n        // This is a fatal session error\n        this.setCurrentError(new OperationError('Cannot send message',\n            ErrorSubcode.INVALID_OPERATION,\n            TransportLib.TransportReturnCode.describe(returnCode)));\n        this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n      }\n    \n    }\n  }\n\n  GuaranteedFlowControlledRelief() {\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.CAN_SEND }));\n    }\n  }\n  /**\n   * Reapply subscriptions.\n   * @returns {Boolean} True if all subscriptions were reapplied. False if WOULD_BLOCK.\n   * @private\n   */\n  reapplySubscriptions() {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    const { SolclientFactory: { createTopicDestination } } = SolclientFactoryLib;\n    LOG_INFO(`Reapplying subscriptions, count=${this._subscriptionCacheKeys.length}`);\n    // add subscriptions and ask for confirm on last one\n\n    if (!this._subscriptionCacheKeys) {\n      // Nothing to do\n      return true;\n    }\n\n    try {\n      while (this._subscriptionCacheKeys.length) {\n        //\n        // The key is the topic string (topic.getName()).\n        // sendSubscribe() requires a destination, so we encode it here.\n        //\n        // on entry to reapplySubscriptions we added the P2P topic to\n        // subscriptionCacheKeys but there is no corresponding entry in\n        // _subscriptionCache so we no longer use the key to index that actual\n        // cache.\n        // If it becomes necesary to pass the Topic object to sendSubscribe in a\n        // a future enhancement (perhaps to remember flags like request-confirm) then\n        // this logic here needs to be revisited.\n        const key = this._subscriptionCacheKeys.shift();\n        const requestConfirmation = this._subscriptionCacheKeys.length === 0;\n        const topicDestination = createTopicDestination(key);\n        const rc = this.sendSubscribe(topicDestination,\n                                      requestConfirmation,\n                                      null,\n                                      this._sessionProperties.readTimeoutInMsecs,\n                                      null);\n        if (rc !== TransportLib.TransportReturnCode.OK) {\n          this.errorInFsm(\n            `Error occurred sending subscription: ${TransportLib.TransportReturnCode.describe(rc)}`,\n            ErrorSubcode.INTERNAL_ERROR\n          );\n        }\n      }\n    } catch (e) {\n      if (e instanceof OperationError && e.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n        LOG_DEBUG('Apply subscriptions blocked due to insufficient space, wait for can accept data event');\n        return false;\n      }\n      this.errorInFsm(`Unexpected expection occurred while reapplying subscriptions: ${e}`,\n                      e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                      e);\n    }\n    return true;    // sent all subscriptions\n  }\n\n\n  /**\n   * @param {Destination} topic The topic to remove from the subscription cache\n   * @returns {?Destination} The value in the subscription cache at that key\n   * @private\n   */\n  removeFromSubscriptionCache(topic) {\n    if (Check.nothing(topic) || !this._subscriptionCache) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const key = (topic instanceof Destination) ? topic.name : topic;\n    LOG_DEBUG(`Remove subscription ${key}`);\n    const sub = this._subscriptionCache[key];\n    if (sub === undefined || sub === null) {\n      return null;\n    }\n\n    try {\n      const result = delete this._subscriptionCache[key];\n      if (!result) {\n        LOG_ERROR(`Cannot remove subscription ${key}`);\n      } else {\n        this._subscriptionCacheCount--;\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot remove subscription ${key}`, e);\n    }\n    return sub;\n  }\n\n\n  /**\n   * Reset the FSM state and release all objects. This method is called once from\n   * SessionFSM.onInitial\n   * @private\n   */\n  reset() {\n    this.resetStats();\n\n    /**\n     * The following fields are disposed when disconnect is called\n     * and recreated when connect is called again.\n     */\n    this.sessionId = null;\n\n    // Need to reschedule keepAliveTimer when some other write operation happens\n    this._keepAliveTimer = null;\n    this.resetKeepAliveCounter();\n    this._correlatedReqs = {};\n\n    this._disposed = false;\n\n    this._smfClient = null;\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    /**\n     * The following fields are destroyed when dispose is called\n     * and cannot be reinitialized.\n     */\n    this._subscriptionCache = null;\n    this._subscriptionCacheKeys = null;\n    this._subscriptionCacheCount = 0;\n    if (this._sessionProperties.reapplySubscriptions) {\n      this._subscriptionCache = {};\n    }\n\n    // When negotiating the initial transport, we can fail and transparently reconnect.\n    // this.resetTransportProtocolHandler();\n    // this._lastKnownGoodTransport = null;\n\n    // event and error information\n    this._eventCode = null;\n    this._responseCode = null;\n    this.eventText = null;\n    this.errorSubcode = null;\n    this.eventReason = null;\n  }\n\n  /**\n   * @private\n   */\n  resetKeepAliveCounter() {\n    // Reset the KA counter. Called by the SMFClient on each SMF chunk received (whether full\n    // message or not).\n    this._keepAliveCounter = 0;\n  }\n\n  /**\n   * @returns {?} The result of calling resetStats().\n   * @private\n   */\n  resetStats() {\n    return this._sessionStatistics ? this._sessionStatistics.resetStats() : undefined;\n  }\n\n\n  /**\n   * Schedule keep alive task\n   * @private\n   */\n  scheduleKeepAlive() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const { keepAliveIntervalInMsecs } = this._sessionProperties;\n    if (keepAliveIntervalInMsecs === 0) {\n      // Keepalives disabled\n      return;\n    }\n\n    if (this._keepAliveTimer) {\n      clearInterval(this._keepAliveTimer);\n    }\n\n    this._keepAliveTimer = setInterval(() => {\n      try {\n        this.keepAliveTimeout();\n      } catch (e) {\n        LOG_ERROR('Error occurred in keepAliveTimeout', e);\n      }\n    }, keepAliveIntervalInMsecs);\n\n    LOG_DEBUG(`Create Keepalive timer with interval: ${keepAliveIntervalInMsecs}ms`);\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.  This method is only used internally by\n   * the FSM.  The session send() API should invoke sendToTransport() directly\n   * so errors are thrown back to the application.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  send(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    try {\n      return this.sendToTransport(message, statTarget, forceAllowEnqueue);\n    } catch (ex) {\n      const { LOG_TRACE } = this.logger;\n      // The send operation threw (or we threw locally), which is always a SessionException.\n      LOG_TRACE(`Error sending message: ${ex.message}: ${ex.stack}`);\n      this.errorInFsm(`Send operation failed: ${ex.message}`,\n                      ex.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    return TransportLib.TransportReturnCode.CONNECTION_ERROR;\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendToTransport(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    //const DebugLib = require('solclient-debug');\n    let returnCode = TransportLib.TransportReturnCode.CONNECTION_ERROR;\n\n    if (!this._transport) {\n      throw new OperationError('Transport has been destroyed', ErrorSubcode.INTERNAL_ERROR);\n    }\n    const content = SMFLib.Codec.Encode.encodeCompoundMessage(message);\n    //console.log(\"content:\");\n    //console.log(DebugLib.Debug.formatDumpBytes( content.toString('latin1'), true, 2));\n    returnCode = this._transport.send(content, forceAllowEnqueue);\n    switch (returnCode) {\n      case TransportLib.TransportReturnCode.OK:\n        this.updateTxStats(message, statTarget);\n        break;\n      case TransportLib.TransportReturnCode.NO_SPACE:\n        if (!forceAllowEnqueue) {\n          // This is allowed.\n          break;\n        }\n      // Else fall through\n      default:\n        throw new OperationError(`Transport returned ${TransportLib.TransportReturnCode.describe(returnCode)}`,\n          ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    return returnCode;\n  }\n\n\n  /**\n   * Initiates the ClientCtrl handshake, called from transportSessionEvent callback\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendClientCtrlLogin() {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n\n    this._compressedTLS =\n      ((this._sessionProperties.compressionLevel > 0) &&\n        (this._currentHost.match(/tcps:/i) !== null));\n    this._plaintextTLS =\n      ((this._currentHost.match(/tcps:/i) !== null) &&\n        (this._sessionProperties.sslConnectionDowngradeTo === SslDowngrade.PLAINTEXT));\n    LOG_TRACE(`sendClientLogin plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n\n    // Don't use the correlation tag. For Login only, the router won't return it.\n    const clientCtrlMsg = SMFLib.ClientCtrlMessage.getLogin(this._sessionProperties,\n                                                            this._compressedTLS,\n                                                            this._plaintextTLS);\n    const returnCode = this.send(clientCtrlMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      this._responseCode = null;\n      this.eventReason = null;\n      // notify client\n      if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n        this.eventText = 'Cannot send client control - no space in transport';\n        this.errorSubcode = ErrorSubcode.INSUFFICIENT_SPACE;\n      } else {\n        LOG_INFO(`Cannot send client ctrl, return code\n          ${TransportLib.TransportReturnCode.describe(returnCode)}`);\n        this.eventText = 'Cannot send client ctrl';\n        this.errorSubcode = ErrorSubcode.INVALID_OPERATION;\n      }\n    } else {\n      // enqueue outstanding request, use a fake correlation tag for Login only\n      const correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO(`Using internally correlationTag=${correlationTag} for tracking ClientCTRL Login`);\n      this.enqueueOutstandingCorrelatedReq(correlationTag,\n                                           null,\n                                           null,\n                                           null,\n                                           rxMsgObj => this.handleClientCtrlResponse(rxMsgObj));\n\n      LOG_DEBUG('Sent client ctrl');\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * Internal method for sending subscriptions from SessionConnecting state (reapply or P2P-inbox)\n   *\n   * @param {Destination} topic The topic to subscribe\n   * @param {Boolean} requestConfirmation If true, expect a reply on success also\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on reply received\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendSubscribe(topic, requestConfirmation, correlationKey, requestTimeout, respRecvdCallback) {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    assert(topic instanceof Destination, 'sendSubscribe requires a Destination, not a string');\n    LOG_DEBUG('Sending subscribe: ', topic, requestConfirmation, correlationKey);\n    const correlationTag = this.getCorrelationTag();\n    const smpMsg = SMFLib.SMPMessage.getSubscriptionMessage(correlationTag,\n                                                            topic,\n                                                            true, // set add == true\n                                                            requestConfirmation);\n    assert(smpMsg.encodedUtf8Subscription, 'Encoded SMP message was invalid');\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Subscribe failed', TransportLib.TransportReturnCode.describe(returnCode));\n      return returnCode;\n    }\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleSubscriptionTimeout(correlationTag),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to change\n   * @param {?} newValue The new value for the property\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendUpdateProperty(mutableSessionProperty,\n                     newValue,\n                     correlationKey,\n                     requestTimeout,\n                     respRecvdCallback) {\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const smpMsg = SMFLib.ClientCtrlMessage.getUpdate(mutableSessionProperty,\n                                                      newValue,\n                                                      correlationTag);\n\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => this.handleUpdatePropertyTimeout(correlationTag),\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      correlationKey,\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  provisionEndpoint(queueDescriptior, queueProperties, correlationKey, callback) {\n    const { LOG_DEBUG } = this.logger;\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const message = SMFLib.AdProtocolMessage.getCreate(queueDescriptior, queueProperties, correlationTag);\n    LOG_DEBUG(\"Sending CREATE request\");\n    const rc = this.send(message);\n    if (rc !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Provision failed', TransportLib.TransportReturnCode.describe(rc));\n      return rc;\n    }\n    LOG_DEBUG(\"Saving correlation tag \" + correlationTag + \" for CREATE request\");\n    this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        null, //timeout handler\n        0, // timeout in ms\n        correlationKey,\n        callback);\n  }\n\n  deprovisionEndpoint(queueDescriptior, correlationKey, callback) {\n    const { LOG_DEBUG } = this.logger;\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const message = SMFLib.AdProtocolMessage.getDelete(queueDescriptior, correlationTag);\n    LOG_DEBUG(\"Sending DELETE request\");\n    const rc = this.send(message);\n    if (rc !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Deprovision failed', TransportLib.TransportReturnCode.describe(rc));\n      return rc;\n    }\n\n    LOG_DEBUG(\"Saving correlation tag \" + correlationTag + \" for DELETE request\");\n    this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        null, //timeout handler\n        0, // timeout in ms\n        correlationKey,\n        callback);\n  }\n\n  /**\n   * @private\n   */\n  setClientCtrlTimer() {\n    this.clearClientCtrlTimer();\n\n    this._clientCtrlTimer = setTimeout(() => this.handleClientCtrlTimeout(),\n                                       this._sessionProperties.transportDowngradeTimeoutInMsecs);\n  }\n\n  /**\n   * @private\n   */\n  setConnectTimer() {\n    this.clearConnectTimer();\n    // The hosts lists provides the wait time for inter-host timeouts.\n    // This timeout is for the entire list.\n    this._connectTimer = setTimeout(() => this.handleConnectTimeout(),\n                                    this._sessionProperties.connectTimeoutInMsecs);\n  }\n\n  /**\n   * Sets the error exit information for the FSM.\n   *\n   * This applies key-value pairs from properties to the current error object,\n   * but does not allow overwriting and does not allow assignment of null or undefined values.\n   *\n   * Only the following fields are relevant, any other fields transferred to currentError by this\n   * method are eventually ignored:\n   *    * eventText\n   *    * responseCode\n   *    * errorSubcode\n   *    * eventReason\n   *\n   * See SessionConnecting exitPoint 'errorExit'. This is the only place the information in\n   * currentError is extracted.\n   *\n   * Could be implemented as `\n   * this._currentError = Object.assign({}, filter(properties), this._currentError)\n   * `\n   * where `filter` is a key-value filter that works as described above.\n   *\n   * @param {Object} source An object with properties to be applied\n   */\n  setCurrentError(source) {\n    const target = this._currentError || {};\n    const { LOG_TRACE } = this.logger;\n    Object.keys(source).forEach((key) => {\n      if (source[key] === null || source[key] === undefined) return false;\n      if (target[key] !== null && target[key] !== undefined) {\n        LOG_TRACE(`Attempt to overwrite property {key=${key}, current value=${target[key]}, incoming value=${source[key]}}`);\n        return false;\n      }\n      target[key] = source[key];\n      return true;\n    });\n    this._currentError = target;\n  }\n\n\n  /**\n   * Send a subscribe or unsubscribe request on behalf of the API.\n   * @param {Destination} subject The target for the update\n   * @param {Boolean} requestConfirmation Request a success message if true\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {SessionRequestType} requestType The request type\n   * @param {Boolean} force Ignore the socket buffer size limit and stuff the request in.\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  subscriptionUpdate(subject,\n                     requestConfirmation,\n                     correlationKey,\n                     requestTimeout,\n                     requestType,\n                     force,\n                     respRecvdCallback) {\n    //check topic supported\n    const error = this.checkSessionDestinationCapability(subject);\n    if (error) {\n      throw error;\n    }\n    const timeoutMsg =\n      SubscriptionUpdateTimeoutMessages[requestType] ||\n      SubscriptionUpdateTimeoutMessages.default;\n    const isSMP = (requestType !== SessionRequestType.REMOVE_DTE_SUBSCRIPTION);\n    const add = (requestType === SessionRequestType.ADD_SUBSCRIPTION ||\n      requestType === SessionRequestType.ADD_P2PINBOX);\n    const correlationTag = this.getCorrelationTag();\n\n    const generateMessage = isSMP\n      ? SMFLib.SMPMessage.getSubscriptionMessage\n      : SMFLib.AdProtocolMessage.getDTEUnsubscribeMessage;\n    const msg = generateMessage(correlationTag,\n                                subject,\n                                add,\n                                requestConfirmation);\n    const returnCode = this.send(msg, undefined, force);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleApiSubscriptionTimeout(correlationTag,\n                                                timeoutMsg),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    if (requestType === SessionRequestType.ADD_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.addToSubscriptionCache(subject);\n    } else if (requestType === SessionRequestType.REMOVE_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.removeFromSubscriptionCache(subject);\n    }\n    return returnCode;\n  }\n\n  /**\n   * Send a queue subscribe or unsubscribe request.\n   * @param {Destination} subject The target for the update\n   * @param {Destination} queue The queue where the subscription is added/removed\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {Boolean} add (if true) or remove (if false).\n   * @param {Boolean} force Ignore the socket buffer size limit and stuff the request in.\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  queueSubscriptionUpdate(subject,\n                          queue,\n                          requestTimeout,\n                          add,\n                          force,\n                          respRecvdCallback) {\n    const timeoutMsg =\n      add ? SubscriptionUpdateTimeoutMessages[SessionRequestType.ADD_SUBSCRIPTION] :\n      SubscriptionUpdateTimeoutMessages[SessionRequestType.REMOVE_SUBSCRIPTION];\n    const correlationTag = this.getCorrelationTag();\n\n    const msg = SMFLib.SMPMessage.getQueueSubscriptionMessage(\n      correlationTag,\n      subject,\n      queue,\n      add);\n    const returnCode = this.send(msg, undefined, force);\n\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => {\n        const origReq = this._correlatedReqs[correlationTag];\n        //TODO maybe just use the cancel method instead (which returns the original request)\n        this.handleApiSubscriptionTimeout(correlationTag,\n                                          timeoutMsg);\n        respRecvdCallback(null, origReq);\n      },\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      null, // no need for session machinery to track flow correlationKey.\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @param {BaseMessage|Message} smfMessage The message received\n   * @param {Stats} [target] The statistics target to update, default is session stats\n   * @private\n   */\n  updateRxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    const msgStatKey = STAT_RX_BYMODE_MSGS[deliveryMode];\n    const bytesStatKey = STAT_RX_BYMODE_BYTES[deliveryMode];\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        if (smfHeader.pm_respcode === 0) {\n          target.incStat(StatType.RX_TOTAL_DATA_MSGS);\n          target.incStat(msgStatKey);\n          target.incStat(StatType.RX_TOTAL_DATA_BYTES, msgLength);\n          target.incStat(bytesStatKey, msgLength);\n          if (smfHeader.smf_di) {\n            target.incStat(StatType.RX_DISCARD_MSG_INDICATION);\n          }\n        }\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.RX_CONTROL_MSGS);\n        target.incStat(StatType.RX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n  * @param {BaseMessage|Message} smfMessage The message sent\n  * @param {Stats} [target] The statistics target to update, default is session stats\n  * @private\n  */\n  updateTxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    if (smfMessage.getReplyTo !== undefined && smfMessage.getReplyTo()) {\n      // update stats\n      target.incStat(StatType.TX_REQUEST_SENT);\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    let msgStatKey = STAT_TX_BYMODE_MSGS[deliveryMode];\n    let bytesStatKey = STAT_TX_BYMODE_BYTES[deliveryMode];\n    //\n    // If this is a Guaranteed Message we may need to further refine the stats by the redelivered\n    // status\n    if (deliveryMode !== MessageDeliveryModeType.DIRECT) {\n      if (smfMessage.isRedelivered()) {\n        msgStatKey = STAT_TX_BYMODE_REDELIVERED[deliveryMode];\n        bytesStatKey = STAT_TX_BYMODE_BYTES_REDELIVERED[deliveryMode];\n      }\n    }\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        target.incStat(msgStatKey);\n        target.incStat(bytesStatKey, msgLength);\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.TX_CONTROL_MSGS);\n        target.incStat(StatType.TX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlRespMsg The client control message with props\n   * @private\n   */\n  updateReadonlySessionProps(clientCtrlRespMsg) {\n    const props = this._sessionProperties; // Modify session properties in place\n\n    props._setVpnNameInUse(clientCtrlRespMsg.getVpnNameInUseValue() || '');\n    const oldVirtualRouterName = props.virtualRouterName;\n    const newVirtualRouterName = clientCtrlRespMsg.getVridInUseValue() || '';\n    props._setVirtualRouterName(newVirtualRouterName);\n    if (oldVirtualRouterName !== '' && oldVirtualRouterName !== newVirtualRouterName) {\n      this.handleVirtualRouterNameChange(oldVirtualRouterName, newVirtualRouterName);\n    }\n\n    // The Solace Message Router login response should always contain a P2P topic for this client\n    // name. If it doesn't that's an error (and we store \"\").\n    props._setP2pInboxBase(clientCtrlRespMsg.getP2PTopicValue() || '');\n    props._setP2pInboxInUse(P2PUtil.getP2PInboxTopic(props.p2pInboxBase));\n    this._session.updateCapabilities(clientCtrlRespMsg.getRouterCapabilities());\n\n    // Create and cache a guard for GM sending.\n    const gmCap = this._session._getCapability(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    this._gmSendDisallowed = (typeof gmCap === 'boolean' && !gmCap)\n      ? () => {\n        throw new OperationError(\n        'Sending guaranteed message is not allowed by router for this client',\n        ErrorSubcode.INVALID_OPERATION,\n        null);\n      }\n      : null;\n  }\n\n  handleVirtualRouterNameChange(oldName, newName) {\n    if (this._consumers) {\n      this._consumers.flows.forEach(consumer => consumer.onVRNChanged());\n      this._consumers.reconnectingFlows.forEach(consumer => consumer.onVRNChanged());\n    }\n    this.emitSessionEvent(\n      SessionEvent.build(SessionEventCode.VIRTUALROUTER_NAME_CHANGED,\n                         `Virtual router name is changed from ${oldName} to ${newName}`,\n                         null,\n                         0,\n                         null,\n                         null));\n  }\n\n  /**\n   * @returns {String} The session's ID in hexadecimal format\n   * @private\n   */\n  get sessionIdHex() {\n    return this.sessionId && formatHexString(this.sessionId) || 'N/A';\n  }\n\n  updateTransportCompression(callback) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('updateTransportCompression called. ' +\n      `plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n    if (this._plaintextTLS) {\n      TransportLib.TransportFactory.severTls(this._transport, this._compressedTLS, callback);\n      return null;\n    }\n    if (this._compressedTLS) {\n      const newTransport = TransportLib.TransportFactory.startCompression(this._transport);\n      return newTransport;\n    }\n    // nothing to do.\n    return this._transport;\n  }\n}\n\nmodule.exports.SessionFSM = SessionFSM;\n","const SMFLib = require('solclient-smf');\nconst { Flow, PrivateFlowEventName } = require('solclient-flow');\nconst { LogFormatter } = require('solclient-log');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./message-publisher-properties');\nconst { PublisherFSM } = require('./publisher-fsm');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\n\nconst { LOG_WARN } = new LogFormatter();\n\nclass MessagePublisher extends Flow {\n  /**\n   * Represents a Guaranteed Message Publisher.  This object must be used to publish\n   * Guaranteed Messages on a session.\n   *\n   * Publishers are created on sessions.  In this implementation the session functions are provided\n   * by the sessionFSM.  Publishers require the session to provide\n   * basic communications functions:\n   *  * send - send a message to the transport\n   *  * getCorrelationTag - return a unique transport correlation tag\n   *  * enqueueOutstandingCorrelatedReq - enqueue a callback for a received message\n   *    on a correlation tag\n   *\n   * @constructor\n   * @param {Object} properties Expected schema is\n   *  {@link solace.MessagePublisherProperties}\n   * @param {Object} sessionInterfaceFactory The session for the Guaranteed Message Publisher\n   * @private\n   */\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessagePublisherProperties(properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessagePublisherEventName.ACKNOWLEDGED_MESSAGE,\n      emits:  MessagePublisherEventName.values, // super adds MessageConsumerEventName\n    });\n    this._fsm = this._makeFSM();\n    const logger = new LogFormatter();\n    logger.formatter = function formatter(...args) {\n      return [\n        '[message-publisher]',\n        ...args,\n      ];\n    };\n    this.log = logger.wrap(this.log, this);\n\n    // Doesn't emit anything unless started; won't start unless bindWaiting\n    this._bindWaiting = true;\n\n    this.on(PrivateFlowEventName.BIND_WAITING, this._onBindWaiting.bind(this));\n    this.on(MessagePublisherEventName.CONNECT_FAILED_ERROR, this._onBindFailed.bind(this));\n    this.on(MessagePublisherEventName.DOWN, this._onDown.bind(this));\n    this.on(MessagePublisherEventName.UP, this._onUp.bind(this));\n  }\n\n  _onBindFailed() {\n    this._bindWaiting = false;\n  }\n\n  _onBindWaiting() {\n    this._bindWaiting = true;\n  }\n\n  _onDown() {\n    this._bindWaiting = false;\n  }\n\n  _onUp() {\n    this._bindWaiting = false;\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  _makeFSM() {\n    return new PublisherFSM({\n      publisher:        this,\n      name:             'PublisherFSM',\n      sessionInterface: this._sessionInterface,\n      properties:       this._properties,\n    });\n  }\n\n  /**\n   * @returns {Long} The flow ID of this flow\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID for this flow\n   * @private\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {String} The publisher name set for this flow\n   */\n  get name() {\n    return this._flowName;\n  }\n  /**\n   * @param {String} value The name to set on this flow\n   * @private\n   */\n  set name(value) {\n    this._flowName = value;\n  }\n\n  /**\n   * @returns {Number} The publisher ID set on this flow\n   */\n  get publisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value The publisher ID to set on this flow\n   */\n  set publisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @readonly\n   * @returns {solace.MessagePublisherProperties} A clone of the publisher's properties.\n   */\n  get properties() {\n    return this._properties.clone();\n  }\n\n  /**\n   *\n   * @override\n   * @memberof MessagePublisher\n   */\n  connect() {\n    super.connect();\n    if (!this._fsm.getCurrentState()) {\n      this._fsm.start();\n    }\n  }\n\n  /**\n   * Application has disconnected the session, so\n   * disconnects the Guaranteed Message Publisher.\n   * @private\n   */\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * @returns {solace.MessagePublisherEventName} The name of the disposed event for this flow\n   * @private\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessagePublisherEventName.DISPOSED;\n  }\n\n  /**\n   * Handles an incoming ACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @private\n   */\n  handleAck(id) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { ack: id }\n    ));\n  }\n\n  /**\n   * Handles an incoming NACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @param {AdCtrlMessage} ctrlMessage The NACK message\n   * @private\n   */\n  handleNack(id, ctrlMessage) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { nack: id, ctrlMessage }\n    ));\n  }\n\n  /**\n   * @override\n   */\n  handleUncorrelatedControlMessage(message) {\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          if (message.smfHeader.pm_respcode > 299) {\n            this.handleNack(id, message);\n          } else {\n            this.handleAck(id);\n          }\n          break;\n        }\n      case SMFAdProtocolMessageType.CLIENTNACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          this.handleNack(id, message);\n          break;\n        }\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        this.processFSMEvent(new PublisherFSMEvent(\n          { name: PublisherFSMEventNames.FLOW_UNBOUND })\n        );\n        break;\n      default:\n        LOG_WARN(`Dropping unhandled AD control message for ${this}`,\n                 SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Prepares an AD message for publishing on this flow.\n   * @param {Message} dataMsg The message to be prepared for publishing.\n   * @returns {TransportReturnCode} transport level returnCode\n   * @private\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    return this._fsm.prepareAdMessageAndSend(dataMsg);\n  }\n\n  isBindWaiting() {\n    return this._bindWaiting;\n  }\n\n  /**\n   * @returns {String} Formatted inspector output\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'name':        this.name,\n      'publisherId': this.publisherId,\n    });\n  }\n\n  /**\n   * @override\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * Disposes the FSM associated with this flow.\n   *\n   * @private\n   */\n  _disposeFSM() {\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.DISPOSE }));\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n}\n\nmodule.exports.MessagePublisher = MessagePublisher;\n","const { Enum } = require('solclient-eskit');\n\n// WebTransport states, used by WebTransport\nconst WebTransportState = {\n  DOWN:        'WebTransportDown',\n  CONNECTING:  'WebTransportConnecting',\n  DOWNGRADING: 'WebTransportDowngrading',\n  DESTROYING:  'WebTransportDestroying',\n  UP:          'WebTransportUp',\n};\n\nmodule.exports.WebTransportState = Enum.new(WebTransportState);\n","function generateUUID() { // Public Domain/MIT\n  let d = new Date().getTime();\n  // if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n  //   d += performance.now(); //use high-precision timer if available\n  // }\n\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n  });\n}\n\nmodule.exports.UUID = {\n  generateUUID,\n};\n","\nconst WINDOWS_VERSION_MAP = {\n  '6.4':  '10.0',\n  '6.3':  '8.1',\n  '6.2':  '8',\n  '6.1':  '7',\n  '6.0':  'Vista',\n  '5.2':  'Server 2003',\n  '5.1':  'XP',\n  '5.01': '2000 SP1',\n  '5.0':  '2000',\n  '4.0':  '4.0',\n};\n\nconst NODE_OS_TYPES = {\n  Darwin:     'OSX',\n  Windows_NT: 'Windows',\n};\n\nconst context = typeof window !== 'undefined' ? window : global;\n\nconst DEFAULT = {\n};\n\nconst NODE_PROCESS = {\n  product:  'solclientjs',\n  platform: 'node',\n  agent:    'node',\n  process:  context.process,\n};\n\n// Worst case fallbacks\nconst BROWSER_PROCESS = {\n  product:  'solclientjs',\n  platform: 'unknown',\n  agent:    'Gecko',\n};\n\nfunction getBrowserAgentInfo() {\n  /* eslint-env browser */\n  const navObj = typeof navigator !== 'undefined' ? navigator : null;\n  if (!navObj) return null;\n  const agentStr = navigator.userAgent;\n\n  // Execute these regex checks against the user agent string in this order.\n  // The earlier browsers have a lot of impersonation substrings in their user\n  // agent list so we positively test for them before considering the browsers\n  // that are frequently impersonated.\n  const browsers = [\n    ['edge', /Edge\\/([0-9._]+)/],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /Opera\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9.]+)(:?\\s|$)$/],\n    ['ie', /Trident\\/7\\.0.*rv:([0-9.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9.]+);.*Trident\\/[4-8].0/], // Edit: IE11 in IE9 emu mode uses Trident 8\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9.]+)/],\n    ['android', /Android\\s([0-9.]+)/],\n    ['ios', /Version\\/([0-9._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9._]+).*Safari/],\n  ];\n\n  const agentInfo = {\n    browser:  { name: 'unknown', version: '0.0.0' },\n    platform: { os: 'unknown', arch: 'unknown', version: 'unknown' },\n  };\n\n  const agentHas = (...strs) => strs.some(str => agentStr.indexOf(str) >= 0);\n  const firstValue = (...vals) => vals.filter(Boolean).shift();\n\n  Object.assign(\n    agentInfo, // start with fallbacks above\n    // 1. Run the callback below for each browser name/regex-rule pair.\n    // 2. Decompose the pair into variables called `key` and `rule`.\n    browsers.map(([key, rule]) => {\n      // 3. Skip if the rule doesn't match the user agent string.\n      if (!rule.test(agentStr)) return false;\n      // 4. Get the matches for the rule.\n      const match = rule.exec(agentStr);\n      // 5. Extract the version from match group 1.\n      const versionStrs = match && match[1].split(/[._]/).slice(0, 3);\n      // 6. Convert the version strings to numbers.\n      const version = versionStrs.map(str => parseInt(str, 10));\n      // 7. Ensure our version tuple is length 3 by appending 0 elements.\n      while (version.length < 3) version.push(0);\n      // 8. Return an agentInfo object in the same form as above, consuming the version array.\n      return { browser: { name: key, version: version.join('.') } };\n    }).filter(Boolean).shift()); // 9. Filter out anything that returned `false` (#3)...\n    // 10. ...and return the first element.\n\n  // Now try to extract platform info\n  const os = firstValue(\n    agentHas('Windows Phone') && 'WindowsPhone',\n    agentHas('Windows') && 'Windows',\n    agentHas('Linux') && 'Linux',\n    agentHas('like Mac OS X') && 'iOS',\n    agentHas('OS X') && 'OSX',\n    agentHas('Android', 'Adr') && 'Android',\n    agentHas('BB10', 'RIM Tablet OS', 'BlackBerry') && 'BlackBerry'\n  );\n  const versionTests = {\n    'Windows': () => firstValue(\n      agentHas('Win16') && '3.1.1',\n      agentHas('Windows CE') && 'CE',\n      agentHas('Windows 95') && '4.00.950',\n      agentHas('Windows 98; Win 9x 4.90') && '4.90',\n      agentHas('Windows 98') && '4.10',\n      (() => {\n        // Look in the first set of parentheses for a version string key.\n        // This will fail when Windows 16 comes out\n        const parenParts = agentStr.match(/\\(.+?\\)/);\n        const versionPart = parenParts[0];\n        if (!versionPart) return false;\n        const versionMatch = str => versionPart.indexOf(str) >= 0;\n        return firstValue(...Object.keys(WINDOWS_VERSION_MAP).map(k =>\n            versionMatch(k) && WINDOWS_VERSION_MAP[k]));\n      })()\n    ),\n    'OSX':        () => agentStr.match(/OS X ((\\d+[._])+\\d+)\\b/)[1],\n    'Linux':      () => '',\n    'iOS':        () => agentStr.match(/OS ((\\d+[._])+\\d+) like Mac OS X/)[1],\n    'Android':    () => agentStr.match(/(?:Android|Adr) ((\\d+[._])+\\d_)/)[1],\n    'BlackBerry': () => agentStr.match(/(?:Version\\/|RIM Tablet OS )((\\d+\\.)+\\d+)/)[1],\n  };\n  const versionTest = versionTests[os];\n  agentInfo.platform.os = os || 'Unknown';\n  agentInfo.platform.version = (versionTest && versionTest() || '0.0.0').replace(/_/g, '.');\n  return agentInfo;\n}\n/* eslint-env shared-browser-node */\n\ntry {\n  if (BUILD_ENV.TARGET_BROWSER && context.navigator) {\n    // These are historical defaults\n    const safeEncode = str => str.replace(/[^a-zA-Z0-9_/.]/g, '-');\n    Object.assign(BROWSER_PROCESS, {\n      platform:    context.navigator.platform,\n      agent:       context.navigator.product,\n      description: safeEncode(context.navigator.userAgent),\n      navigator:   context.navigator,\n    });\n    const browserAgentInfo = getBrowserAgentInfo();\n    if (browserAgentInfo) {\n      BROWSER_PROCESS.agent = safeEncode(`${browserAgentInfo.browser.name\n                                           }-${browserAgentInfo.browser.version}`);\n      BROWSER_PROCESS.platform = `${BROWSER_PROCESS.agent}-${safeEncode(\n        `${browserAgentInfo.platform.os}-${browserAgentInfo.platform.version}`)}`;\n    }\n  }\n  if (BUILD_ENV.TARGET_NODE && context.process) {\n  //if (false) {\n    const os = require('os'); // eslint-disable-line global-require\n    const ostype = os.type();\n    const osname = NODE_OS_TYPES[ostype] || ostype || 'unknown';\n    const nodeVersionStr = `node-${process.version.substr(1)}`;\n    Object.assign(NODE_PROCESS, {\n      platform:    `${nodeVersionStr}-${osname}-${os.release()}-${os.arch()}`,\n      agent:       nodeVersionStr,\n      description: nodeVersionStr,\n    });\n  }\n} catch (ex) {\n  // Fall back to defaults\n}\n\nconst Process = Object.assign({}, DEFAULT,\n                              BUILD_ENV.TARGET_BROWSER ? BROWSER_PROCESS : {},\n                              BUILD_ENV.TARGET_NODE ? NODE_PROCESS : {});\n\nmodule.exports.Process = Process;\n","/**\n * An object managing a traversal of an Array-like object.\n *\n * @memberof solace\n * @property {function} deref Returns the value the iterator is\n *      referencing.\n * @property {function} incr Increments the iterator's reference in the\n *      iterator's data set.\n * @property {function} end Tests whether the iterator is at the end of\n *      the data set.  This MUST return false when calling deref() or\n *      incr().\n * @private\n */\nclass Iterator {\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @constructor\n   */\n  constructor(arr, start = 0, end = arr.length) {\n    /**\n     * The array being iterated.\n     * @type {Array}\n     * @private\n     */\n    this._arr = arr;\n    /**\n     * The current index of the enumeration.\n     * @private\n     * @type {Number}\n     */\n    this._index = start;\n    /**\n     * The exclusive end index, or the length, of the array.\n     * @type {Number}\n     */\n    this._end = end;\n  }\n\n  /**\n   * Returns the element at the iterator's position.\n   * @returns {Object} The array element at the current position.\n   */\n  deref() {\n    return this._arr[this._index];\n  }\n\n  /**\n   * Increments the iterator.\n   * @returns {Number} The new position of the iterator.\n   */\n  incr() {\n    return ++this._index;\n  }\n\n  /**\n   * Reports whether the iterator has completed its iteration.\n   * @returns {Boolean} True if the iterator has reached the end of the iteration.\n   */\n  end() {\n    return this._index >= this._end;\n  }\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   *\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @returns {solace.Iterator} An iterator to the specified set of data.\n   */\n  static makeIterator(arr, start = 0, end = arr.length) {\n    return new Iterator(arr, start, end);\n  }\n\n}\n\n// Expose both the static constructor function and the class.\nmodule.exports.Iterator = Iterator;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionRequestType = {\n  ADD_SUBSCRIPTION:        0,\n  REMOVE_SUBSCRIPTION:     1,\n  ADD_P2PINBOX:            2,\n  REMOVE_P2PINBOX:         3,\n  REMOVE_DTE_SUBSCRIPTION: 100,\n};\n\nmodule.exports.SessionRequestType = Enum.new(SessionRequestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message delivery modes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDeliveryModeType = {\n  /**\n   * This mode provides at-most-once message delivery. Direct messages have\n   * the following characteristics:\n   *   * They are not retained for clients that are not connected to a Solace Message Router.\n   *   * They can be discarded when congestion or system failures are encountered.\n   *   * They can be reordered in the event of network topology changes.\n   *\n   * Direct messages are most appropriate for messaging applications that require very\n   * high-rate or very low-latency message transmission. Direct Messaging enables\n   * applications to efficiently publish messages to a large number of clients\n   * with matching subscriptions.\n   */\n  DIRECT:         0,\n  /**\n   * A Persistent delivery mode is used for Guaranteed Messaging, and this delivery mode\n   * is most appropriate for applications that require persistent storage of the messages\n   * they send or intend to receive. Persistent messages have the following characteristics:\n   *\n   *  * They cannot be discarded or lost (once they are acknowledged by the Solace Message Router).\n   *  * They cannot be reordered in the event of network topology changes.\n   *  * They cannot be delivered more than once to a single client (unless the redelivered\n   *    message flag is applied).\n   *  * When they match subscriptions on durable endpoints, they are retained for a client\n   *    when that client is not connected.\n   *\n   * Persistent messages are most appropriate for applications that require persistent storage\n   * of the messages they send or intend to receive.\n   */\n  PERSISTENT:     1,\n  /**\n   * This mode is functionally the same as Persistent. It exists to facilitate interaction\n   * with JMS applications. In most situations where you want to use Guaranteed Messaging,\n   * it is recommended that you use {@link solace.MessageDeliveryModeType.PERSISTENT}.\n   */\n  NON_PERSISTENT: 2,\n};\n\nmodule.exports.MessageDeliveryModeType = Enum.new(MessageDeliveryModeType);\n","const { ConsumerFlows } = require('./lib/consumer-flows');\nconst { ConsumerFSMEvent } = require('./lib/consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./lib/consumer-fsm-event-names');\nconst { MessageConsumer } = require('./lib/message-consumer');\nconst { MessageConsumerAcknowledgeMode } = require('./lib/message-consumer-acknowledge-modes');\nconst { MessageConsumerEvent } = require('./lib/message-consumer-event');\nconst { MessageConsumerEventName } = require('./lib/message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./lib/message-consumer-properties');\nconst { QueueBrowser } = require('./lib/queue-browser');\nconst { QueueBrowserEventName } = require('./lib/queue-browser-event-names');\nconst { QueueBrowserProperties } = require('./lib/queue-browser-properties');\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\nmodule.exports.ConsumerFSMEventNames = ConsumerFSMEventNames;\nmodule.exports.MessageConsumer = MessageConsumer;\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\nmodule.exports.MessageConsumerAcknowledgeMode = MessageConsumerAcknowledgeMode;\nmodule.exports.MessageConsumerEventName = MessageConsumerEventName;\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\nmodule.exports.QueueBrowser = QueueBrowser;\nmodule.exports.QueueBrowserEventName = QueueBrowserEventName;\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","module.exports = require(\"buffer\");","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. A CacheRequestResult object is\n * provided on the callback (see {@link solace.CacheCBInfo.cacheRequestCallback} when a cache\n * request completes.</b>\n *\n * An object that indicates the termination of a cache request, and provides details how it\n * concluded.\n * @memberof solace\n * @hideconstructor\n */\nclass CacheRequestResult {\n  /*\n   * @param {solace.CacheReturnCode} rc The result of the request.\n   *   * When returnCode === CacheReturnCode.OK, the applicable subcodes are:\n   *     * {@link CacheReturnSubcode.REQUEST_COMPLETE}\n   *     * {@link CacheReturnSubcode.LIVE_DATA_FULFILL}\n   *   * When returnCode === CacheReturnCode.FAIL, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.ERROR_RESPONSE}\n   *     * {@link CacheReturnSubcode.INVALID_SESSION}\n   *     * {@link CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS}\n   *   * When returnCode === CacheReturnCode.INCOMPLETE, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.NO_DATA}\n   *     * {@link CacheReturnSubcode.REQUEST_TIMEOUT}\n   *     * {@link CacheReturnSubcode.SUSPECT_DATA}\n   *\n   * @param {solace.CacheReturnSubcode} subcode The subcode result of the request. Provides\n   *    details on the condition that caused the result.\n   * @param {solace.Destination} topic The topic destination on which the request was made.\n   * @param {String} error The error, if any, that caused the current result.\n   */\n  constructor(rc, subcode, topic, error) {\n    this._returnCode = rc;\n    this._subcode = subcode;\n    this._topic = topic;\n    this._error = error;\n  }\n\n  /**\n   * Gets the return code from the cache request result.\n   *\n   * @returns {solace.CacheReturnCode} The return code associated with the result of\n   * the request.\n   */\n  getReturnCode() {\n    return this._returnCode;\n  }\n\n  /**\n   * Gets the return subcode from the cache request result.\n   *\n   * @returns {solace.CacheReturnSubcode} A subcode that gives more detail than\n   * {@link CacheRequestResult#getReturnCode} about the result of the request.\n   */\n  getReturnSubcode() {\n    return this._subcode;\n  }\n\n  /**\n   * Gets the topic object associated with the cache request.\n   *\n   * @returns {solace.Destination} The topic destination supplied for the cache request.\n   */\n  getTopic() {\n    return this._topic;\n  }\n\n\n  /**\n   * Gets the error, if any, associated with the returned result.\n   *\n   * @returns {String} The error associated with the returned result.\n   */\n  getError() {\n    return this._error;\n  }\n}\n\nmodule.exports.CacheRequestResult = CacheRequestResult;\n","const { Debug } = require('./lib/debug');\n\nmodule.exports.Debug = Debug;\n","const HTTPLib = require('./http');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\n\nconst { HTTPConnection } = HTTPLib;\n\nconst WebTransportCapabilities = {\n  webSocket() { return WebSocketTransportSession.browserSupportsBinaryWebSockets(); },\n  xhrBinary() { return HTTPConnection.browserSupportsXhrBinary(); },\n  streaming() { return HTTPConnection.browserSupportsStreamingResponse(); },\n};\n\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst UtilLib = require('solclient-util');\nconst { EncodeHeader } = require('./encode-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst { encodeHeader } = EncodeHeader;\n\nconst EncodeMap = {\n  /**\n   * Encodes an SDT map.\n   * @param  {Object} sdtmap The map to parse\n   * @returns {String}        The map in binary string format\n   */\n  encodeMap(sdtmap) {\n    const buf = [];\n    if (!(sdtmap instanceof SDTMapContainer)) {\n      return null; // skip!\n    }\n    const keys = sdtmap.getKeys();\n    let sdtfield = null;\n    let strKeyField = null;\n    let strKeyName = null;\n    let i;\n    for (i = 0; i < keys.length; i++) {\n      sdtfield = sdtmap.getField(keys[i]);\n      if (sdtfield) {\n        // === KEY ===\n        strKeyName = UtilLib.StringUtils.nullTerminate(keys[i]);\n        strKeyField = encodeHeader(SDTDataTypes.String, strKeyName.length);\n        strKeyField += strKeyName;\n        buf.push(strKeyField);\n\n        // === VALUE ===\n        EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n      }\n    } // end iter over keys\n    return buf.join('');\n  },\n};\n\nmodule.exports.EncodeMap = EncodeMap;\n","const { StringBuffer } = require('./string-buffer');\n\nconst PAD_LEFT = 0;\nconst PAD_RIGHT = 1;\n\nconst LUT_PRINTABLE = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nfunction padLeftRight(str, minLen, padSide, padChar = ' ') {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  if (str.length >= minLen) {\n    return str;\n  }\n\n  const buf = new StringBuffer();\n  for (let i = 0; i < (minLen - str.length); i++) {\n    buf.append(padChar.charAt(0));\n  }\n  switch (padSide) {\n    case PAD_LEFT:\n      return `${buf}${str}`;\n    case PAD_RIGHT:\n      return `${str}${buf}`;\n    default:\n      return str;\n  }\n}\n\nfunction leastSpaces(length, line) {\n  if (!line.length) return length;\n  const spaces = line.match(/^\\s*/)[0].length;\n  return spaces < length ? spaces : length;\n}\n\nfunction capitalizeWord(str) {\n  return `${str.charAt(0).toUpperCase()}${str.substr(1)}`;\n}\n\nfunction isEmptyFun(str) {\n  return (\n    str === undefined ||\n    str === null ||\n    str.length === 0\n  );\n}\n\n/**\n * @private\n * @type {StringUtils}\n */\nconst StringUtils = {};\n\nStringUtils.capitalize = function capitalize(str) {\n  if (!(str && str.length)) {\n    return str;\n  }\n\n  return str.split(' ').map(capitalizeWord).join(' ');\n};\n\nStringUtils.isEmpty = isEmptyFun;\n\nStringUtils.notEmpty = function notEmpty(str) {\n  return !(isEmptyFun(str));\n};\n\nStringUtils.toSafeChars = function toSafeChars(str) {\n  return str.replace(/[^a-zA-Z0-9_/.]/g, '');\n};\n\nStringUtils.padLeft = function padLeft(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_LEFT, padChar);\n};\n\nStringUtils.padRight = function padRight(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_RIGHT, padChar);\n};\n\nStringUtils.nullTerminate = function nullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('non str in nullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str;\n  }\n  return str + String.fromCharCode(0x00);\n};\n\nStringUtils.stripNullTerminate = function stripNullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('null str in stripNullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str.substr(0, str.length - 1);\n  }\n  return str;\n};\n\nStringUtils.hexdump = function hexdump(s) {\n  const output = new StringBuffer();\n  const printable = new StringBuffer();\n  const spacer = pos => (pos === 8 || pos === 16 ? '  ' : ' ');\n  let linelen = 0;\n  for (let i = 0, sLength = s.length; i < sLength; i++) {\n    const ccode = s.charCodeAt(i);\n    output.append(padLeftRight(ccode.toString(16), 2, PAD_LEFT));\n    printable.append(LUT_PRINTABLE[ccode] || '.');\n    output.append(spacer(++linelen));\n\n    if (i === s.length - 1) {\n      // input finished: complete the line\n      while (linelen < 16) {\n        output.append(`  ${spacer(++linelen)}`);\n      }\n    }\n\n    if (linelen === 16) {\n      output.append(printable.join(''));\n      output.append('\\n');\n      linelen = 0;\n      printable.clear();\n    }\n  }\n  return output.toString();\n};\n\n/**\n * Use heredoc`....` to create multi-line heredoc strings. Leading blank lines are removed, as are\n * leading spaces, up to the number of spaces on the least-indented line.\n * @param {String} literals The document template\n * @param {...String} substitutions The substitutions to make in the document\n * @returns {String} The interpolated representation of the document\n */\nStringUtils.heredoc = function heredoc(literals, ...substitutions) {\n  const subst = [...substitutions, ''];\n  const lines = literals.map(k => k + subst.shift())\n    .join('')\n    .split(/\\r?\\n/);\n  const spaces = lines.length === 1 ? 0 : lines.reduce(leastSpaces, Infinity);\n  while (lines[0] === '') {\n    lines.shift();\n  }\n  return lines.map(line => line.substring(spaces)).join('\\n');\n};\n\n\nmodule.exports.StringUtils = StringUtils;\n","const { Process } = require('solclient-util');\n\nconst C_2_32 = Math.pow(2, 32);\n\nfunction leftPad(str, len) {\n  if (len > str.length) {\n    return '0'.repeat(len - str.length) + str;\n  }\n  return str;\n}\n\nfunction generateRandomId() {\n  const rand = (Math.random() * C_2_32).toFixed(0);\n  return leftPad(rand.toString(), 10);\n}\n\n/**\n * @private\n */\nconst GlobalContext = {\n\n  sessionCounter: 0,\n  idCounter:      0,\n\n  RandId: generateRandomId(),\n\n  NextSessionCounter() {\n    const count = ++this.sessionCounter;\n    return leftPad(count.toString(), 4);\n  },\n\n  NextId() {\n    return ++this.idCounter;\n  },\n\n  GenerateClientName() {\n    const { product, platform } = Process;\n    const result = `${product}/${platform}/${this.RandId}/${this.NextSessionCounter()}`;\n    return result;\n  },\n\n  GenerateUserIdentification() {\n    const { product, platform } = Process;\n    return `${product}/${platform}/${this.RandId}`;\n  },\n\n  GenerateClientDescription() {\n    return `solclientjs/${Process.description}`.substring(0, 254);\n  },\n};\n\nmodule.exports.GlobalContext = GlobalContext;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { TransportReturnCode } = require('./transport-return-codes');\n\n// Stubs don't use this\n/* eslint-disable class-methods-use-this */\n// Stubs declare all params\n/* eslint-disable no-unused-vars */\n\n/**\n *\n * Base class for various transports\n * @private\n */\nclass TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The callback to notify on events\n   * @param {SMFClient} client The SMF client to notify on data\n   * @param {Object} transportProps Additional properties to assign to the transport\n   * @param {?Object} [interceptor] The transport interceptor to install\n   */\n  constructor(url, eventCB, client, transportProps, interceptor = null) {\n    this._url = url;\n    this._ssl = TransportBase.useSsl(url);\n    this._client = client;\n    this._eventCB = eventCB;\n    this._props = transportProps;\n    this.setInterceptor(interceptor);\n  }\n\n  /**\n   * Establish underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() { return TransportReturnCode.OK; }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @param {Boolean} immediate Destroy gracefully if false.\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(immediate, msg, subcode) { return TransportReturnCode.OK; }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code, to be overridden in subclass\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) { return TransportReturnCode.OK; }\n\n  flush(callback) {\n    callback();\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send encoded SMF message\n   * Returns transport return code, to be overridden in subclass\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) { return TransportReturnCode.OK; }\n\n  /**\n   * @returns {TransportProtocol} Return transport protocol in use\n   */\n  getTransportProtocol() {\n    return this._props.transportProtocol;\n  }\n\n  /**\n   * @returns {?String} Return transport session information such as sessionId\n   */\n  getInfoStr() { return null; }\n\n  /**\n   * @returns {TransportClientStats} transport statistics\n   */\n  getClientStats() { return null; }\n\n  /**\n   * Check whether or not the transport can be downgraded to the next protocol.\n   * It is possible to downgrade the transport, the existing transport is destroyed and\n   * the new transport connection initiated.\n   * @param {String} msg The message associated with this operation\n   * @param {ErrorSubcode} subcode The subcode associated with this operation\n   * @returns {Boolean} Return true if downgrade is allowed and has been initiated; false otherwise\n   */\n  beginDowngrade(msg, subcode) { return false; }\n\n  /**\n   * Sets the interceptor for this transport. This object has the chance\n   * to intervene before bytes are sent or received.\n   * @param {Object} [interceptor] If set, the interceptor is inserted into the\n   *\n   * @private\n   */\n  setInterceptor(interceptor) {\n    if (this._interceptor) {\n      // Reset original callbacks\n      if (this._interceptor.removed) this._interceptor.removed(this);\n    }\n    this._interceptor = interceptor;\n    if (interceptor) {\n      if (interceptor.installed) interceptor.installed(this);\n    }\n  }\n\n  toString() {\n    return `${this.getTransportProtocol()}${this._ssl ? ' (SSL)' : ''}`;\n  }\n\n  /**\n   * @param {String} url The URL to check\n   * @returns {Boolean} `true` if the URL requires SSL; `false` otherwise\n   * @static\n   */\n  static useSsl(url) {\n    const urlParts = (url || '').split('://');\n    if (urlParts.length === 0 || TransportBase.validSchemes.indexOf(urlParts[0]) < 0) {\n      throw new OperationError(`Invalid url \"${url}\": Only [${\n                               TransportBase.validSchemes.join(', ')}] URL schemes are supported`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    const useSSL = (urlParts[0] === 'https' || urlParts[0] === 'wss' || urlParts[0] === 'tcps');\n    return useSSL;\n  }\n\n}\n\n/**\n * @type {Array.<String>}\n */\nTransportBase.validSchemes = ['http', 'https', 'ws', 'wss', 'tcp', 'tcps'];\n\nmodule.exports.TransportBase = TransportBase;\n\n","const MessageLib = require('solclient-message');\nconst { BidiMap } = require('solclient-eskit');\n\nclass PriorityUserCosMap extends BidiMap {\n  constructor() {\n    super([MessageLib.MessageUserCosType.COS1, 0],\n          [MessageLib.MessageUserCosType.COS2, 1],\n          [MessageLib.MessageUserCosType.COS3, 2]);\n  }\n}\n\nmodule.exports.PriorityUserCosMap = PriorityUserCosMap;\n","class BaseSMFClient {\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    this.reset();\n    this._rxSmfCB = rxSmfCB; // callback for parsed msg\n    this._rxMessageErrorCB = rxMessageErrorCB; // invalid UH, etc.\n    this._session = session;\n  }\n\n  reset() {\n    this._correlationCounter = 0;\n  }\n\n  nextCorrelationTag() {\n    // Login uses the max value as a sentinel, so wrap around early\n    if (++this._correlationCounter >= BaseSMFClient.SMF_MAX_CORRELATION) {\n      this._correlationCounter = 1;\n    }\n    // added check to prevent it returning as undefined/null\n    return this._correlationCounter ? this._correlationCounter : 0;\n  }\n}\n\nBaseSMFClient.SMF_MAX_CORRELATION = 0xFFFFFF;\n\n\nmodule.exports.BaseSMFClient = BaseSMFClient;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnCode types.  The method {@link solace.CacheRequestResult#getReturnCode}\n * returns on of these basic results of a cache request.  More details are available in the\n * associated {@link solace.CacheReturnSubcode}, retrieved by\n * {@link solace.CacheRequestResult#getReturnSubcode}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnCode = {\n  /**\n   * @type {Number}\n   * @description The cache request succeeded.  See the subcode for more information.\n   */\n  OK:         1,\n  /**\n   * @type {Number}\n   * @description The cache request was not processed.  See the subcode for more information.\n   */\n  FAIL:       2,\n  /**\n   * @type {Number}\n   * @description The cache request was processed but could not be completed.  See the subcode for\n   * more information.\n   */\n  INCOMPLETE: 3,\n};\n\nmodule.exports.CacheReturnCode = Enum.new(CacheReturnCode);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst MessagePublisherPropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'MessagePublisherProperties', instance);\n    v('enabled', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('acknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 60000]);\n    v('acknowledgeMode', [valIsMember, MessagePublisherAcknowledgeMode, 'MessagePublisherAcknowledgeMode']);\n    v('connectRetryCount', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n  },\n};\n\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\n","const DestinationLib = require('solclient-destination');\nconst SDTMapContainerLib = require('./sdt-map-container');\nconst SDTStreamContainerLib = require('./sdt-stream-container');\nconst ValidateLib = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTFieldType } = require('./sdt-field-types');\n\nconst baseTypes = (() => {\n  const result = [];\n  result[SDTFieldType.BOOL] = 'boolean';\n  result[SDTFieldType.UINT8] = 'number';\n  result[SDTFieldType.INT8] = 'number';\n  result[SDTFieldType.UINT16] = 'number';\n  result[SDTFieldType.INT16] = 'number';\n  result[SDTFieldType.UINT32] = 'number';\n  result[SDTFieldType.INT32] = 'number';\n  result[SDTFieldType.UINT64] = 'number';\n  result[SDTFieldType.INT64] = 'number';\n  result[SDTFieldType.WCHAR] = 'string';\n  result[SDTFieldType.STRING] = 'string';\n  result[SDTFieldType.BYTEARRAY] = 'object'; // Uint8Array\n  result[SDTFieldType.FLOATTYPE] = 'number';\n  result[SDTFieldType.DOUBLETYPE] = 'number';\n  return result;\n})();\n\nfunction failInvalidParameter(valueType) {\n  return new OperationError(\n            `Invalid SDT type:value combination, expected value type ${valueType}`,\n            ErrorSubcode.PARAMETER_INVALID_TYPE);\n}\n\nfunction validateSdtField(type, value) {\n  if (baseTypes[type]) {\n    if ((baseTypes[type] === 'boolean' && typeof value !== 'boolean') ||\n            (baseTypes[type] === 'number' && typeof value !== 'number') ||\n            (baseTypes[type] === 'string' && typeof value !== 'string')) {\n      return failInvalidParameter(baseTypes[type]);\n    }\n  }\n  if (type === SDTFieldType.MAP &&\n      !ValidateLib.Check.instanceOf(value, SDTMapContainerLib.SDTMapContainer)) {\n    return failInvalidParameter('SDTMapContainer');\n  }\n  if (type === SDTFieldType.STREAM &&\n      !ValidateLib.Check.instanceOf(value, SDTStreamContainerLib.SDTStreamContainer)) {\n    return failInvalidParameter('SDTStreamContainer');\n  }\n  if (type === SDTFieldType.DESTINATION &&\n      !ValidateLib.Check.instanceOf(value, DestinationLib.Destination)) {\n    return failInvalidParameter('Destination');\n  }\n  return null;\n}\n\nmodule.exports.validateSdtField = validateSdtField;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of supported message settlement outcomes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageOutcome = {\n  /**\n   * Represents a successful message processing acknowledgement outcome.\n   *\n   * (see {@link solace.Message#acknowledge}) for more details\n   */\n  ACCEPTED:         0,\n  /**\n   * Represents a negative acknowledgement outcome, used to signal that the application failed to process\n   * the message.\n   * \n   * Delivery count for the message is incremented. Redelivery will be attempted. Message may\n   * be moved to DMQ once max-redelivered is reached. Message may be delayed if the endpoint has\n   * delayed redelivery configured.\n   */\n  FAILED:           1,\n  // /**\n  //  * Represents a negative acknowledgement outcome, used to signal that the application failed to process\n  //  * the message.\n  //  * \n  //  * Delivery count for the message is NOT incremented. Redelivery will be attempted. Message may\n  //  * be moved to DMQ once max-redelivered is reached. \n  //  * A released message will always be eligible for redelivery, even if redeliveries are disabled. \n  //  * Message is immediately eligible for redelivery, even if endpoint is configured for delayed redelivery.\n  //  */\n  // RELEASED:           2,\n  /**\n   * Represents a negative acknowledgement outcome, used to signal that the application has rejected the\n   * message such as when application determines the message is invalid.\n   * \n   * Message will NOT be redelivered. Message will be moved to DMQ. If DMQ is not configured,\n   * message is deleted.\n   */\n  REJECTED:         3,\n};\n\nmodule.exports.MessageOutcome = Enum.new(MessageOutcome);\n","'use strict';\n\nconst { kForOnEventAttribute, kListener } = require('./constants');\n\nconst kCode = Symbol('kCode');\nconst kData = Symbol('kData');\nconst kError = Symbol('kError');\nconst kMessage = Symbol('kMessage');\nconst kReason = Symbol('kReason');\nconst kTarget = Symbol('kTarget');\nconst kType = Symbol('kType');\nconst kWasClean = Symbol('kWasClean');\n\n/**\n * Class representing an event.\n */\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @throws {TypeError} If the `type` argument is not specified\n   */\n  constructor(type) {\n    this[kTarget] = null;\n    this[kType] = type;\n  }\n\n  /**\n   * @type {*}\n   */\n  get target() {\n    return this[kTarget];\n  }\n\n  /**\n   * @type {String}\n   */\n  get type() {\n    return this[kType];\n  }\n}\n\nObject.defineProperty(Event.prototype, 'target', { enumerable: true });\nObject.defineProperty(Event.prototype, 'type', { enumerable: true });\n\n/**\n * Class representing a close event.\n *\n * @extends Event\n */\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {Number} [options.code=0] The status code explaining why the\n   *     connection was closed\n   * @param {String} [options.reason=''] A human-readable string explaining why\n   *     the connection was closed\n   * @param {Boolean} [options.wasClean=false] Indicates whether or not the\n   *     connection was cleanly closed\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kCode] = options.code === undefined ? 0 : options.code;\n    this[kReason] = options.reason === undefined ? '' : options.reason;\n    this[kWasClean] = options.wasClean === undefined ? false : options.wasClean;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get code() {\n    return this[kCode];\n  }\n\n  /**\n   * @type {String}\n   */\n  get reason() {\n    return this[kReason];\n  }\n\n  /**\n   * @type {Boolean}\n   */\n  get wasClean() {\n    return this[kWasClean];\n  }\n}\n\nObject.defineProperty(CloseEvent.prototype, 'code', { enumerable: true });\nObject.defineProperty(CloseEvent.prototype, 'reason', { enumerable: true });\nObject.defineProperty(CloseEvent.prototype, 'wasClean', { enumerable: true });\n\n/**\n * Class representing an error event.\n *\n * @extends Event\n */\nclass ErrorEvent extends Event {\n  /**\n   * Create a new `ErrorEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.error=null] The error that generated this event\n   * @param {String} [options.message=''] The error message\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kError] = options.error === undefined ? null : options.error;\n    this[kMessage] = options.message === undefined ? '' : options.message;\n  }\n\n  /**\n   * @type {*}\n   */\n  get error() {\n    return this[kError];\n  }\n\n  /**\n   * @type {String}\n   */\n  get message() {\n    return this[kMessage];\n  }\n}\n\nObject.defineProperty(ErrorEvent.prototype, 'error', { enumerable: true });\nObject.defineProperty(ErrorEvent.prototype, 'message', { enumerable: true });\n\n/**\n * Class representing a message event.\n *\n * @extends Event\n */\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.data=null] The message content\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kData] = options.data === undefined ? null : options.data;\n  }\n\n  /**\n   * @type {*}\n   */\n  get data() {\n    return this[kData];\n  }\n}\n\nObject.defineProperty(MessageEvent.prototype, 'data', { enumerable: true });\n\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} type A string representing the event type to listen for\n   * @param {(Function|Object)} handler The listener to add\n   * @param {Object} [options] An options object specifies characteristics about\n   *     the event listener\n   * @param {Boolean} [options.once=false] A `Boolean` indicating that the\n   *     listener should be invoked at most once after being added. If `true`,\n   *     the listener would be automatically removed when invoked.\n   * @public\n   */\n  addEventListener(type, handler, options = {}) {\n    for (const listener of this.listeners(type)) {\n      if (\n        !options[kForOnEventAttribute] &&\n        listener[kListener] === handler &&\n        !listener[kForOnEventAttribute]\n      ) {\n        return;\n      }\n    }\n\n    let wrapper;\n\n    if (type === 'message') {\n      wrapper = function onMessage(data, isBinary) {\n        const event = new MessageEvent('message', {\n          data: isBinary ? data : data.toString()\n        });\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else if (type === 'close') {\n      wrapper = function onClose(code, message) {\n        const event = new CloseEvent('close', {\n          code,\n          reason: message.toString(),\n          wasClean: this._closeFrameReceived && this._closeFrameSent\n        });\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else if (type === 'error') {\n      wrapper = function onError(error) {\n        const event = new ErrorEvent('error', {\n          error,\n          message: error.message\n        });\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else if (type === 'open') {\n      wrapper = function onOpen() {\n        const event = new Event('open');\n\n        event[kTarget] = this;\n        callListener(handler, this, event);\n      };\n    } else {\n      return;\n    }\n\n    wrapper[kForOnEventAttribute] = !!options[kForOnEventAttribute];\n    wrapper[kListener] = handler;\n\n    if (options.once) {\n      this.once(type, wrapper);\n    } else {\n      this.on(type, wrapper);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} type A string representing the event type to remove\n   * @param {(Function|Object)} handler The listener to remove\n   * @public\n   */\n  removeEventListener(type, handler) {\n    for (const listener of this.listeners(type)) {\n      if (listener[kListener] === handler && !listener[kForOnEventAttribute]) {\n        this.removeListener(type, listener);\n        break;\n      }\n    }\n  }\n};\n\nmodule.exports = {\n  CloseEvent,\n  ErrorEvent,\n  Event,\n  EventTarget,\n  MessageEvent\n};\n\n/**\n * Call an event listener\n *\n * @param {(Function|Object)} listener The listener to call\n * @param {*} thisArg The value to use as `this`` when calling the listener\n * @param {Event} event The event to pass to the listener\n * @private\n */\nfunction callListener(listener, thisArg, event) {\n  if (typeof listener === 'object' && listener.handleEvent) {\n    listener.handleEvent.call(listener, event);\n  } else {\n    listener.call(thisArg, event);\n  }\n}\n","const { LogLevel } = require('./log-levels');\n\nconst state = {\n  impl:  null,\n  level: LogLevel.INFO,\n};\n\nconst LogBinding = {};\nLogBinding.getImpl = function getImpl() {\n  return state.impl;\n};\n\nLogBinding.setImpl = function setImpl(impl) {\n  state.impl = impl;\n};\n\nLogBinding.getLogLevel = function getLogLevel() {\n  return state.level;\n};\n\nLogBinding.setLogLevel = function setLogLevel(level) {\n  state.level = level;\n};\n\nmodule.exports.GlobalBinding = LogBinding;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends {ReplayStartLocation}\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationBeginning extends ReplayStartLocation {\n  /**\n   * @private\n   */\n  constructor() {\n    super({\n      _type: ReplayStartType.BEGINNING,\n    });\n  }\n  static [util_inspect_custom]() {\n    return 'BEGINNING';\n  }\n}\n\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { DestinationType } = require('./destination-type');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SubscriptionInfo } = require('./subscription-info');\nconst { UUID, StringUtils } = require('solclient-util');\n\nconst { ucs2ToUtf8, utf8ToUcs2 } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst { toSafeChars, stripNullTerminate } = StringUtils;\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst DESTINATION_PREFIX_FROM_TYPE = {\n  [DestinationType.QUEUE]:           '#P2P/QUE/',\n  [DestinationType.TEMPORARY_QUEUE]: '#P2P/QTMP/',\n};\n\nfunction createTemporaryName(type, vrid, name) {\n  const id = name || UUID.generateUUID();\n  switch (type) {\n    case DestinationType.TOPIC:\n      return `#P2P/TTMP/${vrid}/${id}`;\n    case DestinationType.TEMPORARY_QUEUE:\n      return `#P2P/QTMP/${vrid}/${id}`;\n    default:\n      LOG_ERROR('Unknown/invalid destination type', DestinationType.describe(type));\n  }\n  return undefined;\n}\n\nfunction createPrefix(type) {\n  return DESTINATION_PREFIX_FROM_TYPE[type] || '';\n}\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n// This function validates topics in all code paths -- legacy code paths that relied on validating\n// topics as they were used, and newer code paths that validate Destinations on construction.  We\n// must not add validation here that could break legacy apps that used the deprecated 'new Topic'\n// interface that doesn't perform validation, and subsequently rely on validate-on-use.\n//\n// More strict checks done during Destination construction should be placed in validateAndEncode.\n// @return { error, isWildcarded }.  isWildcarded will not be defined if erorr is defined.\nfunction legacyValidate(type, bytes, name,\n                        exceptionCreator = createOperationError.bind(null, type)) {\n  let error;\n\n  /*\n    * TRB topics can contain any utf-8 character and must be <= 250 bytes\n    * in length.\n    * '*', if present in a level, must be the last character in that level.\n    * May not have empty levels.\n    */\n\n  // Check minimum length using name, since the bytes may include a destination type prefix.\n  // e.g. #P2P/QUE/ should fail on length, not empty level.\n  const nameLength = name.length;\n  if (nameLength < 1) {\n    error = exceptionCreator('Too short (must be >= 1 character).');\n    return { error };\n  }\n\n  // Check maximum length using encoded bytes, since UTF-8 is a variable length encoding.\n  const bytesLength = bytes.length;\n  if (bytesLength > 251) { // null terminator doesn't count\n    error = exceptionCreator(`Too long (encoding must be <= 250 bytes); name is ${\n                             bytesLength - 1} bytes: '${name}'`);\n    return { error };\n  }\n\n  let isWildcarded = false;\n  if (name.charAt(nameLength - 1) === '>') {\n    isWildcarded = true;\n  }\n\n  for (let i = 0; i < nameLength; ++i) {\n    switch (name.charAt(i)) {\n      case '/':\n        if (i === 0 || i === (nameLength - 1) || name.charAt(i - 1) === '/') {\n          error = exceptionCreator(`Empty level(s) in '${name}'@${i}.`);\n          return { error };\n        }\n        break;\n\n      case '*':\n        if ((i < (nameLength - 1)) && (name.charAt(i + 1) !== '/')) {\n          // must not have something other than '/' to the right\n          error = exceptionCreator(`Illegal wildcard(s) in '${name}'@${i}.`);\n          return { error };\n        }\n\n        isWildcarded = true;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return { isWildcarded };\n}\n\nfunction encodeBytes(bytes) {\n  return ProfileBinding.value.topicUtf8Encode\n    ? `${ucs2ToUtf8(bytes)}\\u0000`\n    : `${bytes}\\u0000`;\n}\n\nfunction decodeBytes(bytes) {\n  return stripNullTerminate(ProfileBinding.value.topicUtf8Encode\n    ? utf8ToUcs2(bytes)\n    : bytes);\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @returns {Object} {bytes, offset, networkName} The result of the encoding.\n *\n * @private\n */\nfunction encode(type, name) {\n  const prefix = createPrefix(type);\n  const offset = prefix.length;\n  const networkName = prefix + name;\n  const bytes = encodeBytes(networkName);\n  return { bytes, offset, networkName };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {Function} [exceptionCreator=createOperationError] A function to create an exception if an\n *   error is encountered.\n * @returns {Object} {bytes, error, offset, isWildcarded} The result of the encoding and any\n *      validation error\n *\n * @private\n */\nfunction validateAndEncode(type, name, exceptionCreator = createOperationError.bind(null, type)) {\n  const { bytes, offset } = encode(type, name);\n  const { error: constError, isWildcarded } = legacyValidate(type, bytes, name, exceptionCreator);\n  let error = constError;\n  let subscriptionInfo = {};\n  subscriptionInfo.isWildcarded = isWildcarded;\n\n  // If there was no 'legacy' error, perform an additional check to see if the provided name starts\n  // with a reserved prefix.  It shouldn't.  Prefixes should always be added by us by encode().\n  if (!error) {\n    Object.keys(DESTINATION_PREFIX_FROM_TYPE).some((prefixType) => {\n      const prefix = DESTINATION_PREFIX_FROM_TYPE[prefixType];\n      if (!name.startsWith(prefix)) {\n        return false; // keep processing more array elements.\n      }\n\n      error = exceptionCreator(`Reserved prefix '${prefix}' found at start of '${name}'`);\n      return true;\n    });\n  }\n\n  if (!error) {\n    // parse subscription information from destination name\n    const { error: errorConst, subInfo: subInfoConst } =\n      SubscriptionInfo.parseFromName(name, type);\n    error = errorConst;\n    subscriptionInfo = subInfoConst;\n  }\n\n  return { bytes, offset, error, isWildcarded, subscriptionInfo };\n}\n\nconst DestinationUtil = {\n  createPrefix,\n  createTemporaryName,\n  decodeBytes,\n  encode,\n  encodeBytes,\n  legacyValidate,\n  toSafeChars,\n  validateAndEncode,\n};\n\nmodule.exports.DestinationUtil = DestinationUtil;\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst QueuePropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueProperties', instance);\n    if (instance.permissions !== undefined && instance.permissions !== null) {\n      v('permissions', [valIsMember, QueuePermissions, 'QueuePermissions']);\n    }\n    if (instance.accessType !== undefined && instance.accessType !== null) {\n      v('accessType', [valIsMember, QueueAccessType, 'QueueAccessType']);\n    }\n    if (instance.quotaMB !== undefined && instance.quotaMB !== null) {\n      v('quotaMB', [valNumber], [valRange, 0, 2 ** 32 -1]);\n    }\n    if (instance.maxMessageSize !== undefined && instance.maxMessageSize !== null) {\n      v('maxMessageSize', [valNumber], [valRange, 0, 2 ** 32 -1]);\n    }\n    if (instance.respectsTTL !== undefined && instance.respectsTTL !== null) {\n      v('respectsTTL', [valBoolean]);\n    }\n    if (instance.discardBehavior !== undefined && instance.discardBehavior !== null) {\n      v('discardBehavior', [valIsMember, QueueDiscardBehavior, 'QueueDiscardBehavior']);\n    }\n    if (instance.maxMessageRedelivery !== undefined && instance.maxMessageRedelivery !== null) {\n      v('maxMessageRedelivery', [valNumber], [valRange, 0, 255]);\n    }\n  },\n};\n\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\n","// Preferred configuration for the profile system:\n\n// End user:\n//  opaque profiles, property-style access\n// API implementation:\n//  inherited properties, property-style access\n// A root, forward compatible profile\n// A legacy, backwards compatible profile\n// Feature/milestone profiles that inherit from one of these two configurations\n\n// The lowest-friction way of doing this is using prototype inheritance.\n// Also considered:\n//  getProperty() with child->parent pointers -- mixes string\n//    and property access\n//  ES6 proxies -- not universal and not shimmable\n\n// Necessary to abuse prototype inheritance for static property inheritance:\n/* eslint-disable class-methods-use-this */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactoryProfiles}.</b>\n *\n * A factory profile determines the default functionality of the API. Profiles are predefined\n * combinations of capabilities that represent a mutually-consistent, valid configuration state\n * for API features.\n *\n * The factory may be initialized exactly once, with a single factory profile.\n *\n * Changing which factory profile is used by {@link solace.SolclientFactory.init} may result in\n * different default property values, validation, function signatures and implementations.\n *\n * Changing the factory profile will not change relationships between API methods. That is,\n * assuming all properties and arguments are explicitly set, an application may call the\n * API with the same values as before to cause the same result, unless explicitly noted.\n *\n * If no profile is specified, the default will provide equivalent functionality to\n * SolclientJS version 7.x. New applications are encouraged to use the\n * {@link solace.SolclientFactoryProfiles.version10_5} profile for the best compatibility with\n * other APIs (excluding 7.x JavaScript APIs).\n *\n * @memberof solace\n * @private\n */\nclass FactoryProfile {\n  /**\n   * Returns whether Guaranteed Messaging is enabled for the API. When `true`,\n   * AD publishing capability is enabled by default.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get guaranteedMessagingEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API will allow Comet (long-held HTTP request) transports\n   * to be used. If this is `true`, transport protocols may fall back to HTTP\n   * if a connection cannot be established with a preferred protocol.\n   *\n   *  * NOTE: Guaranteed Messaging cannot be enabled if Comet is enabled.\n   *\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  get cometEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API performs UTF-8 encoding on user strings where the SMF\n   * spec requires it.\n   *  * When this is `true`, the API will correctly interoperate with other Solace APIs that send\n   *    UTF-8 encoded topics.\n   *  * When this is `false`, the API will interoperate correctly with 7.x and earlier JavaScript\n   *    APIs, that used an arbitrary encoding for such strings.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return undefined; }\n\n  /**\n   * Returns whether the API returns BYTEARRAY SDT values as Strings.\n   *\n   * In older versions (before 10.5) of the API,\n   * an SDTField with type BYTEARRAY returned a String from getValue().\n   * Newer versions (since 10.5),\n   * getValue() for the same type returns an actual ByteArray, unless this property is `true`.\n   *\n   *  * When this is `true`, SDTField.getValue() returns a String for a BYTEARRAY.\n   *  * When this is `false`, SDTField.getValue() returns a ByteArray for a BYTEARRAY.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return undefined; }\n\n  [util_inspect_custom]() {\n    return {\n      'guaranteedMessagingEnabled': this.guaranteedMessagingEnabled,\n      'cometEnabled':               this.cometEnabled,\n      'topicUtf8Encode':            this.topicUtf8Encode,\n      'byteArrayAsString':          this.byteArrayAsString,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\n/**\n * The Version 7 profile for SolclientJS. This profile sets factory and session default values\n * that provide SolclientJS 7.x behaviour, and interoperability with SolclientJS 7.x clients.\n *\n * @namespace\n * @type {solace.FactoryProfile}\n * @name version7\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version7Profile extends FactoryProfile {\n  /**\n   * Returns `false`: Guaranteed Messaging is disabled by default to maintain availability of Comet\n   * HTTP transports by default.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API. Note that version 7.x SolclientJS\n   * clients cannot send or receive any messages using Guaranteed Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() { return !!BUILD_ENV.TARGET_NODE; }\n\n  /**\n   * Returns true: Comet HTTP transports are enabled for the API. The API user may, by default,\n   * select Comet HTTP transport protocol, and the API may fall back to these protocols during a\n   * connection attempt.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() { return !!BUILD_ENV.TARGET_BROWSER; }\n  /**\n   * Returns false: topic UTF-8 encoding is disabled for the API. The network encoding of topics is\n   * compatible with other SolclientJS 7.x clients, and may not be interoperable with other\n   * Solace Messaging APIs.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return false; }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version7.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\nconst legacyInstance = new Version7Profile();\n\n/**\n * The Version 10 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.0, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version10Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\n\nconst v10Instance = new Version10Profile();\n\n/**\n * The Version 10.5 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.5, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10_5\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version105Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns false: getValue() of SDTFields of type BYTEARRAY return a Uint8Array,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return false; }\n}\n\n\nconst forwardInstance = new Version105Profile();\n\n/**\n * The collection of predefined factory profiles available for application use.\n *\n * See each member for a description of its configuration.\n *\n * @namespace\n * @memberof solace\n * @FactoryProfile\n */\nconst SolclientFactoryProfiles = {\n  _legacy:  legacyInstance,\n  _v10:     v10Instance,\n  _forward: forwardInstance,\n  _default: legacyInstance,\n\n  /**\n   * The version 7 profile for browsers. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * The version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 7 profile for Node.JS. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * A version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version7: legacyInstance,\n\n  /**\n   * The version 10 profile for Node.JS.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  /**\n   * The version 10 profile for browsers.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  version10: v10Instance,\n\n  /**\n   * The version 10.5 profile for browsers.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 10.5 profile for Node.JS.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version10_5: forwardInstance,\n\n  [util_inspect_custom]() {\n    return {\n      'version7':    this.version7,\n      'version10':   this.version10,\n      'version10_5': this.version10_5,\n    };\n  },\n\n  toString() {\n    return util_inspect(this);\n  },\n};\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\n","const MessageLib = require('solclient-message');\nconst { BidiMap, Lazy } = require('solclient-eskit');\nconst { Bits, Convert } = require('solclient-convert');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFUH } = require('../message-objects');\n\nconst { lazyValue } = Lazy;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nconst delModeEnumBidiMap = lazyValue(\n  () => {\n    // Single bidirectional map for lookups. Note that the forward\n    // keys are converted to strings.\n    const source = [\n      [0x00, MessageLib.MessageDeliveryModeType.NON_PERSISTENT],\n      [0x01, MessageLib.MessageDeliveryModeType.PERSISTENT],\n      [0x02, MessageLib.MessageDeliveryModeType.DIRECT],\n    ].map(el => [el[0], el[1]]);\n    return new BidiMap(...source);\n  });\nconst lutDelModeToEnum = lazyValue(() => delModeEnumBidiMap.value.forward);\nconst lutEnumToDelMode = lazyValue(() => delModeEnumBidiMap.value.reverse);\n\n/**\n * SMF TLV Param LUT\n * utTypeMap[uh][paramtype] is the binary prefix for a regular (not LW) TLV\n * parameter with uh and paramtype values as accessed in the array.\n *\n * @private\n */\nconst uhTypeMap = (() => {\n  const result = [];\n  const paramTypeBits = 5;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      let byte1 = 0;\n      byte1 = Bits.set(byte1, uh, 6, 2);\n      byte1 = Bits.set(byte1, i, 0, paramTypeBits);\n      result[uh][i] = int8ToStr(byte1);\n    }\n  });\n  return result;\n})();\n\n/**\n * SMF TLV length map LUT\n *\n * lenMap[x] === String.fromCharCode(x)\n *\n * @private\n */\nconst lenMap = (new Array(256).fill(null).map((_, idx) => int8ToStr(idx)));\n\n/**\n * SMF Lightweight Param LUT\n *\n * lightMap[uh][paramtype][len] is the prefix for an SMF LWP\n * with uh, paramtype and len values as accessed in the array.\n *\n * @private\n */\nconst lightMap = (() => {\n  const result = [];\n  const paramTypeBits = 3;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  const lenBits = 2;\n  const lenCount = Math.pow(2, lenBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      result[uh][i] = [];\n      for (let j = 0; j < lenCount; ++j) {\n        let byte1 = 0;\n        byte1 = Bits.set(byte1, uh, 6, 2);\n        byte1 = Bits.set(byte1, 1, 5, 1);\n        byte1 = Bits.set(byte1, i, 2, 3);\n        byte1 = Bits.set(byte1, j, 0, 2);\n        result[uh][i][j] = int8ToStr(byte1);\n      }\n    }\n  });\n  return result;\n})();\n\nconst ContentSummaryDecodeMap = [\n  ContentSummaryType.XML_META,\n  ContentSummaryType.XML_PAYLOAD,\n  ContentSummaryType.BINARY_ATTACHMENT,\n  ContentSummaryType.CID_LIST,\n  ContentSummaryType.BINARY_METADATA,\n];\n\nconst ParamParse = {};\n\nParamParse.FORCED_LENGTH_MODE = {\n  FIVE:  5,\n  SIX:   6\n};\n\nParamParse.parseTopicQueueOffsets = function parseTopicQueueOffsets(dataBuf, offset) {\n  const result = [];\n  result[0] = dataBuf.readUInt8(offset);\n  result[1] = dataBuf.readUInt8(offset + 1);\n  return result;\n};\n\nParamParse.parseResponseParam = function parseResponseParam(dataBuf, offset, paramLen) {\n  const result = [];\n  result[0] = dataBuf.readInt32BE(offset);\n  if (paramLen > 4) {\n    result[1] = dataBuf.toString('latin1', offset + 4, offset + paramLen);\n  } else {\n    result[1] = '';\n  }\n  return result;\n};\n\nParamParse.parseDeliveryMode = function parseDeliveryMode(dataBuf, offset) {\n  const delmode = dataBuf.readUInt8(offset);\n  const lookup = lutDelModeToEnum.value.get(delmode);\n  return lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT;\n};\n\nParamParse.encDeliveryMode = function encDeliveryMode(delmode) {\n  const lut = lutEnumToDelMode.value;\n  const lookup = lut.get(delmode);\n  return int8ToStr(lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT);\n};\n\nParamParse.parseContentSummary = function parseContentSummary(dataBuf, offset, length) {\n  const elements = [];\n  let cumulativeSize = 0;\n  let pos = offset;\n\n  while (pos < offset + length) {\n    const byte1 = dataBuf.readUInt8(pos);\n    const elementType = Bits.get(byte1, 4, 4);\n    const elementDeclaredLength = Bits.get(byte1, 0, 4);\n    let elementSize = 0;\n    switch (elementDeclaredLength) {\n      case 2:\n        elementSize = dataBuf.readUInt8(pos + 1);\n        break;\n      case 3:\n        elementSize = dataBuf.readUInt16BE(pos + 1);\n        break;\n      case 4:\n        elementSize = dataBuf.readUIntBE(pos + 1, 3);\n        break;\n      case 5:\n        elementSize = dataBuf.readInt32BE(pos + 1);\n        break;\n      default:\n        // Allow 1 and continue;\n        break;\n    }\n\n    if (elementDeclaredLength === 0) {\n      LOG_ERROR('Invalid content summary parameter - pos not advancing');\n      return null;\n    }\n    pos += elementDeclaredLength;\n\n    const cst = ContentSummaryDecodeMap[elementType];\n    if (cst === undefined) {\n      LOG_ERROR(`Unhandled element type ${elementType}`);\n    }\n    const currentElement = new ContentSummaryElement(cst, cumulativeSize, elementSize);\n    elements.push(currentElement);\n    cumulativeSize += elementSize;\n  } // end while loop\n  return elements;\n};\n\nParamParse.encContentSummary = function encContentSummary(contentSummaryArr) {\n  const messageElementDescriptions = [];\n  for (let i = 0, n = contentSummaryArr.length; i < n; ++i) {\n    // a ContentSummaryElement\n    const currentContentSummary = contentSummaryArr[i];\n    let currentSizeStr = '';\n    let firstByte = Bits.set(0, currentContentSummary.type, 4, 4);\n    if (currentContentSummary.length <= 255) {\n      // element length: 2\n      firstByte = Bits.set(firstByte, 2, 0, 4);\n      currentSizeStr = int8ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 65535) {\n      firstByte = Bits.set(firstByte, 3, 0, 4);\n      currentSizeStr = int16ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 16777215) {\n      firstByte = Bits.set(firstByte, 4, 0, 4);\n      currentSizeStr = int24ToStr(currentContentSummary.length);\n    } else {\n      firstByte = Bits.set(firstByte, 5, 0, 4);\n      currentSizeStr = int32ToStr(currentContentSummary.length);\n    }\n    messageElementDescriptions.push(int8ToStr(firstByte));\n    messageElementDescriptions.push(currentSizeStr);\n  }\n  return messageElementDescriptions.join('');\n};\n\nParamParse.encodeSMFParam = function encodeSMFParam(uh, paramtype, value) {\n  if (value === undefined) {\n    return uhTypeMap[uh][paramtype] + lenMap[2];\n  }\n  const len = value.length;\n  if (len <= 253) {\n    return uhTypeMap[uh][paramtype] + lenMap[len + 2] + value;\n  }\n  return uhTypeMap[uh][paramtype] + lenMap[0] + int32ToStr(len + 6) + value;\n};\n\n\nParamParse.encodeSMFExtendedParam = function encodeSMFExtendedParam(uh, paramtype, value, forcedLengthMode = -1) {\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, (uh ? 1 : 0), 7, 1);\n  const length = ((value === undefined || value === null) ? 0 : value.length);\n  // Bits 1-3 of an extended param (not named in the spec, lengthMode here)\n  // can indicate value lengths 0-8 bytes, or 1-2 byte variable length.\n  const lengthModeMap = { 0: 0, 1: 1, 2: 2, 4: 3, 8: 4 };\n  let lengthMode = 0;\n  let lengthString = '';\n\n  // prevent unsupported value from breaking default behaviour\n  if(forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.FIVE && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.SIX) {\n    forcedLengthMode = -1;\n  }\n\n  // EsLint made me do it.\n  if (Object.prototype.hasOwnProperty.call(lengthModeMap, length)) {\n    lengthMode = lengthModeMap[length];\n  } else if (\n    ((length < 253) && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.SIX) \n    || (forcedLengthMode === ParamParse.FORCED_LENGTH_MODE.FIVE)\n  ) {\n    lengthMode = 5;\n    lengthString = int8ToStr(length + 3);\n  } else if (\n    ((length < 256 * 256 - 4) && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.FIVE) \n    || (forcedLengthMode === ParamParse.FORCED_LENGTH_MODE.SIX)\n  ) {\n    lengthMode = 6;\n    lengthString = int16ToStr(length + 4);\n  } else {\n    LOG_ERROR(`Extended parameter type ${paramtype} is too long (${length} bytes) `);\n    throw new OperationError(`Extended parameter (${paramtype}) over the 2^16 byte limit`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n\n  byte1 = Bits.set(byte1, lengthMode, 4, 3);\n  byte1 = Bits.set(byte1, (paramtype >> 8), 0, 4);\n  const byte2 = paramtype & 0xFF;\n  return int8ToStr(byte1) + int8ToStr(byte2) + lengthString + value;\n};\n\nParamParse.encLightSMFParam = function encLightSMFParam(uh, paramtype, value) {\n  return lightMap[uh][paramtype][value.length] + value;\n};\n\nmodule.exports.ParamParse = ParamParse;\n","const { Codec } = require('./lib/codec');\nconst { SDTDestType } = require('./lib/sdt-destination-types');\nconst { SDTField } = require('./lib/sdt-field');\nconst { SDTFieldType } = require('./lib/sdt-field-types');\nconst { SDTMapContainer } = require('./lib/sdt-map-container');\nconst { SDTStreamContainer } = require('./lib/sdt-stream-container');\nconst { SDTUnsupportedValueError } = require('./lib/sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('./lib/sdt-value-error-subcodes');\n\nmodule.exports.Codec = Codec;\nmodule.exports.SDTDestType = SDTDestType;\nmodule.exports.SDTField = SDTField;\nmodule.exports.SDTFieldType = SDTFieldType;\nmodule.exports.SDTMapContainer = SDTMapContainer;\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\nmodule.exports.SDTValueErrorSubcode = SDTValueErrorSubcode;\n","const { Check } = require('./lib/check');\nconst { Parameter } = require('./lib/parameter');\n\nmodule.exports.Check = Check;\nmodule.exports.Parameter = Parameter;\n","const { Bits, Convert } = require('solclient-convert');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int8ToStr,\n  int24ToStr,\n} = Convert;\n\n/**\n * @classdesc\n *\n * BinaryMetaBlock represents a binary metadata block in a TrMsg\n *\n * @private\n */\nclass BinaryMetaBlock {\n  constructor(type, payload) {\n    this.type = type;\n    this.payload = payload;\n  }\n\n  asEncodedSmf() {\n    const smf = [];\n    smf.push(int8ToStr(1));\n    smf.push(int8ToStr(this.type));\n    smf.push(int24ToStr(this.payload.length));\n    smf.push(this.payload.toString('latin1'));\n    return smf.join('');\n  }\n\n  static fromEncodedSmf(bufSmf, offset = 0) {\n    if ((bufSmf.length - offset) < 6) {\n      return null; // not enough data\n    }\n    const chunkCount = bufSmf.readUInt8(offset);\n    const fourbyte = bufSmf.readInt32BE(offset + 1);\n    const type = bits(fourbyte, 24, 8);\n    const payloadLen = bits(fourbyte, 0, 24);\n    const payloadOffset = chunkCount * 4 + 1;\n    const payload = bufSmf.slice(offset + payloadOffset, offset + payloadOffset + payloadLen);\n    return new BinaryMetaBlock(type, payload);\n  }\n\n}\n\n\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\n","const Mixin = {};\n\n  /**\n   * @param  {Object} target The class to augment\n   * @param  {Object} add The class to mix in.\n   * @returns {Object} The augmented class\n   */\nMixin.mixin = function mixin(target, add) {\n  const targetProto = target.prototype;\n  const addProto = add.prototype;\n  Object.getOwnPropertyNames(addProto).forEach((name) => {\n    if (name === 'constructor') return;\n    Object.defineProperty(targetProto, name, Object.getOwnPropertyDescriptor(addProto, name));\n  });\n  return target;\n};\n\nmodule.exports.Mixin = Mixin;\n","const { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nfunction getDefaultLogLevel() {\n  // break dependency loop\n  // eslint-disable-next-line global-require\n  const { LogLevel } = require('solclient-log');\n  return LogLevel.INFO;\n}\n\n/**\n * @classdesc\n * Properties used during initialization of {@link solace.SolclientFactory}.\n *\n * @memberof solace\n */\nclass SolclientFactoryProperties extends APIProperties {\n  /**\n   * Creates an instance of SolclientFactoryProperties.\n   *\n   * @param {Object} [options] The property names and values to apply to this instance\n   * @param {solace.LogLevel} [options.logLevel]  logLevel (default={@link solace.LogLevel.INFO}\n   * @param {solace.LogImpl} [options.logger]     log implementation (default=NULL)\n   * @param {solace.SolclientFactoryProfiles} [options.profile] Javascript profile\n   *  (default={@link solace.SolclientFactoryProfiles.version7})\n   * @memberOf SolclientFactoryProperties\n   */\n  constructor(options) {\n    super({\n      logLevel: getDefaultLogLevel(),\n      logger:   null,\n    }, options);\n  }\n\n  /**\n   * The factory profile to use. The following factory profiles are available:\n   * * {@link solace.SolclientFactoryProfiles.version7}, a backwards-compatible profile\n   *      for existing solClientJS 7.x applications\n   * * {@link solace.SolclientFactoryProfiles.version10}, the recommended profile\n   *      for new applications\n   *\n   * @type {solace.SolclientFactoryProfiles}\n   */\n  get profile() {\n    return this._profile;\n  }\n  set profile(profile) {\n    this._profile = profile;\n  }\n\n  /**\n   * The logging level to use for filtering log events. Messages with a level of lesser importance\n   * than this will be filtered out and not logged.\n   * @type {solace.LogLevel}\n   */\n  get logLevel() {\n    return Check.number(this._logLevel) ? this._logLevel : getDefaultLogLevel();\n  }\n  set logLevel(val) {\n    this._logLevel = val;\n  }\n\n  /**\n   * The logging implementation to use. In the debug API, the log implementation will be called\n   * for every log statement not filtered out by the log level. If no implementation is supplied,\n   * the default implementation will be used, which logs to the global console object.\n   * @type {solace.LogImpl}\n   */\n  get logger() {\n    return this._logger || null;\n  }\n  set logger(val) {\n    this._logger = val;\n  }\n\n  [util_inspect_custom]() {\n    // break dependency loop\n    // eslint-disable-next-line global-require\n    const { LogLevel } = require('solclient-log');\n    return {\n      'logLevel': LogLevel.describe(this._logLevel),\n      'profile':  this._profile,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\n","module.exports = require(\"os\");","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex\" }] */\n\n'use strict';\n\nconst { Duplex } = require('stream');\nconst { randomFillSync } = require('crypto');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst { EMPTY_BUFFER, kWebSocket, NOOP } = require('./constants');\nconst { isBlob, isValidStatusCode } = require('./validation');\nconst { mask: applyMask, toBuffer } = require('./buffer-util');\n\nconst kByteLength = Symbol('kByteLength');\nconst maskBuffer = Buffer.alloc(4);\nconst RANDOM_POOL_SIZE = 8 * 1024;\nlet randomPool;\nlet randomPoolPointer = RANDOM_POOL_SIZE;\n\nconst DEFAULT = 0;\nconst DEFLATING = 1;\nconst GET_BLOB_DATA = 2;\n\n/**\n * HyBi Sender implementation.\n */\nclass Sender {\n  /**\n   * Creates a Sender instance.\n   *\n   * @param {Duplex} socket The connection socket\n   * @param {Object} [extensions] An object containing the negotiated extensions\n   * @param {Function} [generateMask] The function used to generate the masking\n   *     key\n   */\n  constructor(socket, extensions, generateMask) {\n    this._extensions = extensions || {};\n\n    if (generateMask) {\n      this._generateMask = generateMask;\n      this._maskBuffer = Buffer.alloc(4);\n    }\n\n    this._socket = socket;\n\n    this._firstFragment = true;\n    this._compress = false;\n\n    this._bufferedBytes = 0;\n    this._queue = [];\n    this._state = DEFAULT;\n    this.onerror = NOOP;\n    this[kWebSocket] = undefined;\n  }\n\n  /**\n   * Frames a piece of data according to the HyBi WebSocket protocol.\n   *\n   * @param {(Buffer|String)} data The data to frame\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @return {(Buffer|String)[]} The framed data\n   * @public\n   */\n  static frame(data, options) {\n    let mask;\n    let merge = false;\n    let offset = 2;\n    let skipMasking = false;\n\n    if (options.mask) {\n      mask = options.maskBuffer || maskBuffer;\n\n      if (options.generateMask) {\n        options.generateMask(mask);\n      } else {\n        if (randomPoolPointer === RANDOM_POOL_SIZE) {\n          /* istanbul ignore else  */\n          if (randomPool === undefined) {\n            //\n            // This is lazily initialized because server-sent frames must not\n            // be masked so it may never be used.\n            //\n            randomPool = Buffer.alloc(RANDOM_POOL_SIZE);\n          }\n\n          randomFillSync(randomPool, 0, RANDOM_POOL_SIZE);\n          randomPoolPointer = 0;\n        }\n\n        mask[0] = randomPool[randomPoolPointer++];\n        mask[1] = randomPool[randomPoolPointer++];\n        mask[2] = randomPool[randomPoolPointer++];\n        mask[3] = randomPool[randomPoolPointer++];\n      }\n\n      skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;\n      offset = 6;\n    }\n\n    let dataLength;\n\n    if (typeof data === 'string') {\n      if (\n        (!options.mask || skipMasking) &&\n        options[kByteLength] !== undefined\n      ) {\n        dataLength = options[kByteLength];\n      } else {\n        data = Buffer.from(data);\n        dataLength = data.length;\n      }\n    } else {\n      dataLength = data.length;\n      merge = options.mask && options.readOnly && !skipMasking;\n    }\n\n    let payloadLength = dataLength;\n\n    if (dataLength >= 65536) {\n      offset += 8;\n      payloadLength = 127;\n    } else if (dataLength > 125) {\n      offset += 2;\n      payloadLength = 126;\n    }\n\n    const target = Buffer.allocUnsafe(merge ? dataLength + offset : offset);\n\n    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n    if (options.rsv1) target[0] |= 0x40;\n\n    target[1] = payloadLength;\n\n    if (payloadLength === 126) {\n      target.writeUInt16BE(dataLength, 2);\n    } else if (payloadLength === 127) {\n      target[2] = target[3] = 0;\n      target.writeUIntBE(dataLength, 4, 6);\n    }\n\n    if (!options.mask) return [target, data];\n\n    target[1] |= 0x80;\n    target[offset - 4] = mask[0];\n    target[offset - 3] = mask[1];\n    target[offset - 2] = mask[2];\n    target[offset - 1] = mask[3];\n\n    if (skipMasking) return [target, data];\n\n    if (merge) {\n      applyMask(data, mask, target, offset, dataLength);\n      return [target];\n    }\n\n    applyMask(data, mask, data, 0, dataLength);\n    return [target, data];\n  }\n\n  /**\n   * Sends a close message to the other peer.\n   *\n   * @param {Number} [code] The status code component of the body\n   * @param {(String|Buffer)} [data] The message component of the body\n   * @param {Boolean} [mask=false] Specifies whether or not to mask the message\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  close(code, data, mask, cb) {\n    let buf;\n\n    if (code === undefined) {\n      buf = EMPTY_BUFFER;\n    } else if (typeof code !== 'number' || !isValidStatusCode(code)) {\n      throw new TypeError('First argument must be a valid error code number');\n    } else if (data === undefined || !data.length) {\n      buf = Buffer.allocUnsafe(2);\n      buf.writeUInt16BE(code, 0);\n    } else {\n      const length = Buffer.byteLength(data);\n\n      if (length > 123) {\n        throw new RangeError('The message must not be greater than 123 bytes');\n      }\n\n      buf = Buffer.allocUnsafe(2 + length);\n      buf.writeUInt16BE(code, 0);\n\n      if (typeof data === 'string') {\n        buf.write(data, 2);\n      } else {\n        buf.set(data, 2);\n      }\n    }\n\n    const options = {\n      [kByteLength]: buf.length,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x08,\n      readOnly: false,\n      rsv1: false\n    };\n\n    if (this._state !== DEFAULT) {\n      this.enqueue([this.dispatch, buf, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(buf, options), cb);\n    }\n  }\n\n  /**\n   * Sends a ping message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  ping(data, mask, cb) {\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else if (isBlob(data)) {\n      byteLength = data.size;\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (byteLength > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    const options = {\n      [kByteLength]: byteLength,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x09,\n      readOnly,\n      rsv1: false\n    };\n\n    if (isBlob(data)) {\n      if (this._state !== DEFAULT) {\n        this.enqueue([this.getBlobData, data, false, options, cb]);\n      } else {\n        this.getBlobData(data, false, options, cb);\n      }\n    } else if (this._state !== DEFAULT) {\n      this.enqueue([this.dispatch, data, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(data, options), cb);\n    }\n  }\n\n  /**\n   * Sends a pong message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  pong(data, mask, cb) {\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else if (isBlob(data)) {\n      byteLength = data.size;\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (byteLength > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    const options = {\n      [kByteLength]: byteLength,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x0a,\n      readOnly,\n      rsv1: false\n    };\n\n    if (isBlob(data)) {\n      if (this._state !== DEFAULT) {\n        this.enqueue([this.getBlobData, data, false, options, cb]);\n      } else {\n        this.getBlobData(data, false, options, cb);\n      }\n    } else if (this._state !== DEFAULT) {\n      this.enqueue([this.dispatch, data, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(data, options), cb);\n    }\n  }\n\n  /**\n   * Sends a data message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary\n   *     or text\n   * @param {Boolean} [options.compress=false] Specifies whether or not to\n   *     compress `data`\n   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  send(data, options, cb) {\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n    let opcode = options.binary ? 2 : 1;\n    let rsv1 = options.compress;\n\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else if (isBlob(data)) {\n      byteLength = data.size;\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (this._firstFragment) {\n      this._firstFragment = false;\n      if (\n        rsv1 &&\n        perMessageDeflate &&\n        perMessageDeflate.params[\n          perMessageDeflate._isServer\n            ? 'server_no_context_takeover'\n            : 'client_no_context_takeover'\n        ]\n      ) {\n        rsv1 = byteLength >= perMessageDeflate._threshold;\n      }\n      this._compress = rsv1;\n    } else {\n      rsv1 = false;\n      opcode = 0;\n    }\n\n    if (options.fin) this._firstFragment = true;\n\n    const opts = {\n      [kByteLength]: byteLength,\n      fin: options.fin,\n      generateMask: this._generateMask,\n      mask: options.mask,\n      maskBuffer: this._maskBuffer,\n      opcode,\n      readOnly,\n      rsv1\n    };\n\n    if (isBlob(data)) {\n      if (this._state !== DEFAULT) {\n        this.enqueue([this.getBlobData, data, this._compress, opts, cb]);\n      } else {\n        this.getBlobData(data, this._compress, opts, cb);\n      }\n    } else if (this._state !== DEFAULT) {\n      this.enqueue([this.dispatch, data, this._compress, opts, cb]);\n    } else {\n      this.dispatch(data, this._compress, opts, cb);\n    }\n  }\n\n  /**\n   * Gets the contents of a blob as binary data.\n   *\n   * @param {Blob} blob The blob\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\n   *     the data\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  getBlobData(blob, compress, options, cb) {\n    this._bufferedBytes += options[kByteLength];\n    this._state = GET_BLOB_DATA;\n\n    blob\n      .arrayBuffer()\n      .then((arrayBuffer) => {\n        if (this._socket.destroyed) {\n          const err = new Error(\n            'The socket was closed while the blob was being read'\n          );\n\n          //\n          // `callCallbacks` is called in the next tick to ensure that errors\n          // that might be thrown in the callbacks behave like errors thrown\n          // outside the promise chain.\n          //\n          process.nextTick(callCallbacks, this, err, cb);\n          return;\n        }\n\n        this._bufferedBytes -= options[kByteLength];\n        const data = toBuffer(arrayBuffer);\n\n        if (!compress) {\n          this._state = DEFAULT;\n          this.sendFrame(Sender.frame(data, options), cb);\n          this.dequeue();\n        } else {\n          this.dispatch(data, compress, options, cb);\n        }\n      })\n      .catch((err) => {\n        //\n        // `onError` is called in the next tick for the same reason that\n        // `callCallbacks` above is.\n        //\n        process.nextTick(onError, this, err, cb);\n      });\n  }\n\n  /**\n   * Dispatches a message.\n   *\n   * @param {(Buffer|String)} data The message to send\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\n   *     `data`\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  dispatch(data, compress, options, cb) {\n    if (!compress) {\n      this.sendFrame(Sender.frame(data, options), cb);\n      return;\n    }\n\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    this._bufferedBytes += options[kByteLength];\n    this._state = DEFLATING;\n    perMessageDeflate.compress(data, options.fin, (_, buf) => {\n      if (this._socket.destroyed) {\n        const err = new Error(\n          'The socket was closed while data was being compressed'\n        );\n\n        callCallbacks(this, err, cb);\n        return;\n      }\n\n      this._bufferedBytes -= options[kByteLength];\n      this._state = DEFAULT;\n      options.readOnly = false;\n      this.sendFrame(Sender.frame(buf, options), cb);\n      this.dequeue();\n    });\n  }\n\n  /**\n   * Executes queued send operations.\n   *\n   * @private\n   */\n  dequeue() {\n    while (this._state === DEFAULT && this._queue.length) {\n      const params = this._queue.shift();\n\n      this._bufferedBytes -= params[3][kByteLength];\n      Reflect.apply(params[0], this, params.slice(1));\n    }\n  }\n\n  /**\n   * Enqueues a send operation.\n   *\n   * @param {Array} params Send operation parameters.\n   * @private\n   */\n  enqueue(params) {\n    this._bufferedBytes += params[3][kByteLength];\n    this._queue.push(params);\n  }\n\n  /**\n   * Sends a frame.\n   *\n   * @param {(Buffer | String)[]} list The frame to send\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  sendFrame(list, cb) {\n    if (list.length === 2) {\n      this._socket.cork();\n      this._socket.write(list[0]);\n      this._socket.write(list[1], cb);\n      this._socket.uncork();\n    } else {\n      this._socket.write(list[0], cb);\n    }\n  }\n}\n\nmodule.exports = Sender;\n\n/**\n * Calls queued callbacks with an error.\n *\n * @param {Sender} sender The `Sender` instance\n * @param {Error} err The error to call the callbacks with\n * @param {Function} [cb] The first callback\n * @private\n */\nfunction callCallbacks(sender, err, cb) {\n  if (typeof cb === 'function') cb(err);\n\n  for (let i = 0; i < sender._queue.length; i++) {\n    const params = sender._queue[i];\n    const callback = params[params.length - 1];\n\n    if (typeof callback === 'function') callback(err);\n  }\n}\n\n/**\n * Handles a `Sender` error.\n *\n * @param {Sender} sender The `Sender` instance\n * @param {Error} err The error\n * @param {Function} [cb] The first pending callback\n * @private\n */\nfunction onError(sender, err, cb) {\n  callCallbacks(sender, err, cb);\n  sender.onerror(err);\n}\n","const { SessionEvent } = require('./session-event');\n\nclass ProvisionEvent extends SessionEvent {\n  /**\n   * @constructor\n   * @param {solace.SessionEventCode} sessionEventCode The event code\n   * @param {String} infoStr Information string\n   * @param {Number} [responseCode] Any associated router response code\n   * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n   * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n   * @param {String} [reason] Any additional information\n   * @param {QueueDescriptor} queueDescriptor Endpoint name and type as returned by the broker\n   * @param {QueueProperties} queueProperties Endpoint proerties as returned by the broker\n   * @private\n   */\n  constructor(\n      sessionEventCode,\n      infoStr,\n      responseCode = undefined,\n      errorSubcode = 0,\n      correlationKey = undefined,\n      reason = undefined,\n      queueDescriptor = null,\n      queueProperties = null) {\n  super([], sessionEventCode, infoStr, responseCode, errorSubcode, correlationKey, reason );\n  this._queueDescriptor = queueDescriptor;\n  this._queueProperties = queueProperties;\n  }\n\n\n  /**\n   * @type {QueueDescriptor}\n   * @description The endpoint name and type as returned by the broker\n   * in the provisioin/deprovision response, if any.\n   * Durability is not set.\n   * Mostly relevant when the endpoint name was not provided in the provision call.\n   * @default null\n   */\n  get queueDescriptor() {\n    return this._queueDescriptor;\n  }\n\n  /**\n   * @internal\n   */\n  set queueDescriptor(value) {\n    this._queueDescriptor = value;\n  }\n\n  /**\n   * @type {QueueProperties}\n   * @description The endpoint properties as returned by the broker\n   * in the provisioin/deprovision response, if any.\n   * Mostly relevant in case of an ENDPOINT_PROPERTY_MISMATCH provision error.\n   * @default null\n   */\n  get queueProperties() {\n    return this._queueProperties;\n  }\n\n  /**\n   * @internal\n   */\n  set queueProperties(value) {\n    this._queueProperties = value;\n  }\n  \n  [util_inspect_custom]() {\n    const result = super[util_inspect_custom]();\n    result.queueDescriptor = this._queueDescriptor;\n    result.queueProperties = this._queueProperties;\n    return result;\n  }\n\n}\n\nmodule.exports.ProvisionEvent = ProvisionEvent;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * ConsumerFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the Subscriber FSM.  This extension provides members to carry information specfic to\n * the Subscriber FSM transitions.\n *\n * @extends FsmEvent\n * @private\n */\nclass ConsumerFSMEvent extends FsmEvent {\n  constructor(spec, details) {\n    super(spec);\n    this.details = details;\n  }\n}\n\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\n","const { APIProperties } = require('./lib/api-properties');\nconst { APIPropertiesValidators } = require('./lib/api-properties-validators');\nconst { ArrayUtils } = require('./lib/array-utils');\nconst { parseURL } = require('./lib/url');\nconst { Process } = require('./lib/process');\nconst { StringBuffer } = require('./lib/string-buffer');\nconst { StringUtils } = require('./lib/string-utils');\nconst { TimingBucket } = require('./lib/timing-bucket');\nconst { UUID } = require('./lib/uuid');\nconst { Version } = require('./lib/version');\nconst clone = require('./lib/clone');\n\nmodule.exports = {\n  clone,\n  parseURL,\n\n  APIProperties,\n  APIPropertiesValidators,\n  ArrayUtils,\n  Process,\n  StringBuffer,\n  StringUtils,\n  TimingBucket,\n  UUID,\n  Version,\n};\n","const SolclientFactoryLib = require('solclient-factory');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { TransportCapabilities } = require('solclient-transport');\n\nfunction defaultEnablePublisher() {\n  const { ProfileBinding } = SolclientFactoryLib;\n  const binding = ProfileBinding.value;\n  const globallyEnabled = binding.guaranteedMessagingEnabled;\n  const webSocketAvailable = TransportCapabilities.web.webSocket();\n  return globallyEnabled && webSocketAvailable;\n}\n\nfunction getDefaults() {\n  return {\n    enabled:                   defaultEnablePublisher(),\n    windowSize:                50,\n    acknowledgeTimeoutInMsecs: 2000,\n    acknowledgeMode:           MessagePublisherAcknowledgeMode.PER_MESSAGE,\n    connectRetryCount:         3,\n    connectTimeoutInMsecs:     5000,\n  };\n}\n\n/**\n * @classdesc\n * Properties that define the configuration for a guaranteed message publisher.\n *\n * @memberof solace\n */\nclass MessagePublisherProperties extends APIProperties {\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(getDefaults(), options || {});\n  }\n  /**\n   * @name solace.MessagePublisherProperties#enabled\n   * @type {Boolean}\n   * @description When enabled, a Guaranteed Messaging Publisher\n   * is automatically created when a session is connected.\n   *\n   * The default value is the same as the value provided to\n   * {@link solace.SolclientFactory.init},\n   * in the profile, {@link solace.SolclientFactoryProperties#profile},\n   * in the field {@link solace.FactoryProfile#guaranteedMessagingEnabled}.\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(newValue) {\n    this._enabled = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#windowSize\n   * @default 50\n   * @type {Number}\n   * @description  Maximum number of messages that can be published\n   * without acknowledgment.\n   *  * The valid range is 1 <= value <= 255\n   */\n  get windowSize() {\n    return Check.defined(this._windowSize)\n      ? this._windowSize\n      : getDefaults().windowSize;\n  }\n  set windowSize(newValue) {\n    this._windowSize = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeTimeoutInMsecs\n   * @type {Number}\n   * @default 2000\n   * @description  The time to wait for an acknowledgement,\n   * in milliseconds, before retransmitting unacknowledged\n   * messages.\n   *  * The valid range is 20 <= value <= 60000.\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.defined(this._acknowledgeTimeoutInMsecs)\n      ? this._acknowledgeTimeoutInMsecs\n      : getDefaults().acknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(newValue) {\n    this._acknowledgeTimeoutInMsecs = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeMode\n   * @type {solace.MessagePublisherAcknowledgeMode}\n   * @default {@link solace.MessagePublisherAcknowledgeMode.PER_MESSAGE}\n   * @description  The message-router sends windowed acknowledgements\n   * which the API converts to per-message acknowledgement by default. If\n   * acknowledgeMode is Windowed, then the API will simply pass through\n   * the message-router acknowledgements.\n   */\n  get acknowledgeMode() {\n    return this._acknowledgeMode || MessagePublisherAcknowledgeMode.PER_MESSAGE;\n  }\n  set acknowledgeMode(newValue) {\n    this._acknowledgeMode = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectRetryCount\n   * @type {Number}\n   * @default 3\n   * @description The number of times to retry a bind (aka open-flow) request\n   * before deciding the the Guaranteed Message Publisher cannot be started.\n   *  * The valid range 0 <= value.\n   * @private\n   */\n  get connectRetryCount() {\n    return Check.defined(this._connectRetryCount)\n      ? this._connectRetryCount\n      : getDefaults().connectRetryCount;\n  }\n  set connectRetryCount(newValue) {\n    this._connectRetryCount = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @default 5000\n   * @description  The time to wait for an bind response,\n   * in milliseconds, before retransmitting the bind request.\n   *  * The valid range is 50 <= value</li>\n   * @private\n   */\n  get connectTimeoutInMsecs() {\n    return Check.defined(this._connectTimeoutInMsecs)\n      ? this._connectTimeoutInMsecs\n      : getDefaults().connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeoutInMsecs = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      enabled:                   this.enabled,\n      windowSize:                this.windowSize,\n      acknowledgeTimeoutInMsecs: this.acknowledgeTimeoutInMsecs,\n      acknowledgeMode:           MessagePublisherAcknowledgeMode.describe(this.acknowledgeMode),\n      connectRetryCount:         this.connectRetryCount,\n      connectTimeoutInMsecs:     this.connectTimeoutInMsecs,\n    };\n  }\n}\n\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex|Readable$\", \"caughtErrors\": \"none\" }] */\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst https = require('https');\nconst http = require('http');\nconst net = require('net');\nconst tls = require('tls');\nconst { randomBytes, createHash } = require('crypto');\nconst { Duplex, Readable } = require('stream');\nconst { URL } = require('url');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst Receiver = require('./receiver');\nconst Sender = require('./sender');\nconst { isBlob } = require('./validation');\n\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  GUID,\n  kForOnEventAttribute,\n  kListener,\n  kStatusCode,\n  kWebSocket,\n  NOOP\n} = require('./constants');\nconst {\n  EventTarget: { addEventListener, removeEventListener }\n} = require('./event-target');\nconst { format, parse } = require('./extension');\nconst { toBuffer } = require('./buffer-util');\n\nconst closeTimeout = 30 * 1000;\nconst kAborted = Symbol('kAborted');\nconst protocolVersions = [8, 13];\nconst readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\nconst subprotocolRegex = /^[!#$%&'*+\\-.0-9A-Z^_`|a-z~]+$/;\n\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */\nclass WebSocket extends EventEmitter {\n  /**\n   * Create a new `WebSocket`.\n   *\n   * @param {(String|URL)} address The URL to which to connect\n   * @param {(String|String[])} [protocols] The subprotocols\n   * @param {Object} [options] Connection options\n   */\n  constructor(address, protocols, options) {\n    super();\n\n    this._binaryType = BINARY_TYPES[0];\n    this._closeCode = 1006;\n    this._closeFrameReceived = false;\n    this._closeFrameSent = false;\n    this._closeMessage = EMPTY_BUFFER;\n    this._closeTimer = null;\n    this._errorEmitted = false;\n    this._extensions = {};\n    this._paused = false;\n    this._protocol = '';\n    this._readyState = WebSocket.CONNECTING;\n    this._receiver = null;\n    this._sender = null;\n    this._socket = null;\n\n    if (address !== null) {\n      this._bufferedAmount = 0;\n      this._isServer = false;\n      this._redirects = 0;\n\n      if (protocols === undefined) {\n        protocols = [];\n      } else if (!Array.isArray(protocols)) {\n        if (typeof protocols === 'object' && protocols !== null) {\n          options = protocols;\n          protocols = [];\n        } else {\n          protocols = [protocols];\n        }\n      }\n\n      initAsClient(this, address, protocols, options);\n    } else {\n      this._autoPong = options.autoPong;\n      this._isServer = true;\n    }\n  }\n\n  /**\n   * For historical reasons, the custom \"nodebuffer\" type is used by the default\n   * instead of \"blob\".\n   *\n   * @type {String}\n   */\n  get binaryType() {\n    return this._binaryType;\n  }\n\n  set binaryType(type) {\n    if (!BINARY_TYPES.includes(type)) return;\n\n    this._binaryType = type;\n\n    //\n    // Allow to change `binaryType` on the fly.\n    //\n    if (this._receiver) this._receiver._binaryType = type;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get bufferedAmount() {\n    if (!this._socket) return this._bufferedAmount;\n\n    return this._socket._writableState.length + this._sender._bufferedBytes;\n  }\n\n  /**\n   * @type {String}\n   */\n  get extensions() {\n    return Object.keys(this._extensions).join();\n  }\n\n  /**\n   * @type {Boolean}\n   */\n  get isPaused() {\n    return this._paused;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onclose() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onerror() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onopen() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onmessage() {\n    return null;\n  }\n\n  /**\n   * @type {String}\n   */\n  get protocol() {\n    return this._protocol;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get readyState() {\n    return this._readyState;\n  }\n\n  /**\n   * @type {String}\n   */\n  get url() {\n    return this._url;\n  }\n\n  /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {Duplex} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Object} options Options object\n   * @param {Boolean} [options.allowSynchronousEvents=false] Specifies whether\n   *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted\n   *     multiple times in the same tick\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Number} [options.maxPayload=0] The maximum allowed message size\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @private\n   */\n  setSocket(socket, head, options) {\n    const receiver = new Receiver({\n      allowSynchronousEvents: options.allowSynchronousEvents,\n      binaryType: this.binaryType,\n      extensions: this._extensions,\n      isServer: this._isServer,\n      maxPayload: options.maxPayload,\n      skipUTF8Validation: options.skipUTF8Validation\n    });\n\n    const sender = new Sender(socket, this._extensions, options.generateMask);\n\n    this._receiver = receiver;\n    this._sender = sender;\n    this._socket = socket;\n\n    receiver[kWebSocket] = this;\n    sender[kWebSocket] = this;\n    socket[kWebSocket] = this;\n\n    receiver.on('conclude', receiverOnConclude);\n    receiver.on('drain', receiverOnDrain);\n    receiver.on('error', receiverOnError);\n    receiver.on('message', receiverOnMessage);\n    receiver.on('ping', receiverOnPing);\n    receiver.on('pong', receiverOnPong);\n\n    sender.onerror = senderOnError;\n\n    //\n    // These methods may not be available if `socket` is just a `Duplex`.\n    //\n    if (socket.setTimeout) socket.setTimeout(0);\n    if (socket.setNoDelay) socket.setNoDelay();\n\n    if (head.length > 0) socket.unshift(head);\n\n    socket.on('close', socketOnClose);\n    socket.on('data', socketOnData);\n    socket.on('end', socketOnEnd);\n    socket.on('error', socketOnError);\n\n    this._readyState = WebSocket.OPEN;\n    this.emit('open');\n  }\n\n  /**\n   * Emit the `'close'` event.\n   *\n   * @private\n   */\n  emitClose() {\n    if (!this._socket) {\n      this._readyState = WebSocket.CLOSED;\n      this.emit('close', this._closeCode, this._closeMessage);\n      return;\n    }\n\n    if (this._extensions[PerMessageDeflate.extensionName]) {\n      this._extensions[PerMessageDeflate.extensionName].cleanup();\n    }\n\n    this._receiver.removeAllListeners();\n    this._readyState = WebSocket.CLOSED;\n    this.emit('close', this._closeCode, this._closeMessage);\n  }\n\n  /**\n   * Start a closing handshake.\n   *\n   *          +----------+   +-----------+   +----------+\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\n   *    |     +----------+   +-----------+   +----------+     |\n   *          +----------+   +-----------+         |\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\n   *          +----------+   +-----------+   |\n   *    |           |                        |   +---+        |\n   *                +------------------------+-->|fin| - - - -\n   *    |         +---+                      |   +---+\n   *     - - - - -|fin|<---------------------+\n   *              +---+\n   *\n   * @param {Number} [code] Status code explaining why the connection is closing\n   * @param {(String|Buffer)} [data] The reason why the connection is\n   *     closing\n   * @public\n   */\n  close(code, data) {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      abortHandshake(this, this._req, msg);\n      return;\n    }\n\n    if (this.readyState === WebSocket.CLOSING) {\n      if (\n        this._closeFrameSent &&\n        (this._closeFrameReceived || this._receiver._writableState.errorEmitted)\n      ) {\n        this._socket.end();\n      }\n\n      return;\n    }\n\n    this._readyState = WebSocket.CLOSING;\n    this._sender.close(code, data, !this._isServer, (err) => {\n      //\n      // This error is handled by the `'error'` listener on the socket. We only\n      // want to know if the close frame has been sent here.\n      //\n      if (err) return;\n\n      this._closeFrameSent = true;\n\n      if (\n        this._closeFrameReceived ||\n        this._receiver._writableState.errorEmitted\n      ) {\n        this._socket.end();\n      }\n    });\n\n    setCloseTimer(this);\n  }\n\n  /**\n   * Pause the socket.\n   *\n   * @public\n   */\n  pause() {\n    if (\n      this.readyState === WebSocket.CONNECTING ||\n      this.readyState === WebSocket.CLOSED\n    ) {\n      return;\n    }\n\n    this._paused = true;\n    this._socket.pause();\n  }\n\n  /**\n   * Send a ping.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the ping is sent\n   * @public\n   */\n  ping(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.ping(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a pong.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the pong is sent\n   * @public\n   */\n  pong(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.pong(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Resume the socket.\n   *\n   * @public\n   */\n  resume() {\n    if (\n      this.readyState === WebSocket.CONNECTING ||\n      this.readyState === WebSocket.CLOSED\n    ) {\n      return;\n    }\n\n    this._paused = false;\n    if (!this._receiver._writableState.needDrain) this._socket.resume();\n  }\n\n  /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} [options] Options object\n   * @param {Boolean} [options.binary] Specifies whether `data` is binary or\n   *     text\n   * @param {Boolean} [options.compress] Specifies whether or not to compress\n   *     `data`\n   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when data is written out\n   * @public\n   */\n  send(data, options, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    const opts = {\n      binary: typeof data !== 'string',\n      mask: !this._isServer,\n      compress: true,\n      fin: true,\n      ...options\n    };\n\n    if (!this._extensions[PerMessageDeflate.extensionName]) {\n      opts.compress = false;\n    }\n\n    this._sender.send(data || EMPTY_BUFFER, opts, cb);\n  }\n\n  /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */\n  terminate() {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      abortHandshake(this, this._req, msg);\n      return;\n    }\n\n    if (this._socket) {\n      this._readyState = WebSocket.CLOSING;\n      this._socket.destroy();\n    }\n  }\n}\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n[\n  'binaryType',\n  'bufferedAmount',\n  'extensions',\n  'isPaused',\n  'protocol',\n  'readyState',\n  'url'\n].forEach((property) => {\n  Object.defineProperty(WebSocket.prototype, property, { enumerable: true });\n});\n\n//\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n['open', 'error', 'close', 'message'].forEach((method) => {\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\n    enumerable: true,\n    get() {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) return listener[kListener];\n      }\n\n      return null;\n    },\n    set(handler) {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) {\n          this.removeListener(method, listener);\n          break;\n        }\n      }\n\n      if (typeof handler !== 'function') return;\n\n      this.addEventListener(method, handler, {\n        [kForOnEventAttribute]: true\n      });\n    }\n  });\n});\n\nWebSocket.prototype.addEventListener = addEventListener;\nWebSocket.prototype.removeEventListener = removeEventListener;\n\nmodule.exports = WebSocket;\n\n/**\n * Initialize a WebSocket client.\n *\n * @param {WebSocket} websocket The client to initialize\n * @param {(String|URL)} address The URL to which to connect\n * @param {Array} protocols The subprotocols\n * @param {Object} [options] Connection options\n * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether any\n *     of the `'message'`, `'ping'`, and `'pong'` events can be emitted multiple\n *     times in the same tick\n * @param {Boolean} [options.autoPong=true] Specifies whether or not to\n *     automatically send a pong in response to a ping\n * @param {Function} [options.finishRequest] A function which can be used to\n *     customize the headers of each http request before it is sent\n * @param {Boolean} [options.followRedirects=false] Whether or not to follow\n *     redirects\n * @param {Function} [options.generateMask] The function used to generate the\n *     masking key\n * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the\n *     handshake request\n * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n *     size\n * @param {Number} [options.maxRedirects=10] The maximum number of redirects\n *     allowed\n * @param {String} [options.origin] Value of the `Origin` or\n *     `Sec-WebSocket-Origin` header\n * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable\n *     permessage-deflate\n * @param {Number} [options.protocolVersion=13] Value of the\n *     `Sec-WebSocket-Version` header\n * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n *     not to skip UTF-8 validation for text and close messages\n * @private\n */\nfunction initAsClient(websocket, address, protocols, options) {\n  const opts = {\n    allowSynchronousEvents: true,\n    autoPong: true,\n    protocolVersion: protocolVersions[1],\n    maxPayload: 100 * 1024 * 1024,\n    skipUTF8Validation: false,\n    perMessageDeflate: true,\n    followRedirects: false,\n    maxRedirects: 10,\n    ...options,\n    socketPath: undefined,\n    hostname: undefined,\n    protocol: undefined,\n    timeout: undefined,\n    method: 'GET',\n    host: undefined,\n    path: undefined,\n    port: undefined\n  };\n\n  websocket._autoPong = opts.autoPong;\n\n  if (!protocolVersions.includes(opts.protocolVersion)) {\n    throw new RangeError(\n      `Unsupported protocol version: ${opts.protocolVersion} ` +\n        `(supported versions: ${protocolVersions.join(', ')})`\n    );\n  }\n\n  let parsedUrl;\n\n  if (address instanceof URL) {\n    parsedUrl = address;\n  } else {\n    try {\n      parsedUrl = new URL(address);\n    } catch (e) {\n      throw new SyntaxError(`Invalid URL: ${address}`);\n    }\n  }\n\n  if (parsedUrl.protocol === 'http:') {\n    parsedUrl.protocol = 'ws:';\n  } else if (parsedUrl.protocol === 'https:') {\n    parsedUrl.protocol = 'wss:';\n  }\n\n  websocket._url = parsedUrl.href;\n\n  const isSecure = parsedUrl.protocol === 'wss:';\n  const isIpcUrl = parsedUrl.protocol === 'ws+unix:';\n  let invalidUrlMessage;\n\n  if (parsedUrl.protocol !== 'ws:' && !isSecure && !isIpcUrl) {\n    invalidUrlMessage =\n      'The URL\\'s protocol must be one of \"ws:\", \"wss:\", ' +\n      '\"http:\", \"https\", or \"ws+unix:\"';\n  } else if (isIpcUrl && !parsedUrl.pathname) {\n    invalidUrlMessage = \"The URL's pathname is empty\";\n  } else if (parsedUrl.hash) {\n    invalidUrlMessage = 'The URL contains a fragment identifier';\n  }\n\n  if (invalidUrlMessage) {\n    const err = new SyntaxError(invalidUrlMessage);\n\n    if (websocket._redirects === 0) {\n      throw err;\n    } else {\n      emitErrorAndClose(websocket, err);\n      return;\n    }\n  }\n\n  const defaultPort = isSecure ? 443 : 80;\n  const key = randomBytes(16).toString('base64');\n  const request = isSecure ? https.request : http.request;\n  const protocolSet = new Set();\n  let perMessageDeflate;\n\n  opts.createConnection =\n    opts.createConnection || (isSecure ? tlsConnect : netConnect);\n  opts.defaultPort = opts.defaultPort || defaultPort;\n  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[')\n    ? parsedUrl.hostname.slice(1, -1)\n    : parsedUrl.hostname;\n  opts.headers = {\n    ...opts.headers,\n    'Sec-WebSocket-Version': opts.protocolVersion,\n    'Sec-WebSocket-Key': key,\n    Connection: 'Upgrade',\n    Upgrade: 'websocket'\n  };\n  opts.path = parsedUrl.pathname + parsedUrl.search;\n  opts.timeout = opts.handshakeTimeout;\n\n  if (opts.perMessageDeflate) {\n    perMessageDeflate = new PerMessageDeflate(\n      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},\n      false,\n      opts.maxPayload\n    );\n    opts.headers['Sec-WebSocket-Extensions'] = format({\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n    });\n  }\n  if (protocols.length) {\n    for (const protocol of protocols) {\n      if (\n        typeof protocol !== 'string' ||\n        !subprotocolRegex.test(protocol) ||\n        protocolSet.has(protocol)\n      ) {\n        throw new SyntaxError(\n          'An invalid or duplicated subprotocol was specified'\n        );\n      }\n\n      protocolSet.add(protocol);\n    }\n\n    opts.headers['Sec-WebSocket-Protocol'] = protocols.join(',');\n  }\n  if (opts.origin) {\n    if (opts.protocolVersion < 13) {\n      opts.headers['Sec-WebSocket-Origin'] = opts.origin;\n    } else {\n      opts.headers.Origin = opts.origin;\n    }\n  }\n  if (parsedUrl.username || parsedUrl.password) {\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n  }\n\n  if (isIpcUrl) {\n    const parts = opts.path.split(':');\n\n    opts.socketPath = parts[0];\n    opts.path = parts[1];\n  }\n\n  let req;\n\n  if (opts.followRedirects) {\n    if (websocket._redirects === 0) {\n      websocket._originalIpc = isIpcUrl;\n      websocket._originalSecure = isSecure;\n      websocket._originalHostOrSocketPath = isIpcUrl\n        ? opts.socketPath\n        : parsedUrl.host;\n\n      const headers = options && options.headers;\n\n      //\n      // Shallow copy the user provided options so that headers can be changed\n      // without mutating the original object.\n      //\n      options = { ...options, headers: {} };\n\n      if (headers) {\n        for (const [key, value] of Object.entries(headers)) {\n          options.headers[key.toLowerCase()] = value;\n        }\n      }\n    } else if (websocket.listenerCount('redirect') === 0) {\n      const isSameHost = isIpcUrl\n        ? websocket._originalIpc\n          ? opts.socketPath === websocket._originalHostOrSocketPath\n          : false\n        : websocket._originalIpc\n          ? false\n          : parsedUrl.host === websocket._originalHostOrSocketPath;\n\n      if (!isSameHost || (websocket._originalSecure && !isSecure)) {\n        //\n        // Match curl 7.77.0 behavior and drop the following headers. These\n        // headers are also dropped when following a redirect to a subdomain.\n        //\n        delete opts.headers.authorization;\n        delete opts.headers.cookie;\n\n        if (!isSameHost) delete opts.headers.host;\n\n        opts.auth = undefined;\n      }\n    }\n\n    //\n    // Match curl 7.77.0 behavior and make the first `Authorization` header win.\n    // If the `Authorization` header is set, then there is nothing to do as it\n    // will take precedence.\n    //\n    if (opts.auth && !options.headers.authorization) {\n      options.headers.authorization =\n        'Basic ' + Buffer.from(opts.auth).toString('base64');\n    }\n\n    req = websocket._req = request(opts);\n\n    if (websocket._redirects) {\n      //\n      // Unlike what is done for the `'upgrade'` event, no early exit is\n      // triggered here if the user calls `websocket.close()` or\n      // `websocket.terminate()` from a listener of the `'redirect'` event. This\n      // is because the user can also call `request.destroy()` with an error\n      // before calling `websocket.close()` or `websocket.terminate()` and this\n      // would result in an error being emitted on the `request` object with no\n      // `'error'` event listeners attached.\n      //\n      websocket.emit('redirect', websocket.url, req);\n    }\n  } else {\n    req = websocket._req = request(opts);\n  }\n\n  if (opts.timeout) {\n    req.on('timeout', () => {\n      abortHandshake(websocket, req, 'Opening handshake has timed out');\n    });\n  }\n\n  req.on('error', (err) => {\n    if (req === null || req[kAborted]) return;\n\n    req = websocket._req = null;\n    emitErrorAndClose(websocket, err);\n  });\n\n  req.on('response', (res) => {\n    const location = res.headers.location;\n    const statusCode = res.statusCode;\n\n    if (\n      location &&\n      opts.followRedirects &&\n      statusCode >= 300 &&\n      statusCode < 400\n    ) {\n      if (++websocket._redirects > opts.maxRedirects) {\n        abortHandshake(websocket, req, 'Maximum redirects exceeded');\n        return;\n      }\n\n      req.abort();\n\n      let addr;\n\n      try {\n        addr = new URL(location, address);\n      } catch (e) {\n        const err = new SyntaxError(`Invalid URL: ${location}`);\n        emitErrorAndClose(websocket, err);\n        return;\n      }\n\n      initAsClient(websocket, addr, protocols, options);\n    } else if (!websocket.emit('unexpected-response', req, res)) {\n      abortHandshake(\n        websocket,\n        req,\n        `Unexpected server response: ${res.statusCode}`\n      );\n    }\n  });\n\n  req.on('upgrade', (res, socket, head) => {\n    websocket.emit('upgrade', res);\n\n    //\n    // The user may have closed the connection from a listener of the\n    // `'upgrade'` event.\n    //\n    if (websocket.readyState !== WebSocket.CONNECTING) return;\n\n    req = websocket._req = null;\n\n    const upgrade = res.headers.upgrade;\n\n    if (upgrade === undefined || upgrade.toLowerCase() !== 'websocket') {\n      abortHandshake(websocket, socket, 'Invalid Upgrade header');\n      return;\n    }\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\n      return;\n    }\n\n    const serverProt = res.headers['sec-websocket-protocol'];\n    let protError;\n\n    if (serverProt !== undefined) {\n      if (!protocolSet.size) {\n        protError = 'Server sent a subprotocol but none was requested';\n      } else if (!protocolSet.has(serverProt)) {\n        protError = 'Server sent an invalid subprotocol';\n      }\n    } else if (protocolSet.size) {\n      protError = 'Server sent no subprotocol';\n    }\n\n    if (protError) {\n      abortHandshake(websocket, socket, protError);\n      return;\n    }\n\n    if (serverProt) websocket._protocol = serverProt;\n\n    const secWebSocketExtensions = res.headers['sec-websocket-extensions'];\n\n    if (secWebSocketExtensions !== undefined) {\n      if (!perMessageDeflate) {\n        const message =\n          'Server sent a Sec-WebSocket-Extensions header but no extension ' +\n          'was requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      let extensions;\n\n      try {\n        extensions = parse(secWebSocketExtensions);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      const extensionNames = Object.keys(extensions);\n\n      if (\n        extensionNames.length !== 1 ||\n        extensionNames[0] !== PerMessageDeflate.extensionName\n      ) {\n        const message = 'Server indicated an extension that was not requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      try {\n        perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      websocket._extensions[PerMessageDeflate.extensionName] =\n        perMessageDeflate;\n    }\n\n    websocket.setSocket(socket, head, {\n      allowSynchronousEvents: opts.allowSynchronousEvents,\n      generateMask: opts.generateMask,\n      maxPayload: opts.maxPayload,\n      skipUTF8Validation: opts.skipUTF8Validation\n    });\n  });\n\n  if (opts.finishRequest) {\n    opts.finishRequest(req, websocket);\n  } else {\n    req.end();\n  }\n}\n\n/**\n * Emit the `'error'` and `'close'` events.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {Error} The error to emit\n * @private\n */\nfunction emitErrorAndClose(websocket, err) {\n  websocket._readyState = WebSocket.CLOSING;\n  //\n  // The following assignment is practically useless and is done only for\n  // consistency.\n  //\n  websocket._errorEmitted = true;\n  websocket.emit('error', err);\n  websocket.emitClose();\n}\n\n/**\n * Create a `net.Socket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {net.Socket} The newly created socket used to start the connection\n * @private\n */\nfunction netConnect(options) {\n  options.path = options.socketPath;\n  return net.connect(options);\n}\n\n/**\n * Create a `tls.TLSSocket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {tls.TLSSocket} The newly created socket used to start the connection\n * @private\n */\nfunction tlsConnect(options) {\n  options.path = undefined;\n\n  if (!options.servername && options.servername !== '') {\n    options.servername = net.isIP(options.host) ? '' : options.host;\n  }\n\n  return tls.connect(options);\n}\n\n/**\n * Abort the handshake and emit an error.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to\n *     abort or the socket to destroy\n * @param {String} message The error message\n * @private\n */\nfunction abortHandshake(websocket, stream, message) {\n  websocket._readyState = WebSocket.CLOSING;\n\n  const err = new Error(message);\n  Error.captureStackTrace(err, abortHandshake);\n\n  if (stream.setHeader) {\n    stream[kAborted] = true;\n    stream.abort();\n\n    if (stream.socket && !stream.socket.destroyed) {\n      //\n      // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if\n      // called after the request completed. See\n      // https://github.com/websockets/ws/issues/1869.\n      //\n      stream.socket.destroy();\n    }\n\n    process.nextTick(emitErrorAndClose, websocket, err);\n  } else {\n    stream.destroy(err);\n    stream.once('error', websocket.emit.bind(websocket, 'error'));\n    stream.once('close', websocket.emitClose.bind(websocket));\n  }\n}\n\n/**\n * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\n * when the `readyState` attribute is `CLOSING` or `CLOSED`.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {*} [data] The data to send\n * @param {Function} [cb] Callback\n * @private\n */\nfunction sendAfterClose(websocket, data, cb) {\n  if (data) {\n    const length = isBlob(data) ? data.size : toBuffer(data).length;\n\n    //\n    // The `_bufferedAmount` property is used only when the peer is a client and\n    // the opening handshake fails. Under these circumstances, in fact, the\n    // `setSocket()` method is not called, so the `_socket` and `_sender`\n    // properties are set to `null`.\n    //\n    if (websocket._socket) websocket._sender._bufferedBytes += length;\n    else websocket._bufferedAmount += length;\n  }\n\n  if (cb) {\n    const err = new Error(\n      `WebSocket is not open: readyState ${websocket.readyState} ` +\n        `(${readyStates[websocket.readyState]})`\n    );\n    process.nextTick(cb, err);\n  }\n}\n\n/**\n * The listener of the `Receiver` `'conclude'` event.\n *\n * @param {Number} code The status code\n * @param {Buffer} reason The reason for closing\n * @private\n */\nfunction receiverOnConclude(code, reason) {\n  const websocket = this[kWebSocket];\n\n  websocket._closeFrameReceived = true;\n  websocket._closeMessage = reason;\n  websocket._closeCode = code;\n\n  if (websocket._socket[kWebSocket] === undefined) return;\n\n  websocket._socket.removeListener('data', socketOnData);\n  process.nextTick(resume, websocket._socket);\n\n  if (code === 1005) websocket.close();\n  else websocket.close(code, reason);\n}\n\n/**\n * The listener of the `Receiver` `'drain'` event.\n *\n * @private\n */\nfunction receiverOnDrain() {\n  const websocket = this[kWebSocket];\n\n  if (!websocket.isPaused) websocket._socket.resume();\n}\n\n/**\n * The listener of the `Receiver` `'error'` event.\n *\n * @param {(RangeError|Error)} err The emitted error\n * @private\n */\nfunction receiverOnError(err) {\n  const websocket = this[kWebSocket];\n\n  if (websocket._socket[kWebSocket] !== undefined) {\n    websocket._socket.removeListener('data', socketOnData);\n\n    //\n    // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See\n    // https://github.com/websockets/ws/issues/1940.\n    //\n    process.nextTick(resume, websocket._socket);\n\n    websocket.close(err[kStatusCode]);\n  }\n\n  if (!websocket._errorEmitted) {\n    websocket._errorEmitted = true;\n    websocket.emit('error', err);\n  }\n}\n\n/**\n * The listener of the `Receiver` `'finish'` event.\n *\n * @private\n */\nfunction receiverOnFinish() {\n  this[kWebSocket].emitClose();\n}\n\n/**\n * The listener of the `Receiver` `'message'` event.\n *\n * @param {Buffer|ArrayBuffer|Buffer[])} data The message\n * @param {Boolean} isBinary Specifies whether the message is binary or not\n * @private\n */\nfunction receiverOnMessage(data, isBinary) {\n  this[kWebSocket].emit('message', data, isBinary);\n}\n\n/**\n * The listener of the `Receiver` `'ping'` event.\n *\n * @param {Buffer} data The data included in the ping frame\n * @private\n */\nfunction receiverOnPing(data) {\n  const websocket = this[kWebSocket];\n\n  if (websocket._autoPong) websocket.pong(data, !this._isServer, NOOP);\n  websocket.emit('ping', data);\n}\n\n/**\n * The listener of the `Receiver` `'pong'` event.\n *\n * @param {Buffer} data The data included in the pong frame\n * @private\n */\nfunction receiverOnPong(data) {\n  this[kWebSocket].emit('pong', data);\n}\n\n/**\n * Resume a readable stream\n *\n * @param {Readable} stream The readable stream\n * @private\n */\nfunction resume(stream) {\n  stream.resume();\n}\n\n/**\n * The `Sender` error event handler.\n *\n * @param {Error} The error\n * @private\n */\nfunction senderOnError(err) {\n  const websocket = this[kWebSocket];\n\n  if (websocket.readyState === WebSocket.CLOSED) return;\n  if (websocket.readyState === WebSocket.OPEN) {\n    websocket._readyState = WebSocket.CLOSING;\n    setCloseTimer(websocket);\n  }\n\n  //\n  // `socket.end()` is used instead of `socket.destroy()` to allow the other\n  // peer to finish sending queued data. There is no need to set a timer here\n  // because `CLOSING` means that it is already set or not needed.\n  //\n  this._socket.end();\n\n  if (!websocket._errorEmitted) {\n    websocket._errorEmitted = true;\n    websocket.emit('error', err);\n  }\n}\n\n/**\n * Set a timer to destroy the underlying raw socket of a WebSocket.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @private\n */\nfunction setCloseTimer(websocket) {\n  websocket._closeTimer = setTimeout(\n    websocket._socket.destroy.bind(websocket._socket),\n    closeTimeout\n  );\n}\n\n/**\n * The listener of the socket `'close'` event.\n *\n * @private\n */\nfunction socketOnClose() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('close', socketOnClose);\n  this.removeListener('data', socketOnData);\n  this.removeListener('end', socketOnEnd);\n\n  websocket._readyState = WebSocket.CLOSING;\n\n  let chunk;\n\n  //\n  // The close frame might not have been received or the `'end'` event emitted,\n  // for example, if the socket was destroyed due to an error. Ensure that the\n  // `receiver` stream is closed after writing any remaining buffered data to\n  // it. If the readable side of the socket is in flowing mode then there is no\n  // buffered data as everything has been already written and `readable.read()`\n  // will return `null`. If instead, the socket is paused, any possible buffered\n  // data will be read as a single chunk.\n  //\n  if (\n    !this._readableState.endEmitted &&\n    !websocket._closeFrameReceived &&\n    !websocket._receiver._writableState.errorEmitted &&\n    (chunk = websocket._socket.read()) !== null\n  ) {\n    websocket._receiver.write(chunk);\n  }\n\n  websocket._receiver.end();\n\n  this[kWebSocket] = undefined;\n\n  clearTimeout(websocket._closeTimer);\n\n  if (\n    websocket._receiver._writableState.finished ||\n    websocket._receiver._writableState.errorEmitted\n  ) {\n    websocket.emitClose();\n  } else {\n    websocket._receiver.on('error', receiverOnFinish);\n    websocket._receiver.on('finish', receiverOnFinish);\n  }\n}\n\n/**\n * The listener of the socket `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction socketOnData(chunk) {\n  if (!this[kWebSocket]._receiver.write(chunk)) {\n    this.pause();\n  }\n}\n\n/**\n * The listener of the socket `'end'` event.\n *\n * @private\n */\nfunction socketOnEnd() {\n  const websocket = this[kWebSocket];\n\n  websocket._readyState = WebSocket.CLOSING;\n  websocket._receiver.end();\n  this.end();\n}\n\n/**\n * The listener of the socket `'error'` event.\n *\n * @private\n */\nfunction socketOnError() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('error', socketOnError);\n  this.on('error', NOOP);\n\n  if (websocket) {\n    websocket._readyState = WebSocket.CLOSING;\n    this.destroy();\n  }\n}\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents a log level enumeration.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst LogLevel = {\n  /**\n   * Fatal. Rserved for unrecoverable errors.\n   * @type {Number}\n   */\n  FATAL: 0,\n  /**\n   * Error. An internal error to the API or Solace Message Router.\n   * @type {Number}\n   */\n  ERROR: 1,\n  /**\n   * Warn. An external error which may be caused by the application passing invalid\n   * arguments or objects to the API. Often accompanied by an thrown exception.\n   * @type {Number}\n   */\n  WARN:  2,\n  /**\n   * Info. An unexpected event or occurrence that does not affect the sane\n   * operation of the SDK or application.\n   * @type {Number}\n   */\n  INFO:  3,\n  /**\n   * Debug. The highest (least) level of debug logs. Debug logs provide an overview of\n   * the API operation.\n   * @type {Number}\n   */\n  DEBUG: 4,\n  /**\n   * Trace. The loweest (most verbose) level of debug logs.\n   * @type {Number}\n   */\n  TRACE: 5,\n};\n\nmodule.exports.LogLevel = Enum.new(LogLevel);\n","/**\n * SolclientJS internal API for white-box integration testing\n * @private\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\nconst Convert = require('solclient-convert');\nconst Debug = require('solclient-debug');\nconst Destination = require('solclient-destination');\nconst Error = require('solclient-error');\nconst ESKit = require('solclient-eskit');\nconst Factory = require('solclient-factory');\nconst FSM = require('solclient-fsm');\nconst Log = require('solclient-log');\nconst Message = require('solclient-message');\nconst MessageTracing = require('solclient-message-tracing');\nconst Publisher = require('solclient-message-publisher');\nconst SDT = require('solclient-sdt');\nconst Session = require('solclient-session');\nconst SMF = require('solclient-smf');\nconst SolcacheSession = require('solclient-solcache-session');\nconst TestEnv = require('solclient-env');\nconst Transport = require('solclient-transport');\nconst Util = require('solclient-util');\nconst Validate = require('solclient-validate');\n\nmodule.exports = {\n  Convert,\n  Debug,\n  Destination,\n  Error,\n  ESKit,\n  Factory,\n  FSM,\n  Log,\n  Message,\n  MessageTracing,\n  Publisher,\n  SDT,\n  Session,\n  SMF,\n  SolcacheSession,\n  TestEnv,\n  Transport,\n  Util,\n  Validate,\n};\n","const { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\n\nconst { formatHexString } = Hex;\n/**\n * SessionFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends FsmEvent\n * @private\n */\nclass SessionFSMEvent extends FsmEvent {\n  constructor(spec, fields) {\n    super(spec);\n    /**\n     * @type {String}\n     * @description Information String for the {SessionEvent}\n     */\n    this.eventText = null;\n    /**\n     * @type {ErrorSubcode}\n     * @description The Solace ErrorSubcode for any generated {SessionEvent}\n     */\n    this.errorSubcode = null;\n    /**\n     * @type {String}\n     * @description The reason string to be included in any generated {SessionEvent}\n     */\n    this.eventReason = null;\n    /**\n     * @type {TransportSMFMessage}\n     * @description A decoded SMF message received from the transport. May be\n     * either a {ClientCtrlMessage} or a {SMPMessage}\n     */\n    this.smfMsg = null;\n    /**\n     * @type {Object}\n     * @description The Transport SessionId retrieved from a {TransportSessionEvent}\n     */\n    this.sessionId = null;\n    /**\n     * @type {Object}\n     * @description The Publisher or Consumer object associated with a GM event.\n     */\n    this.guaranteedFlowObject = null;\n\n    Object.assign(this, fields);\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'eventText':    this.eventText,\n      'eventReason':  this.eventReason,\n      'errorSubcode': ErrorSubcode.describe(this.errorSubcode),\n      'sessionId':    this.sessionId && formatHexString(this.sessionId) || 'N/A',\n    };\n  }\n\n  getExtraStringInfo() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SessionFSMEvent = SessionFSMEvent;\n","/**\n * @classdesc\n * A representation of an SMF parameter\n *\n * @private\n */\nclass SMFParameter {\n/**\n * @constructor\n * @param {Number} uh The UH value [0..2]\n * @param {SMFParameterType} type The type of SMF parameter\n * @param {*} value The value for this parameter\n * @param {Buffer} buffer instead of value, a buffer, with indexes (begin and end)\n * @param {Number} begin start index in buffer\n * @param {Number} end end index in buffer.\n */\n  constructor(uh, type, value, buffer, begin, end) {\n    this._type = type;\n    this._value = value;\n    this._uh = uh;\n    this._buffer = buffer;\n    this._begin = begin;\n    this._end = end;\n  }\n  getType() {\n    return this._type;\n  }\n  getValue() {\n    if (this._buffer && !this._value) {\n      return this._buffer.toString('latin1', this._begin, this._end);\n    }\n    return this._value;\n  }\n  getUh() {\n    return this._uh;\n  }\n  getBuffer() {\n    return this._buffer;\n  }\n  getBegin() {\n    return this._begin;\n  }\n  getEnd() {\n    return this._end;\n  }\n\n  toString() {\n    return `${this._uh}:0x${this._type.toString(16)} = ${this.getValue()}`;\n  }\n}\n\nmodule.exports.SMFParameter = SMFParameter;\n","const { Long } = require('solclient-convert');\n\nconst DEFAULTS = {\n  _lastAcked: Long.fromNumber(0, true),\n  _lastSent:  Long.fromNumber(0, true),\n  _next:      Long.fromNumber(1, true),\n};\n\nconst longToString = v => v.toString(10);\n\nclass MessageIds {\n  constructor(attrs) {\n    Object.assign(this, DEFAULTS, attrs);\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n  set lastAcked(value) {\n    this._lastAcked = Long.fromValue(value);\n  }\n\n  get lastSent() {\n    return this._lastSent;\n  }\n  setLastSent(id) {\n    this._lastSent = Long.fromValue(id);\n    this._next = this._lastSent.add(1);\n  }\n\n  get next() {\n    return this._next;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'lastAcked': longToString(this.lastAcked),\n      'lastSent':  longToString(this.lastSent),\n      'next':      longToString(this.next),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageIds = MessageIds;\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  HTTPTransportSession,\n} = require('./http');\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n  LOG_ERROR,\n} = require('solclient-log');\nconst { FsmEvent } = require('solclient-fsm');\nconst { TransportBase } = require('../transport-base');\nconst { TransportProtocol } = require('../transport-protocols');\nconst { TransportProtocolHandler } = require('../transport-protocol-handler');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportFSM } = require('./web-transport-fsm');\n\n/**\n * @classdesc\n * This class manages all the web based transport protocols.\n * <ul>\n *     <li>{@link TransportProtocol.HTTP_BASE64}\n *     <li>{@link TransportProtocol.HTTP_BINARY}\n *     <li>{@link TransportProtocol.HTTP_BINARY_STREAMING}\n *     <li>{@link TransportProtocol.WS_BINARY}\n * </ul>\n * @extends TransportBase\n * @private\n */\nclass WebTransport extends TransportBase {\n\n  /**\n   * @constructor\n   * @param {URL} url The url to connect to\n   * @param {Function} eventCB The callback for transport events\n   * @param {BaseSMFClient} client An SMF client instance\n   * @param {Object} props Additional transport properties\n   * @param {Function} getId A function that returns this transport's unique ID\n   */\n  constructor(url, eventCB, client, props, getId) {\n    super(url, eventCB, client, props);\n    LOG_TRACE(`webTransportProtocolList ${props.webTransportProtocolList}`);\n    this._transportHandler = new TransportProtocolHandler(url, props.webTransportProtocolList);\n    this._webTransportFsm = new WebTransportFSM(this, getId);\n    this._webTransportFsm.start();\n  }\n\n  notifyEvent(event) {\n    this._eventCB(event);\n  }\n\n  handleDestroyed() {\n    this._transportSession = null;\n  }\n\n  handleTransportEvent(transportEvent) {\n    LOG_INFO(`Web transport receive transport event: ${transportEvent}`);\n    let wEvent;\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        wEvent = new FsmEvent({ name: WebTransportEvent.UP_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.handleDestroyed();\n        wEvent = new FsmEvent({ name: WebTransportEvent.DESTROYED_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.SEND_ERROR:\n        wEvent = new FsmEvent({ name: WebTransportEvent.SEND_ERROR });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.CONNECT_TIMEOUT:\n        wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT_TIMEOUT });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_FAILED:\n        this._lastDowngradeSucceeded = false;\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_SUCCEEDED:\n        this._lastDowngradeSucceeded = true;\n        break;\n\n      default:\n        // All other transport events have no effect on the web transport and are passed through\n        this._eventCB(transportEvent);\n    }\n  }\n\n  /**\n   * @override\n   */\n  connect() {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT });\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  connectInternal() {\n    this._transportSession = null;\n    const tpProtocol = this._transportHandler.getTransportProtocol();\n    this._props.transportProtocol = tpProtocol;\n    switch (tpProtocol) {\n      case TransportProtocol.HTTP_BASE64:\n      case TransportProtocol.HTTP_BINARY:\n      case TransportProtocol.HTTP_BINARY_STREAMING:\n        this._transportSession = new HTTPTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      case TransportProtocol.WS_BINARY:\n        this._transportSession = new WebSocketTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      default:\n        LOG_ERROR(`Web transport unrecognized TransportProtocol: ${tpProtocol}`);\n        throw new OperationError(`No transport session provider for scheme: ${tpProtocol}`,\n                                 ErrorSubcode.CONNECTION_ERROR,\n                                 tpProtocol);\n    }\n\n    LOG_INFO(`Connect Transport ${tpProtocol}`);\n    return this._transportSession.connect();\n  }\n\n  /**\n   * @override\n   */\n  destroy(msg, subcode) {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n    wEvent._destroyMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n    LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n    if (this._transportSession) {\n      this._transportSession._socket._sender._socket.destroy(new Error(errorMsg));\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @param {String} msg The message associated with the downgrade\n   * @param {ErrorSubcode} subcode The subcode associated with the downgrade\n   * @returns {Boolean} `true` if there are downgrade options available. `false` otherwise.\n   * @private\n   */\n  beginDowngrade(msg, subcode) {\n    if (this._transportHandler.canCompleteDowngrade()) {\n      LOG_TRACE('Web transport downgrade');\n      // Destroy the underlying transport session\n      // This will asynchronously cause DESTROYED_NOTICE to be emitted.\n      // The receiver can then call completeDowngrade, which will complete the downgrade.\n      this.destroyInternal(msg, subcode);\n      return true;\n    }\n    LOG_TRACE('Web transport downgrade rejected');\n    return false;\n  }\n\n  completeDowngrade() {\n    if (!this._transportHandler.canCompleteDowngrade()) {\n      return false;\n    }\n    return this._transportHandler.completeDowngrade();\n  }\n\n  destroyInternal(msg, subcode) {\n    if (this._transportSession) {\n      this._transportSession.destroy(msg, subcode);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    return this._transportSession.flush(callback);\n  }\n\n  getConnError() {\n    if (this._transportSession) {\n      return this._transportSession._connError;\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    if (this._transportSession) {\n      return this._transportSession.getInfoStr();\n    }\n    return 'Not connected.';\n  }\n\n  /**\n   * @override\n   */\n  getTransportProtocol() {\n    return this._transportHandler.getTransportProtocol();\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    if (this._transportSession) {\n      return this._transportSession.getClientStats();\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  requestDowngrade(msg, subcode) {\n    LOG_TRACE('Creating downgrade request event');\n    this._lastDowngradeSucceeded = undefined; // will be reset by handler for TS DOWNGRADE_ events\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DOWNGRADE });\n    wEvent._downgradeMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return this._lastDowngradeSucceeded;\n  }\n\n  /**\n   * @override\n   */\n  send(message, forceAllowEnqueue) {\n    return this._transportSession.send(message, forceAllowEnqueue);\n  }\n}\n\nmodule.exports.WebTransport = WebTransport;\n","const DebugLib = require('solclient-debug');\nconst SolclientDestinationLib = require('solclient-destination');\nconst SolclientMessageLib = require('solclient-message');\nconst { Baggage, TraceContextSetter } = require('solclient-message-tracing');\nconst SolclientSDTLib = require('solclient-sdt');\nconst { BinaryMetaBlock, KeepAliveMessage } = require('../message-objects');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { Hex, Long, Convert: { stringToUint8Array, anythingToBuffer } } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LogFormatter } = require('solclient-log');\nconst { parseAdpAt } = require('./adprotocol');\nconst { parseCCAt } = require('./client-ctrl');\nconst { ParseSMF } = require('./parse-smf');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\nconst { Transport } = require('./transport');\nconst zlib = require('zlib');\nconst fflate = require('fflate');\nconst { Check } = require('solclient-validate');\n\n\nconst { formatHexString } = Hex;\nconst { lazyValue } = Lazy;\nconst { parseSMFAt } = ParseSMF;\nconst { parseSMPAt } = SMP;\nconst { parseTsSmfMsgAt } = Transport;\n\nconst logger = new LogFormatter('[smf-decode]');\nconst { LOG_DEBUG,\n        LOG_ERROR,\n        LOG_WARN } = logger;\n\nconst userCosForPriority = lazyValue(() => new PriorityUserCosMap().reverse);\n\nconst BIN_STRUCTYPES = {\n  0x0A: SolclientMessageLib.MessageType.MAP,\n  0x0B: SolclientMessageLib.MessageType.STREAM,\n  0x07: SolclientMessageLib.MessageType.TEXT,\n};\n\nfunction adaptBinaryMetaToMessage(binaryMeta, messageIn) {\n  const message = messageIn;\n  const messageSdt = SolclientSDTLib.Codec.parseSingleElement(binaryMeta.payload, 0);\n\n  if (!(messageSdt && messageSdt.getType() === SolclientSDTLib.SDTFieldType.STREAM)) {\n    return;\n  }\n\n  const sdtstream = messageSdt.getValue();\n  let sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.BYTEARRAY\n    && sdtfield._value && sdtfield._value.length > 0) {\n    // Preamble byte array is present\n    let preambleByte0 = sdtfield._value.readUInt8(0);\n    if ((preambleByte0 & 0x40) !== 0){\n      message._setPayloadCompressed(preambleByte0);\n    }\n    if ((preambleByte0 & 0x80) === 0) {\n      // structured message: override default \"BIN\" message type\n      message._messageType = (BIN_STRUCTYPES[preambleByte0 & 0x0F] ||\n                              SolclientMessageLib.MessageType.BINARY);\n    }\n    if (sdtfield._value.length > 1) {\n      const preambleByte1 = sdtfield._value.readUInt8(1);\n      message.setAsReplyMessage((preambleByte1 & 0x80) !== 0);\n    }\n  }\n\n  sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.MAP) {\n    const sdtMap = sdtfield.getValue();\n    const p = sdtMap.getField('p');\n    const h = sdtMap.getField('h');\n    if (p) {\n      message.setUserPropertyMap(p.getValue());\n    }\n    if (h) {\n      const headerMap = h.getValue();\n      const ci = headerMap.getField('ci');\n      const mi = headerMap.getField('mi');\n      const mt = headerMap.getField('mt');\n      const rt = headerMap.getField('rt');\n      const si = headerMap.getField('si');\n      const sn = headerMap.getField('sn');\n      const ts = headerMap.getField('ts');\n      const ex = headerMap.getField('ex');\n      const ce = headerMap.getField('ce');\n      const ct = headerMap.getField('ct');\n\n      const bag = headerMap.getField('bag'); // get the baggage field\n      const ctx = headerMap.getField('ctx'); // the message creation context field\n\n      if (ci) {\n        message.setCorrelationId(ci.getValue());\n      }\n      if (mi) {\n        message.setApplicationMessageId(mi.getValue());\n      }\n      if (mt) {\n        message.setApplicationMessageType(mt.getValue());\n      }\n      if (rt) {\n        message.setReplyTo(rt.getValue());\n      }\n      if (si) {\n        message.setSenderId(si.getValue());\n      }\n      if (sn) {\n        message.setSequenceNumber(sn.getValueNoThrow());\n      }\n      if (ts) {\n        message.setSenderTimestamp(ts.getValue());\n      }\n      if (ex) {\n        message.setGMExpiration(ex.getValue());\n      }\n      if (ce) {\n        message.setHttpContentEncoding(ce.getValue());\n      }\n      if (ct) {\n        message.setHttpContentType(ct.getValue());\n      }\n      if (bag) {\n        // set the baggage\n        const _baggageObj = new Baggage();\n        _baggageObj.setBaggage(bag.getValue());\n        message._setBaggage(_baggageObj);\n      }\n      if (ctx) {\n        // create a context setter from the bytes or string depending on the active profile\n        const _traceContextSetter = TraceContextSetter.fromTraceContext(ctx.getValue());\n         // use it to set the message creation context, can be null\n        message._setCreationContext(_traceContextSetter);\n      }\n    }\n  }\n}\n\nfunction adaptSmfToMessage(smfHeader, messageIn, stream, offset) {\n  const message = messageIn;\n  message._setDeliverToOne(!!smfHeader.smf_dto);\n  message._setDeliveryMode(smfHeader.pm_deliverymode ||\n                          SolclientMessageLib.MessageDeliveryModeType.DIRECT);\n  if (smfHeader.pm_tr_topicname_bytes !== null) {\n    message._setDestination(\n      SolclientDestinationLib.DestinationFromNetwork.createDestinationFromBytes(\n        smfHeader.pm_tr_topicname_bytes));\n  }\n  message._setDiscardIndication(!!smfHeader.smf_di);\n  message._setElidingEligible(!!smfHeader.smf_elidingEligible);\n  message._setDMQEligible(!!smfHeader.smf_deadMessageQueueEligible);\n  message._setUserCos(userCosForPriority.value.get(smfHeader.smf_priority));\n  message._setPriority(smfHeader.pm_msg_priority);\n  if (smfHeader.pm_userdata) message._setUserData(smfHeader.pm_userdata);\n\n  message.setRedelivered(!!smfHeader.pm_ad_redelflag || !!smfHeader.pm_ad_flowredelflag);\n\n  message.setFlowId(smfHeader.pm_ad_flowid);\n  message.setGuaranteedMessageId(smfHeader.pm_ad_msgid);\n  message.setGuaranteedPreviousMessageId(smfHeader.pm_ad_prevmsgid);\n  message.setPublisherId(smfHeader.pm_ad_publisherid);\n  message.setPublisherMessageId(smfHeader.pm_ad_publishermsgid);\n  message.setTopicSequenceNumber(smfHeader.pm_ad_topicSequenceNumber);\n  if (message.getDeliveryMode() === SolclientMessageLib.MessageDeliveryModeType.DIRECT) {\n    message.setDeliveryCount(-1);\n  } else if (smfHeader.pm_ad_redeliveryCount) {\n    message.setDeliveryCount(smfHeader.pm_ad_redeliveryCount + 1);\n  } else { // AD, but delivery count header not present\n    // Only the flow knows whether the qEndpointBehaviour DC flag was set,\n    // so it overrides the value before passing it to the user with -1 if it wasn't.\n    message.setDeliveryCount(1);\n  }\n\n  // set the suid for the message if present\n  if (smfHeader.pm_ad_spooler_unique_id) {\n    message._setSpoolerUniqueId(smfHeader.pm_ad_spooler_unique_id);\n  }\n  // set the message id of the replication group message id using\n  // ASSURED_DELIVERY_REPLICATION_MATE_ACK_MESSAGE_ID if present\n  // otherwise use ASSURED_DELIVERY_ACK_MESSAGE_ID if present\n  // otherwise let the Mesage.getReplicationGroupMessageId use\n  // the value set by message.setGuaranteedMessageId\n  if (smfHeader.pm_ad_replication_mate_ack_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_replication_mate_ack_message_id);\n  } else if (smfHeader.pm_ad_local_spooler_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_local_spooler_message_id);\n  }\n\n  if (Long.isLong(smfHeader.pm_ad_ttl)) {\n    message.setTimeToLive(smfHeader.pm_ad_ttl.toNumber());\n  } else {\n    message.setTimeToLive(smfHeader.pm_ad_ttl);\n  }\n\n  // set the trace span transport context for the message if present\n  if (smfHeader.pm_ts_transport_context) {\n    // create a context setter from the bytes\n    const _traceContextSetter = TraceContextSetter.fromTraceContext(smfHeader.pm_ts_transport_context);\n    // use it to create the transport context\n    message._setTransportContext(_traceContextSetter);\n  }\n\n  // Copy content into fields (from input bytes)\n  const payloadOffset = offset + smfHeader.headerLength;\n  const cs = smfHeader.pm_content_summary;\n\n  if (!(cs && cs.length)) {\n    // No content-summary, assume binary attachment\n    message._setBinaryAttachment(smfHeader.payloadLength > 0\n                                ? stream.slice(payloadOffset,\n                                               payloadOffset + smfHeader.payloadLength)\n                                : undefined);\n    return;\n  }\n\n  for (let i = 0, n = cs.length; i < n; ++i) {\n    const currentChunk = cs[i];\n    const chunkBegin = payloadOffset + currentChunk.position;\n    const chunkEnd = payloadOffset + currentChunk.position + currentChunk.length;\n    switch (currentChunk.type) {\n      case ContentSummaryType.BINARY_ATTACHMENT:\n        message._setBinaryAttachment(stream.slice(chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.BINARY_METADATA:\n        {\n          const binaryMeta = BinaryMetaBlock.fromEncodedSmf(stream, chunkBegin);\n\n          message.binaryMetadataChunk = binaryMeta;\n          if (binaryMeta.type === 0) {\n            // we have SDT JMS metadata\n            adaptBinaryMetaToMessage(binaryMeta, message);\n          }\n          break;\n        }\n      case ContentSummaryType.XML_META:\n        message._setXmlMetadata(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.XML_PAYLOAD:\n        message._setXmlContentInternal(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      default:\n        LOG_ERROR(`Unhandled ContentSummaryType: ${ContentSummaryType.describe(currentChunk.type)}`);\n    }\n  }\n  // uncompress message\n  if(message._getPayloadCompressed() && Check.anything(message.getHttpContentEncoding())){\n    if (message.getHttpContentEncoding().endsWith('deflate')){\n        try {\n          let inflatedAttachment;\n          if (BUILD_ENV.TARGET_NODE) {\n            inflatedAttachment = zlib.inflateSync(message._binaryAttachment);\n          } else {\n            inflatedAttachment = fflate.unzlibSync( message._binaryAttachment);\n            inflatedAttachment = anythingToBuffer(inflatedAttachment);\n          }\n          message._setBinaryAttachment(inflatedAttachment);\n          message._setPayloadCompressed(null);\n\n          // Popping \"deflate\" off the end of the content encoding list.\n          if (message.getHttpContentEncoding().trim() === \"deflate\") {\n            delete message._httpContentEncoding;\n          } else {\n            let newCE = message.getHttpContentEncoding().slice(0, 0-\"deflate\".length).trimRight()\n              if (newCE.endsWith(\",\")) {\n                newCE = newCE.slice(0, -1);\n                message.setHttpContentEncoding(newCE);\n              } else {\n                delete message._httpContentEncoding;\n\t      }\n          }\n        } catch(err){\n          LOG_WARN(\"Message payload was not decompressed, there was an error. Leaving the message body compressed \", err)\n          //LOG_WARN(message.dump());\n          message._messageType = SolclientMessageLib.MessageType.BINARY;\n        }\n    }\n  }\n}\n\nfunction decodeCompoundMessage(dataBuf, pos) {\n  const header = parseSMFAt(dataBuf, pos);\n  if (!header) {\n    LOG_DEBUG('decodeCompoundMessage: SMF parsing failed');\n    return null;\n  }\n  // the parser determined there was a full SMF message\n  const payloadPosition = pos + header.headerLength;\n  const payloadLen = header.payloadLength;\n  let message;\n  switch (header.smf_protocol) {\n    case SMFProtocol.TSESSION:\n      message = parseTsSmfMsgAt(dataBuf, payloadPosition, header);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.TRMSG:\n      message = new SolclientMessageLib.Message();\n      message._smfHeader = header;\n      adaptSmfToMessage(header, message, dataBuf, pos);\n      return message;\n\n    case SMFProtocol.ADCTRL:\n      message = parseAdpAt(dataBuf, payloadPosition, payloadLen);\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.CLIENTCTRL:\n      message = parseCCAt(dataBuf, payloadPosition, payloadLen);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.SMP:\n      message = parseSMPAt(dataBuf, payloadPosition);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.KEEPALIVE:\n    case SMFProtocol.KEEPALIVEV2:\n      message = new KeepAliveMessage();\n      message.smfHeader = header;\n      return message;\n\n    default:\n      LOG_ERROR(`Unknown protocol: 0x${formatHexString(header.smf_protocol)}, ` +\n                `dump message content: \\n${\n                DebugLib.Debug.formatDumpBytes(dataBuf.slice(pos,\n                                                             pos + header.messageLength).toString('latin1'),\n                                               true, 0)}`);\n      break;\n  }\n  return null;\n}\n\nconst Decode = {\n  decodeCompoundMessage,\n};\n\nmodule.exports.Decode = Decode;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageTypeFlags = {\n  FLAG_FILTER:                1,\n  FLAG_PERSIST:               2,\n  SMF_SMP_FLAG_TOPIC:         4,\n  SMF_SMP_FLAG_RESPREQUIRED:  8,\n  SMF_SMP_FLAG_DELIVERALWAYS: 16,\n};\n\nmodule.exports.SMFSMPMessageTypeFlags = Enum.new(SMFSMPMessageTypeFlags);\n","const SMFLib = require('solclient-smf');\nconst { AdProtocolMessage, SMFParameter } = require('../message-objects');\nconst { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_INFO, LOG_ERROR } = require('solclient-log');\nconst { ReplayStartType } = require('solclient-replaystart');\n// const { SMFAdProtocolParam } = require('solclient-smf');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nfunction parseAdpAt(dataBuf, offset) {\n  if ((offset + 3) > dataBuf.length) {\n    //not enough data\n    LOG_DEBUG('Not enough data to read an ADP message.');\n    return false;\n  }\n  let pos = offset;\n  let onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgRFU = bits(onebyte, 6, 2);\n  const adpVersion = bits(onebyte, 0, 6);\n  let msgLength;\n  let msgType;\n  if (adpVersion < 3) {\n    const twobyte = dataBuf.readUInt16BE(pos);\n    pos += 2;\n    msgType = bits(twobyte, 12, 4);\n    // length in 32 bit words is in the lower 12 bits\n    msgLength = bits(twobyte, 0, 12);\n    // convert length to number of bytes\n    msgLength <<= 2;\n  } else if (adpVersion === 3) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    msgType = bits(onebyte, 0, 8);\n    msgLength = dataBuf.readUInt32BE(pos);\n    pos += 4;\n  } else {\n    LOG_ERROR('Found unsupported ADP Version', adpVersion);\n    return false; //unsupported type\n  }\n  //\n  // Verify that the ADP header length does not exceed the entire\n  // contents of the SMF message.\n  if (offset + msgLength > dataBuf.length) {\n    LOG_ERROR(`Invalid Asssured Control Protocol length=${msgLength\n      } exceeds remaining message buffer = ${dataBuf.length - offset}`);\n    return false; // invalid message format\n  }\n  const adpMsg = new AdProtocolMessage(msgType, adpVersion);\n  while (pos < (offset + msgLength)) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUH = bits(onebyte, 6, 2);\n    const paramType = bits(onebyte, 0, 6);\n\n    // Look for and skip padding bytes\n    if (paramType === 0) {\n      continue;\n    }\n    if (pos >= (offset + msgLength)) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    let paramLen = dataBuf.readUInt8(pos);\n    let paramValueLen;\n    pos++;\n    // If paramLen == 0, then this is an extended length format\n    // and there is a 4 byte length following the '0'\n    if (paramLen === 0) {\n      // need at least 5 more bytes in the buffer\n      if (pos + 5 > (offset + msgLength)) {\n        LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n        return false; // Assured Control parsing fail\n      }\n      paramLen = dataBuf.readUInt32BE(pos);\n      pos += 4;\n      paramValueLen = paramLen - 5;\n    } else {\n      paramValueLen = paramLen - 2;\n    }\n    if (paramLen <= 0) {\n      return false; // Assured Control parsing fail\n    }\n    //\n    // make sure there is enough buffer for paramValueLen\n    if (pos + paramValueLen > offset + msgLength) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType\n        } length =${paramValueLen} invalid at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    const smfParam = new SMFParameter(paramUH, paramType, null, dataBuf, pos, pos + paramValueLen);\n    adpMsg.addParameter(smfParam);\n    pos += paramValueLen;\n  }\n  return adpMsg;\n}\n\nfunction encAdp0Param(uh, paramtype) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(2)); // length\n  return data.join('');\n}\nfunction encAdp8Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(3)); // length\n  data.push(Convert.int8ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp16Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(4)); // length\n  data.push(Convert.int16ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp32Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(6)); // length\n  data.push(Convert.int32ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp64Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(10)); // length\n  data.push(Convert.int64ToStr(value));\n  return data.join('');\n}\n\n// map of replay start value types to parameter lengths\nconst RSValueLenMap = {};\nRSValueLenMap[ReplayStartType.BEGINNING] = 3; // 2 (TLV) + 1 (replay start type)\nRSValueLenMap[ReplayStartType.DATE] = 11; // 2 (TLV) + 1 (replay start type) + 8 (date value)\nRSValueLenMap[ReplayStartType.RGMID] = 19; //2 (TLV) + 1 (replay start type) + 16 (rgmid value)\n\n// special case for message replay value, a 1 byte type\n// followed by 0 bytes of begining, 8 bytes of date or 16 bytes of rgmid\n// Note replay Start type 0 is handled using encAdp8Param as there is no value\nfunction encAdpReplayParam(uh, paramtype, value) {\n  const data = [];\n  const valType = value.type;\n  const valObj = value.value;\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(RSValueLenMap[valType])); // length\n  data.push(Convert.int8ToStr(valType)); // replay start type, 1 == date, 2 == RGMID\n  switch (valType) {\n    case ReplayStartType.DATE:\n      // encode 64 bit date\n      data.push(Convert.int64ToStr(valObj)); // value is Long type\n      break;\n    case ReplayStartType.RGMID:\n      // encode 128 bit replication group message id\n      // expected value object of\n      // {\n      //   suid (Long),\n      //   messageId (Long),\n      // }\n      data.push(Convert.int64ToStr(valObj.suid)); // get Long suid\n      data.push(Convert.int64ToStr(valObj.messageId)); // get Long messageId\n      break;\n    case ReplayStartType.BEGINNING:\n      // in this case there is no value to encode\n      break;\n    default:\n      // should not happen until there are more replay start type but those\n      // should be handled in a case above\n      break;\n  }\n  return data.join('');\n}\n\nfunction encAdp64AckPairParam(uh, paramtype, min, max, outcome = undefined) {\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  const paramLength = (outcome == undefined || outcome === 0) ? 18 : 19;\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(paramLength)); // length\n  data.push(Convert.int64ToStr(min));\n  data.push(Convert.int64ToStr(max));\n  if(outcome != undefined && outcome > 0) { // skip for MessageOutcome.ACCEPTED\n    data.push(Convert.int8ToStr(outcome)); // write the settlement outcome\n  }\n  return data.join('');\n}\n\nfunction encAdpUTF8NTParam(uh, paramtype, value) {\n  // value is already UTF8 encoded and null terminated.\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n\n  let byte2 = 0;\n  if (value.length <= 253) {\n    byte2 = value.length + 2; // full length of param\n    data.push(Convert.int8ToStr(byte2));\n  } else {\n    byte2 = 0; // extended-length\n    data.push(Convert.int8ToStr(byte2));\n    data.push(Convert.int32ToStr(value.length + 5));\n  }\n  data.push(value);\n  return data.join('');\n}\n\nfunction encAdp(adpMsg) {\n  const paramspace = [];\n  const paramarray = adpMsg.getParameterArray();\n\n  let p;\n  for (p = 0; p < paramarray.length; p++) {\n    const param = paramarray[p];\n    // It's not a flat array, we have gaps!\n    if (param === undefined) {\n      continue;\n    }\n\n    switch (param.getType()) {\n      /*\n       * 8 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_DURABLE:\n      case SMFLib.SMFAdProtocolParam.ACCESSTYPE:\n      case SMFLib.SMFAdProtocolParam.FLOWTYPE:\n      case SMFLib.SMFAdProtocolParam.EP_RESPECTS_TTL:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_CTRL_MESSAGE_TYPE:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_STATE:\n      case SMFLib.SMFAdProtocolParam.ACTIVE_FLOW_INDICATION:\n      case SMFLib.SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY:\n      case SMFLib.SMFAdProtocolParam.MAX_REDELIVERY:\n        paramspace.push(encAdp8Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 16 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.EP_BEHAVIOUR:\n      case SMFLib.SMFAdProtocolParam.PARTITION_GROUP_ID:\n        paramspace.push(encAdp16Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 32 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.FLOWID:\n      case SMFLib.SMFAdProtocolParam.TRANSPORT_WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_ALLOTHER_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.EP_QUOTA:\n      case SMFLib.SMFAdProtocolParam.EP_MAX_MSGSIZE:\n      case SMFLib.SMFAdProtocolParam.GRANTED_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_ID:\n      case SMFLib.SMFAdProtocolParam.PUBLISHER_ID:\n        paramspace.push(encAdp32Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 64 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDSENT:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDACKED:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDRECEIVED:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_ID:\n      case SMFLib.SMFAdProtocolParam.ENDPOINT_ERROR_ID:\n        paramspace.push(encAdp64Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Replay start location can be either a 0 bit, 64 bit or 128 bit parameter.\n       */\n      case SMFLib.SMFAdProtocolParam.REPLAY_START_LOCATION:\n        {\n          const replayParamVal = param.getValue();\n          if (undefined === replayParamVal.value) {\n            // replay start location with 0 bit values, type only\n            paramspace.push(encAdp8Param(param.getUh(),\n                                         param.getType(),\n                                         replayParamVal.type));  // start location type 0\n          } else {\n            // replay start location with > 0 bit values, type + value\n            paramspace.push(encAdpReplayParam(param.getUh(), param.getType(), replayParamVal));\n          }\n          break;\n        }\n      /*\n       * application ack\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_ACK:\n        {\n          // Unpack this to multiple parameters\n          const ranges = param.getValue(); // this is the Map() of all settlement ACK/NACK ranges\n          const uh = param.getUh();\n          const type = param.getType();\n          // iterate through the Map of ranges per settlement outcome\n          ranges.forEach((settlementRanges, outcome) => {\n            for (let i = 0; i < settlementRanges.length; ++i) {\n              const range = settlementRanges[i];\n              paramspace.push(encAdp64AckPairParam(uh,\n                                                   type,\n                                                   range[0],\n                                                   range[1],\n                                                   outcome));\n            }\n          });\n          break;\n        }\n      /*\n       * string and other variable length parameters\n       */\n      case SMFLib.SMFAdProtocolParam.QUEUENAME:\n      case SMFLib.SMFAdProtocolParam.DTENAME:\n      case SMFLib.SMFAdProtocolParam.TOPICNAME:\n      case SMFLib.SMFAdProtocolParam.FLOWNAME:\n      case SMFLib.SMFAdProtocolParam.SELECTOR:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_NAME:\n        paramspace.push(encAdpUTF8NTParam(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Transaction Publisher Notify\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:\n        break;\n      /*\n       * Transaction Publisher Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:\n        break;\n      /*\n       * Transaction Subscriber Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:\n        break;\n      /*\n       * No Local Parameter has no data\n       * Cut Through Parameter has no data\n       */\n      case SMFLib.SMFAdProtocolParam.NOLOCAL:\n      case SMFLib.SMFAdProtocolParam.CUT_THROUGH:\n        paramspace.push(encAdp0Param(param.getUh(), param.getType()));\n        break;\n      /*\n       * Application Publisher Acknowledge\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_PUB_ACK:\n        break;\n      default:\n        LOG_INFO('Unrecognized ADProtocol Parameter in Message');\n        break;\n    }\n  }\n\n  const paramdata = paramspace.join('');\n\n  const data = [];\n  if (adpMsg.version === 2) {\n    let threebytes = 0;\n    threebytes = setBits(threebytes, 0, 22, 2); // RFU\n    threebytes = setBits(threebytes, adpMsg.version, 16, 6); // RFU\n    threebytes = setBits(threebytes, adpMsg.msgType, 12, 4); // msgtype\n    // length in 32 bit words means the real length must always be a multiple of 4, so pad as\n    // necessary\n\n    // 4 - how many bytes passed a 4 byte boundary\n    let padBytes = 4 - ((3 + paramdata.length) & 0x3);\n    // calculate the total length, 3 bytes header + params, in 32 bit words\n    const length = (3 + paramdata.length + padBytes) >> 2;\n    threebytes = setBits(threebytes, length, 0, 12);\n    data.push(int24ToStr(threebytes)); // first 3B (RFU, version, msgtype, length)\n    data.push(paramdata);\n\n    if (padBytes === 4) padBytes = 0; // don't add 4 pad bytes\n    while (padBytes > 0) {\n      data.push(int8ToStr(0));\n      padBytes--;\n    }\n  } else if (adpMsg.version === 3) {\n    let twobytes = 0;\n    twobytes = setBits(twobytes, 0, 14, 2); // RFU\n    twobytes = setBits(twobytes, adpMsg.version, 8, 6); // version\n    twobytes = setBits(twobytes, adpMsg.msgType, 0, 8); // msgtype\n    data.push(int16ToStr(twobytes)); // first 2B (RFU, version, msgtype)\n    data.push(int32ToStr(6 + paramdata.length)); //length: 6B header + params\n    data.push(paramdata);\n  } else {\n    LOG_ERROR(`Invalid Version ${adpMsg.version} found while encoding`);\n  }\n\n  return data.join('');\n}\n\nmodule.exports.parseAdpAt = parseAdpAt;\nmodule.exports.encAdp = encAdp;\n","const { Enum } = require('solclient-eskit');\nconst { LOG_TRACE,\n        LOG_DEBUG } = require('solclient-log');\nconst { Long } = require('solclient-convert');\n\nconst TransportAckResult = Enum.new({\n  OK:           0,\n  DUPLICATE:    1,\n  OUT_OF_ORDER: 2,\n});\n\nclass TransportAcks {\n  constructor(id = 0) {\n    const base = typeof id === 'number' ? Long.fromNumber(id, true) : Long.fromValue(id);\n    this.lastAcked = base;\n    this._acksPending = 0;\n  }\n\n  reset() {\n    this._acksPending = 0;\n    this.lastAcked = Long.ZERO;\n  }\n\n  tryReceive(messageID, prevMessageID) {\n    if (this._lastReceived.lt(prevMessageID)) {\n      LOG_DEBUG(`Rejecting out of order message: ${prevMessageID} (last received: ${this._lastReceived})`);\n      return TransportAckResult.OUT_OF_ORDER;\n    }\n    if (this._lastReceived.gte(messageID)) {\n      LOG_DEBUG(`Rejecting duplicate message: ${messageID} (last received: ${this._lastReceived})`);\n      // duplicate messages indicate the router is retransmitting because it expects a transport ack\n      this._acksPending++;\n      return TransportAckResult.DUPLICATE;\n    }\n    LOG_TRACE(`Accepting message: ${messageID}`);\n    this._lastReceived = messageID;\n    this._acksPending++;\n    return TransportAckResult.OK;\n  }\n\n  setAcked() {\n    this._lastAcked = Long.fromValue(this._lastReceived);\n    this._acksPending = 0;\n  }\n\n  get acksPending() {\n    return this._acksPending;\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n\n  /**\n   * Resets the beginning of the ack sequence to the given value.\n   * @param {Long} value The value to set as last acknowledged ID.\n   */\n  set lastAcked(value) {\n    LOG_TRACE('Setting last acked:', value.toString());\n    Object.assign(this, {\n      _lastAcked:    Long.fromValue(value),\n      _lastReceived: Long.fromValue(value),\n    });\n  }\n\n  get lastReceived() {\n    return this._lastReceived;\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports = {\n  TransportAcks,\n  TransportAckResult,\n};\n","const DestinationUtilLib = require('./destination-util');\nconst { assert } = require('solclient-eskit');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Queue, which is a type of {@link solace.Destination}.\n *\n * Instances should be acquired through\n * {@link solace.SolclientFactory.createDurableQueueDestination} or by calling\n * {@link solace.MessageConsumer#getDestination} on a consumer bound to a temporary queue.\n *\n * @extends solace.Destination\n * @memberof solace\n * @private\n */\nclass Queue extends Destination {\n\n  /**\n   * @param {Object} spec The spec for this instance\n   * @private\n   */\n  constructor(spec) {\n    assert(spec.name, 'Queue name not supplied');\n    assert(spec.type === DestinationType.QUEUE\n           || spec.type === DestinationType.TEMPORARY_QUEUE, 'Queue spec.type is invalid');\n    assert(spec.bytes, 'Queue spec missing bytes');\n    assert(spec.offset !== undefined, 'Queue spec missing offset');\n    super(spec);\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  [util_inspect_custom]() {\n    return `[Queue ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} queueName The name of the queue (no prefix)\n   * @returns {Queue} a Queue\n   * @private\n   */\n  static createFromLocalName(queueName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.QUEUE, queueName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Queue({\n      name:             queueName,\n      type:             DestinationType.QUEUE,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      /* probably don't need this until queues get subscription attributes */\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n\n}\n\nmodule.exports.Queue = Queue;\n","const { Duplex } = require('stream');\nconst { LOG_WARN, LOG_TRACE } = require('solclient-log');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\n\n/**\n * This is a Duplex Stream encapsulating a Transport.\n * It transparently passes reads, writes, and events until \"shunted\".\n * After that, nothing gets through.\n *\n * The intermediate \"dontEnd\" state allows a TLS shutdown to run its course\n * without closing the underlying transport in the end.\n *\n * Intended lifecycle:\n *\n * 1, create underlying transport\n * 2, create ShuntableTransport with underlying transport\n * 3, pass shuntableTransport to tls.connect\n * 4, connect underlying transport\n *\n * <traffic may flow until TLS shutdown desired>\n *\n * 1, shuntableTransport.dontend();\n * 2, tlsSocket.end();\n * 3, on 'closed' event: take and start using shuntableSocket.socket.\n *\n * For an explanation of _read and _write see\n * https://nodejs.org/api/stream.html#stream_implementing_a_duplex_stream\n *\n * @private\n */\n\nclass ShuntableTransport extends Duplex {\n  constructor(options) {\n    super(options);\n    this._shunted = false;\n    this._dontEnd = false;\n    this._underlyingTransport = options.underlyingTransport;\n    // Buffers data-callback pairs until connected or underlying transport decongests.\n    // Should never have more than 1 item as long as the stream contract is upheld.\n    this._interimBuffer = [];\n    this._transportDrained = true;\n    this._connected = false;\n  }\n\n  shunt() {\n    this._shunted = true;\n  }\n\n  dontEnd() {\n    this._dontEnd = true;\n  }\n\n  _write(chunk, encoding, callback) {\n    if (!this._shunted) {\n      if (!this._transportDrained || !this._connected) {\n        this._interimBuffer.push([chunk, callback]);\n        return;\n      }\n      const rc = this._underlyingTransport.send(chunk);\n      switch (rc) {\n        case TransportReturnCode.OK:\n          this._transportDrained = true;\n          callback();\n          break;\n        case TransportReturnCode.NO_SPACE:\n          this._transportDrained = false;\n          this._interimBuffer.push([chunk, callback]);\n          break;\n        case TransportReturnCode.INVALID_STATE_FOR_OPERATION:\n          this.emit('error',\n                    'Underlying transport in invalid state for send.');\n          break;\n        default:\n          LOG_WARN(`Unknown return code from undelying transport ${rc}`);\n      }\n    }\n  }\n\n  //_read(size) {\n  _read() {\n    if (!this._shunted) {\n      this._underlyingTransport.unpause();\n    }\n  }\n\n  rxDataBuffer(data) {\n    if (!this._shunted) {\n      const noPause = this.push(data);\n      if (!noPause) {\n        this._underlyingTransport.pause();\n      }\n    }\n  }\n\n  // underlying transport event dispatch\n  eventCB(transportEvent) {\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        this.onConnect();\n        break;\n      case TransportSessionEventCode.SEND_ERROR:\n        this.onError(transportEvent);\n        break;\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.onClose(transportEvent);\n        break;\n      case TransportSessionEventCode.CAN_ACCEPT_DATA:\n        this.onDrain();\n        break;\n      default:\n        LOG_WARN(`TLS layer got unkown event code ${transportEvent.getTransportEventCode}`);\n    }\n  }\n  onError(transportEvent) {\n    if (!this._shunted) {\n      this.emit('error', transportEvent.getInfoStr());\n    }\n  }\n\n  onClose(transportEvent) {\n    this._connected = false;\n    if (!this._shunted) {\n      LOG_TRACE(`ShuntableTransport emits close for transport event ${transportEvent}`);\n      this.emit('close');\n    }\n  }\n\n  onDrain() {\n    if (!this._shunted) {\n      this._transportDrained = true;\n      if (this._interimBuffer && this._interimBuffer.length > 0) {\n        const resendBuffer = this._interimBuffer;\n        this._interimBuffer = [];\n        resendBuffer.forEach(([data, callback]) => this._write(data, null, callback));\n      }\n      if (!this._transportDrained) {\n        return;\n      }\n      this.emit('drain');\n    }\n  }\n\n  onConnect() {\n    this._connected = true;\n    if (!this._shunted) {\n      this.onDrain(); // flush interimbuffer.\n      this.emit('connect');\n    }\n  }\n\n  end(chunk, encoding, callback) {\n    if (!this._shunted && !this._dontEnd) {\n      if (typeof chunk === 'function') { // sometimes TLS calls end() wrong...\n        this._underlyingTransport.destroy('End from TLS');\n        chunk();\n      } else {\n        const cb = () => { this._underlyingTransport.destroy('End from TLS'); callback(); };\n        this._write(chunk, encoding, cb);\n      }\n    } else if (!this._shunted) {\n      if (typeof chunk !== 'function') { // sometimes TLS calls end() wrong...\n        this._write(chunk, encoding, callback);\n      } else {\n        chunk();\n      }\n    }\n  }\n\n  destroy(error) {\n    if (!this._shunted && !this._dontEnd) {\n      this._underlyingTransport.destroy(error);\n    }\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (!this._shunted && !this._dontEnd && this._underlyingTransport) {\n      return this._underlyingTransport.forceFailure(msg);\n    }\n  }\n\n  setNoDelay(arg) {\n    if (!this.shunted) {\n      LOG_TRACE(`Ignoring setNoDelay(${arg})`);\n    }\n  }\n}\n\nmodule.exports.ShuntableTransport = ShuntableTransport;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\nconst { Iterator } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\n\nconst { makeIterator } = Iterator;\n\n/**\n * React to an event.\n * @callback StateContext.reactionCallback\n * @param {FsmEvent} event The event to react to.\n * @returns {StateContext.ReactionResult} One of the many possible\n *      reaction results that can be created by one of the following methods:\n *          - {@link StateContext#transitionTo}\n *          - {@link FsmState#internalTransition}\n *          - {@link FsmState#externalTransitionTo}\n *          - {@link FsmState#terminate}\n *          - {@link FsmState#eventUnhandled}\n */\n\n\n/**\n * @classdesc\n * This abstract class can host one or more states.  Concrete examples would\n * be a state, which can host one or more inner states, or a state machine,\n * which would typically have multiple top-level states.  It also serves as a\n * context in which transitions can occur.\n * @memberof solace\n * @private\n */\nclass StateContext extends FsmObject {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.\n   * @param {String} spec.name The name of the context.\n   */\n  constructor(spec) {\n    super(spec);\n    this.impl = this.impl || {};\n    this.impl.logPadding = '';\n  }\n\n  /**\n   * Gets the state-machine that hosts this state context.\n   * @returns {StateMachine} The FSM that hosts this context.\n   */\n  getStateMachine() {\n    return this.impl.ancestorList[0];\n  }\n\n  /**\n   * Sets the initial reaction for the state context.\n   * @param {StateContext.reactionCallback} func The reaction callback to be\n   *      called after the state is entered as the deepest state of a\n   *      transition, or for a state machine when it is started.\n   * @returns {StateContext} The object this function was called on\n   */\n  initial(func) {\n    if (this.impl.initialReaction) {\n      this.log(`Replacing ${this} initialReaction ${this.impl.initialReaction} with ${func}`);\n    }\n    this.impl.initialReaction = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is used for 'local' transitions.  However, we extend the formal\n   * definition of local transitions here.  The formal definition is that\n   * the dest state is within the src state, and the src state is not\n   * exited.  We extend this definition to include states where the src\n   * state is within dest. In this case, a local transition means that dest\n   * will not be exited and entered and the transition will occur in the\n   * context of dest before executing dest's initial transition.  Note that\n   * this definition of local transition matches that of\n   * {@link https://en.wikipedia.org/wiki/UML_state_machine#Local_versus_external_transitions|Wikipedia}.\n   * But it does not match figure 14.34 or section 14.5.12 of the\n   * {@link http://www.omg.org/spec/UML/2.5/PDF/|Formal UML Specification v2.5}.\n   * Nevertheless, it does seem helpful to be able to express a transition\n   * that does leave the destination state vs. a transition that does not.\n   *\n   * If neither the source nor the dest states are within the other, the\n   * behaviour is the same as an external transition -- src is always exited\n   * and dest is always entered.\n   *\n   * This is included in the StateContext instead of within the State itself\n   * since this can be used by the initial reaction for a state machine.\n   *\n   * @param {State} state The state to transition to.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as\n   *      part of the transition, if desired.\n   * @returns {StateContext.ReactionResult} the result object used\n   *      internally for further processing of the event.\n   */\n  transitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The reaction result for the termination.\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n  /**\n   * A callback to execute an action as part of a transition in the\n   * appropriate context.\n   *\n   * To be used only by the FSM infrastructure or unit tests.\n   *\n   * @callback StateContext.actionCallback\n   * @param {StateContext} context The context within which the action is\n   *      executed.  When the active state changes, this is done after\n   *      states are exited and before states are entered.  It is the\n   *      deepest context that contains the last exited and first entered\n   *      state as part of the transition.\n   * @param {FsmEvent} event The event that triggered the transition.\n   * @returns {Array.<StateContext>} The context's ancestor list.\n   * @protected\n   */\n  getAncestorList() {\n    return this.impl.ancestorList;\n  }\n\n  /**\n   * Perform a debug log with appropriate padding for the context.  The padding\n   * helps to visualize the level within the hierarchical state machine.\n   * @protected\n   */\n  log(...args) {\n    LOG_TRACE(this.impl.logPadding, ...args);\n  }\n\n  /**\n   * Called when the initial transition for the context needs to be taken.\n   * @param {FsmEvent} [event] The event causing this transition; undefined for the\n   *      FSM's initial transition.\n   * @returns {StateContext.ReactionResult} the result to be processed by\n   *      the FSM infrastructure.\n   * @protected\n   */\n  onInitial(event) {\n    let result;\n\n    if (this.impl.initialReaction) {\n      this.log(`Initial: for ${this}`);\n      result = this.impl.initialReaction(event);\n      if (result.external) {\n        throw new Error(`Initial reaction for ${this} returned external transitions`);\n      }\n      return result;\n    }\n\n    if (!(this instanceof (StateLib.State))) {\n      throw new Error(`Missing initial reaction for ${this}`);\n    }\n\n    // If there is no initial reaction, then we just enter this state.\n    // Technically this is a malformed FSM if there are inner states and\n    // this state has no initial reaction.  We won't police this since it\n    // isn't easily done with the data we are otherwise maintaining (we only\n    // know about parent states, not children), and such a problem would be\n    // easily caught by testing of the FSM.\n    return this.transitionTo(this);\n  }\n\n  /**\n   * After a reaction function has been called, this function processes the\n   * returned {@link StateContext.ReactionResult}.\n   * @param {StateContext.ReactionResult} result The result of a reaction.\n   * @param {FsmEvent|undefined} e The event that triggered the reaction;\n   *      undefined if this was due to the initial reaction.\n   * @returns {State} The active state of the FSM after the ReactionResult was\n   *      processed.\n   * @protected\n   */\n  processReactionResult(result, e) {\n    let curContext = this;\n\n    if (!result.destState) {\n      return this;\n    }\n\n    const destStateIter = this.lowestCommonAncestor(result);\n\n    // exit states until we get to the LCA\n    while (curContext !== destStateIter.deref()) {\n      curContext.onExit();\n      curContext = curContext.getParent();\n    }\n\n    // perform the transition\n    if (result.action) {\n      result.action(curContext, e);\n    }\n\n    curContext.log(`Action: transition to ${result.destState} in context ${curContext}`);\n\n    // Start by incrementing the iterator so we don't enter the\n    // context, which we are already in.  Then enter remaining states\n    // in the list.\n    for (destStateIter.incr(); !destStateIter.end(); destStateIter.incr()) {\n      curContext = destStateIter.deref();\n      curContext.onEntry();\n    }\n\n    // execute the initial transition in the destState.\n    const destInitial = curContext.onInitial(e);\n    if (destInitial.destState !== curContext) {\n      return curContext.processReactionResult(destInitial, e);\n    }\n    return curContext;\n  }\n\n  /**\n   * For a given reactionResult, this function returns an iterator to the\n   * context in which to process a transition from 'self' to\n   * 'reactionResult.destState'.  Advancing the iterator provides the states\n   * that need to be entered after the transition is processed.\n   * @param {ReactionResult} reactionResult An object created with one of the\n   *                                        reaction result methods defined in\n   *                                        either a state context or a state.\n   * @returns {Iterator} The iterator where the first element is the\n   * context in which to execute the transaction, and subsequent elements are\n   * to be entered after executing the transaction.\n   * @protected\n   */\n  lowestCommonAncestor(reactionResult) {\n    const ancestorList = this.impl.ancestorList;\n    const destAncestorList = reactionResult.destState.getAncestorList();\n    let i;\n\n    // Make sure the states belong to the same state machine\n    if (ancestorList[0] !== destAncestorList[0]) {\n      throw new Error(`No common ancestor between (${this} in ${ancestorList[0]}) and (${reactionResult.destState} in ${destAncestorList[0]})`);\n    }\n\n    // Optimize case where the two states are the same.  This would be the\n    // case for internal and self-transitions.\n    if (this === reactionResult.destState) {\n      i = ancestorList.length;\n      if (reactionResult.external) {\n        // self-transition, must exit then re-enter state.  Therefore,\n        // the context is our parent.\n        --i;\n      }\n    } else {\n      for (i = 1; i < ancestorList.length; ++i) {\n        if (ancestorList[i] !== destAncestorList[i]) {\n          break;\n        }\n      }\n\n      // Check if one state is within the other state.\n      if ((i === ancestorList.length) || (i === destAncestorList.length)) {\n        // One state within the other. Check whether this is a local\n        // or an external transition.\n        if (reactionResult.external) {\n          --i;    // Need to exit/re-enter the outermost state\n        }\n      }\n    }\n\n    // Here 'i' points to the first state to be entered after executing the\n    // transition.  We make the iterator with 'i-1' so that the first element\n    // is the context within which to execute the transition.\n    return makeIterator(destAncestorList, i - 1);\n  }\n\n  setLogPadding(padding) {\n    this.impl.logPadding = padding;\n  }\n}\n\n/**\n * @classdesc\n * A ReactionResult is suitable as a return value from a reaction function\n * or an initial reaction.\n * @private\n */\nStateContext.ReactionResult = class {\n  /**\n   * The ReactionResult constructor should never be invoked by users of the\n   * infrastructure. It should only be used by various public methods of\n   * StateContext or State, which return a ReactionResult.\n   *\n   * @param {Object} spec Defined according to members described below for\n   *      events that are handled by the reaction function; undefined if the\n   *      event was not handled by the reaction function.  For initial\n   *      reactions, spec must NOT be undefined.\n   * @param {StateContext} spec.caller The state context from which\n   *      {StateContext.ReactionResult} is being constructed.\n   * @param {State} spec.destState The destination state to\n   *      transition to.\n   * @param {StateContext.actionCallback} [spec.action] The function to call in\n   *      the transition context after the appropriate states have been\n   *      exited, if desired; undefined if no action is to be performed as a\n   *      result of the transition.\n   * @param {Boolean} spec.external True if the transition is an external\n   *      transition; false or undefined otherwise.\n   * @constructor\n   */\n  constructor(spec) {\n    if (!spec || !spec.caller || !(spec.caller instanceof StateContext)) {\n      throw new Error('spec.caller is required to be a StateContext');\n    }\n\n    if (!spec.caller.getStateMachine().isRunning()) {\n      throw new Error('ReactionResult objects can only be created while processing events');\n    }\n    if (spec.destState) {\n      if (!(spec.destState instanceof StateLib.State)) {\n        throw new Error('destState must be a State object');\n      }\n      if (spec.action && (typeof (spec.action) !== 'function')) {\n        throw new Error('action must be a function');\n      }\n      this.destState = spec.destState;\n      this.action = spec.action;\n      this.external = spec.external;\n    }\n  }\n};\n\nmodule.exports.StateContext = StateContext;\n","const {\n  LOG_DEBUG,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS = 4000;\n\n/**\n * Base class for web related transports\n * @extends TransportBase\n * @private\n */\nclass WebTransportSessionBase extends TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The function to call on events\n   * @param {SMFClient} client The function to call on data received.\n   * @param {Object} props Additional object properties for this transport session\n   */\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @type {Number}\n     */\n    this._connectTimeout = props.transportDowngradeTimeoutInMsecs;\n\n    /**\n     * @type {?number}\n     */\n    this._connectTimer = null;\n\n    /**\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /**\n     * Maximum payload chunk size in web transport\n     * @type {Number}\n     */\n    this._maxPayloadBytes = props.maxWebPayload;\n\n    /**\n     * Queue to hold data to be sent to the Solace Message Router when we get back a\n     * data token\n     * @type {array}\n     */\n    this._queuedData = [];\n\n    /**\n     * Number of bytes of queued data\n     * @type {Number}\n     */\n    this._queuedDataSize = 0;\n\n    /**\n     * Remember if we have to send an event when there is room in the queue\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /**\n     * @type {TransportSessionState}\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * Any connection error that needs to be propagated up\n     * @type {?Error}\n     */\n    this._connError = null;\n  }\n\n  // override\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  createConnectTimeout() {\n    if (this._connectTimeout > 0) {\n      this._connectTimer = setTimeout(() => {\n        this.connectTimerExpiry();\n      }, this._connectTimeout);\n    }\n  }\n\n  cancelConnectTimeout() {\n    if (this._connectTimer) {\n      clearTimeout(this._connectTimer);\n      this._connectTimer = null;\n    }\n  }\n\n  /* override me */\n  connectTimerExpiry() { // eslint-disable-line class-methods-use-this\n    return undefined;\n  }\n\n  allowEnqueue(datalen) {\n      // Bug 32006: if there's no queued data, we always accept at least one message, even if it\n      // exceeds the sendBufferMaxSize.\n      // If we reject enqueueing something too large because we already have queued data,\n      // that guarantees when the data is flushed we will emit the alertOnDequeue event.\n    return (this._queuedDataSize === 0 ||\n            ((datalen + this._queuedDataSize) <= this._sendBufferMaxSize));\n  }\n\n  enqueueFailNoSpace() {\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /* override me */\n  flush(callback) { // eslint-disable-line class-methods-use-this\n    callback();\n  }\n\n  getQueuedDataToSend() {\n    // Track messages dequeued.\n    let data = '';\n\n    // Start by trying to fill a complete payload.\n    let bytesAllowed = this._maxPayloadBytes;\n    LOG_TRACE(`getQueuedDataToSend: bytesAllowed=${bytesAllowed}, bufferedAmount=${this.getBufferedAmount ? this.getBufferedAmount() : 'undefined'}`);\n    if (this.getBufferedAmount) {\n      bytesAllowed = this._maxPayloadBytes - this.getBufferedAmount();\n      if (bytesAllowed <= 0) {\n        LOG_DEBUG(`$$ bytesAllowed=${bytesAllowed}, maxPayloadBytes=${this._maxPayloadBytes\n                  }, bufferedAmount=${this.getBufferedAmount()}`);\n        if (BUILD_ENV.TARGET_BROWSER &&\n            (this._bufferedAmountQueryIntervalInMsecs *\n              this._bufferedAmountQueryIntervalDelayMultiplier <=\n              MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS)) {\n          this._bufferedAmountQueryIntervalDelayMultiplier *= 2;\n        }\n        return data;\n      }\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n    }\n\n    if (this._queuedDataSize > bytesAllowed) {\n      let payloadSize = bytesAllowed;\n      // Slow path: dequeue and append until we fill the payload.\n      while (payloadSize && this._queuedDataSize) {\n        // Is this element larger than the payload?\n        const elem = this._queuedData[0];\n        const elemLength = elem.length;\n        if (elemLength > payloadSize) {\n          // This element is larger than the payload.\n          data += elem.substr(0, payloadSize);\n          this._queuedData[0] = elem.substr(payloadSize);\n\n          // The rest of the payload space was consumed.\n          this._queuedDataSize -= payloadSize;\n          payloadSize = 0;\n        } else {\n          data += this._queuedData.shift();\n          payloadSize -= elemLength;\n          this._queuedDataSize -= elemLength;\n          this._clientstats.msgWritten++;\n        }\n      }\n    } else {\n      // Shortcut: use the whole buffer, increase the message sent count by the length of the size\n      // queue, and reset the buffer.\n      data = this._queuedData.join('');\n      this._clientstats.msgWritten += this._queuedData.length;\n\n      this._queuedData = [];\n      this._queuedDataSize = 0;\n    }\n\n    LOG_DEBUG(`Sending ${data.length} bytes from queued data`);\n    return data;\n  }\n}\n\nmodule.exports.WebTransportSessionBase = WebTransportSessionBase;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * WebSocket transport\n * @memberof solace\n * @private\n */\nclass StateWebSocketBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.WS_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.webSocket();\n  }\n}\n\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\n","const { Check } = require('./check');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst NO_OBJ = {}; // anonymous object\n\nfunction objectValues(object) {\n  return Object.keys(object).map(k => object[k]);\n}\n\nfunction subcodeSummary(subcode, expected = null, got = NO_OBJ) {\n  const expectedStr = expected ? `; expected: ${expected}` : '';\n  const gotStr = got !== NO_OBJ ? `; got: ${got}` : '';\n  switch (subcode) {\n    case ErrorSubcode.PARAMETER_INVALID_TYPE:\n      return `Parameter type was invalid${expectedStr}${gotStr}`;\n    default:\n      return ErrorSubcode.nameOf(subcode).toLowerCase().replace(/_/, ' ') + expectedStr;\n  }\n}\n\nfunction validateError(name, subcode, message) {\n  throw new OperationError(`Parameter ${name} failed validation`, subcode, message);\n}\n\nfunction validate(name, subcode, message, check, value, ...validatorArgs) {\n  if (!check(value, ...validatorArgs)) {\n    return validateError(name, subcode, message);\n  }\n  return value;\n}\n\nconst typename = x => x && x.constructor && x.constructor.name || typeof x;\n\n/**\n * The Check object is a powerful validation API but it is partially built at runtime by composing\n * functions, and it requires significant boilerplate for parameter validation.\n *\n * The Parameter API expresses concrete validations using the Check API, returning values on success\n * and throwing the appropriate SDK exception on failure. It would be tempting to try to\n * automatically build a Parameter method for every Check method, but this would make Parameter\n * difficult to understand and use.\n *\n * @private\n */\nconst Parameter = {};\n\nParameter.isArray = function isArray(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'array', value)) {\n  return validate(name, subcode, message, Check.isArray, value);\n};\n\nParameter.isBoolean =\nfunction isBoolean(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean', value)) {\n  return validate(name, subcode, message, Check.boolean, value);\n};\n\nParameter.isBooleanOrNothing =\nfunction isBooleanOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean or nothing', value)) {\n  return validate(name, subcode, message, Check.boolean.orNothing, value);\n};\n\nParameter.isEnumMember =\nfunction isEnumMember(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOfEnum);\n};\n\nParameter.isEnumMemberOrNothing =\nfunction isEnumMemberOrNothing(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member.orNothing, value, memberOfEnum);\n};\n\nParameter.isFunction =\nfunction isFunction(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function', value)) {\n  return validate(name, subcode, message, Check.function, value);\n};\n\nParameter.isFunctionOrNothing =\nfunction isFunctionOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function or nothing', value)) {\n  return validate(name, subcode, message, Check.function.orNothing, value);\n};\n\nParameter.isInstanceOf =\nfunction isInstanceOf(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE,\n                      message = subcodeSummary(subcode, instanceOf.name, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNothing =\nfunction isInstanceOfOrNothing(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or nothing`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNothing, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNull =\nfunction isInstanceOfOrNull(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or null`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNull, value, instanceOf);\n};\n\nParameter.isInstanceOfOrUndefined =\nfunction isInstanceOfOrUndefined(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or undefined`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orUndefined, value, instanceOf);\n};\n\nParameter.isMember =\nfunction isMember(name, value, memberOf, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of ${memberOf.name}.[${objectValues(memberOf).join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOf);\n};\n\nParameter.isNumber =\nfunction isNumber(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number', value)) {\n  return validate(name, subcode, message, Check.number, value);\n};\n\nParameter.isNumberOrNothing =\nfunction isNumberOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or nothing', value)) {\n  return validate(name, subcode, message, Check.number.orNothing, value);\n};\n\nParameter.isNumberOrNull =\nfunction isNumberOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or null', value)) {\n  return validate(name, subcode, message, Check.number.orNull, value);\n};\n\nParameter.isRangeCompare =\nfunction isRangeCompare(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand}`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare, value, operator, operand);\n};\n\nParameter.isRangeCompareOrNothing = function isRangeCompareOrNothing(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand} or nothing`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare.orNothing, value, operator, operand);\n};\n\nParameter.isStringOrNull =\nfunction isStringOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or null', value)) {\n  return validate(name, subcode, message, Check.string.orNull, value);\n};\n\n\nParameter.isString =\nfunction isString(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string', value)) {\n  return validate(name, subcode, message, Check.string, value);\n};\n\nParameter.isStringOrNothing =\nfunction isStringOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or nothing', value)) {\n  return validate(name, subcode, message, Check.string.orNothing, value);\n};\n\nParameter.isValue =\nfunction isValue(name, value, expected, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `must be ${value}`)) {\n  return validate(name, subcode, message, Check.equal, value, expected);\n};\n\n\nmodule.exports.Parameter = Parameter;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\nconst { Queue } = require('./queue');\nconst { Topic } = require('./topic');\n\nconst QUEUE_PREFIX = '#P2P/QUE/';\nconst QUEUE_PREFIX_LEN = QUEUE_PREFIX.length;\nconst TEMPORARY_QUEUE_PREFIX = '#P2P/QTMP/';\n\nfunction createDestinationFromName(networkTopicName, networkTopicBytes = undefined) {\n  if (networkTopicName === null || networkTopicName.length === 0) {\n    return null;\n  }\n\n  const spec = {\n    name:  networkTopicName,\n    bytes: networkTopicBytes || DestinationUtil.encodeBytes(networkTopicName),\n  };\n  if (networkTopicName[0] === '#') {\n    if (networkTopicName.startsWith(QUEUE_PREFIX)) {\n      const offset = QUEUE_PREFIX_LEN;\n      spec.name = networkTopicName.substr(offset);\n      spec.type = DestinationType.QUEUE;\n      spec.offset = offset;\n      return new Queue(spec);\n    } else if (networkTopicName.startsWith(TEMPORARY_QUEUE_PREFIX)) {\n      spec.name = networkTopicName;\n      spec.type = DestinationType.TEMPORARY_QUEUE;\n      spec.offset = 0;\n      return new Queue(spec);\n    }\n  }\n  return new Topic(spec);\n}\n\nfunction createDestinationFromBytes(networkTopicBytes) {\n  if (networkTopicBytes === null || networkTopicBytes.length === 0) {\n    return null;\n  }\n\n  const networkTopicName = DestinationUtil.decodeBytes(networkTopicBytes);\n  return createDestinationFromName(networkTopicName, networkTopicBytes);\n}\n\nconst DestinationFromNetwork = {\n  createDestinationFromBytes,\n  createDestinationFromName,\n};\n\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFTransportSessionMessageType = {\n  CREATE:            0,\n  CREATE_RESP:       1,\n  DESTROY:           2,\n  DESTROY_RESP:      3,\n  DATA:              4,\n  DATA_TOKEN:        5,\n  DATA_STREAM_TOKEN: 6,\n};\n\nmodule.exports.SMFTransportSessionMessageType = Enum.new(SMFTransportSessionMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionOperation = {\n  CONNECT:         'CONNECT',\n  DISCONNECT:      'DISCONNECT',\n  CTRL:            'CTRL',\n  SEND:            'SEND',\n  QUERY_OPERATION: 'QUERY_OPERATION',\n};\n\nmodule.exports.SessionOperation = Enum.new(SessionOperation);\n","module.exports = require(\"utf-8-validate\");","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Consumer FSM\n * @enum {string}\n ********************************************************************************/\nconst ConsumerFSMEventNames = {\n  SESSION_UP:                 'SESSION_UP',\n  SESSION_UP_NO_AD:           'SESSION_UP_NO_AD',\n  SESSION_DOWN:               'SESSION_DOWN',\n  SESSION_DISCONNECT:         'SESSION_DISCONNECT',\n  FLOW_FAILED:                'FLOW_FAILED',\n  FLOW_UP:                    'FLOW_UP',\n  FLOW_ACTIVE_IND:            'FLOW_ACTIVE_IND',\n  FLOW_CLOSE:                 'FLOW_CLOSE',\n  FLOW_OPEN:                  'FLOW_OPEN',\n  FLOW_UNBOUND:               'FLOW_UNBOUND',\n  ACK:                        'ACK',\n  ACK_TIMEOUT:                'ACK_TIMEOUT',\n  BIND_TIMEOUT:               'BIND_TIMEOUT',\n  CREATE_TIMEOUT:             'CREATE_TIMEOUT',\n  UNBIND_TIMEOUT:             'UNBIND_TIMEOUT',\n  CAN_SEND:                   'CAN_SEND',\n  TRANSPORT_ERROR:            'TRANSPORT_ERROR',\n  DISPOSE:                    'DISPOSE',\n  VIRTUALROUTER_NAME_CHANGED: 'VIRTUALROUTER_NAME_CHANGED',\n  RECONNECT_INTERVAL_TIMEOUT: 'RECONNECT_INTERVAL_TIMEOUT',\n  BIND_RESPONSE:              'BIND_RESPONSE',\n  CREATE_FAILED:              'CREATE_FAILED',\n  CREATE_SUCCESS:             'CREATE_SUCCESS',\n};\n\nmodule.exports.ConsumerFSMEventNames = Enum.new(ConsumerFSMEventNames);\n","/* eslint-disable class-methods-use-this */ // declare prototype stubs\n\n/**\n * A logging callback. It must accept any valid number of arguments of any type. It must not throw.\n *\n * @callback\n * @function\n * @name solace.LogImpl.loggingCallback\n * @param {...*} args The arguments to log. Typically this is a mixture of strings and\n *  objects to be inspected. A simple implementation might call .toString() on each\n *  argument.\n */\n\n/**\n * @classdesc\n * A class that provides a binding to a log implementation. Applications that need to\n * control API logging must construct a LogImpl\n * instance, a log implementation that can be set in\n * {@link solace.SolclientFactoryProperties#logger}.\n * The binding will call the supplied log methods with the\n * parameters supplied to each.\n * @memberof solace\n */\nclass LogImpl {\n  /**\n   * @param {solace.LogImpl.loggingCallback} trace Callback for {@link solace.LogLevel.TRACE} logs.\n   * @param {solace.LogImpl.loggingCallback} debug Callback for {@link solace.LogLevel.DEBUG} logs.\n   * @param {solace.LogImpl.loggingCallback} info Callback for {@link solace.LogLevel.INFO} logs.\n   * @param {solace.LogImpl.loggingCallback} warn Callback for {@link solace.LogLevel.WARN} logs.\n   * @param {solace.LogImpl.loggingCallback} error Callback for {@link solace.LogLevel.ERROR} logs.\n   * @param {solace.LogImpl.loggingCallback} fatal Callback for {@link solace.LogLevel.FATAL} logs.\n   *\n   * @constructor\n   */\n  constructor(trace, debug, info, warn, error, fatal) {\n    Object.assign(this, {\n      trace,\n      debug,\n      info,\n      warn,\n      error,\n      fatal,\n    });\n  }\n\n  trace() {}\n  debug() {}\n  info() {}\n  warn() {}\n  error() {}\n  fatal() {}\n}\n\nmodule.exports.LogImpl = LogImpl;\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex$\", \"caughtErrors\": \"none\" }] */\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst http = require('http');\nconst { Duplex } = require('stream');\nconst { createHash } = require('crypto');\n\nconst extension = require('./extension');\nconst PerMessageDeflate = require('./permessage-deflate');\nconst subprotocol = require('./subprotocol');\nconst WebSocket = require('./websocket');\nconst { GUID, kWebSocket } = require('./constants');\n\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\n\nconst RUNNING = 0;\nconst CLOSING = 1;\nconst CLOSED = 2;\n\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether\n   *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted\n   *     multiple times in the same tick\n   * @param {Boolean} [options.autoPong=true] Specifies whether or not to\n   *     automatically send a pong in response to a ping\n   * @param {Number} [options.backlog=511] The maximum length of the queue of\n   *     pending connections\n   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\n   *     track clients\n   * @param {Function} [options.handleProtocols] A hook to handle protocols\n   * @param {String} [options.host] The hostname where to bind the server\n   * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n   *     size\n   * @param {Boolean} [options.noServer=false] Enable no server mode\n   * @param {String} [options.path] Accept only connections matching this path\n   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\n   *     permessage-deflate\n   * @param {Number} [options.port] The port where to bind the server\n   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\n   *     server to use\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @param {Function} [options.verifyClient] A hook to reject connections\n   * @param {Function} [options.WebSocket=WebSocket] Specifies the `WebSocket`\n   *     class to use. It must be the `WebSocket` class or class that extends it\n   * @param {Function} [callback] A listener for the `listening` event\n   */\n  constructor(options, callback) {\n    super();\n\n    options = {\n      allowSynchronousEvents: true,\n      autoPong: true,\n      maxPayload: 100 * 1024 * 1024,\n      skipUTF8Validation: false,\n      perMessageDeflate: false,\n      handleProtocols: null,\n      clientTracking: true,\n      verifyClient: null,\n      noServer: false,\n      backlog: null, // use default (511 as implemented in net.js)\n      server: null,\n      host: null,\n      path: null,\n      port: null,\n      WebSocket,\n      ...options\n    };\n\n    if (\n      (options.port == null && !options.server && !options.noServer) ||\n      (options.port != null && (options.server || options.noServer)) ||\n      (options.server && options.noServer)\n    ) {\n      throw new TypeError(\n        'One and only one of the \"port\", \"server\", or \"noServer\" options ' +\n          'must be specified'\n      );\n    }\n\n    if (options.port != null) {\n      this._server = http.createServer((req, res) => {\n        const body = http.STATUS_CODES[426];\n\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n      this._server.listen(\n        options.port,\n        options.host,\n        options.backlog,\n        callback\n      );\n    } else if (options.server) {\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      const emitConnection = this.emit.bind(this, 'connection');\n\n      this._removeListeners = addListeners(this._server, {\n        listening: this.emit.bind(this, 'listening'),\n        error: this.emit.bind(this, 'error'),\n        upgrade: (req, socket, head) => {\n          this.handleUpgrade(req, socket, head, emitConnection);\n        }\n      });\n    }\n\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n    if (options.clientTracking) {\n      this.clients = new Set();\n      this._shouldEmitClose = false;\n    }\n\n    this.options = options;\n    this._state = RUNNING;\n  }\n\n  /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */\n  address() {\n    if (this.options.noServer) {\n      throw new Error('The server is operating in \"noServer\" mode');\n    }\n\n    if (!this._server) return null;\n    return this._server.address();\n  }\n\n  /**\n   * Stop the server from accepting new connections and emit the `'close'` event\n   * when all existing connections are closed.\n   *\n   * @param {Function} [cb] A one-time listener for the `'close'` event\n   * @public\n   */\n  close(cb) {\n    if (this._state === CLOSED) {\n      if (cb) {\n        this.once('close', () => {\n          cb(new Error('The server is not running'));\n        });\n      }\n\n      process.nextTick(emitClose, this);\n      return;\n    }\n\n    if (cb) this.once('close', cb);\n\n    if (this._state === CLOSING) return;\n    this._state = CLOSING;\n\n    if (this.options.noServer || this.options.server) {\n      if (this._server) {\n        this._removeListeners();\n        this._removeListeners = this._server = null;\n      }\n\n      if (this.clients) {\n        if (!this.clients.size) {\n          process.nextTick(emitClose, this);\n        } else {\n          this._shouldEmitClose = true;\n        }\n      } else {\n        process.nextTick(emitClose, this);\n      }\n    } else {\n      const server = this._server;\n\n      this._removeListeners();\n      this._removeListeners = this._server = null;\n\n      //\n      // The HTTP/S server was created internally. Close it, and rely on its\n      // `'close'` event.\n      //\n      server.close(() => {\n        emitClose(this);\n      });\n    }\n  }\n\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n  shouldHandle(req) {\n    if (this.options.path) {\n      const index = req.url.indexOf('?');\n      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n\n      if (pathname !== this.options.path) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {Duplex} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n  handleUpgrade(req, socket, head, cb) {\n    socket.on('error', socketOnError);\n\n    const key = req.headers['sec-websocket-key'];\n    const upgrade = req.headers.upgrade;\n    const version = +req.headers['sec-websocket-version'];\n\n    if (req.method !== 'GET') {\n      const message = 'Invalid HTTP method';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 405, message);\n      return;\n    }\n\n    if (upgrade === undefined || upgrade.toLowerCase() !== 'websocket') {\n      const message = 'Invalid Upgrade header';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n      return;\n    }\n\n    if (key === undefined || !keyRegex.test(key)) {\n      const message = 'Missing or invalid Sec-WebSocket-Key header';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n      return;\n    }\n\n    if (version !== 8 && version !== 13) {\n      const message = 'Missing or invalid Sec-WebSocket-Version header';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n      return;\n    }\n\n    if (!this.shouldHandle(req)) {\n      abortHandshake(socket, 400);\n      return;\n    }\n\n    const secWebSocketProtocol = req.headers['sec-websocket-protocol'];\n    let protocols = new Set();\n\n    if (secWebSocketProtocol !== undefined) {\n      try {\n        protocols = subprotocol.parse(secWebSocketProtocol);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Protocol header';\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n        return;\n      }\n    }\n\n    const secWebSocketExtensions = req.headers['sec-websocket-extensions'];\n    const extensions = {};\n\n    if (\n      this.options.perMessageDeflate &&\n      secWebSocketExtensions !== undefined\n    ) {\n      const perMessageDeflate = new PerMessageDeflate(\n        this.options.perMessageDeflate,\n        true,\n        this.options.maxPayload\n      );\n\n      try {\n        const offers = extension.parse(secWebSocketExtensions);\n\n        if (offers[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        const message =\n          'Invalid or unacceptable Sec-WebSocket-Extensions header';\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n        return;\n      }\n    }\n\n    //\n    // Optionally call external client verification handler.\n    //\n    if (this.options.verifyClient) {\n      const info = {\n        origin:\n          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.socket.authorized || req.socket.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message, headers) => {\n          if (!verified) {\n            return abortHandshake(socket, code || 401, message, headers);\n          }\n\n          this.completeUpgrade(\n            extensions,\n            key,\n            protocols,\n            req,\n            socket,\n            head,\n            cb\n          );\n        });\n        return;\n      }\n\n      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n    }\n\n    this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);\n  }\n\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {Object} extensions The accepted extensions\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\n   * @param {Set} protocols The subprotocols\n   * @param {http.IncomingMessage} req The request object\n   * @param {Duplex} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @throws {Error} If called more than once with the same socket\n   * @private\n   */\n  completeUpgrade(extensions, key, protocols, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n\n    if (socket[kWebSocket]) {\n      throw new Error(\n        'server.handleUpgrade() was called more than once with the same ' +\n          'socket, possibly due to a misconfiguration'\n      );\n    }\n\n    if (this._state > RUNNING) return abortHandshake(socket, 503);\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n      'Upgrade: websocket',\n      'Connection: Upgrade',\n      `Sec-WebSocket-Accept: ${digest}`\n    ];\n\n    const ws = new this.options.WebSocket(null, undefined, this.options);\n\n    if (protocols.size) {\n      //\n      // Optionally call external protocol selection handler.\n      //\n      const protocol = this.options.handleProtocols\n        ? this.options.handleProtocols(protocols, req)\n        : protocols.values().next().value;\n\n      if (protocol) {\n        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n        ws._protocol = protocol;\n      }\n    }\n\n    if (extensions[PerMessageDeflate.extensionName]) {\n      const params = extensions[PerMessageDeflate.extensionName].params;\n      const value = extension.format({\n        [PerMessageDeflate.extensionName]: [params]\n      });\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\n      ws._extensions = extensions;\n    }\n\n    //\n    // Allow external modification/inspection of handshake headers.\n    //\n    this.emit('headers', headers, req);\n\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n    socket.removeListener('error', socketOnError);\n\n    ws.setSocket(socket, head, {\n      allowSynchronousEvents: this.options.allowSynchronousEvents,\n      maxPayload: this.options.maxPayload,\n      skipUTF8Validation: this.options.skipUTF8Validation\n    });\n\n    if (this.clients) {\n      this.clients.add(ws);\n      ws.on('close', () => {\n        this.clients.delete(ws);\n\n        if (this._shouldEmitClose && !this.clients.size) {\n          process.nextTick(emitClose, this);\n        }\n      });\n    }\n\n    cb(ws, req);\n  }\n}\n\nmodule.exports = WebSocketServer;\n\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when\n *     called\n * @private\n */\nfunction addListeners(server, map) {\n  for (const event of Object.keys(map)) server.on(event, map[event]);\n\n  return function removeListeners() {\n    for (const event of Object.keys(map)) {\n      server.removeListener(event, map[event]);\n    }\n  };\n}\n\n/**\n * Emit a `'close'` event on an `EventEmitter`.\n *\n * @param {EventEmitter} server The event emitter\n * @private\n */\nfunction emitClose(server) {\n  server._state = CLOSED;\n  server.emit('close');\n}\n\n/**\n * Handle socket errors.\n *\n * @private\n */\nfunction socketOnError() {\n  this.destroy();\n}\n\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {Duplex} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @param {Object} [headers] Additional HTTP response headers\n * @private\n */\nfunction abortHandshake(socket, code, message, headers) {\n  //\n  // The socket is writable unless the user destroyed or ended it before calling\n  // `server.handleUpgrade()` or in the `verifyClient` function, which is a user\n  // error. Handling this does not make much sense as the worst that can happen\n  // is that some of the data written by the user might be discarded due to the\n  // call to `socket.end()` below, which triggers an `'error'` event that in\n  // turn causes the socket to be destroyed.\n  //\n  message = message || http.STATUS_CODES[code];\n  headers = {\n    Connection: 'close',\n    'Content-Type': 'text/html',\n    'Content-Length': Buffer.byteLength(message),\n    ...headers\n  };\n\n  socket.once('finish', socket.destroy);\n\n  socket.end(\n    `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` +\n      Object.keys(headers)\n        .map((h) => `${h}: ${headers[h]}`)\n        .join('\\r\\n') +\n      '\\r\\n\\r\\n' +\n      message\n  );\n}\n\n/**\n * Emit a `'wsClientError'` event on a `WebSocketServer` if there is at least\n * one listener for it, otherwise call `abortHandshake()`.\n *\n * @param {WebSocketServer} server The WebSocket server\n * @param {http.IncomingMessage} req The request object\n * @param {Duplex} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} message The HTTP response body\n * @private\n */\nfunction abortHandshakeOrEmitwsClientError(server, req, socket, code, message) {\n  if (server.listenerCount('wsClientError')) {\n    const err = new Error(message);\n    Error.captureStackTrace(err, abortHandshakeOrEmitwsClientError);\n\n    server.emit('wsClientError', err, socket, req);\n  } else {\n    abortHandshake(socket, code, message);\n  }\n}\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Statistics for sent/received messages and control operations.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst StatType = {\n\n  // ------- SMF and Direct Messaging\n\n  /**\n   * Count of bytes sent as part of data messages.\n   */\n  TX_TOTAL_DATA_BYTES:            0,\n  /**\n   * Count of data messages sent.\n   */\n  TX_TOTAL_DATA_MSGS:             1,\n  /**\n   * Count of bytes sent as part of direct data messages.\n   */\n  TX_DIRECT_BYTES:                2,\n  /**\n   * Count of direct data messages sent.\n   */\n  TX_DIRECT_MSGS:                 3,\n  /**\n   * Count of bytes sent as part of control messages.\n   */\n  TX_CONTROL_BYTES:               4,\n  /**\n   * Count of control messages sent.\n   */\n  TX_CONTROL_MSGS:                5,\n  /**\n   * Count of request messages sent.\n   */\n  TX_REQUEST_SENT:                6,\n  /**\n   * Count of request timeouts that occurred.\n   */\n  TX_REQUEST_TIMEOUT:             7,\n  /**\n   * Count of bytes received as part of data messages.\n   */\n  RX_TOTAL_DATA_BYTES:            8,\n  /**\n   * Count of data messages received.\n   */\n  RX_TOTAL_DATA_MSGS:             9,\n  /**\n   * Count of bytes received as part of direct data messages.\n   */\n  RX_DIRECT_BYTES:                10,\n  /**\n   * Count of direct data messages received.\n   */\n  RX_DIRECT_MSGS:                 11,\n  /**\n   * Count of bytes received as part of control messages.\n   */\n  RX_CONTROL_BYTES:               12,\n  /**\n   * Count of control messages received.\n   */\n  RX_CONTROL_MSGS:                13,\n  /**\n   * Count discard message indications received on incoming messages.\n   */\n  RX_DISCARD_MSG_INDICATION:      14,\n  /**\n   * Count of reply messaged received.\n   */\n  RX_REPLY_MSG_RECVED:            15,\n  /**\n   * Count of received reply messages that were discarded.\n   */\n  RX_REPLY_MSG_DISCARD:           16,\n  /**\n   * @description\n   * Count of messages discarded due to the presence of an unknown element or\n   * unknown protocol in the SMF header.\n   */\n  RX_DISCARD_SMF_UNKNOWN_ELEMENT: 17,\n\n  // ------- SolCache Session\n\n  /**\n   * @description\n   * Count of cache requests sent. One conceptual request (i.e. one API call)\n   * may involve many requests and replies.\n   */\n  CACHE_REQUEST_SENT:                     18,\n  /**\n   * @description\n   * Count of OK responses to cache requests.\n   */\n  CACHE_REQUEST_OK_RESPONSE:              19,\n  /**\n   * @description\n   * Count of cache requests that returned a failure response.\n   */\n  CACHE_REQUEST_FAIL_RESPONSE:            20,\n  /**\n   * @description\n   * Count of cache replies discarded because a request has been fulfilled.\n   */\n  CACHE_REQUEST_FULFILL_DISCARD_RESPONSE: 21,\n  /**\n   * @description\n   * Count of cached messages delivered to the application.\n   */\n  RX_CACHE_MSG:                           22,\n  /**\n   * @description\n   * Count of cache requests that were incomplete.\n   */\n  CACHE_REQUEST_INCOMPLETE_RESPONSE:      23,\n  /**\n   * @description\n   * The cache session operation completed when live data arrived on the requested topic.\n   */\n  CACHE_REQUEST_LIVE_DATA_FULFILL:        24,\n\n  // ------ Guaranteed Messaging\n\n  /**\n   * Count of bytes sent as part of persistent data messages.\n   */\n  TX_PERSISTENT_BYTES:                25,\n  /**\n   * Count of persistent data messages sent.\n   */\n  TX_PERSISTENT_MSGS:                 26,\n  /**\n   * Count of non-persistent data bytes sent.\n   */\n  TX_NONPERSISTENT_BYTES:             27,\n  /**\n   * Count of non-persistent data messages sent.\n   */\n  TX_NONPERSISTENT_MSGS:              28,\n  /**\n   * The number of bytes redelivered in Persistent messages.\n   */\n  TX_PERSISTENT_BYTES_REDELIVERED:    29,\n  /**\n   * The number of Persistent messages redelivered.\n   */\n  TX_PERSISTENT_REDELIVERED:          30,\n  /**\n   * The number of bytes redelivered in Non-Persistent messages.\n   */\n  TX_NONPERSISTENT_BYTES_REDELIVERED: 31,\n  /**\n   * The number of Non-Persistent messages redelivered.\n   */\n  TX_NONPERSISTENT_REDELIVERED:       32,\n  /**\n   * The number of acknowledgments received.\n   */\n  TX_ACKS_RXED:                       33,\n  /**\n   * The number of times the transmit window closed.\n   */\n  TX_WINDOW_CLOSE:                    34,\n  /**\n   * The number of times the acknowledgment timer expired.\n   */\n  TX_ACK_TIMEOUT:                     35,\n  /**\n   * Count of bytes received as part of persistent data messages.\n   */\n  RX_PERSISTENT_BYTES:                36,\n  /**\n   * Count of persistent data messages received.\n   */\n  RX_PERSISTENT_MSGS:                 37,\n  /**\n   * Count of bytes received as part of non-persistent data messages.\n   */\n  RX_NONPERSISTENT_BYTES:             38,\n  /**\n   * Count of non-persistent data messages received.\n   */\n  RX_NONPERSISTENT_MSGS:              39,\n  /**\n   * Count of acknowledgements sent to the Solace Message Router\n   * for guaranteed messages received by the API.\n   */\n  RX_ACKED:                           40,\n  /**\n   * Count of guaranteed messages discarded for being duplicates.\n   */\n  RX_DISCARD_DUPLICATE:               41,\n  /**\n   * Count of guaranteed messages discarded due to no match message consumer for the message.\n   */\n  RX_DISCARD_NO_MATCHING_CONSUMER:    42,\n  /**\n   * Count of guaranteed messages discarded for being received out of order.\n   */\n  RX_DISCARD_OUT_OF_ORDER:            43,\n  /**\n   * Count of received persistent and non-persistent messages that were rejected.\n   */\n  RX_SETTLE_REJECTED:       44,\n  /**\n   * Count of received persistent and non-persistent messages that were failed.\n   */\n  RX_SETTLE_FAILED:         45,\n  /**\n   * Count of received persistent and non-persistent messages that were accepted manually (no auto-acks).\n   */\n  RX_SETTLE_ACCEPTED:       46,\n};\n\nmodule.exports.StatType = Enum.new(StatType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the possible endpoint access types. The corresponding endpoint property is\n * {@link solace.QueueProperties#accessType}.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueAccessType = {\n  /**\n   * @description An exclusive endpoint. The first client to bind\n   * receives the stored messages on the Endpoint.\n   * @type {String}\n   */\n  EXCLUSIVE:    'EXCLUSIVE',\n  /**\n   * @description A non-exclusive (shared) Queue. Each client to bind\n   * receives messages in a round robin fashion.\n   * @type {String}\n   */\n  NONEXCLUSIVE: 'NONEXCLUSIVE',\n};\n\nmodule.exports.QueueAccessType = Enum.new(QueueAccessType);\n","const { Bits, Convert } = require('solclient-convert');\nconst { ClientCtrlMessage, SMFParameter } = require('../message-objects');\nconst { LOG_ERROR } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr, /*strToInt8,*/\n  int16ToStr, /*strToInt16,*/\n  int32ToStr, /*strToUInt32,*/\n} = Convert;\n\nfunction parseCCAt(dataBuf, offset, payloadLen) {\n  const ccMsg = new ClientCtrlMessage();\n  if (payloadLen < 6 || offset + 6 > dataBuf.length) {\n      // not enough data! Return empty.\n      // This is required because we can get an empty CC payload as a router response\n    return ccMsg;\n  }\n\n  let pos = offset;\n  const twobytes = dataBuf.readUInt16BE(pos);\n  pos += 2;\n    // var uh = bits(twobytes, 15, 1);\n  const version = bits(twobytes, 8, 3);\n  const msgType = bits(twobytes, 0, 8);\n  const len = dataBuf.readUInt32BE(pos);\n  pos += 4;\n\n    // Sanity check: we support ClientCtrl v1\n  if (version !== 1) {\n    LOG_ERROR(`Unsupported ClientCtrl version ${version}`);\n    return false;\n  }\n\n  if (len <= 0 || (offset + len) > dataBuf.length) {\n    return false;\n  }\n\n  ccMsg.msgType = msgType;\n  ccMsg.version = version;\n  while (pos < (offset + len)) {\n    const onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUh = bits(onebyte, 7, 1);\n    const paramType = bits(onebyte, 0, 7);\n    const paramLen = dataBuf.readUInt32BE(pos);\n    if (paramLen <= 0) {\n      return false; // SMF parsing fail\n    }\n\n    pos += 4;\n    const paramValueLen = paramLen - 5;\n    const smfP = new SMFParameter(paramUh, paramType, null, dataBuf, pos, pos + paramValueLen);\n    ccMsg.addParameter(smfP);\n    pos += paramValueLen;\n  }\n  return ccMsg;\n}\n\nfunction encCC(ccMsg) {\n  const paramSpace = [];\n  const paramArray = ccMsg.getParameterArray();\n    /*\n    ClientCtrl Parameter formatting:\n        1 byte uh/type\n        4 bytes length\n        N bytes value\n     */\n  for (let p = 0, n = paramArray.length; p < n; ++p) {\n    const currentParam = paramArray[p];\n      // It's not a flat array, we have gaps!\n    if (currentParam === undefined) {\n      continue;\n    }\n    let currentParamOneByte = 0;\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getUh(), 7, 1);\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getType(), 0, 7);\n    paramSpace.push(int8ToStr(currentParamOneByte));\n    paramSpace.push(int32ToStr(currentParam.getValue().length + 5));\n    paramSpace.push(currentParam.getValue());\n  }\n\n  const paramData = paramSpace.join('');\n  let twobytes = 0;\n  twobytes = setBits(twobytes, 0, 15, 1); // uh\n  twobytes = setBits(twobytes, 0, 11, 4); // RFU\n  twobytes = setBits(twobytes, 1, 8, 3); // version\n  twobytes = setBits(twobytes, ccMsg.msgType, 0, 8); // msgtype\n\n  const data = [];\n  data.push(int16ToStr(twobytes)); // first 2B (uh, version, msgtype)\n  data.push(int32ToStr(6 + paramData.length)); // length: 6B header + params\n  data.push(paramData);\n  return data.join('');\n}\n\nmodule.exports.parseCCAt = parseCCAt;\nmodule.exports.encCC = encCC;\n","const { clone } = require('solclient-util'); // using the modified local clone version\nconst SolclientFactoryLib = require('solclient-factory');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { Convert } = require('solclient-convert');\nconst { Destination } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_DEBUG, LOG_WARN } = require('solclient-log');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageDumpUtil } = require('./message-dump-util');\nconst { MessageType } = require('./message-types');\nconst { MessageOutcome } = require('./message-outcomes');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { Parameter } = require('solclient-validate');\nconst { RgmidFactory } = require('./replication-group-message-id');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTUnsupportedValueError } = require('solclient-sdt');\nconst { Baggage, MessageTracingSupport, TraceContext, TraceContextSetter } = require('solclient-message-tracing');\n\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst {\n  utf8ToUcs2,\n  anythingToBuffer,\n} = Convert;\nconst {\n  isBoolean,\n  isEnumMember,\n  isInstanceOf,\n  isInstanceOfOrNothing,\n  isNumberOrNothing,\n  isStringOrNothing,\n} = Parameter;\n\n// When a message is cloned for sending,\n// * We assume that it may NOT include circular references.\n//   These are also unsupported in the encoder.\n// * We assume that all properties to be cloned are enumerable.\n//   This has significant (~10% AD send rate) performance impact.\n\nconst MESSAGE_CLONE_OPTIONS = { circular: false, includeNonEnumerable: false };\n\n/**\n * Function called on construct/reset. Sets the initial values for fields that have them.\n * @param {Message} message The message to initialize\n * @internal\n */\nfunction initMessage(message) {\n  message._deliveryMode = MessageDeliveryModeType.DIRECT;\n  message._userCos = MessageUserCosType.COS1;\n  message._cacheStatus = MessageCacheStatus.LIVE;\n  message._spoolerUniqueId = undefined;\n  /* message._spoolerMessageId does not to be set to undefined\n   * message._spoolerMessageId should only be set when\n   * message._spoolerUniqueId is set to a value\n   * other than undefined or RgmidFactory.INVALID_SUID\n   */\n  message._priority = undefined;\n  message._deliveryCount = -1; // Makes the accessor throw, never returned to user.\n\n  // for tracing support\n  message._traceContextSetter = null;\n  message._creationContext = null;\n  message._transportContext = null;\n  message._baggage = new Baggage();\n}\n\n/**\n * Function called on reset only. Clears every field in the message. Call #initMessage\n * to set initial values.\n * @param {Message} message The message to clear\n * @internal\n */\nfunction clearMessage(message) {\n  const fields = Object.keys(message);\n  fields.forEach(f => delete message[f]);\n}\n\n/**\n * Function called to clear extended var-len message properties\n * @param {Message} message The message to update\n * @internal\n */\nfunction clearExtendedVarLenParameters(message) {\n  // clear the tracing support params since\n  // they use extended var-len encoding\n  message._transportContext = null;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactory.createMessage}</b>\n * <p>\n * A message is a container that can be used to store and send messages to and from the\n * Solace Message Router.\n *\n * Applications manage the lifecycle of a message; a message is created by calling\n * {@link solace.SolclientFactory.createMessage} and is freed by dereferencing it.\n *\n * API operations that cache or mutate messages always take a copy. A message may\n * be created, mutated by the API user, and sent multiple times.\n *\n * The Message Object provides methods to manipulate the common Solace\n * message header fields that are optionally sent in the binary metadata\n * portion of the Solace message.\n *\n * Applications can also use the structured data API {@link solace.Message#setSdtContainer}\n * to add containers (maps or streams) and their fields to the binary payload or\n * to the User Property map contained within the binary metadata.\n *\n * This does not prevent applications from ignoring these\n * methods and sending payload in the binary payload as an opaque binary field for\n * end-to-end communications\n *\n * @memberof solace\n * @extends solace.MessageTracingSupport\n */\nclass Message extends MessageTracingSupport {\n\n  /**\n   * @constructor\n   * @hideconstructor\n   **/\n  constructor() {\n    super(); // call the tracing support constructor\n    initMessage(this);\n  }\n\n  /**\n   * Gets the payload type ({@link solace.MessageType}) of the message. A message has a\n   * structured payload if one was attached via {@link solace.Message#setSdtContainer} otherwise\n   * if the payload is attached via {@link Message@setBinaryAttachment} then it\n   * is unstructured ({@link solace.MessageType#BINARY})\n   *\n   * @returns {solace.MessageType} The structured payload type.\n   * @default {solace.MessageType.BINARY}\n   */\n  getType() {\n    return this._messageType || MessageType.BINARY; // This is OK; BINARY === 0.\n  }\n\n  /**\n   * Sets the application-provided message ID.\n   * @param {?String} value The new value for the application-provided message ID.\n   */\n  setApplicationMessageId(value) {\n    this._applicationMessageId = isStringOrNothing('applicationMessageId', value);\n  }\n\n  /**\n   * Gets the application-provided message ID.\n   * @returns {?String} The application provided message ID.\n   */\n  getApplicationMessageId() {\n    return this._applicationMessageId;\n  }\n\n  /**\n   * Sets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @param {?String} value The application message type.\n   */\n  setApplicationMessageType(value) {\n    this._applicationMessageType = isStringOrNothing('applicationMessageType', value);\n  }\n\n  /**\n   * Gets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @returns {?String} The application message type.\n   */\n  getApplicationMessageType() {\n    return this._applicationMessageType;\n  }\n\n  /**\n   * Gets the binary attachment part of the message.\n   *\n   * Backward compatibility note: Using the version10 factory profile or older,\n   * the binary attachment is returned as a 'latin1' String:\n   * Each character has a code in the range * 0-255\n   * representing the value of a single received byte at that position.\n   *\n   * @returns {Uint8Array|String|null} A TypedArray view of the binary attachment.\n   */\n  getBinaryAttachment() {\n    if (this._binaryAttachment && ProfileBinding.value.byteArrayAsString) {\n      return this._binaryAttachment.toString('latin1');\n    }\n    return this._binaryAttachment;\n  }\n\n  /**\n   * Sets the binary attachment part of the message.\n   *\n   * The binary attachment is conceptually an array of bytes.\n   * When this method is used, the message payload type is {@link solace.MessageType#BINARY}\n   * See {@link solace.Message#getType}.\n   *\n   * Applications may set the binary attachment to NULL or undefined to\n   * remove the binary attachment and create a message with no payload.\n   *\n   * The following types are accepted:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   *\n   * @param {Uint8Array|ArrayBufferLike|DataView|String|null|undefined} value Sets the binary attachment part of the message.\n   */\n  setBinaryAttachment(value) {\n    if (value) {\n      this._messageType = MessageType.BINARY;\n    }\n    this._setBinaryAttachment(anythingToBuffer(value));\n  }\n  _setBinaryAttachment(value) {\n    this._binaryAttachment = value;\n  }\n\n  /**\n   * Given a Message containing a cached message, return the cache Request Id that\n   * the application set in the call to {@link solace.CacheSession#sendCacheRequest}.\n   *\n   * @returns {?Number} The request ID of the cache request associated with this message.\n   */\n  getCacheRequestId() {\n    return this._cacheRequestId;\n  }\n\n  /**\n   * @private\n   * @param {Number} cacheRequestID The cache request ID associated with this message\n   */\n  _setCacheRequestID(cacheRequestID) {\n    this._cacheRequestId = cacheRequestID;\n  }\n\n  /**\n   * Gets the correlation ID.  The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @returns {?String} The correlation ID associated with the message.\n   */\n  getCorrelationId() {\n    return this._correlationId;\n  }\n\n  /**\n   * Sets the correlation ID. The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @param {String|null|undefined} value The correlation ID to associate with the message.\n   */\n  setCorrelationId(value) {\n    this._correlationId = isStringOrNothing('correlationId', value);\n  }\n\n  /**\n   * Gets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key.\n   * @returns {?Object} The correlation Key associated with the message,\n   * or <code>null</code>, if unset.\n   */\n  getCorrelationKey() {\n    return this._correlationKey || null;\n  }\n\n  /**\n   * Sets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed Messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key. If this\n   * method is used, the correlation information is returned\n   * when the {@link solace.SessionEventCode#event:ACKNOWLEDGED_MESSAGE} event\n   * is later received for an acknowledged message or when the\n   * {@link solace.SessionEventCode#event:REJECTED_MESSAGE_ERROR} is received for a rejected\n   * message.\n   *\n   * The API only maintains a reference to the passed object.  If the application requires the\n   * contents are unmodified for proper correlation, then it is the application's responsibility\n   * to ensure the contents of the object are not modified.\n   *\n   * Important: <b>The Correlation Key is not included in the\n   * transmitted message and is only used with the local API</b>\n   * @param {Object|String|null|undefined} value The correlation Key to associate with the message.\n   */\n  setCorrelationKey(value) {\n    this._correlationKey = value;\n  }\n\n  /**\n   * Gets whether the message is configured for delivering to one client only.\n   * @returns {Boolean} indicates whether the message is configured for\n   * delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  isDeliverToOne() {\n    return this._deliverToOne || false;\n  }\n\n  /**\n   * Sets whether the message is configured for delivering to one client only.\n   * @param {Boolean} value whether the message is configured for delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   * @default false\n   */\n  setDeliverToOne(value) {\n    this._setDeliverToOne(this._deliverToOne = isBoolean('deliverToOne', value));\n  }\n  _setDeliverToOne(value) {\n    this._deliverToOne = value;\n  }\n\n  /**\n   * Gets the delivery mode of the message.\n   * @returns {solace.MessageDeliveryModeType} representing the delivery mode of the message.\n   */\n  getDeliveryMode() {\n    return this._deliveryMode;\n  }\n\n  /**\n   * Sets the delivery mode of the message.\n   * @param {solace.MessageDeliveryModeType} value The message delivery mode.\n   * @default MessageDeliveryModeType.DIRECT\n   */\n  setDeliveryMode(value) {\n    this._setDeliveryMode(isEnumMember('deliveryMode', value, MessageDeliveryModeType));\n  }\n  _setDeliveryMode(value) {\n    this._deliveryMode = value;\n  }\n\n  /**\n   * Gets the destination to which the message was published.\n   * @returns {?Destination} The destination to which a message was published.\n   */\n  getDestination() {\n    return this._destination;\n  }\n\n  /**\n   * Sets the destination ({@link solace.DestinationType#Topic} or\n   * {@link solace.DestinationType#Queue}) to publish the message to.\n   * @param {Destination} value The destination to publish the message to.\n   */\n  setDestination(value) {\n    this._setDestination(isInstanceOf('destination', value, Destination));\n  }\n  _setDestination(value) {\n    this._destination = value;\n  }\n\n  /**\n   * Indicates whether one or more messages have been discarded prior\n   * to the current message. This indicates congestion discards only and\n   * is not affected by message eliding.\n   * @returns {Boolean} Returns true if one or more messages have been\n   * discarded prior to the current message; otherwise, it returns false.\n   */\n  isDiscardIndication() {\n    return this._discardIndication || false;\n  }\n\n  /**\n   * @private\n   * @param {Boolean} value The new value for discard indication\n   */\n  setDiscardIndication(value) {\n    this._setDiscardIndication(isBoolean('discardIndication', value));\n  }\n  _setDiscardIndication(value) {\n    this._discardIndication = value;\n  }\n\n  /**\n   * Returns whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @returns {Boolean} indicates whether the message is eligible for eliding.\n   */\n  isElidingEligible() {\n    return this._elidingEligible || false;\n  }\n\n  /**\n   * Sets whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @param {Boolean} value sets whether the message is eligible for eliding.\n   * @default false\n   */\n  setElidingEligible(value) {\n    this._setElidingEligible(isBoolean('setElidingEligible', value));\n  }\n  _setElidingEligible(value) {\n    this._elidingEligible = value;\n  }\n\n  /**\n   * Gets the Http Content Encoding\n   * @returns {?String} the http content encoding, if set.\n   */\n    getHttpContentEncoding() {\n      return this._httpContentEncoding;\n    }\n  \n    /**\n     * Sets the Http Content Encoding\n     * @param {String} value The http content encoding.\n     */\n    setHttpContentEncoding(value) {\n      this._httpContentEncoding = isStringOrNothing(\"httpContentEncoding\", value);\n      if (this._httpContentEncoding === \"\") {\n        delete this._httpContentEncoding;\n      }\n    }\n  \n    /**\n     * Gets the Http Content Type\n     * @returns {?String} the http content type, if set.\n     */\n     getHttpContentType() {\n      return this._httpContentType;\n    }\n  \n    /**\n     * Sets the Http Content Type\n     * @param {String} value The http content type.\n     */\n    setHttpContentType(value) {\n      this._httpContentType = isStringOrNothing('httpContentType', value);\n      if (this._httpContentType === \"\") {\n        delete this._httpContentType;\n      }\n    }\n    \n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the internal\n  // * publisher\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Number} The publisher ID\n   * @private\n   */\n  getPublisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value  The publisher ID to set\n   * @private\n   */\n  setPublisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @returns {Number} The publisher message ID\n   * @private\n   */\n  getPublisherMessageId() {\n    return this._publisherMsgId;\n  }\n  /**\n   * @param {Number} value The publisher message ID to set\n   * @private\n   */\n  setPublisherMessageId(value) {\n    this._publisherMsgId = value;\n  }\n\n  /// -------------------------------------------------------------\n  // * User-settable properties for publishing\n  /// -------------------------------------------------------------\n\n  /**\n   * @returns {Number} The Guaranteed Message TTL, in milliseconds.\n   */\n  getTimeToLive() {\n    return this._timeToLive;\n  }\n  /**\n   * @param {Number} value The Guaranteed Message TTL to set, in milliseconds.\n   *\n   * The time to live is the number of milliseconds the message may be stored on the\n   * Solace Message Router before the message is discarded or moved to a Dead Message\n   * Queue. See {@link solace.Message.setDMQEligible}.\n   *\n   * Setting the Time To Live to zero disables TTL for the message.\n   *\n   * This property is only valid for Guaranteed messages (Persistent and Non-Persistent).\n   * It has no effect when used in conjunction with other message types unless the message\n   * is promoted by the appliance to a Guaranteed message.\n   *\n   * The maxium allowed time to live is 3.1536E11 (315360000000) which is\n   * approximately 10 years.\n   * @default 0\n   */\n  setTimeToLive(value) {\n    const MAX_MESSAGE_TTL_MS = (10 * 365 * 24 * 60 * 60 * 1000); // approximately 10 years\n\n    // Allow parser and initializer to set timeToLive to undefined\n    if (value === null || value === undefined) {\n      this._timeToLive = value;\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for time to live',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > MAX_MESSAGE_TTL_MS) {\n      throw new OperationError('Invalid time to live value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._timeToLive = value;\n  }\n\n  /**\n   * @returns {Number|undefined} The Guaranteed Message expiration value.\n   * The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire.\n   */\n  getGMExpiration() {\n    return this._expiration;\n  }\n  /**\n   * Set the expiration time field. The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire. The expiration time is carried in the message when set to\n   * a non-zero value. Expiration time is not included when this value is set to zero or\n   * undefined\n   *\n   * The message expiration time is carried to clients that receive the message\n   * unmodified and does not effect the life cycle of the message. Use\n   * {@link solace.Message#setTimeToLive} to enforce message expiry in the network.\n   *\n   * @param {?Number} value The new Guaranteed Message expiration value\n   */\n  setGMExpiration(value) {\n    this._expiration = isNumberOrNothing('GMExpiration', value);\n  }\n\n  /**\n   * @returns {Boolean} Whether this message is Guaranteed Message DMQ eligible\n   */\n  isDMQEligible() {\n    return this._dmqEligible || false;\n  }\n  /**\n   * @param {Boolean} value The new value for Guaranteed Message DMQ (Dead Message Queue) Eligible.\n   * When this property is set, when the message expires in the network\n   * the message is saved on a appliance dead message queue. Otherwise the expired message is\n   * discarded. See {@link solace.Message#setTimeToLive}.\n   * @default false\n   */\n  setDMQEligible(value) {\n    this._setDMQEligible(isBoolean('DMQEligible', value));\n  }\n  _setDMQEligible(value) {\n    this._dmqEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the consumer flow\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Long} The ID of the flow that received this message\n   * @private\n   */\n  getFlowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID that received this message\n   * @private\n   */\n  setFlowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {Long} The Guaranteed Message prevMsgId\n   * @private\n   */\n  getGuaranteedPreviousMessageId() {\n    return this._guaranteedPrevMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message prevMsgId to set\n   * @private\n   */\n  setGuaranteedPreviousMessageId(value) {\n    this._guaranteedPrevMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler unique id value\n   * @private\n   */\n  _setSpoolerUniqueId(value) {\n    this._spoolerUniqueId = value;\n  }\n\n  /**\n   * @returns {?Long} value of Spooler unique id\n   * @private\n   */\n  _getSpoolerUniqueId() {\n    // This can be set via the smf header or by the message consumer\n    // using _setSpoolerUniqueId.\n    // The message consumer check if a data message has a suid set\n    // the updates the consumer stored value for suid from the message value.\n    // If the message does not have a suid the message consumer sets the suid\n    // of the message using _setSpoolerUniqueId.\n    // See consumer-fsm.acceptMessage for details.\n    if (this._spoolerUniqueId === undefined) {\n      return RgmidFactory.INVALID_SUID;\n    }\n    return this._spoolerUniqueId;\n  }\n\n  /// ---------------------------------------------------------\n  // * Properties set by the Message Consumer\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {?solace.MessageConsumer} The associated Message Consumer, if received by a consumer\n   */\n  getMessageConsumer() {\n    return this._consumer;\n  }\n  /**\n   * @param {solace.MessageConsumer} value The Message Consumer to associate with this message\n   * @private\n   */\n  setMessageConsumer(value) {\n    this._consumer = value;\n  }\n\n  /**\n   * This message ID is NOT a universal unique identifier for the message.\n   * There is no use for this message ID in an application.\n   * Internally this message ID is used when a message is acknowledged\n   * calling Message.acknowledge().\n   * No other meaning should be inferred from the value of this message ID.\n   * @returns {?Long} A field in the message structure intended for internal use.\n   * @deprecated There is no useful purpose for this method. Do not use it.\n   */\n  getGuaranteedMessageId() {\n    return this._guaranteedMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message msgId to set\n   * @private\n   */\n  setGuaranteedMessageId(value) {\n    this._guaranteedMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler message id value, this can be the mateAckId or the AckId\n   * @private\n   */\n  _setSpoolerMessageId(value) {\n    this._spoolerMessageId = value;\n  }\n\n  /**\n   * Returns the Replication Group Message Id\n   * @returns {?solace.ReplicationGroupMessageId} The replication group message id\n   *  assigned by the router.\n   */\n  getReplicationGroupMessageId() {\n    if (this._spoolerUniqueId === undefined\n       || RgmidFactory.INVALID_SUID.eq(this._spoolerUniqueId)) {\n      return undefined;\n    }\n    /* use this._spoolerMessageId if possible otherwise use this._guaranteedMsgId */\n    const smid = this._spoolerMessageId || this._guaranteedMsgId;\n    /* Note smid as this._guaranteedMsgId must have a value\n     * if this._spoolerUniqueId is not RgmidFactory.INVALID_SUID */\n    return RgmidFactory.from({ suid: this._spoolerUniqueId, msgid: smid });\n  }\n\n  /**\n   * Returns the Topic Sequence Number.  If there is no topic sequence number\n   * undefined is returned.\n   * @returns {?Long} The Topic Sequence number assigned to this message by the Message Router.\n   */\n  getTopicSequenceNumber() {\n    return this._topicSequenceNumber;\n  }\n\n  /**\n   * @param {Long} topicSeqNo The Topic Sequence Number to set\n   * @private\n   */\n  setTopicSequenceNumber(topicSeqNo) {\n    this._topicSequenceNumber = topicSeqNo;\n  }\n\n  /**\n   * Returns the delivery count.\n   *\n   * @returns {Number|undefined} The delivery count reported by the broker.\n   * @throws {solace.OperationError} if endpoint does not report delivery count (message is not persistent).\n   */\n\n  getDeliveryCount() {\n    if (this._deliveryCount === -1) {\n      throw new OperationError('Endpoint does not report delivery count.',\n        ErrorSubcode.INVALID_OPERATION);\n    } // else\n    return this._deliveryCount;\n  }\n\n  /**\n   * @param {Number} deliveryCount on this message.\n   * @private\n   */\n  setDeliveryCount(deliveryCount) {\n    this._deliveryCount = deliveryCount;\n  }\n\n\n  /**\n   * Settles this message in a requested way.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {solace.MessageOutcome} messageSettlementOutcome type of the settlement outcome, not expected to be {@code null}\n   * @throws {@link solace.OperationError}\n   *  * if broker does not support the specified outcome option;\n   *  * if the flow was created without specifying required {@link MessageOutcome}\n   *    Options within the consumer properties;\n   *  * if the associated {@link solace.Session} is configured\n   *    to use SUPPORTED_MESSAGE_ACK_AUTO (the default behaviour),\n   *    the use of {@link MessageOutcome#REJECTED}\n   *    and {@link MessageOutcome#FAILED} are not supported;\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connected\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   *    @see {@link solace.MessageOutcome}for detailed explanation of available options\n   */\n  settle(messageSettlementOutcome) {\n    // implementation here\n    // validation checks here\n    if (this._acked) {\n      throw new OperationError('Message can only be settled once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot settle a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot settle a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot settle using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot settle using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // check to ensure that you cannot manually settle a message with acknowledgeMode = AUTO\n    if (this._consumer._fsm.hasAutoAckSupport) {\n      LOG_WARN(`Consumer configured to auto-acknowledge messages, so message ${\n        this._guaranteedMsgId} cannot be application settled`);\n      return;\n    }\n\n    // validate the settlement outcome and send correct Enum value\n    const settlementOutcome = messageSettlementOutcome;\n    if (MessageOutcome.values.indexOf(settlementOutcome) === -1) {\n      throw new OperationError(`Settlement outcome for message must be valid`,\n        ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // check that the broker consumer session has support for the outcome and \n    const doesConsumerSupportOutcome = this._consumer.getProperties().requiredSettlementOutcomes.some(v => v === settlementOutcome);\n    // that the session was created with support for the outcome\n    if (settlementOutcome != MessageOutcome.ACCEPTED && !doesConsumerSupportOutcome) {\n      throw new OperationError(`solace.MessageOutcome.${MessageOutcome.nameOf(settlementOutcome)} not supported for this Message Consumer`,\n        ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // actual settlement logic\n    this._consumer.applicationSettle(this._guaranteedMsgId, settlementOutcome);\n    this._acked = true; // also set as ACKed/settled\n  }\n\n  /**\n   * Returns whether settle(solace.MessageOutcome) has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isSettled() {\n    return this._acked || false;\n  }\n\n  /**\n   * Internal validation checks before we attempt to acknowledge this message.\n   * @private\n   */\n  _validateBeforeAcknowledge() {\n    if (this._acked) {\n      throw new OperationError('Message can only be acknowledged once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot acknowledge a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot acknowledge a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot acknowledge using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot acknowledge using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n  }\n\n  /**\n   * Acknowledges this message.\n   * This is the same as calling {@link solace.Message#settle(solace.MessageOutcome.ACCEPTED)}.\n   * Internally uses Message.settle() with the ACCEPTED MessageOutcome.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @throws {@link solace.OperationError}\n   *  * if this message was not received via Guaranteed Message;\n   *    subcode: {@link solace.ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH}\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connectedl\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  acknowledge() {\n    // call all the validations before we acknowledge message\n    this._validateBeforeAcknowledge();\n\n    // check to ensure that you cannot manually settle a message with acknowledgeMode = AUTO\n    if (this._consumer._fsm.hasAutoAckSupport) {\n      LOG_WARN(`Consumer configured to auto-acknowledge messages, so message ${\n        this._guaranteedMsgId} cannot be application acknowledge`);\n      return;\n    }\n\n    // use settlement implementation with ACCEPTED outcome\n    this._consumer.applicationAck(this._guaranteedMsgId, false);\n    this._acked = true; // also set message as acked/settled\n  }\n\n  /**\n   * Used by the message-dispatcher to auto-acknowledge this message.\n   * @internal\n   */\n  _autoAcknowledge() {\n    // call all the validations before we acknowledge message\n    this._validateBeforeAcknowledge();\n\n    // use settlement implementation with ACCEPTED outcome\n    this._consumer.applicationAck(this._guaranteedMsgId, true);\n    this._acked = true; // also set message as acked/settled\n  }\n\n  /**\n   * Returns whether acknowledge() has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isAcknowledged() {\n    return this._acked || false;\n  }\n\n  /**\n   * Test if the Acknowledge Immediately message property is set or not.\n   * When the Acknowledge Immediately property is set to true on an outgoing\n   * Guaranteed Message,\n   * it indicates that the Solace Message Router should Acknowledge this message\n   * immediately upon receipt.\n   *\n   * This property, when set by a publisher, may or may not be removed by the\n   * Solace Message Router prior to delivery to a consumer, so message consumers\n   * must not expect the property value indicates how the message was\n   * originally published\n   * @returns {Boolean} Whether this message was set to acknowledge immediately.\n   */\n  isAcknowledgeImmediately() {\n    return this._ackImmediately || false;\n  }\n  /**\n   * Set the optional Acknoweledge Immediately message property.\n   * When the Acknowledge Immediately property is set to true on an outgoing Guaranteed Message,\n   * it indicates that the Solace Message Router should acknoweledge this message\n   * immediately upon receipt. By default the property is set to false on newly created messages.\n   *\n   * This property, when set by a publisher, may or may not be removed by the appliance\n   * prior to delivery to a consumer, so message consumers must not expect the property value\n   * indicates how the message was originally published. Therefore if a received message\n   * is forwarded by the application, the Acknowledge Immediately property should be\n   * explicitly set to the desired value (true or false).\n   *\n   * Setting this property on an outgoing direct message has no effect.\n   *\n   * @param {Boolean} value Whether to acknowledge this message immediately.\n   */\n  setAcknowledgeImmediately(value) {\n    this._setAcknowledgeImmediately(isBoolean('acknowledgeImmediately', value));\n  }\n  _setAcknowledgeImmediately(value) {\n    this._ackImmediately = value;\n  }\n\n  /**\n   * Gets the cache status of this message.\n   *\n   * @returns {?solace.MessageCacheStatus} The cache status of this message. The status\n   * will be MessageCacheStatus.LIVE unless the message was returned in a\n   * reply to a cache request.\n   */\n  getCacheStatus() {\n    return this._cacheStatus;\n  }\n\n  /**\n   * @param {solace.MessageCacheStatus} cacheStatus The new cache status for this message\n   * @private\n   */\n  _setCacheStatus(cacheStatus) {\n    this._cacheStatus = cacheStatus;\n  }\n\n  /**\n   * Returns whether the message's reply field is set, indicating\n   * that this message is a reply to a previous request. See {@link solace.Session#sendRequest}.\n   * @returns {Boolean} Indicates the state of the reply field.\n   */\n  isReplyMessage() {\n    return this._replyMessage || false;\n  }\n\n  /**\n   * Indicates whether the message has been marked as redelivered by the Solace Message Router.\n   * @returns {Boolean} Indicates whether the redelivered flag is set.\n   */\n  isRedelivered() {\n    return this._redelivered || false;\n  }\n  /**\n   * @param {Boolean} value The redelivered flag\n   * @private\n   */\n  setRedelivered(value) {\n    this._redelivered = value;\n  }\n\n  /**\n   * Sets the <i>reply</i> field of the message.\n   * @param {Boolean} value Sets whether to flag the message as a reply.\n   */\n  setAsReplyMessage(value) {\n    this._replyMessage = isBoolean('asReplyMessage', value);\n  }\n\n  /**\n   * Gets the receive timestamp (in milliseconds, from midnight, January 1, 1970 UTC).\n   * @returns {?Number} The receive timestamp, if set.\n   */\n  getReceiverTimestamp() {\n    return this._receiverTimestamp;\n  }\n\n  /**\n   * Gets the replyTo destination\n   * @returns {?solace.Destination} The value of the replyTo destination, if set.\n   */\n  getReplyTo() {\n    return this._replyTo;\n  }\n\n  /**\n   * Sets the replyTo destination\n   * @param {solace.Destination} value The replyTo destination.\n   */\n  setReplyTo(value) {\n    this._replyTo = isInstanceOfOrNothing('replyTo', value, Destination);\n  }\n\n  /**\n   * Returns the Sender's ID.\n   * @returns {?String} The Sender's ID, if set.\n   */\n  getSenderId() {\n    return this._senderId;\n  }\n\n  /**\n   * Sets the Sender ID for the message\n   * @param {String} value The Sender ID for the message.\n   */\n  setSenderId(value) {\n    this._senderId = isStringOrNothing('senderId', value);\n  }\n\n  /**\n   * Gets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC).\n   * @returns {?Number} The send timestamp, if set.\n   */\n  getSenderTimestamp() {\n    return this._senderTimestamp;\n  }\n\n  /**\n   * Sets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC). This field can be generated automatically during message\n   * publishing, but it will not be generated if previously set to a non-null value by this method.\n   * See {@link solace.SessionProperties#generateSendTimestamps}.\n   *\n   * An application that publishes the same {@link solace.Messsage} multiple times and\n   * also wants generted timestamps on each messages, should set the sender timestamp\n   * to undefined after each call to {@link solace.Session#send}.\n   * @param {?Number} value The value to set as the send timestamp.\n   */\n  setSenderTimestamp(value) {\n    this._senderTimestamp = isNumberOrNothing('senderTimestamp', value);\n  }\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Sets the application-defined sequence number. If the sequence number\n   * is not set, or set to undefined, and {@link solace.SessionProperties#generateSequenceNumber}\n   * is true, then a sequence number is automatically generated for each sent message.\n   * @param {?Number} value The sequence number.\n   */\n  setSequenceNumber(value) {\n    if (value instanceof SDTUnsupportedValueError) {\n      this._sequenceNumberError = value;\n    } else {\n      this._sequenceNumber = isNumberOrNothing('sequenceNumber', value);\n      this._sequenceNumberError = undefined;\n      //TODO: this is probably wrong. Shouldn't it be cleared if value === undefined?\n      this._autoSequenceNumber = false;\n    }\n  }\n\n  /**\n   * Gets the Class of Service (CoS) value for the message.\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @returns {solace.MessageUserCosType} The COS value.\n   */\n  getUserCos() {\n    return this._userCos;\n  }\n\n  /**\n   * Gets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are valid return values,\n   * undefined means the parameter is not present.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery,\n   * values larger than 9 are treated the same as 9.\n   *\n   * @returns {Number} The Message Priority Parameter value.\n   */\n  getPriority() {\n    return this._priority;\n  }\n\n  /**\n   * Sets the Class of Service (CoS) value for the message.\n   *\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType#COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType#COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @param {solace.MessageUserCosType} value The COS value.\n   * @default {solace.MessageUserCosType#COS1}\n   */\n  setUserCos(value) {\n    this._setUserCos(isEnumMember('userCos', value, MessageUserCosType));\n  }\n  _setUserCos(value) {\n    this._userCos = value;\n  }\n\n  /**\n   * Sets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are accepted,\n   * use undefined to unset.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery, values larger than 9\n   * are treated the same as 9.\n   *\n   * @param {?Number} value The priority value.\n   */\n  setPriority(value) {\n    if (value === undefined || value === null) {\n      this._setPriority(undefined);\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for message priority',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > 255) {\n      throw new OperationError('Invalid priority value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._setPriority(value);\n  }\n\n  _setPriority(value) {\n    this._priority = value;\n  }\n\n  /**\n   * Gets the user data part of the message.\n   * @returns {String} The user data part of the message, if set.\n   */\n  getUserData() {\n    return this._userData;\n  }\n\n  /**\n   * Sets the user data part of the message.\n   * @param {String} value The user data part of the message.\n   */\n  setUserData(value) {\n    this._setUserData(isStringOrNothing('userData', value));\n  }\n  _setUserData(value) {\n    this._userData = value;\n  }\n\n  /**\n   * Gets the XML content part of the message.\n   * Notice that the content is encoded as UTF-8 characters,\n   * it needs to be decoded as JavaScript surrogate pair: decodeURIComponent(escape(value))\n   * @returns {?String} The XML content part of the message, if set.\n   */\n  getXmlContent() {\n    return this._xmlContent;\n  }\n\n  /**\n   * Gets the XML content part of the message decoded from UTF-8 encoding of the characters.\n   * @returns {?String} The XML content part of the message. Returns <code>null</code> if not\n   * present.\n   */\n  getXmlContentDecoded() {\n    return this._xmlContent ? utf8ToUcs2(this._xmlContent) : this._xmlContent;\n  }\n\n  /**\n   * Sets the XML content part of the message.\n   * The content is encoded by replacing each instance of certain characters\n   * by one, two, three, or four escape sequences representing the\n   * UTF-8 encoding of the character.\n   * @param {String} value The XML content part of the message.\n   */\n  setXmlContent(value) {\n    const setValue = isStringOrNothing('xmlContent', value);\n    this._xmlContent = setValue ? unescape(encodeURIComponent(setValue)) : setValue;\n  }\n\n  /**\n   * Internal set for the XML content part of the message.\n   * @param {String} value The XML content part of the message.\n   * @private\n   */\n  _setXmlContentInternal(value) {\n    this._xmlContent = isStringOrNothing('xmlContentInternal', value);\n  }\n\n  /**\n   * Sets the message's XML metadata section.\n   * @param {String} value The XML metadata.\n   */\n  setXmlMetadata(value) {\n    this._setXmlMetadata(isStringOrNothing('xmlMetadata', value));\n  }\n  _setXmlMetadata(value) {\n    this._xmlMetadata = value;\n  }\n\n  /**\n   * Gets the message's XML metadata section.\n   * @returns {?String} The XML metadata, if set.\n   */\n  getXmlMetadata() {\n    return this._xmlMetadata;\n  }\n\n  /**\n   * @private\n   */\n  get binaryMetadataChunk() {\n    return this._binaryMetaChunk || null;\n  }\n  /**\n   * @param {?String} meta The meta chunk to set\n   * @private\n   */\n  set binaryMetadataChunk(meta) {\n    this._binaryMetaChunk = meta;\n  }\n\n  /**\n   * @private\n   */\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  /**\n   * @param {SMFHeader} val The SMF header to set\n   * @private\n   */\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSequenceNumber() {\n    return this._autoSequenceNumber || false;\n  }\n  /**\n   * @param {Boolean} value Value to set\n   * @private\n   */\n  set hasAutoSequenceNumber(value) {\n    this._autoSequenceNumber = value;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSenderTimestamp() {\n    return this._autoSenderTimestamp || false;\n  }\n  /**\n   * @param {Number} value Value to set\n   * @private\n   */\n  set hasAutoSenderTimestamp(value) {\n    this._autoSenderTimestamp = value;\n  }\n\n  /**\n   * Gets the user property map carried in the message binary metadata.\n   *\n   * @returns {?solace.SDTMapContainer} The user properties map, if set.\n   */\n  getUserPropertyMap() {\n    return this._userPropertyMap;\n  }\n\n  /**\n   * Allows users to specify their own user properties to be carried\n   * in the message binary metadata separate from the payload.\n   * @param {?SDTMapContainer} value The user property map.\n   */\n  setUserPropertyMap(value) {\n    this._userPropertyMap = isInstanceOfOrNothing('userPropertyMap', value, SDTMapContainer);\n  }\n\n  /**\n   * Makes this message a strutured data message by assigning it a\n   * structured data type (SDT) container payload (such as a\n   * {@link solace.SDTMapContainer}, {@link solace.SDTStreamContainer}\n   * or a {@link solace.SDTFieldType.String}, which is transported in the binary attachment field.\n   *\n   * Assigning a SDT container updates the message's Type property to\n   * the appropriate value.\n   *\n   * The container argument must be a {@link solace.SDTField} with a type\n   * of {@link solace.SDTFieldType.MAP}, {@link solace.SDTFieldType.STREAM},\n   * or {@link solace.SDTFieldType.STRING}.\n   *\n   * @param {?solace.SDTField} container The SDTField container to send in this message.\n   */\n  setSdtContainer(container) {\n    const structuredContainer = isInstanceOfOrNothing('sdtContainer', container, SDTField);\n    if (structuredContainer === null || structuredContainer === undefined) {\n      // clear\n      this._structuredContainer = null;\n      this.setBinaryAttachment(null);\n      return;\n    }\n\n    this._setBinaryAttachment(null);\n    const sdtType = structuredContainer.getType();\n    switch (sdtType) {\n      case SDTFieldType.MAP:\n        this._messageType = MessageType.MAP;\n        break;\n      case SDTFieldType.STREAM:\n        this._messageType = MessageType.STREAM;\n        break;\n      case SDTFieldType.STRING:\n        this._messageType = MessageType.TEXT;\n        break;\n      default:\n        throw new OperationError('Invalid parameter: expected SDTField Type of ' +\n          'MAP, STREAM, or STRING.',\n          ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    this._structuredContainer = structuredContainer;\n  }\n\n  /**\n   * Gets the message's structured data container, if this is a structured data message.\n   *\n   * @returns {SDTField|null} A field with a payload of {String}, {@link SDTMapContainer},\n   * or {@link SDTStreamContainer} if one was set in the message; otherwise, null.\n   */\n  getSdtContainer() {\n    const msgType = this.getType();\n    const binaryAttachment = this._binaryAttachment;\n    const binaryAttachmentLength = binaryAttachment ? binaryAttachment.length : 0;\n\n    if (msgType === MessageType.BINARY) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: msgType=${msgType}`);\n      return null;\n    }\n\n    // MAP, STREAM or TEXT\n    // Use cached structured container if available\n    if (typeof this._structuredContainer !== 'undefined') {\n      return this._structuredContainer;\n    }\n\n    if (binaryAttachmentLength === 0) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: len=${binaryAttachmentLength}`);\n      this._structuredContainer = null;\n    } else {\n      // Last resort: Decode binary attachment.\n      // Cache structured container for later access\n      this._structuredContainer = SDTCodec.parseSingleElement(binaryAttachment, 0);\n    }\n\n\n    return this._structuredContainer;\n  }\n\n  /*\n   * returns a compressed binary attachment\n   * Used internally on the encode path.\n   * @returns {Uint8Array} A compressed array based on the binaryAttachment\n   * @private\n   */\n  _getCompressedBinaryAttachment() {\n    return this._compressedBinaryAttachment;\n  }\n  \n  /*\n   * Sets the compressed attachment for the messsage \n   * based on the level that was set in payloadCompressionLevel\n   * Used internally on the encode path.\n   * @param {Uint8Array} value sets the compressed attachment\n   * @private \n   */\n  _setCompressedBinaryAttachment(value) {\n    this._compressedBinaryAttachment = value;\n  }\n\n  /*\n   * Used internally on the decode path, it's the flag from the preamble.\n   * @returns {Boolean} value if the binary attachment was compressed\n   * @private \n   */\n  _getPayloadCompressed() {\n    return this._payloadCompressed; \n  }\n\n  /*\n   * Used internally on the decode path, it's the flag from the preamble.\n   * @param {Boolean} \n   * @private \n  */\n  _setPayloadCompressed(value) {\n    this._payloadCompressed = value;\n  }\n\n  // Message Tracing Section\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContextSetter} object that is used to modify \n   * an appropriate TraceContext associated with a message transparently.\n   * When no context is stored in a message it will create and store a creation \n   * context with a message that can be used as an initial\n   * transport context at the same time. \n   * It will never override an existing message creation context. \n   * When creation context is present or only transport context is present, it will\n   * override an existing transport context information with a newly provided one.\n   * \n   * @returns {solace.TraceContextSetter} Transport context setter object associated with this message; never expected to be null\n   */\n  getTraceContextSetter() {\n    // return the parent method\n    return super.getTraceContextSetter();\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over of the distributed tracing\n   * message creation context information usable by intermediary instrumentation across\n   * service boundaries. It allows correlating the producer with the consumers of a message,\n   * regardless of intermediary instrumentation. It must not be altered by intermediaries.\n   *\n   * @returns {solace.TraceContext} Message creation context object associated with this message;\n   */\n  getCreationContext() {\n    // call the parent method. Returns a readonly copy\n    return super.getCreationContext();\n  }\n \n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over \n   * of the distributed tracing transport context information usable or modifiable \n   * by intermediary instrumentation across service boundaries. \n   * It allows correlating the producer and the consumer with an intermediary.\n   * It also allows correlating multiple intermediaries among each other.\n   *\n   * @returns {solace.TraceContext} Transport context object associated with this message;\n   */\n  getTransportContext() {\n    // call the parent method. Returns a readonly copy\n    return super.getTransportContext();\n  }\n\n  /**\n   * Set the transport context.\n   * Called when the message is received from broker\n   * \n   * @param {solace.TraceContextSetter} contextSetter \n   */\n  setTransportContext(contextSetter) {\n    // call the parent method.\n    super._setTransportContext(contextSetter);\n  }\n\n  /**\n   * Retrieves a {@link solace.Baggage} carrier object used for carrying over of the distributed tracing\n   * message baggage information across service boundaries.  It must not be altered by\n   * intermediaries.\n   *\n   * @return {solace.Baggage} baggage carrier object associated with this message,\n   */\n  getBaggage() {\n    // returns the parent method baggage instance\n    // used for setting and retriving the baggage value \n    return super.getBaggage();\n  }\n\n  /**\n   * Produces a human-readable dump of the message's properties and\n   * contents. Applications must not parse the output, as its format is\n   * not a defined part of the API and subject to change.\n   *\n   * <p>\n   * Output can be controlled by the <code>flags</code> parameter. The values are:\n   * <ul>\n   * <li>{@link MessageDumpFlag.MSGDUMP_BRIEF} Display only the length of the\n   *                          binary attachment, xml attachment, and user property map\n   * <li>{@link MessageDumpFlag.MSGDUMP_FULL} Display the entire message.\n   * </ul>\n   * </p>\n   *\n   * @param {Number} [flags]  Optional flags controlling the output, such as whether\n   *                          to include verbose (binary dump) information\n   * @returns {String} A string representation of the message.\n   */\n  dump(flags = MessageDumpFlag.MSGDUMP_FULL) {\n    const validFlags = isEnumMember('flags', flags, MessageDumpFlag);\n    return MessageDumpUtil.dump(this, validFlags);\n  }\n\n  /**\n   * Clones the message\n   * @returns {Message} A clone of this message\n   * @private\n   */\n  clone() {\n    return clone(this, MESSAGE_CLONE_OPTIONS);\n  }\n\n  /**\n   * Releases all memory associated with this message. All values are reinitialized\n   * to defaults. The message is no longer associated with any session or consumer.\n   */\n  reset() {\n    clearMessage(this);\n    initMessage(this);\n  }\n\n  /**\n   * Clears all extended var-len message properties on this message.\n   * The message no longer has any extended variable length\n   * properties set.\n   * \n   * @internal\n   */\n  clearExtendedVarLenParams() {\n    clearExtendedVarLenParameters(this);\n  }\n}\n\n/**\n * A standard property key that clients should use if they want to\n * group messages into different queue partitions.\n * Expected value is UTF-8 encoded up to 255 bytes long string.\n */\nMessage.SOLCLIENT_USER_PROP_QUEUE_PARTITION_KEY = 'JMSXGroupID';\n\nmodule.exports.Message = Message;\n","const fs = require('fs');\nconst tls = require('tls');\nconst SolclientSessionLib = require('solclient-session');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_TRACE, LOG_DEBUG, LOG_WARN } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\n/**\n * Node TLS socket option generation factored out from WS transport, shared with Tcp transport.\n * Internal mixin class, not intended to be publicly visible.\n * @private\n */\n\nclass NodeTLSOptsMixin {\n  /**\n   * Overwrite Node.js default hostname check callback by verifying cnNameList against subject CN\n   * in the server certificate. If cnNameList is a empty string, it means all CNs are acceptable.\n   * @param {String} host The hostname for checking\n   * @param {String} cert The server certificate for checking\n   * @name solace.WebTransportSession#checkCertificateCNs\n   * @returns {?Error} Any error generated by the certificate check\n   * @private\n   */\n  checkCertificateCNs(host, cert) {\n    if (this._props.sslTrustedCommonNameList && this._props.sslTrustedCommonNameList.length > 0) {\n      // no Closure Compiler externs for certificates\n      LOG_DEBUG('server cert:', cert);\n      const subject = cert['subject']; // eslint-disable-line dot-notation\n      let valid = false;\n      if (subject) {\n        const cn = subject['CN']; // eslint-disable-line dot-notation\n        valid = this._props.sslTrustedCommonNameList.some(name =>\n          name.toLowerCase() === cn.toLowerCase()\n        );\n      }\n      if (!valid) {\n        const error = new Error('Server certificate not trusted - no common name match');\n        error.reason = 'Server certificate not trusted - no common name match';\n        error.host = host;\n        error.cert = cert;\n        return error;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Create the TLS options object used in wss:// and tcps:// connection establishment.\n   * The same options are needed by the ws and tls socket constructors.\n   * @returns {Object} WebSocket/TLSSocket options object\n   * @private\n   */\n  createTLSOptions() {\n    /* eslint-disable dot-notation */\n    const props = this._props;\n    const options = {};\n    const useClientCert = (\n      props.authenticationScheme === SolclientSessionLib.AuthenticationScheme.CLIENT_CERTIFICATE\n    );\n\n    // available tls options:\n    //  pfx, key, passphrase, cert, ca, ciphers, rejectUnauthorized,\n    //  secureProtocol, secureOptions, checkServerIdentity\n\n    const constMap = SolclientSessionLib.SessionProperties.SslProtocolExcludeConstantMap;\n    options['secureOptions'] = constMap['sslv2'] | constMap['sslv3'];\n    (props.sslExcludedProtocols || []).forEach((protocol) => {\n      options['secureOptions'] |= constMap[protocol.toLowerCase()];\n    });\n\n    if (props.tlsMinProtocol) {\n      options['minVersion'] = props.tlsMinProtocol\n    } else {\n      options['minVersion'] = 'TLSv1.2'\n    }\n\n    if (props.tlsMaxProtocol) {\n      options['maxVersion'] = props.tlsMaxProtocol\n    }\n\n    if (props.sslCipherSuites) {\n      // This is a bit weird but actually makes sense:\n      // nodeJS has one cipher list for pre- and post-TLSv1.3.\n      // The TLSv1.3 ones, which we don't want to make changeable via session props, start with \"TLS_\" .\n      // nodeJS also has platform level defaults and configs for ciphers, which we do want to respect for TLSv1.3 .\n      // So if the user suppliess a pre-TLSv1.3 cipher list, we add the TLSv1.3 ones from DEFAULT_CIPHERS to it.\n\n      const default_ciphers = tls.DEFAULT_CIPHERS.split(':').map(c => c.trim());\n      const default_tls13_ciphers = default_ciphers.filter(c => c.startsWith(\"TLS_\"))\n\n      const ciphers = props.sslCipherSuites.split(',');\n      const trimmed = ciphers.map(cipher => cipher.trim());\n      options['ciphers'] = default_tls13_ciphers.concat(trimmed).join(':');\n    }\n\n    options['rejectUnauthorized'] = props.sslValidateCertificate;\n\n    // only set checkServerIdentity callback if rejectUnauthorized\n    if (options['rejectUnauthorized'] && Array.isArray(props.sslTrustedCommonNameList)) {\n      options['checkServerIdentity'] = this.checkCertificateCNs.bind(this);\n    }\n\n    // only set trust stores and and checkServerIdentity callback\n    // if rejectUnauthorized is true or authClientCert\n    if ((options['rejectUnauthorized'] || useClientCert) &&\n      props.sslTrustStores && props.sslTrustStores.length) {\n      const tsContents = [];\n      props.sslTrustStores.forEach((tsFile) => {\n        try {\n          tsContents.push(fs.readFileSync(tsFile));\n        } catch (e) {\n          LOG_WARN(`Failed to load trust store ${tsFile}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load trust store ${tsFile}`,\n            ErrorSubcode.FAILED_LOADING_TRUSTSTORE,\n            e);\n        }\n      });\n      options['ca'] = tsContents;\n    }\n\n\n    if (useClientCert) {\n      if (props.sslPfx) {\n        try {\n          options['pfx'] = fs.readFileSync(props.sslPfx);\n          options['passphrase'] = props.sslPfxPassword;\n        } catch (e) {\n          LOG_WARN(`Failed to load pfx file ${props.sslPfx}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load pfx ${props.sslPfx}`,\n            ErrorSubcode.FAILED_LOADING_CERTIFICATE_AND_KEY, e);\n        }\n      }\n      if (props.sslPrivateKey) {\n        try {\n          options['key'] = fs.readFileSync(props.sslPrivateKey);\n          options['passphrase'] = props.sslPrivateKeyPassword;\n        } catch (e) {\n          LOG_WARN(`Failed to load private key ${props.sslPrivateKey}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load private key ${props.sslPrivateKey}`,\n            ErrorSubcode.FAILED_LOADING_CERTIFICATE_AND_KEY, e);\n        }\n      }\n      if (props.sslCertificate) {\n        try {\n          options['cert'] = fs.readFileSync(props.sslCertificate);\n        } catch (e) {\n          LOG_WARN(`Failed to load certificate file ${props.sslCertificate}`, e.message);\n          LOG_TRACE('Error details:', e.stack || e);\n          throw new OperationError(`Failed to load certificate ${props.sslCertificate}`,\n            ErrorSubcode.FAILED_LOADING_CERTIFICATE_AND_KEY, e);\n        }\n      }\n    }\n    //SNI\n    const hostname = parseURL(this._url).hostname;\n    options['servername'] = hostname;\n    return options;\n    /* eslint-enable dot-notation */\n  }\n\n}\n\nmodule.exports.NodeTLSOptsMixin = NodeTLSOptsMixin;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { LOG_ERROR } = require('solclient-log');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst ParseMap = {};\nParseMap.parseMapAt = function parseMapAt(dataBuf, offset, datalen) {\n  const mapObj = new SDTMapContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    // === key field ===\n    const keyFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    pos += keyFieldHeader[3]; // consumed bytes\n    // pos now points to start of string\n    if (keyFieldHeader[0] !== SDTDataTypes.String) {\n      // Fail!\n      LOG_ERROR(\"Error parsing SDTMAP, expected to find a string field as map key, and didn't\");\n      LOG_ERROR(`Type of key: ${keyFieldHeader[0]}`);\n      return SDTField.create(SDTFieldType.MAP, null);\n    }\n    const keyString = dataBuf.toString('latin1', pos, pos + keyFieldHeader[2] - 1);\n    pos += keyFieldHeader[2];\n\n    // === value field ===\n    // pos now points to start of next value\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      mapObj.addField(keyString, valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.MAP, mapObj);\n};\n\nmodule.exports.ParseMap = ParseMap;\n","const DEFAULT_PROPERTY_OPTIONS = {\n  enumerable: true,\n};\n\nfunction setPropertyValue(target, key, value, options = null) {\n  Object.defineProperty(\n          target,\n          key,\n          Object.assign({ value }, DEFAULT_PROPERTY_OPTIONS, options));\n}\n\n\nfunction lazyProperty(target, key, evalFn) {\n  Object.defineProperty(\n    target,\n    key,\n    Object.assign({\n      configurable: true, // Allow replacing this property with resolved value.\n      get:          () => {\n        // The getter evaluates the function provided.\n        // It replaces itself with the value it resolves.\n        const result = evalFn(target, key);\n        setPropertyValue(target, key, result);\n        return result;\n      },\n      set: (value) => {\n        setPropertyValue(target, key, value);\n      },\n    }, DEFAULT_PROPERTY_OPTIONS));\n  return target;\n}\n\nfunction lazyProperties(target, obj) {\n  Object.keys(obj).forEach((k) => {\n    lazyProperty(target, k, obj[k]);\n  });\n  return obj;\n}\n\nfunction lazyValue(evalFn) {\n  return lazyProperty({}, 'value', evalFn);\n}\n\nconst Lazy = {\n  lazyProperties,\n  lazyProperty,\n  lazyValue,\n};\n\nmodule.exports.Lazy = Lazy;\n","const DebugLib = require('solclient-debug');\nconst { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT unsupported value error.  An SDT field was assigned a value that is within\n * the type range for the given SDT type, but is not supported on this platform/runtime.\n * This occurs when a received {@link solace.SDTContainerMap} or {@link solace.SDTContainerStream}\n * contains a field with a value that can not represented in the local architecture.\n * Possible causes include:\n * * receive 64 bit integer that cannot be represented accurately in a javaScript number. JavaScript\n *   numbers are floats and can only hold a 48 bit integer without loss of precission. Any integer\n *   greater than 281474976710655 or less than -281474976710655 will cause this exception.\n * @hideconstructor\n * @extends solace.SolaceError\n * @memberof solace\n */\nclass SDTUnsupportedValueError extends SolaceError {\n  /*\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {SDTValueErrorSubcode} subcode The subcode associated with this error\n   * @param {Object} sourceData The original representation of the value\n   */\n  constructor(message, subcode, sourceData) {\n    /**\n     * The name of the error.\n     * @name solace.SDTUnsupportedValueError#name\n     * @type {String}\n     * @readonly\n     * @description 'SDTUnsupportedValue'\n     */\n    super('SDTUnsupportedValue', message);\n    /**\n     * The subcode for the error. see {@link solace.SDTValueErrorSubcode}\n     * @name solace.SDTUnsupportedValueError#subcode\n     * @type {solace.SDTValueErrorSubcode}\n     */\n    this.subcode = subcode;\n    this.sourceData = sourceData || '';\n  }\n\n  inspect() {\n    return super.inspect({\n      subcode:    null,\n      sourceData: v => DebugLib.Debug.formatDumpBytes(v, false, 0),\n    });\n  }\n\n  getSubcode() {\n    return this.subcode;\n  }\n\n  getSourceData() {\n    return this.sourceData;\n  }\n}\n\n\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\n","module.exports = require(\"stream\");","const { Convert } = require('solclient-convert');\nconst { SDTDataTypes } = require('../sdt-data-types');\n\nconst EncodeHeader = {};\nEncodeHeader.encodeHeader = function encodeHeader(tag, valueLen) {\n  // Tag in first 6 bits, then (lenbytes-1) in 2 bits\n  let byte0 = (tag << 2) & 0xFF;\n  let strSdtLen = null;\n\n  if (tag === SDTDataTypes.Map || tag === SDTDataTypes.Stream) {\n    // force 4 bytes\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  } else if (valueLen + 2 <= 255) {\n    strSdtLen = Convert.int8ToStr(valueLen + 2);\n    byte0 |= 0; // 1 length byte\n  } else if (valueLen + 3 <= 65535) {\n    strSdtLen = Convert.int16ToStr(valueLen + 3);\n    byte0 |= 1; // 2 length bytes\n  } else {\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  }\n  const ret = Convert.int8ToStr(byte0) + strSdtLen;\n  return ret;\n};\n\nmodule.exports.EncodeHeader = EncodeHeader;\n","module.exports = require(\"dns\");","const { Baggage } = require('./lib/baggage');\nconst { TraceContext } = require('./lib/message-trace-context');\nconst { TraceContextSetter } = require('./lib/message-trace-context-setter');\nconst { MessageTracingSupport } = require('./lib/message-tracing-support');\n\nmodule.exports.Baggage = Baggage;\nmodule.exports.TraceContext = TraceContext;\nmodule.exports.TraceContextSetter = TraceContextSetter;\nmodule.exports.MessageTracingSupport = MessageTracingSupport;\n","/**\n * @classdesc\n *\n * Encapsulates the session's message receive callback function and\n * an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.\n * Use <tt>sessionObject.on({@link solace.SessionEventCode.MESSAGE})</tt> instead.\n *\n * @memberof solace\n */\nclass MessageRxCBInfo {\n\n  /**\n   * Creates an instance of MessageRxCBInfo.\n   *\n   * @param {function(Session, Message, Object)} messageRxCBFunction\n   *          Invoked by the API when a message is received\n   *          over the session. The prototype of this function is the\n   *          following: ({@link solace.Session},\n   *                      {@link solace.Message},\n   *                      {Object})\n   * @param {Object} userObject\n   *          An optional user-specified object passed on every message receive callback.\n   *\n   * @memberof solace\n   */\n  constructor(messageRxCBFunction, userObject) {\n    /**\n     * @type {function(Session, Message, Object)}\n     * @description The prototype of this function is the\n     * following: ({@link solace.Session}, {@link solace.Message}, userObject {Object})\n     */\n    this.messageRxCBFunction = messageRxCBFunction;\n\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\n","const { Bits, Convert } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFTransportSessionMessageType } = require('../smf-transport-session-message-types');\nconst { TransportSMFMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int16ToStr,\n  int32ToStr,\n} = Convert;\nconst { lazyValue } = Lazy;\n\n// ========== TSSMF ==========\nfunction remains(dataBuf, offset) {\n  return dataBuf.length - offset;\n}\n\nfunction parseTsSmfHdrAt(dataBuf, offset, smfheader) {\n  let pos = offset;\n  if (remains(dataBuf, pos) < 10) {\n    LOG_ERROR('TsSmf parse failed: not enough data, expected at least 10B');\n    return false;\n  }\n\n  const transportSMFMessage = new TransportSMFMessage();\n  transportSMFMessage.smfHeader = smfheader;\n  const twobyte = dataBuf.readUInt16BE(pos);\n  pos += 2;\n  transportSMFMessage.uh = bits(twobyte, 15, 1);\n  transportSMFMessage.messageType = bits(twobyte, 8, 7);\n  const tsHdrLen = bits(twobyte, 0, 8);\n  transportSMFMessage.tsHeaderLength = tsHdrLen;\n  transportSMFMessage.sessionId = dataBuf.toString('latin1', pos, pos + 8);\n  pos += 8;\n\n  if (transportSMFMessage.messageType ===\n      SMFTransportSessionMessageType.CREATE_RESP) {\n    // parse extra chunk: routerTag\n    const rtrTagLen = dataBuf.readUInt8(pos);\n    pos++;\n    if (remains(dataBuf, pos) < rtrTagLen) {\n      LOG_ERROR(`TsSmf parse failed: not enough data for RouterTag, expected ${rtrTagLen}B`);\n      return false;\n    }\n    transportSMFMessage.routerTag = dataBuf.toString('latin1', pos, pos + rtrTagLen);\n    pos += rtrTagLen;\n  }\n\n  // FFWD any remaining TsSmf padding?\n  pos = offset + tsHdrLen;\n\n  // Length of encapsulated message payload:\n  // the SMF msg payload length - bytes consumed in TsSmf\n\n  if (smfheader.payloadLength === 0xffffffff) {\n    // special \"streaming\" unknown-length header\n    transportSMFMessage.payloadLength = smfheader.payloadLength;\n  } else {\n    transportSMFMessage.payloadLength = smfheader.payloadLength - tsHdrLen;\n  }\n  return transportSMFMessage; // Header with no payload field\n}\n\n// Generates an SMF header up to, but not including the the total length\n// This is fixed for all client generated transport session messages\nconst tsHeaderPreLength = lazyValue(() => (\n  int32ToStr(0x03140001) +  // SMF version, TransportSession, TTL\n  int32ToStr(12)            // Header length\n));\n\nconst tsDestroyHeaderPreSid = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x820a)        // msgType(destroy), length\n));\n\nconst tsCreateHeader = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x800a) +      // msgType(create), length\n  int32ToStr(0) +           // Session ID (first half)\n  int32ToStr(0)             // Session ID (second half)\n));\n\nconst tsDataTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(22) +\n  int16ToStr(0x850a)\n));\n\nconst tsDataStreamTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(24) +\n  int16ToStr(0x860c)\n));\n\n// Generate a full Transport Session Create header\nfunction genTsCreateHeader() {\n  return tsCreateHeader.value;\n}\n\n// Generate a full Transport Session Destroy header\nfunction genTsDestroyHeader(sid) {\n  return (\n    tsDestroyHeaderPreSid.value +\n    sid                       // Session ID\n  );\n}\n\n// Generate a data token message\nfunction genTsDataTokenMsg(sid) {\n  return (\n    tsDataTokenPreSid.value +\n    sid\n  );\n}\n\n// Generate a STREAMING data token message\nfunction genTsDataStreamTokenMsg(sid, paddingBytes) {\n  return (\n    tsDataStreamTokenPreSid.value +\n    sid +\n    ((paddingBytes && paddingBytes > 0) ? int16ToStr(paddingBytes) : int16ToStr(0x0000))\n  );\n}\n\nfunction genTsDataMsgHeaderParts(sid) {\n  return [\n    (int32ToStr(0x03940001) + int32ToStr(12)),\n    (int16ToStr(0x840a) + sid),\n  ];\n}\n\nfunction parseTsSmfMsgAt(dataBuf, offset, smfheader) {\n  const transportSMFMessage = parseTsSmfHdrAt(dataBuf, offset, smfheader);\n  if (!transportSMFMessage) {\n    return null;\n  }\n\n    // need to FF to pos\n  const pos = offset + transportSMFMessage.tsHeaderLength;\n\n    // Length of encapsulated message payload:\n    // the SMF msg payload length - bytes consumed in TsSmf\n  if (remains(dataBuf, pos) < transportSMFMessage.payloadLength) {\n    LOG_ERROR(`Couldn't read full encapsulated TsSmf payload, expected ${transportSMFMessage.payloadLength}B`);\n    return null;\n  }\n\n  transportSMFMessage.payload =\n                            dataBuf.slice(pos, pos + transportSMFMessage.payloadLength);\n  return transportSMFMessage;\n}\n\nconst Transport = {\n  genTsCreateHeader,\n  genTsDestroyHeader,\n  genTsDataTokenMsg,\n  genTsDataStreamTokenMsg,\n  genTsDataMsgHeaderParts,\n  parseTsSmfHdrAt,\n  parseTsSmfMsgAt,\n};\n\nmodule.exports.Transport = Transport;\n","const { Enum } = require('solclient-eskit');\n\nconst FlowOperation = {\n  CONNECT:         'FlowOperation_CONNECT',\n  DISCONNECT:      'FlowOperation_DISCONNECT',\n  START:           'FlowOperation_START',\n  STOP:            'FlowOperation_STOP',\n  DISPOSE:         'FlowOperation_DESTROY',\n  GET_STATS:       'FlowOperation_GET_STATS',\n  RESET_STATS:     'FlowOperation_RESET_STATS',\n  GET_PROPERTIES:  'FlowOperation_GET_PROPERTIES',\n  GET_DESTINATION: 'FlowOperation_GET_DESTINATION',\n};\n\nmodule.exports.FlowOperation = Enum.new(FlowOperation);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of peer capabilities.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CapabilityType = {\n  /**\n   * Peer's software load version. Type: string.\n   */\n  PEER_SOFTWARE_VERSION:        0,\n  /**\n   * Peer's software release date. Type: string.\n   */\n  PEER_SOFTWARE_DATE:           1,\n  /**\n   * Peer's platform. Type: string.\n   */\n  PEER_PLATFORM:                2,\n  /**\n   * Speed (in Mbps) of the port the client connects to. Type: number.\n   */\n  PEER_PORT_SPEED:              3,\n  /**\n   * Type of the port the client has connected to (currently 0: Ethernet). Type: number.\n   */\n  PEER_PORT_TYPE:               4,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_DIRECT_MSG_SIZE:          5,\n  /**\n   * Peer's router name. Type: string.\n   *\n   * This property is useful when sending SEMP requests to a peer's SEMP topic, which may be\n   * constructed as `#P2P/routername/#client/SEMP`.\n   */\n  PEER_ROUTER_NAME:             6,\n  /**\n   * Peer supports message eliding. Type: boolean.\n   */\n  MESSAGE_ELIDING:              7,\n  /**\n   * Peer supports NoLocal option (client may avoid receiving messages published by itself).\n   */\n  NO_LOCAL:                     8,\n  /**\n   * Peer supports Guaranteed Message Consumer connections for receiving guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_CONSUME:   9,\n  /**\n   * Peer supports temporary endpoints.\n   */\n  TEMPORARY_ENDPOINT:           10,\n  /**\n   * Peer supports Guaranteed Message Publisher connections for sedning guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_PUBLISH:   11,\n  /**\n   * Peer supports Guaranteed Messages Browser connections for receiving guaranteed messages\n   */\n  GUARANTEED_MESSAGE_BROWSE:    12,\n  /**\n   * Peer supports creating/modify/disposing endpoints.\n   */\n  ENDPOINT_MGMT:                13,\n  /**\n   * Peer supports selectors on Guaranteed Message Consumers.\n   */\n  SELECTOR:                     14,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_GUARANTEED_MSG_SIZE:      15,\n  /**\n   * Peer supports Guaranteed Messaging Consumer state change updates. Type: boolean\n   */\n  ACTIVE_CONSUMER_INDICATION:   16,\n  /**\n   * Peer accepts compressed (DEFLATE) data. Type: boolean.\n   */\n  COMPRESSION:                  17,\n  /**\n   * Peer supports Guaranteed Messaging cut-through. Type: boolean\n   * @deprecated since broker v9.10.0.12\n   */\n  CUT_THROUGH:                  18,\n  /**\n   * Peer supports provisioned queue and topic-endpoint discard behavior. Type: boolean\n   */\n  ENDPOINT_DISCARD_BEHAVIOR:    19,\n  /**\n   * Peer supports Guaranteed Messaging message TTL and Dead-Message Queues. Type: boolean\n   */\n  ENDPOINT_MESSAGE_TTL:         20,\n  /**\n   * Peer accepts JNDI queries. Type: boolean.\n   */\n  JNDI:                         21,\n  /**\n   * Peer supports per topic sequence numbering for Guaranteed Messaging messages. Type: boolean\n   */\n  PER_TOPIC_SEQUENCE_NUMBERING: 22,\n  /**\n   * Peer supports QueueSubscriptionAdd for managing subscriptions on queue endpoints.\n   * Type: boolean\n   */\n  QUEUE_SUBSCRIPTIONS:          23,\n  /**\n   * Peer supports add/remove subscriptions for a specified clientName. Type: boolean\n   */\n  SUBSCRIPTION_MANAGER:         24,\n  /**\n   * Peer supports transacted sessions. Type: boolean.\n   */\n  TRANSACTED_SESSION:           25,\n  /**\n   * Peer support Message Replay. Type: boolean.\n   */\n  MESSAGE_REPLAY:               26,\n  /**\n   * Peer supports TLS downgrade to compression (encrypted and plaintext) Type: boolean\n   */\n  COMPRESSED_SSL:               27,\n  /**\n   * The peer can support \\#share and \\#noexport subscriptions\n   * Type: Boolean\n   */\n  SHARED_SUBSCRIPTIONS:         28,\n  /**\n   * The EndpointErrorId in replay bind responses can be trusted.\n   */\n  BR_REPLAY_ERRORID:            29,\n  /**\n   * Support for ApplicationAck optional outcomes \"failed\" and \"rejected\".\n   */\n  AD_APP_ACK_FAILED:            30,\n  /**\n   * Broker supports variable-length SMF extended parameters.\n   */\n  VAR_LEN_EXT_PARAM:            31,\n};\n\n/**\n * Represents an enumeration of client capabilities.\n * These are sent in the ClientCtrl login messages.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ClientCapabilityType = {\n  /**\n   * Client implements acknowledgements to router unsolicited unbinds.\n   * Always true.\n   */\n  UNBIND_ACK: 0,\n  /**\n   * Indicates whether a client will process an EndpointErrorId in a BindResponse message.\n   * Always true\n   */\n  BR_ERRORID: 1,\n  /**\n   * Indicates whether a client supports Partitioned Queues\n   * and whether a PartitionGroupId will be proccessed in a BindResponse message.\n   * Always true\n   * \n   * @since 10.12.0\n   */\n   PQ: 2,\n};\nmodule.exports.CapabilityType = Enum.new(CapabilityType);\nmodule.exports.ClientCapabilityType = Enum.new(ClientCapabilityType);\n","const { Convert } = require('solclient-convert');\nconst { LOG_DEBUG } = require('solclient-log');\nconst { ParseDestination } = require('./parse-destination');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { ParseFloat } = require('./parse-float');\nconst { ParseInteger } = require('./parse-integer');\nconst { ParseMap } = require('./parse-map');\nconst { ParseStream } = require('./parse-stream');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst {\n  utf8ToUcs2,\n} = Convert;\nconst { parseFieldHeader } = ParseFieldHeader;\nconst { parseFloatField } = ParseFloat;\nconst { parseIntegerField } = ParseInteger;\nconst { parseMapAt } = ParseMap;\nconst { parseStreamAt } = ParseStream;\nconst { parseDestination } = ParseDestination;\n\nconst ParseSingleElement = {\n  // Parse single SDT element, returns SDTField\n  parseSingleElement(dataBuf, offset) {\n    const fieldHeader = parseFieldHeader(dataBuf, offset);\n    if (!fieldHeader) {\n      LOG_DEBUG(`parseSingleElement return false, fieldHeader=${fieldHeader}`);\n      return null;\n    }\n\n    const pos = offset + fieldHeader[3];\n\n    // For use inside switch\n    const elemValLen = fieldHeader[2];\n\n    switch (fieldHeader[0]) {\n      case SDTDataTypes.Null:\n        return SDTField.create(SDTFieldType.NULLTYPE, null);\n      case SDTDataTypes.Boolean:\n        return SDTField.create(SDTFieldType.BOOL, dataBuf.readUInt8(pos) !== 0);\n      case SDTDataTypes.Integer:\n        return parseIntegerField(true, dataBuf, pos, elemValLen);\n      case SDTDataTypes.UnsignedInteger:\n        return parseIntegerField(false, dataBuf, pos, elemValLen);\n      case SDTDataTypes.Float:\n        return parseFloatField(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Char:\n        return SDTField.create(SDTFieldType.WCHAR,\n                               String.fromCharCode(dataBuf.readUInt16BE(pos)));\n      case SDTDataTypes.ByteArray:\n        return SDTField.create(SDTFieldType.BYTEARRAY,\n                               dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.String:\n        // strip last byte (null-terminator)\n        return SDTField.create(SDTFieldType.STRING,\n                               utf8ToUcs2(dataBuf.toString('latin1', pos, pos + elemValLen - 1)));\n      case SDTDataTypes.Destination:\n        return parseDestination(dataBuf, pos, elemValLen);\n      case SDTDataTypes.SMFMessage:\n        return SDTField.create(SDTFieldType.SMF_MESSAGE, dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.Map:\n        return parseMapAt(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Stream:\n        return parseStreamAt(dataBuf, pos, elemValLen);\n      default:\n        // removed toString conversion as a test\n        return SDTField.create(SDTFieldType.UNKNOWN,\n                               dataBuf.toString('latin1', pos, pos + elemValLen));\n    }\n  },\n};\n\nconst StringToBuffer = {\n  stringToBuffer(str) {\n    const BufferImpl = require('buffer').Buffer;\n    return BufferImpl.from(str, 'latin1');\n  },\n};\n\nmodule.exports.ParseSingleElement = ParseSingleElement;\nmodule.exports.StringToBuffer = StringToBuffer;\n","\n// Avoid closure compiler nonsense\nmodule.exports.makeMap = function makeMap(...keyValuePairs) {\n  const result = {};\n  for (let i = 0; i < keyValuePairs.length; i += 2) {\n    result[keyValuePairs[i]] = keyValuePairs[i + 1];\n  }\n  return result;\n};\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { Topic } = require('solclient-destination');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  queueProperties:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  topicEndpointSubscription:               undefined,\n  // selector: undefined,\n  acknowledgeMode:                         MessageConsumerAcknowledgeMode.AUTO,\n  requiredSettlementOutcomes:              [], // MessageOutcome.ACCEPTED is not required to be set and always supported\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n  activeIndicationEnabled:                 false,\n  noLocal:                                 false,\n  windowSize:                              255,\n  _browser:                                false,\n  replayStartLocation:                     undefined,\n  reconnectAttempts:                       -1,\n  reconnectIntervalInMsecs:                3000,\n  createIfMissing:                         false,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.MessageConsumer}.\n *\n * @memberof solace\n */\nclass MessageConsumerProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor} unless\n   *    {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *  * When an {@link solace.AbstractQueueDescriptor} is used, the name is generated when\n   *    the {@link solace.MessageConsumer} is connected. The generated descriptor can be queried\n   *    from the consumer after it has successfully connected by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value instanceof QueueLib.AbstractQueueDescriptor) {\n      this._queueDescriptor = value;\n    } else if (value) {\n      this._queueDescriptor = value.name\n        ? new QueueLib.QueueDescriptor(value)\n        : new QueueLib.AbstractQueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  /**\n   * Gets the properties of the remote queue.\n   *  * For temporary queues and temporary topic endpoints,\n   *    or if {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   *    these properties define the endpoint that is created.\n   *  * For durable queues, these must be unset on consumer creation\n   *    unless {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *    The values will be populated\n   *    after the queue is connected and can be retrieved by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueProperties|null|undefined}\n   * @default undefined\n   */\n  get queueProperties() {\n    return Check.something(this._queueProperties)\n      ? this._queueProperties\n      : DEFAULTS.queueProperties;\n  }\n  set queueProperties(value) {\n    if (value) {\n      this._queueProperties = new QueueLib.QueueProperties(value);\n    } else {\n      this._queueProperties = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ------------ Properties applied to the queue when connecting ----------------\n\n  /**\n   * This must be undefined if the type of the\n   * {@link solace.MessageConsumerProperties#queueDescriptor} is not\n   * {@link solace.QueueType.TOPIC_ENDPOINT}.\n   *\n   * If {@link solace.MessageConsumerProperties#queueDescriptor} is\n   * not durable, or {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   * this may be left undefined to generate the topic endpoint's\n   * destination. When generated, the destination can be obtained from\n   * the {@link solace.MessageConsumer} after it is connected by calling\n   * {@link solace.MessageConsumer#getDestination}.\n   *\n   * @type {solace.Destination}\n   * @default undefined\n   */\n  get topicEndpointSubscription() {\n    return this._topicEndpointSubscription;\n  }\n  set topicEndpointSubscription(val) {\n    // Avoid instanceof check failing on Node 4?\n    if (typeof val === 'string') {\n      this._topicEndpointSubscription = Topic.createFromName(val);\n    } else {\n      this._topicEndpointSubscription = val;\n    }\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n\n  /**\n   * The Application Acknowledgement mode for the Message Consumer.\n   *\n   * When the acknowledgement mode is {@link solace.MessageConsumerAcknowledgeMode.CLIENT},\n   * a message is Application Acknowledged when the application calls\n   * {@link solace.Message#acknowledge} on that message.\n   *\n   * When the acknowledge mode is {@link solace.MessageConsumerAcknowledgeMode.AUTO}, a message is\n   * Application Acknowledged by the API after all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE}\n   * listeners are called and none throw an exception. If a message handler throws, the message\n   * can still be acknowledged by calling {@link solace.Message#acknowledge}, but this would not be\n   * a recommended practice.\n   *\n   * When received messages are Application Acknowledged they are removed from the Guaranteed\n   * Message storage on the Solace Message Router. Message Consumer Application Acknowledged,\n   * <b>only</b> remove messages from the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {solace.MessageConsumerAcknowledgeMode}\n   * @default solace.MessageConsumerAcknowledgeMode.AUTO\n   */\n  get acknowledgeMode() {\n    return Check.something(this._acknowledgeMode)\n      ? this._acknowledgeMode\n      : DEFAULTS.acknowledgeMode;\n  }\n  set acknowledgeMode(value) {\n    this._acknowledgeMode = value;\n  }\n\n  /**\n   * The required settlement outcomes for the Message Consumer.\n   *\n   * A session is created with SUPPORTED_MESSAGE_ACK_CLIENT by setting\n   * the requiredSettlementOutcomes property to support negative acknowledgment outcomes.\n   *\n   * The {@link solace.MessageOutcome.ACCEPTED} outcome is not required to be set and is always\n   * supported as a settlement outcome.\n   *\n   * When the requiredSettlementOutcomes include either {@link solace.MessageOutcome.FAILED}\n   * or {@link solace.MessageOutcome.REJECTED}, a message can be settled with any of these outcomes.\n   *\n   * The {@link solace.Message#acknowledge} method internally calls the {@link solace.Message#settle}\n   * with the {@link solace.MessageOutcome.ACCEPTED} passed as the settlement outcome for that message.\n   *\n   * When received messages are Application Acknowledged/Settled with\n   * a {@link solace.MessageOutcome.ACCEPTED} outcome, they are removed from the Guaranteed\n   * Message storage on the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {Array.<solace.MessageOutcome>}\n   * @default []\n   */\n  get requiredSettlementOutcomes() {\n    return Check.something(this._requiredSettlementOutcomes)\n      && Check.array(this._requiredSettlementOutcomes)\n      ? this._requiredSettlementOutcomes\n      : DEFAULTS.requiredSettlementOutcomes;\n  }\n  set requiredSettlementOutcomes(value) {\n    this._requiredSettlementOutcomes = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not\n   * less than this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   * @deprecated\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   * @deprecated\n   */\n  get acknowledgeThreshold() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set acknowledgeThreshold(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties.transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * @description When enabled, a Guaranteed Messaging Consumer requests Active and Inactive\n   * events from the router and emits them to interested listeners.\n   * @type {Boolean}\n   * @default false\n   * @see {@link solace.MessageConsumerEventName.ACTIVE}\n   * @see {@link solace.MessageConsumerEventName.INACTIVE}\n   */\n  get activeIndicationEnabled() {\n    return Check.something(this._activeIndicationEnabled)\n      ? this._activeIndicationEnabled\n      : DEFAULTS.activeIndicationEnabled;\n  }\n  set activeIndicationEnabled(newValue) {\n    this._activeIndicationEnabled = newValue;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer does not receive messages published\n   * in the same Session, even if the endpoint contains a subscription that matches the published\n   * message.\n   * @type {Boolean}\n   * @default false\n   */\n  get noLocal() {\n    return Check.something(this._noLocal)\n      ? this._noLocal\n      : DEFAULTS.noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer will connect as a queue browser\n   * @type {Boolean}\n   * @default false\n   * @private\n   * @internal\n   */\n  get browser() {\n    return Check.something(this._browser)\n      ? this._browser :\n      DEFAULTS._browser;\n  }\n  set browser(newValue) {\n    this._browser = newValue;\n  }\n  /**\n   * When a Flow is created, the application may request replay of messages from the replay log,\n   * even messages that have been previously delivered and removed the from topic endpoint or queue.\n   * The default is undefined, and indicates that no replay is requested.\n   *\n   * When defined the replay start location must be a {@link solace.ReplayStartLocation} object\n   * as returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning} or\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}.\n   *\n   * The {@link solace.ReplayStartLocation} returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning}\n   * indicate that all messages available should be replayed.\n   *\n   * The replay start location returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}\n   * indicates that all messages logged since a given date must be retrieved.\n   * @type {solace.ReplayStartLocation}\n   * @default undefined.\n   */\n  get replayStartLocation() {\n    return Check.something(this._replayStartLocation)\n      ? this._replayStartLocation :\n        DEFAULTS.replayStartLocation;\n  }\n  set replayStartLocation(newValue) {\n    this._replayStartLocation = newValue;\n  }\n\n  /**\n   * When a connected flow receives an unsolicited unbind event with subcode\n   * REPLAY_STARTED or GM_UNAVAILABLE, the SDK can reconnect the flow automatically.\n   * This property controls the flow auto reconnect feature:\n   * 0: Disable flow auto reconnect for this consumer flow.\n   * -1: Enable flow auto reconnect for this consumer flow, infiinite retries (default)\n   * <n, positive number>: Enable flow auto reconnect for this consumer flow, n retries.\n   *\n   * When the flow auto rebind is enabled, DOWN_ERRORs with REPLAY_STARTED and GM_UNAVAILABLE\n   * are handled internally, and not (immediately) emitted to the application.\n   * A RECONNECTING event (with the same subcode) is emitted instead,\n   * ideally followed by a RECONNECTED event when the reconnect succeedes.\n   * In case of REPLAY_STARTED, the window of message IDs and acknowledgements are reset\n   * to allow replay packets to be passed to the application without marking them as duplicates.\n   * In case of GM_UNAVAILABLE, flow state is preserved.\n   *\n   * If reconnecting fails after exhausting the number of retries, a DOWN_ERROR is emitted\n   * with the details of the last retry.\n   *\n   *\n   * @type {Number}\n   * @default -1\n   */\n  get reconnectAttempts() {\n    return Check.something(this._reconnectAttempts)\n      ? this._reconnectAttempts :\n        DEFAULTS.reconnectAttempts;\n  }\n  set reconnectAttempts(newValue) {\n    this._reconnectAttempts = newValue;\n  }\n\n  /**\n   * Time to wait between flow auto reconnect attempts, in milliseconds.\n   * See {@link solace.MessageConsumerProperties.reconnectAttempts}\n   * Defaults to 3 seconds (3000)\n   *  * The valid range is >= 50.\n   *\n   * @type {Number}\n   * @default 3000\n   */\n  get reconnectIntervalInMsecs() {\n    return Check.something(this._reconnectIntervalInMsecs)\n      ? this._reconnectIntervalInMsecs :\n        DEFAULTS.reconnectIntervalInMsecs;\n  }\n  set reconnectIntervalInMsecs(newValue) {\n    this._reconnectIntervalInMsecs = newValue;\n  }\n\n  /**\n   * If the endpoint is durable, it won't be auto-created unless this flag is set.\n   * This flag has no effect for temporary endpoints, those are always created if missing.\n   * This flag has no effect for existing endpoints.\n   *\n   * Off by default for backwards compatibility.\n   *\n   * @type {Boolean}\n   * @default false\n   *\n   */\n  get createIfMissing() {\n    return Check.something(this._createIfMissing)\n      ? this._createIfMissing :\n        DEFAULTS.createIfMissing;\n  }\n\n  set createIfMissing(newValue) {\n    this._createIfMissing = newValue;\n  }\n\n}\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\n","const SMFLib = require('solclient-smf');\n// No idea why the usual import idiom does not work.\n//const { CapabilityType } = require('solclient-session');\nconst SolclientSession = require('solclient-session');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageIds } = require('./message-ids');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\nconst { PublisherStateNames } = require('./publisher-state-names');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { StatType } = require('solclient-stats');\nconst { TransportReturnCode } = require('solclient-transport');\n\nconst ConnectReason = {\n  INIT:     0, // never connected: message renumbering required\n  RESUME:   1, // connected before\n  FAILOVER: 2, // after a DR failover: message renumbering and message republish event required\n};\n\nclass PublisherFSM extends StateMachine {\n  constructor({ publisher, name, sessionInterface, properties } = {}) {\n    super({ name });\n    /** @type {MessagePublisher} */\n    const fsm = this;\n    const currentState = () => {\n      const state = fsm.getCurrentState();\n      return state ? state.getName() : '<not running>';\n    };\n    this.logger = new LogFormatter((...args) => [\n      `[session=${sessionInterface.sessionIdHex}]`,\n      `[message-publisher-fsm=${publisher.flowIdDec}]`,\n      `[${currentState()}]`,\n      ...args,\n    ]);\n    this.log = this.logger.wrap(this.log, this);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    Object.assign(this, {\n      _publisher:                 publisher,\n      _acknowledgeMode:           properties.acknowledgeMode,\n      _acknowledgeTimeoutInMsecs: properties.acknowledgeTimeoutInMsecs,\n      _sessionInterface:          sessionInterface,\n      _windowSize:                properties.windowSize,\n      _stateEvents:               [],\n    });\n    // The publisher is not even constructed when publisherProperties.enabled is false\n    // so we could just set _guaranteedEnabled to true, but lets be thorough as at\n    // some point we may want to have sendADMessage() be responsible for throwing all\n    // errors. As it is, when publisher properties enabled is false, the session-fsm\n    // throws an error and when the message-spool is shutdown (close-flow received) the\n    // publisher-fsm thtows and error.\n    this._guaranteedEnabled = properties.enabled;\n    this._sendWindow = properties.windowSize;\n    this._resetConnectedInfo();\n    this._notifiedWindowClosed = false;\n    // We need a boolean to track the transport flow\n    // controlled state. prepareAdMessageAndSend is called by the\n    // session to prepare a message for publish and we\n    // need to return whether or not we are flow controlled\n    // without invoking the FSM or calling methods on the\n    // FSM.\n    // We consider all down states and all resending states equal\n    // to flow-controlled as in all states me must queue the message\n    // to the unacked list and not attempt to send directly.\n    // This is strictly a performance issue.\n    this._transportFlowControlled = true;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.PublisherUnbound,\n                               (context) => {\n                                 LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n                               }\n      );\n    });\n\n    fsm.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case PublisherFSMEventNames.FLOW_UNBOUND:\n          // the router has closed the flow, likely due to operator\n          // shutdown on the message spool. Throw on any attempt\n          // to publish\n          this._guaranteedEnabled = false;\n          this._publisher.emit(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN);\n          return this.transitionTo(\n            fsm.PublisherUnbound,\n            (context) => {\n              LOG_TRACE(`Received close publisher for ${context.getStateMachine().getName()}`);\n            });\n        case PublisherFSMEventNames.DISPOSE:\n          LOG_TRACE('Received dispose request');\n          break;\n        case PublisherFSMEventNames.TRANSPORT_FULL:\n          LOG_TRACE('Received TRANSPORT_FULL');\n          break;\n        case PublisherFSMEventNames.CAN_SEND:\n          // This is ok because the session just sends the publisher CAN_SEND whenever received\n          // from transport, even if the publisher is not in use, or hasn't caused the flow control\n          LOG_TRACE('Received CAN_SEND when not flow controlled');\n          break;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()}`);\n      }\n      return this;\n    });\n\n    fsm.PublisherUnbound = new State({\n      name:          PublisherStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDownAndBindWaiting() {\n        LOG_TRACE('Emit down and bind waiting');\n        publisher.emit(MessagePublisherEventName.DOWN);\n        publisher.emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitDownAndBindWaiting();\n        fsm._connectRetryCount = properties.connectRetryCount;\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbind() {\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.SESSION_UP, function onSessionUp() {\n        return this.transitionTo(fsm.PublisherOpenFlowSent);\n      });\n\n    fsm.PublisherOpenFlowSent = new State({\n      name:          PublisherStateNames.OPENFLOWSENT,\n      parentContext: fsm,\n    }, {\n      emitOpenFlowFailedError(details) {\n        publisher.emit(MessagePublisherEventName.CONNECT_FAILED_ERROR, details);\n      },\n      /**\n       * @param {AdProtocolMessage} adpMsg An OPENFLOW response.\n       * @description Handle an incoming Guaranteed Messaging Protocol Message.\n       * @returns {?} The result of processing an event, or null if no event was dispatched.\n       * @private\n       */\n      handleOpenFlowResponse(adpMsg) {\n        const smfRespHeader = adpMsg.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n        /*\n         * Assured Control Protocol messages are received on publisher and consumer flows. The\n         * message types for each are unique, so we can determine whether it is a publisher or\n         * consumer by message type.  A specific publisher or consumer is found by the flowId, or\n         * by the correlation tag in the case of OPEN-FLOW (publisher) or BIND (consumer) responses.\n         */\n        if (adpMsg.msgType !== SMFLib.SMFAdProtocolMessageType.OPENPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n              { name: PublisherFSMEventNames.FLOW_FAILED },\n              {\n                returnCode:  respCode,\n                description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(adpMsg.msgType)}`,\n              }\n          ));\n        }\n\n        /*\n         * The response code will indicate whether we create a PUB_FLOW_UP (200 OK) event\n         * or a PUB_FLOW_FAIL (any other response) event, or treat this as an invalid\n         * message (received a OPEN-PUB-FLOW request).\n         */\n\n        if (respCode === null) {\n          // Drop message and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          const respStr = smfRespHeader.pm_respstr;\n          const mappedSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respStr);\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              subcode:     mappedSubcode,\n              returnCode:  respCode,\n              description: respStr,\n            })\n          );\n        }\n\n        LOG_TRACE('Handling OPENPUBFLOW message');\n\n        // typical response: { lastmsgidacked window flowid flowname publisher_id }\n\n        const lastMsgIDAcked = adpMsg.getLastMsgIdAcked();\n        const window = adpMsg.getWindow();\n        const flowId = adpMsg.getFlowId();\n        const flowName = adpMsg.getFlowName();\n        const publisherId = adpMsg.getPublisherId();\n\n        LOG_DEBUG(`OPENPUBFLOW response attributes: lastMsgIDAcked=${lastMsgIDAcked} window=${window} flowId=${flowId} flowName=${flowName} publisherId=${publisherId}`);\n\n        LOG_TRACE(`Local before handling response: ${fsm._messageIds}`);\n\n        if (window === undefined) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Window parameter not found' })\n          );\n        }\n        if (window > this._windowSize) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Invalid window negotiation' })\n          );\n        }\n        // reduce sendWindow by the size of unAckedList but do not reduce below zero\n        fsm._sendWindow = window - fsm._unackedList.length;\n        if (fsm._sendWindow < 0) fsm._sendWindow = 0;\n\n        // update publisher info before renumbering\n        Object.assign(fsm._publisher, {\n          name: flowName,\n          flowId,\n          publisherId,\n        });\n        // we may have been disabled by a previous closeFlow messsage, now that\n        // we know hte message spool is enabled again, set _guaranteedEnabled back\n        // to true\n        fsm._guaranteedEnabled = true;\n\n        if ((fsm._connectReason === ConnectReason.INIT) ||\n          (fsm._connectReason === ConnectReason.FAILOVER)) {\n          // reset 'lastSent' before renumbering\n          fsm._messageIds.setLastSent(lastMsgIDAcked);\n\n          LOG_DEBUG(`Renumbering unacked/unsent messages: fsm._messageIds=${fsm._messageIds}, lastMsgIDAcked=${lastMsgIDAcked}, type=${fsm._connectReason}`);\n          if (fsm._connectReason === ConnectReason.FAILOVER) {\n            publisher.emit(MessagePublisherEventName.FLOW_NAME_CHANGED, {\n              messages: [...fsm._unackedList],\n              count:    fsm._unackedList.length,\n            });\n          }\n          fsm._connectReason = ConnectReason.RESUME;\n          fsm._unackedList.forEach((message) => {\n            const oldId = message.getGuaranteedMessageId();\n            fsm._renumber(message);\n            LOG_TRACE(`Renumbering message ID: from ${oldId} to ${message.getGuaranteedMessageId()}`);\n            fsm._messageIds.setLastSent(message.getGuaranteedMessageId());\n          });\n        } else {\n          fsm._unackedList.forEach((message) => {\n            message.setFlowId(flowId);\n            message.setPublisherId(publisher.publisherId);\n            LOG_TRACE(`Set FlowId to ${flowId} in msg# ${message.getGuaranteedMessageId()}`);\n          });\n        }\n        // Either way, make sure none of the messages is above the size limit:\n        const payloadSizeLimit = fsm._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n        fsm._unackedList.forEach((message) => {\n          if (payloadSizeLimit < message._memoized_payload.length) {\n            LOG_WARN(`Message size ${message._memoized_payload.length} above broker limit ${payloadSizeLimit}`);\n          }\n        });\n\n\n        if (fsm._unackedList.length) {\n          fsm._handleAck(lastMsgIDAcked, false, adpMsg, true);\n          // the starting point for retransmitting.  If lastMsgIdAcked doesn't\n          // ack anything this does not get updates, causing us to possible send\n          // messages out of order, or not start sending at all\n          fsm._firstUnackedToSend = fsm._unackedList[0];\n        } else {\n          fsm._messageIds.lastAcked = Long.fromValue(lastMsgIDAcked);\n        }\n        LOG_TRACE(`Local after applying lastMsgIDAcked: ${fsm._messageIds}`);\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UP }));\n      },\n      /**\n       * @returns {?} The result of processing an BIND_TIMEOUT event\n       * @private\n       */\n      handleOpenFlowTimeout() {\n        LOG_INFO('Open publisher connection timeout');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleUnknownFlowName() {\n        LOG_INFO('Flow name unknown, republish required');\n        // Don't send the FLOW_NAME_CHANGED message yet -- it specifically indicates\n        // that duplicate messages should be expected. Wait until the flow is successfully\n        // connected and messages are being renumbered.\n        fsm._resetConnectedInfo(true);\n        return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n      },\n      /**\n       * Send a Publisher Open Flow Request.\n       * @private\n       */\n      sendOpenFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        LOG_TRACE(`sendOpenFlow correlationTag: ${correlationTag}`);\n        const openPubFlowMsg = SMFLib.AdProtocolMessage.getOpenMessagePublisher(\n          fsm._messageIds.lastAcked,\n          fsm._messageIds.lastSent,\n          properties.windowSize,\n          fsm._publisher._flowName,\n          correlationTag\n        );\n        LOG_TRACE('sendOpenFlow openPubFlowMsg constituents:');\n        LOG_TRACE(`fsm._messageIds.lastAcked:${fsm._messageIds.lastAcked} fsm._messageIds.lastSent:${fsm._messageIds.lastSent} properties.windowSize:${properties.windowSize} fsm._publisher._flowName:${fsm._publisher._flowName} `);\n        sessionInterface.sendControl(openPubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleOpenFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleOpenFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent open publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        try {\n          this.sendOpenFlow();\n        } catch (e) {\n          LOG_WARN(`Exception during bind attempt: ${e}`);\n          fsm.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.SESSION_DOWN }));\n        }\n      })\n      .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.PublisherUp);\n      })\n      .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.BIND_TIMEOUT, function onOpenFlowTimeout() {\n        if (fsm._connectRetryCount > 0) {\n          fsm._connectRetryCount--;\n          return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n        }\n        this.emitOpenFlowFailedError({\n          subcode:     ErrorSubcode.TIMEOUT,\n          description: 'Open publisher connection failed due to timeout',\n        });\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onFlowFailed(pEvent) {\n        const { subcode, returnCode, description } = pEvent;\n        LOG_TRACE(`FLOW_FAILED in PublisherOpenFlowSent state: subcode: ${subcode}, returnCode: ${returnCode}, description: ${description}`);\n        switch (pEvent.subcode) {\n          case ErrorSubcode.UNKNOWN_FLOW_NAME:\n            // DR or long HA failover\n            return this.handleUnknownFlowName();\n          // case ErrorSubcode.GM_NOT_READY: Fail the session\n          default:\n            this.emitOpenFlowFailedError({\n              event: pEvent,\n              subcode,\n              returnCode,\n              description,\n            });\n            // Otherwise, the flow is invalid\n            fsm._resetConnectedInfo();\n        }\n        return this.transitionTo(fsm.PublisherUnbound);\n      });\n\n    fsm.PublisherCloseFlowSent = new State({\n      name:          PublisherStateNames.CLOSEFLOWSENT,\n      parentContext: fsm,\n    }, {\n      handleCloseFlowResponse(response) {\n        const smfRespHeader = response.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n\n        if (response.msgType !== SMFLib.SMFAdProtocolMessageType.CLOSEPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              returnCode:  respCode,\n              description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(response.msgType)}`,\n            }));\n        }\n\n        if (respCode === null) {\n          // Drop message  and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Close-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  {\n                                    returnCode:  respCode,\n                                    description: smfRespHeader.pm_respstr,\n                                  }));\n        }\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UNBOUND }));\n      },\n\n      handleCloseFlowTimeout() {\n        LOG_INFO('Close publisher connection timeout.');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.UNBIND_TIMEOUT }));\n      },\n\n      sendCloseFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const closePubFlowMsg = SMFLib.AdProtocolMessage.getCloseMessagePublisher(\n          fsm._publisher.flowId,\n          correlationTag\n        );\n        sessionInterface.sendControl(closePubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleCloseFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleCloseFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent close publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        this.sendCloseFlow();\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbound() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onCloseFlowFailed(/*pEvent*/) {\n        this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.UNBIND_TIMEOUT, function onCloseFlowTimeout() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      });\n\n    fsm.PublisherUp = new State({\n      name:          PublisherStateNames.UP,\n      parentContext: fsm,\n    }, {\n      emitFlowUp() {\n        publisher.emit(MessagePublisherEventName.UP);\n      },\n    })\n      .initial(function initial() {\n        return this.transitionTo(\n          fsm._unackedList.length\n            ? fsm.PublisherRetransmitting\n            : fsm.PublisherDataXfer\n        );\n      })\n      .entry(function onEntry() {\n        // The state isn't changed on entry, so don't emit yet.\n        LOG_DEBUG('Flow is UP');\n        fsm._scheduleStateEvents(fsm.PublisherUp, () => this.emitFlowUp());\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        LOG_DEBUG('Ack received');\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.ACK_TIMEOUT, function onAckTimeout() {\n        // the starting point when we get the CAN_SEND\n        fsm._firstUnackedToSend = fsm._unackedList[0];\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      })\n        .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n          return this.transitionTo(fsm.PublisherCloseFlowSent);\n        })\n        .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n          return this.transitionTo(fsm.PublisherUnbound);\n        })\n        .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onWindowClosed() {\n          return this.internalTransition();\n        });\n\n    fsm.PublisherDataXfer = new State({\n      name:          PublisherStateNames.DATA_XFER,\n      parentContext: fsm.PublisherUp,\n    })\n      .entry(() => {\n        // publisher is up and capable of sending GM messages directly from the application\n        fsm._transportFlowControlled = false;\n        fsm._scheduleStateEvents(fsm.PublisherDataXfer, () => fsm._maybeEmitCanSend());\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      })\n      .exit(() => {\n        // publisher cannot send messages to transport and must queue in unAckedList until\n        // re-entering PublisherDataXfer\n        // set a FSM boolean that is checked in prepareADMessageAndSend() we\n        // need to avoid FSM interactions on the fast path so resort to\n        // this boolean.\n        fsm._transportFlowControlled = true;\n      });\n\n    fsm.PublisherFlowControlled = new State({\n      name:          PublisherStateNames.FLOW_CONTROLLED,\n      parentContext: fsm.PublisherUp,\n    })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Unusual event, as only the FSM can send messages when we're in flow-controlled state\n        LOG_INFO('Attempt to send while flow controlled');\n        // Fall out and do the action for PublisherUp\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.CAN_SEND, function onCanSend() {\n        //\n        // start sending from tune unAcked list.\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      });\n\n    fsm.PublisherRetransmitting = new State({\n      name:          PublisherStateNames.RETRANSMITTING,\n      parentContext: fsm.PublisherUp,\n    }, {\n      retransmit() {\n        try {\n          fsm._resendFromUnacked();\n        } catch (ex) {\n          // Resend failed:\n          if (ex instanceof OperationError && ex.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n            LOG_DEBUG('Publisher resendFromUnacked blocked due to insufficient space, wait for CAN_SEND');\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n          } else {\n            // send failed.  Fail the publisher\n            LOG_INFO(`Publisher resendFromUnacked failed: ${ex}`);\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED }));\n          }\n        }\n      },\n    })\n      .entry(function onEntry() {\n        this.retransmit();\n      })\n      .reaction(PublisherFSMEventNames.RESEND_COMPLETE, function onResendComplete() {\n        return this.transitionTo(fsm.PublisherDataXfer);\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Transport flow controlled while resending/recovering from flow control. Go\n        // to flow controlled state and wait for CAN_SEND\n        LOG_DEBUG(`Transport full while retransmitting, unacked remaining: ${fsm._unackedList.length}`);\n        // Fall out and do the action for PublisherUp\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      });\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return !!this.getActiveState(PublisherStateNames.UNBOUND);\n  }\n\n  /**\n\n   * Prepare and send a Guaranteed Message. This method updates FSM variables including\n   * lastSendMessage.\n   *\n   * @private\n   * @param {Message} dataMsg The message to prepare\n   * @returns {TransportReturnCode} return the status from the transport send\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    if (!this._guaranteedEnabled) {\n      throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n        ErrorSubcode.GM_UNAVAILABLE,\n        'close flow received from message-router');\n    }\n    if (this._sendWindow <= 0) {\n      this._publisher.incStat(StatType.TX_WINDOW_CLOSED);\n      this._notifiedWindowClosed = true;\n      throw new OperationError(\n        'Guaranteed Message Window Closed',\n        ErrorSubcode.INSUFFICIENT_SPACE\n      );\n    }\n\n\n    const unackedList = this._unackedList;\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    if (dataMsg._payload_is_memoized) {\n      dataMsg._payload_is_memoized = false;\n      dataMsg._memoized_csumm = undefined;\n      dataMsg._memoized_payload = undefined;\n    }\n    const dupMsg = dataMsg.clone();\n    const payloadSize = SMFLib.Codec.Encode.adaptMessageToSmf_payloadMemoize(dupMsg);\n    var payloadSizeLimit = 0;\n    try {\n      payloadSizeLimit = this._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n      LOG_TRACE(`Payload size limit: ${payloadSizeLimit}`);\n    } catch (e) {\n      LOG_INFO('Can\\'t pre-check payload size, broker not connected yet?');\n      LOG_TRACE(e.stack);\n    }\n    if ((0 < payloadSizeLimit) && (payloadSize > payloadSizeLimit)) {\n      throw new OperationError(\n        `Encoded payload size (${payloadSize}) exceeds broker size limit (MAX_GUARANTEED_MSG_SIZE, ${payloadSizeLimit})`,\n        ErrorSubcode.MESSAGE_TOO_LARGE\n      );\n    }\n\n    --this._sendWindow;\n    this._renumber(dupMsg);\n    this._cloneNumbers(dupMsg, dataMsg);\n\n    unackedList.push(dupMsg);\n    // Update the messgeIds, lastSend/next values only on a successful send or enqueue,\n    // from this point on we will return OK from this send method.\n    const msgId = dupMsg.getGuaranteedMessageId();\n    this._messageIds.setLastSent(msgId);\n    LOG_TRACE(`Prepare and send AD message ID = ${msgId}, \n      unackedListSize = ${unackedList.length}, sendWindow = ${this._sendWindow}`);\n    // Note that the transport sender can be flow controlled at the transport\n    // level, which means the message should not be sent. So simply return\n    // We also consider set-up/down-states as _transportFlowControlled. We must be up\n    // and not retransmitting to\n    // send directly from application space.\n    if (this._transportFlowControlled) {\n      // we may receive acknowledgements while transport flow controlled which can\n      // cause our firstUnAckedToSend to become undefined, if this is the first message\n      // queued in that case, set firstUnAckedToSend\n      if (this._firstUnackedToSend === undefined) {\n        this._firstUnackedToSend = dupMsg;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We use the session sendToTransport directly which may throw or  otherwise\n    // return an error. If so, catch the eror and remove the message from the unackedlist\n    // before rethrowing the error.\n    let returnCode;\n    try {\n      returnCode = this._sessionInterface.sendToTransport(dupMsg);\n      if (returnCode !== TransportReturnCode.OK) {\n        if (returnCode === TransportReturnCode.NO_SPACE) {\n          returnCode = TransportReturnCode.OK;\n          this._firstUnackedToSend = dupMsg;  // the starting point when we get the CAN_SEND\n          this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        } else {\n          //\n          LOG_DEBUG(`prepareAdMessageAndSend: saw returnCode = ${returnCode}`);\n        }\n      } else {\n        // The message has successfully been sent once. Set the redelivered flag in case we need to\n        // resend it later.\n        dupMsg.setRedelivered(true);\n      }\n      // TBD: Should we start AckTimer when flow controlled?\n      this._startAckTimer();\n    } catch (ex) {\n      if (ex instanceof OperationError) {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught OperationError: ${ErrorSubcode.describe(ex.subcode)} - ${ex.message}`);\n        // OperationErrors are encoding or other errors caused by the field contents the\n        // application has set on the message.  So we throw the error back at the\n        // application after undoing the queueing operations.\n        unackedList.pop();\n        this._messageIds.setLastSent(dupMsg.getGuaranteedPreviousMessageId());\n        ++this._sendWindow;\n        throw (ex);\n      } else {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught ${ex.message}`);\n        throw ex;\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  _handleAckEvent(event) {\n    this._publisher.incStat(StatType.TX_ACKS_RXED);\n    this._handleAck(event.ack || event.nack, !!event.nack, event.ctrlMessage);\n  }\n\n  _handleAck(id, nack, ctrlMessage = undefined, openFlow = false) {\n    const {\n      _messageIds: messageIds,\n      _unackedList: unackedList,\n    } = this;\n    const { LOG_DEBUG, LOG_INFO } = this.logger;\n\n    if (messageIds.lastAcked.gte(id)) {\n      if (openFlow) {\n        LOG_DEBUG(`Implicit acks up to date: remote ack for ${id}, local ids ${this._messageIds}`);\n      } else {\n        LOG_INFO(`Dropping ack: remote ack for ${id}, local ids ${this._messageIds}`);\n      }\n      return;\n    }\n\n    const reportAcked = [];\n\n    // Assumption: the unacked message list is in increasing order of message ID.\n    // The assured message ID should be automatically generated, immutable and\n    // monotonically increasing.\n\n    // While the acked ID is greater than an element at the beginning of the unacked list...\n    while (unackedList.length &&\n           id.gte(unackedList[0].getGuaranteedMessageId())) {\n      // That unacked message is now acked. Shift it off and append to list of acked.\n      reportAcked.push(unackedList.shift());\n    }\n\n    // if we have removed the firstUnacked, reset it to the beginning of the list\n    if (unackedList.indexOf(this._firstUnackedToSend) === -1) {\n      this._firstUnackedToSend = unackedList[0];\n    }\n\n\n    // Recover some window space from the acked IDs.\n    this._sendWindow += reportAcked.length;\n    LOG_DEBUG('Send window size is now', this._sendWindow);\n\n\n    // The last acked ID is now the one we received.\n    // Don't let an exception in event dispatching prevent this from being set -- do it now.\n    messageIds.lastAcked = id;\n\n    // If we're NACKing, it's only the last message.\n    const reportNacked = nack ? reportAcked.pop() : null;\n\n    // Any ACKs?\n    // reportAcked is constant from here on\n    const numAcked = reportAcked.length;\n    if (numAcked) {\n      if (this._acknowledgeMode === MessagePublisherAcknowledgeMode.PER_MESSAGE) {\n        LOG_DEBUG(`Ack received: lastAckedMsgId=${id}, numAckedMsgs=${numAcked}, numUnackedMsgs=${unackedList.length}`);\n        for (let i = 0; i < numAcked; ++i) {\n          this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, reportAcked[i]);\n        }\n      } else {\n        const lastAckedMessage = reportAcked[numAcked - 1];\n        LOG_DEBUG(`Acking single message with ID ${lastAckedMessage.getGuaranteedMessageId()} from router ack on ${id}`);\n        this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, lastAckedMessage);\n      }\n    }\n\n    // Terminating NACK?\n    if (reportNacked) {\n      LOG_DEBUG(`Nacking single message with ID ${reportNacked.getGuaranteedMessageId()} from router ack on ${id}`);\n      this._publisher.emit(MessagePublisherEventName.REJECTED_MESSAGE, reportNacked, ctrlMessage);\n    }\n\n    LOG_DEBUG('Unacked messages remaining: ', unackedList.length);\n\n    if (unackedList.length) {\n      // There are more messages to be acked. Reset the ack timer.\n      this._resetAckTimer();\n    } else {\n      this._clearAckTimer();\n    }\n    //\n    // send can-send to applicatino if necessary.\n    this._maybeEmitCanSend();\n  }\n\n  _maybeEmitCanSend() {\n    const { LOG_TRACE } = this.logger;\n    if (!this._notifiedWindowClosed) return;\n    if (this._sendWindow === 0) {\n      // Should log this since it is called AFTER the state change\n      LOG_TRACE('Suppressing CAN_SEND with zero window available');\n      return;\n    }\n    this._notifiedWindowClosed = false; // Set before emitting in case we re-enter\n    this._publisher.emit(MessagePublisherEventName.CAN_SEND);\n  }\n\n  _resendFromUnacked() {\n    const { LOG_ERROR, LOG_INFO, LOG_DEBUG } = this.logger;\n    // We choose to start the ack timer after the message resend. The resend could\n    // take longer than the ack timeout in poor conditions.\n    //\n    // If any message is successfully resent, we need to restart the ack timer,\n    // even if we are throwing.\n    const list = this._unackedList;\n    let resendIndex = list.indexOf(this._firstUnackedToSend);\n    if (resendIndex === -1) {\n      // first Unacked may be null if all have been resent alreadygrunt -\n      // in which case the list  should be empty\n      if (this._firstUnackedToSend) {\n        LOG_ERROR(`Could not find first Unacked Messages in unacked message list: msgId = ${this._firstUnackedToSend.getGuaranteedMessageId}`);\n      }\n      if (list.length === 0) {\n        // Nothing to resend: return to DataXfer\n        LOG_DEBUG(`Nothing to resend: ${this._messageIds.toString()}`);\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n        );\n      }\n      return;\n    }\n    LOG_DEBUG(`Resending unacked messages from ${resendIndex} to ${list.length - 1}: `,\n              list.map(m => m.getGuaranteedMessageId().toString()));\n    while (resendIndex < list.length) {\n      if (list[resendIndex].getPublisherId() !== this._publisher.publisherId) {\n        LOG_ERROR(`Resending on invalid publisherId '${list[resendIndex].getPublisherId()}'when it should be '${this._publisher.publisherId}'`);\n      }\n      const returnCode = this._sessionInterface.sendData(list[resendIndex]);\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        // the starting point when we get the CAN_SEND from the transport\n        this._firstUnackedToSend = list[resendIndex];\n        LOG_INFO('Publisher sendMessage blocked due to insufficient space, wait for CAN_SEND');\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        return;\n      }\n      if (returnCode !== TransportReturnCode.OK) {\n        // session-FSM is already processing the error\n        return;\n      }\n      // The message has successfullly been sent once. Set the redelivered flag in case we need to\n      // resend it later\n      list[resendIndex].setRedelivered(true);\n      resendIndex++;\n      this._startAckTimer();\n    }\n    // Resend successful: return to DataXfer\n    LOG_DEBUG(`Resend complete: ${this._messageIds.toString()}`);\n    this.processEvent(\n      new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n    );\n  }\n\n  _resetConnectedInfo(failover = false) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Resetting connected flow info');\n\n    if (this._ackTimer) this._clearAckTimer();\n\n    Object.assign(this, {\n      _messageIds: new MessageIds(),\n    });\n\n    Object.assign(this._publisher, {\n      publisherId: undefined,\n      flowId:      undefined,\n      flowName:    null,\n    });\n\n    if (failover) {\n      this._connectReason = ConnectReason.FAILOVER;\n    } else {\n      // Full reset\n      this._unackedList = [];\n      this._connectReason = ConnectReason.INIT;\n    }\n  }\n\n  _clearAckTimer() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Clear ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'}`);\n    if (!this._ackTimer) return;\n    clearTimeout(this._ackTimer);\n    this._ackTimer = null;\n  }\n\n  _emitStateEvents() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Emitting deferred state events');\n    while (this._stateEvents.length) {\n      const pair = this._stateEvents.shift();\n      const state = pair[0];\n      const event = pair[1];\n      // If the state requesting this event is still active...\n      if (this.getActiveState(state.getName())) {\n        // then do its action\n        event.apply(state);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _handleAckTimeout() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Ack Timeout');\n    this._ackTimer = null;\n    this._publisher.incStat(StatType.TX_ACK_TIMEOUT);\n    this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.ACK_TIMEOUT }));\n  }\n\n  /**\n   * If the remote flow changes, any remote state applied to the unacked messages needs to\n   * be reapplied.\n   *\n   * @param {solace.Message} message The message to renumber.\n   * @private\n   */\n  _renumber(message) {\n    const messageIds = this._messageIds;\n    const current = messageIds.next;\n    message.setGuaranteedPreviousMessageId(messageIds.lastSent);\n    message.setGuaranteedMessageId(current);\n\n    const publisher = this._publisher;\n    message.setFlowId(publisher.flowId);\n    message.setPublisherId(publisher.publisherId);\n  }\n\n  _cloneNumbers(fromMsg, toMsg) {\n    toMsg.setGuaranteedPreviousMessageId(fromMsg.getGuaranteedPreviousMessageId());\n    toMsg.setGuaranteedMessageId(fromMsg.getGuaranteedMessageId());\n    toMsg.setFlowId(fromMsg.getFlowId());\n    toMsg.setPublisherId(fromMsg.getPublisherId());\n  }\n\n  _resetAckTimer() {\n    this._clearAckTimer();\n    this._startAckTimer();\n  }\n\n  _scheduleStateEvents(state, event) {\n    this._stateEvents.push([state, event]);\n    this._setPostEventAction(() => this._emitStateEvents(), 'Emit state events');\n  }\n\n  _setPostEventAction(action, desc = 'No action') {\n    const { LOG_DEBUG, LOG_WARN } = this.logger;\n    if (this._postEventAction && this._postEventAction.desc === desc) {\n      LOG_DEBUG('Keeping same post event action');\n      return;\n    }\n\n    if (this._postEventAction && this._postEventAction.desc) {\n      LOG_WARN(`Replacing post event action ${this._postEventAction.desc} with ${desc}`);\n    }\n    this._postEventAction = { action: action || (() => {}), desc };\n    this.setPostEventAction(() => {\n      this._postEventAction.action();\n      this._postEventAction = null;\n    });\n  }\n\n  /**\n   * @private\n   */\n  _startAckTimer() {\n    // const { LOG_TRACE } = this.logger;\n    // LOG_TRACE(`Start ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'\n    //           }: ${this._acknowledgeTimeoutInMsecs} ms`);\n    if (this._ackTimer) return;\n    this._ackTimer = setTimeout(() => this._handleAckTimeout(),\n                                this._acknowledgeTimeoutInMsecs);\n  }\n\n}\n\nmodule.exports.PublisherFSM = PublisherFSM;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst ParseStream = {};\nParseStream.parseStreamAt = function parseStreamAt(dataBuf, offset, datalen) {\n  const streamObj = new SDTStreamContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      streamObj.addField(valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.STREAM, streamObj);\n};\n\nmodule.exports.ParseStream = ParseStream;\n","const { EventEmitter } = require('solclient-events');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { QueueBrowserEventName } = require('./queue-browser-event-names');\n\nfunction formatEventName(eventName) {\n  return `QueueBrowserEventName.${QueueBrowserEventName.describe(eventName)}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Queue Browser is created by calling {@link solace.Session#createQueueBrowser}.\n *\n * A Queue Browser allows client applications to look at messages spooled on Endpoints\n * without removing them. Messages are browsed from oldest to newest.\n * After being browsed, messages are still available for consumption over normal flows.\n * However, it is possible to selectively remove messages from the persistent store of an Endpoint.\n * In this case, these removed messages will no longer be available for consumption.\n\n * Note: If browsing a queue with an active consumer, no guarantee is made that the browser will\n * receive all messages published to the queue. The consumer can receive and acknowledge messages\n * before they are delivered to the browser.\n *\n * One typical application is to use Browsers to allow message bus administrators to remove “stuck”\n * Guaranteed messages from an Endpoint without having to modify or disrupt existing applications.\n * A message can get stuck if:\n *\n *  1) It has been received by an application, but for some reason, that application has failed to\n *     acknowledge it.\n *  2) All active message selectors have failed to match this particular message and therefore the\n *     message bus has not delivered it to any client yet. The current release only supports\n *     browsing Endpoints of type Queue.\n *\n * Note that the delivery restrictions imposed by the queue’s Access type\n * (exclusive or non-exclusive), do not apply when browsing messages with a Browser.\n *\n * Browser characteristics and behavior are defined by {@link solace.QueueBrowserProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.QueueBrowserProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue on the Solace Message Router.\n *\n * The Browser is an EventEmitter, and will emit events to which the application may choose to\n * subscribe, such as the connection to the Solace Message Router going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n * @fires solace.QueueBrowserEventName#DISPOSED\n * @fires solace.QueueBrowserEventName#DOWN\n * @fires solace.QueueBrowserEventName#DOWN_ERROR\n * @fires solace.QueueBrowserEventName#GM_DISABLED\n * @fires solace.QueueBrowserEventName#MESSAGE\n * @fires solace.QueueBrowserEventName#UP\n *\n * @hideconstructor\n * @memberof solace\n */\nclass QueueBrowser extends EventEmitter {\n  constructor(messageConsumer) {\n    super({\n      direct: QueueBrowserEventName.MESSAGE,\n      emits:  QueueBrowserEventName.values,\n      formatEventName,\n    });\n\n    this._messageConsumer = messageConsumer;\n    this.logger = new LogFormatter((...args) =>\n      ['[queue-browser]', ...args]);\n\n    this._setupEventListers();\n  }\n\n  _setupEventListers() {\n    // Listen to message consumer events, redispatch as queue browser events\n    this._messageConsumer.on(MessageConsumerEventName.UP, this._onConsumerUp.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.CONNECT_FAILED_ERROR,\n                             this._onConsumerConnectFailed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN, this._onConsumerDown.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN_ERROR,\n                             this._onConsumerDownError.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.MESSAGE, this._onConsumerMessage.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DISPOSED,\n                             this._onConsumerDisposed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.GM_DISABLED,\n                             this._onConsumerGMDisabled.bind(this));\n  }\n\n  _onConsumerMessage(event) {\n    this.emit(QueueBrowserEventName.MESSAGE, event);\n  }\n\n  _onConsumerUp(event) {\n    this.emit(QueueBrowserEventName.UP, event);\n  }\n\n  _onConsumerConnectFailed(event) {\n    this.emit(QueueBrowserEventName.CONNECT_FAILED_ERROR, event);\n  }\n\n  _onConsumerDown(event) {\n    this.emit(QueueBrowserEventName.DOWN, event);\n  }\n\n  _onConsumerDownError(event) {\n    this.emit(QueueBrowserEventName.DOWN_ERROR, event);\n  }\n\n  _onConsumerDisposed(event) {\n    this.emit(QueueBrowserEventName.DISPOSED, event);\n  }\n\n  _onConsumerGMDisabled(event) {\n    this.emit(QueueBrowserEventName.GM_DISABLED, event);\n  }\n\n  /**\n   * Connects the queue browser immediately. The application should add event listeners (see\n   * {@link solace.QueueBrowserEventName}). If there is no listener added for\n   * {@link solace.QueueBrowserEventName#event:MESSAGE} then up to a window\n   * {@link solace.QueueBrowserProperties.windowSize} of messages can be queued internally.\n   * before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Connecting the queue browser\\'s message consumer');\n      this._messageConsumer.connect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Initiates an orderly disconnection of the queue browser. The API will send an unbind request.\n   * Any messages subsequently received are discarded silently.\n   * When the unbind message is acknowledged, the application\n   * receives a {@link solace.QueueBrowserEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n\n    try {\n      LOG_DEBUG('Disconnecting the queue browser\\'s message consumer');\n      this._messageConsumer.disconnect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Begins delivery of messages to this queue browser. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created queue browser is in started state.\n   *\n   * If the queue browser was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.QueueBrowser.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue BrowserMessage Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Starting the queue browser\\'s message consumer');\n      this._messageConsumer.start();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Stops messages from being delivered to this queue browser from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.QueueBrowser#start} is called.\n   *\n   * If the queue browser was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue Browser is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Stopping the queue browser\\'s message consumer');\n      this._messageConsumer.stop();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Removes a message from the queue by acknowledging it.\n   *\n   * The {@link solace.QueueBrowser} does not automatically acknowledge messages.\n   * once they have been received.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {Message} message The message to remove\n   */\n  removeMessageFromQueue(message) {\n    // ack the message to delete it\n    this._messageConsumer.applicationAck(message._guaranteedMsgId);\n    message._acked = true;\n  }\n\n}\n\nmodule.exports.QueueBrowser = QueueBrowser;\n","'use strict';\n\nconst BINARY_TYPES = ['nodebuffer', 'arraybuffer', 'fragments'];\nconst hasBlob = typeof Blob !== 'undefined';\n\nif (hasBlob) BINARY_TYPES.push('blob');\n\nmodule.exports = {\n  BINARY_TYPES,\n  EMPTY_BUFFER: Buffer.alloc(0),\n  GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',\n  hasBlob,\n  kForOnEventAttribute: Symbol('kIsForOnEventAttribute'),\n  kListener: Symbol('kListener'),\n  kStatusCode: Symbol('status-code'),\n  kWebSocket: Symbol('websocket'),\n  NOOP: () => {}\n};\n","const { EventEmitter } = require('solclient-events');\nconst { StatType } = require('./stat-types');\n\n/**\n * @private\n */\nclass Stats extends EventEmitter {\n  constructor(parent) {\n    super();\n\n    this._parent = parent;\n    this._statsMap = [];\n    StatType.values.forEach((value) => {\n      this._statsMap[value] = 0;\n    });\n  }\n\n  resetStats() {\n    this.emit('reset');\n    // The stat types are sequential, so .fill(0) would work, but the API design\n    // doesn't really guarantee this so overwriting every existing index is safer.\n    this._statsMap = this._statsMap.map(() => 0);\n  }\n\n  incStat(statType, value = 1) {\n    // should we validate statType?\n    this._statsMap[statType] += value;\n    if (this._parent) {\n      this._parent.incStat(statType, value);\n    }\n  }\n\n  getStat(statType) {\n    return this._statsMap[statType];\n  }\n\n}\n\nmodule.exports.Stats = Stats;\n","const { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * An error thrown when an error occurs on the transport session.\n * <p>\n * Applications are not expected to instantiate this type.\n *\n * @memberof solace\n * @private\n */\nclass TransportError extends SolaceError {\n  /**\n   * Creates an instance of TransportError.\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {ErrorSubcode} subcode The subcode for this error\n   * @private\n   */\n  constructor(message, subcode) {\n    super('TransportError', message);\n    this.subcode = subcode;\n  }\n\n  toString() {\n    return `${super.toString()}, subcode=${this.subcode}`;\n  }\n}\n\nmodule.exports.TransportError = TransportError;\n","const { CacheCBInfo } = require('./lib/cache-cb-info');\nconst { CacheContext } = require('./lib/cache-context');\nconst { CacheLiveDataAction } = require('./lib/cache-live-data-actions');\nconst { CacheRequest } = require('./lib/cache-request');\nconst { CacheRequestResult } = require('./lib/cache-request-result');\nconst { CacheReturnCode } = require('./lib/cache-return-codes');\nconst { CacheReturnSubcode } = require('./lib/cache-return-subcodes');\nconst { CacheSession } = require('./lib/cache-session');\nconst { CacheSessionProperties } = require('./lib/cache-session-properties');\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\nmodule.exports.CACHE_REQUEST_PREFIX = CacheContext.CACHE_REQUEST_PREFIX;\nmodule.exports.CacheLiveDataAction = CacheLiveDataAction;\nmodule.exports.CacheRequestResult = CacheRequestResult;\nmodule.exports.CacheReturnCode = CacheReturnCode;\nmodule.exports.CacheReturnSubcode = CacheReturnSubcode;\nmodule.exports.CacheRequest = CacheRequest;\nmodule.exports.CacheSession = CacheSession;\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n\n","const { ConsoleLogImpl } = require('./lib/console-log-impl');\nconst { GlobalBinding } = require('./lib/global-binding');\nconst { LogImpl } = require('./lib/log-impl');\nconst { LogLevel } = require('./lib/log-levels');\n\nconst { Parameter } = require('solclient-validate');\nconst { SolclientFactory } = require('solclient-factory');\n\nconst {\n  isEnumMember,\n  isFunction,\n} = Parameter;\n\nconst {\n  getImpl,\n  getLogLevel,\n  setImpl,\n  setLogLevel,\n} = GlobalBinding;\n\nconst forwarder = {};\nfunction buildLogForwarder() {\n  Object.assign(forwarder, {\n    trace(...args) {\n      const impl = getImpl();\n      if (impl && impl.trace && getLogLevel() >= LogLevel.TRACE) {\n        impl.trace.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    debug(...args) {\n      const impl = getImpl();\n      if (impl && impl.debug && getLogLevel() >= LogLevel.DEBUG) {\n        impl.debug.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    info(...args) {\n      const impl = getImpl();\n      if (impl && impl.info && getLogLevel() >= LogLevel.INFO) {\n        impl.info.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    warn(...args) {\n      const impl = getImpl();\n      if (impl && impl.warn && getLogLevel() >= LogLevel.WARN) {\n        impl.warn.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    error(...args) {\n      const impl = getImpl();\n      if (impl && impl.error && getLogLevel() >= LogLevel.ERROR) {\n        impl.error.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    fatal(...args) {\n      const impl = getImpl();\n      if (impl && impl.fatal) {\n        impl.fatal.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n  });\n}\nbuildLogForwarder(); // stripped by production build\n\nfunction addGlobalFuncs(source, target) {\n  Object.keys(forwarder).forEach((k) => {\n    target[`LOG_${k.toUpperCase()}`] = source[k];\n  });\n}\n\nclass LogFormatter {\n  constructor(formatter) {\n    this._formatter = (() => {\n      if (typeof formatter === 'function') return formatter;\n      if (typeof formatter === 'string') return function prepend(...args) { return [formatter, ...args]; };\n      if (!formatter) return function passthrough(...args) { return [...args]; };\n      return formatter;\n    })();\n    const self = this;\n    Object.keys(forwarder).forEach((key) => {\n      this[key] = function forward(...args) {\n        return forwarder[key].apply(null, self._formatter(...args));\n      };\n    });\n    addGlobalFuncs(this, this);\n  }\n\n  get formatter() {\n    return this._formatter;\n  }\n  set formatter(func) {\n    this._formatter = func;\n  }\n\n  wrap(genericFunction, targetSelf) {\n    const self = this;\n    return function genericLogWrapper(...args) {\n      return genericFunction.apply(targetSelf, self._formatter(...args));\n    };\n  }\n\n}\n\n/**\n * Gets the current log level, which was set by {@link solace.SolclientFactory.init} or a\n * subsequent call to {@link solace.SolclientFactory.setLogLevel}.\n *\n * @returns {solace.LogLevel} The current log level.\n */\nSolclientFactory.getLogLevel = () => getLogLevel();\n\n  /**\n   * This method changes the current log level from the level set when\n   * {@link solace.SolclientFactory.init} was called.\n   *\n   * @param {solace.LogLevel} newLevel The new log level to set.\n   * @throws {solace.OperationError} Invalid log level\n   */\nSolclientFactory.setLogLevel = (newLevel) => {\n  isEnumMember('logLevel', newLevel, LogLevel);\n  setLogLevel(newLevel);\n};\n\nSolclientFactory.addInitializer((props) => {\n  setLogLevel(props.logLevel);\n\n  const logger = props.logger || getImpl() || new ConsoleLogImpl();\n  // Validate that the supplied log implementation is a superset of LogImpl\n  Object.keys(new LogImpl()).forEach(key => isFunction(`logger.${key}`, logger[key]));\n\n  setImpl(logger);\n});\n\naddGlobalFuncs(forwarder, module.exports);\nmodule.exports.LogImpl = LogImpl;\nmodule.exports.LogLevel = LogLevel;\nmodule.exports.Binding = GlobalBinding;\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\nGlobalBinding.setImpl(new ConsoleLogImpl());\nmodule.exports.LogFormatter = LogFormatter;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { Check } = require('solclient-validate');\nconst { Convert, Hex } = require('solclient-convert');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { HTTPConnection } = require('./http-connection');\nconst { LogFormatter } = require('solclient-log');\nconst { SMFClient } = require('../../smf-client');\nconst { TransportError } = require('../../transport-error');\nconst { TransportProtocol } = require('../../transport-protocols');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { TransportSessionEvent } = require('../../transport-session-event');\nconst { TransportSessionEventCode } = require('../../transport-session-event-codes');\nconst { TransportSessionState } = require('../../transport-session-states');\nconst { WebTransportSessionBase } = require('../web-transport-session-base');\n\nconst { int32ToStr, strToByteArray, strToHexArray } = Convert;\nconst { formatHexString } = Hex;\n\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n} = new LogFormatter('[http-transport-session]');\n\n/**\n * @private\n * @namespace Values for tracking current state of incoming streaming data\n */\nconst PacketReadState = {\n  READING_HEADER: 0,\n  STREAMING:      1,\n};\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @private\n */\nconst MSIE_TRANSPORT_PADDING = 257;\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `http${v[2]}`;\n}\n\n/** ===========================================================================\n * HTTPTransportSession :\n *\n * This contains all data and code required to maintain HTTP transport sessions\n * with Solace routers\n * ============================================================================\n * @extends WebTransportSessionBase\n * @private\n */\nclass HTTPTransportSession extends WebTransportSessionBase {\n  constructor(baseUrl, eventCB, client, props) {\n    // Our internal data format (for now) is binary string, so we wrap the callback\n    // in a function that does the required conversion to ArrayBuffer.\n    super(baseUrl,\n          eventCB,\n          client,\n          props);\n\n    // const self = this;\n    // logger.formatter = function formatter(...args) {\n    //   return [self.sessionIdHex, ...args];\n    // };\n\n    // Set to true if we have the data token that we need for sending data to the router\n    this._haveToken = true;\n\n    // Maximum payload chunk size in web transport\n    this._confMaxWebPayload = props.maxWebPayload;\n    this._maxPayloadBytes = 0;\n\n    // Timer that will keep track of the destroy time\n    this._destroyTimer = null;\n    this._destroyTimeout = props.connectTimeoutInMsecs;\n\n    // The URL used for create messages\n    this._createUrl = adaptURL(baseUrl);\n\n    // The URL used for all other messages - it will have the router tag appended\n    // after the session has been created\n    this._routerUrl = this._createUrl;\n\n    // SMF client (instantiated after session is created)\n    this._rxChannelClient = null;\n    // Send data connection (instantiated after session is created)\n    this._httpSendConn = null;\n\n    // Receive data connection (instantiated after session is created)\n    this._httpReceiveConn = null;\n\n    // Data Token SMF header - this is preformatted for performance\n    // It will be set after session is created\n    this._smfDataTokenTSHeader = null;\n\n    // Router Tag - a string that will be added to HTTP request URLs\n    this._routerTag = '';\n\n    // Session ID - 8-byte identifier that will associate this client\n    // with client resources on the router\n    this._sid = null;\n\n    if (props.transportProtocol === null || props.transportProtocol === undefined) {\n      throw new OperationError('transportProtocol is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    this._transportProtocol = props.transportProtocol;\n    this._useBinaryTransport = false;\n    this._useStreamingTransport = false;\n    this._streamingTransportPadding = 0;\n\n    this._useBinaryTransport = (props.transportProtocol !== TransportProtocol.HTTP_BASE64);\n    this._useStreamingTransport = (props.transportProtocol ===\n                                   TransportProtocol.HTTP_BINARY_STREAMING);\n\n    // extra state for STREAMING transport\n    this._incomingBuffer = '';\n    this._packetReadState = PacketReadState.READING_HEADER;\n\n    const agent = navigator.userAgent || '';\n    if (agent.match(/trident/i) || agent.match(/msie/i)) {\n      this._streamingTransportPadding = MSIE_TRANSPORT_PADDING;\n    }\n\n    if (props.transportContentType === null || props.transportContentType === undefined) {\n      throw new OperationError('transportContentType is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._contentType = props.transportContentType;\n  }\n\n  /**\n   * @override\n   */\n  connectTimerExpiry() {\n    LOG_INFO('HTTP transport connect timeout');\n    this.destroyCleanup('HTTP transport connect timeout', ErrorSubcode.TIMEOUT);\n  }\n\n  get sessionIdHex() {\n    return (this._sid) ? formatHexString(this._sid) : '';\n  }\n\n  updateMaxWebPayload() {\n    // 22 Bytes of TransportSMF wrapping overhead\n    const trLessEncapSMF = this._confMaxWebPayload - 22;\n    // Base64 has a 4:3 expansion\n    this._maxPayloadBytes = this._useBinaryTransport\n      ? trLessEncapSMF\n      : Math.floor(trLessEncapSMF * 0.75);\n  }\n\n  /**\n   * Connect transport session to router\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  connect() {\n    // Check that we we are in an acceptable state for connection\n    if (this._state !== TransportSessionState.DOWN) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    return this.connectInternal();\n  }\n\n  connectInternal() {\n    // Create the XHR to talk to the router\n    this._connError = null;\n    try {\n      this._createConn = new HTTPConnection(this._createUrl,\n                                            !(this._useBinaryTransport),\n                                            false,\n                                            (rc, data) => this.handleCreateResponse(rc, data),\n                                            (rc, data) => this.handleCreateConnFailure(rc, data),\n                                            this._contentType);\n    } catch (e) {\n      LOG_INFO(`Failed to create connection to router: ${e.message}`);\n      this._connError = e;\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (Check.nothing(this._createConn)) {\n      LOG_INFO('Failed to create connection to router');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    // Get an SMF transport session create message\n    const createMsg = SMFLib.Codec.Transport.genTsCreateHeader();\n\n    if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // already connecting (this is likely a retry with Base64 encoding)\n      LOG_DEBUG('Connect attempt while in WAITING_FOR_CREATE (retry)');\n    } else {\n      this.createConnectTimeout();\n      // Set the current state\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n    }\n\n    // Send the create message to the router.  When the response is received, the\n    // handleCreateResponse method will be called\n    try {\n      this._createConn.send(createMsg);\n    } catch (connError) {\n      LOG_INFO(`Error connecting: ${connError.message}`);\n      LOG_TRACE('Error details:', connError.stack || connError);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (connError instanceof TransportError) {\n        this._connError = connError;\n      } else {\n        this._connError = new TransportError(\n          `Could not create HTTP transport session: ${connError.message}`,\n          connError.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy transport session to router\n   * @param {String} msg The message associated with the operation\n   * @param {ErrorSubcode} subcode The subcode associated with the operation\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  destroy(msg, subcode) {\n    LOG_TRACE(`Destroy transport session when in state ${this._state}`);\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      // Nothing to do\n      return TransportReturnCode.OK;\n    }\n\n    if (this._state === TransportSessionState.CONNECTION_FAILED ||\n        this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // The connections are in an unreliable state - we will just\n      // kill our local object and let the router clean itself up with its inactivity timer\n      LOG_INFO('The connection is in unreliable state, close transport');\n      this.destroyCleanup(msg, subcode, true);\n      return TransportReturnCode.OK;\n    }\n\n    LOG_INFO('Destroy transport session immediately');\n    // Set the current state\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n    // Abort any current requests for this session\n    if (this._httpSendConn !== null) {\n      LOG_INFO('Destroy transport session: abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn !== null) {\n      LOG_INFO('Destroy transport session: abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Start a timer\n    this._destroyTimer = setTimeout(() => {\n      this.destroyTimerExpiry();\n    }, this._destroyTimeout);\n\n    // Send the destroy message over new HTTPConnection to the router so that the async abort\n    // can properly finish in the old _httpSendConn.\n    // When the response is received, the handleDestroyResponse method will be called.\n    this._httpSendConn = new HTTPConnection(\n        this._routerUrl,\n        !(this._useBinaryTransport), false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType,\n        true);\n\n    // Get an SMF transport session destroy message\n    const destroyMsg = SMFLib.Codec.Transport.genTsDestroyHeader(this._sid);\n\n    LOG_TRACE(`destroy message: ${strToHexArray(destroyMsg)}`);\n    this._httpSendConn.send(destroyMsg);\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send data over the connection - this requires a send token\n   * @param {String} dataIn The data to send\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, do not fail due to out of space\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  send(dataIn, forceAllowEnqueue = false) {\n    let data = dataIn;\n    // LOG_TRACE(`HTTPTransportSession:send ${data.length}, tx_queued:${this._queuedDataSize}`);\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    // Check to see if we already have queued data\n    if ((this._queuedData.length > 0) || (!this._haveToken)) {\n      return this.enqueueData(data, forceAllowEnqueue);\n    }\n\n    // Check if we need to chop up the payload\n    let remainder = null;\n    if (data.length > this._maxPayloadBytes) {\n      remainder = data.substr(this._maxPayloadBytes);\n      data = data.substr(0, this._maxPayloadBytes);\n\n      // If no space for remainder, return FAIL without sending anything.\n      if (!this.allowEnqueue(remainder.length)) {\n        return this.enqueueFailNoSpace();\n      }\n\n    // LOG_DEBUG(\"$$ send dataChunk:\" + data.length + \", remainderChunk:\" + remainder.length);\n    }\n\n    // We have the token, so send the data\n    this._haveToken = false;\n\n    const transportPacketLen = (this._smfDataTSHeaderParts[0].length + 4 +\n                                this._smfDataTSHeaderParts[1].length + data.length);\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n    if (remainder) {\n      // The message was partially sent. The message written count will be incremented\n      // when its last bytes go out.\n      return this.enqueueData(remainder, null);\n    }\n\n    // The whole message was sent.\n    this._clientstats.msgWritten++;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Push data onto the pending send queue as long as it doesn't violate\n   * the max stored message size\n   * @param {String} data The data to enqueue\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, don't fail due to no space.\n   * @returns {TransportReturnCode} The result of the operation.\n   */\n  enqueueData(data, forceAllowEnqueue = false) {\n    const dataLen = data.length;\n\n    // LOG_DEBUG(\"enqueueing data: \" + data.length + \", queue depth: \" + this._queuedDataSize);\n    if (forceAllowEnqueue || this.allowEnqueue(dataLen)) {\n      this._queuedDataSize += dataLen;\n      this._queuedData.push(data);\n    } else {\n      return this.enqueueFailNoSpace();\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Set the data in the preformatted headers.  The headers are set up this way\n   * for performance reasons\n   * @param {String} sid The session ID to incorporate into the headers\n   */\n  initPreformattedHeaders(sid) {\n    // _smfDataTSHeaderParts is a two entry array - one part before the total length\n    // and the other after.  The total length is not known until actual data is sent\n    this._smfDataTSHeaderParts = SMFLib.Codec.Transport.genTsDataMsgHeaderParts(sid);\n\n    // _smfDataTokenTSHeader is a single header that all data-token messages require\n    if (this._useStreamingTransport) {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataStreamTokenMsg(\n        sid,\n        this._streamingTransportPadding);\n    } else {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataTokenMsg(sid);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    if (this._queuedDataSize) {\n      this._flushCallback = callback;\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Check if there is any data waiting to be sent to the router.\n   * If there is, send it.\n   */\n  sendQueuedData() {\n    if (this._queuedDataSize === 0) {\n      return;\n    }\n    this._haveToken = false;\n    const data = this.getQueuedDataToSend();\n    const transportPacketLen = this._smfDataTSHeaderParts[0].length + 4 +\n                               this._smfDataTSHeaderParts[1].length + data.length;\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n\n    if (this._canSendNeeded) {\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '',\n                                  null,\n                                  0,\n                                  this._sid));\n    }\n\n    if (this._flushCallback) {\n      const cb = this._flushCallback;\n      this._flushCallback = null;\n      cb();\n    }\n  }\n\n  // Internal Callbacks\n\n  // Called when a create response message has been received\n  handleCreateResponse(tsRc, response) {\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      LOG_DEBUG('Received create response on a destroyed transport session, ignore');\n      return;\n    }\n\n    // Was: stop the connect timer. We don't do that in this transport now.\n    // We wait for the login response.\n\n    // We know whether we're using Base64 or not, so update our max payload size.\n    this.updateMaxWebPayload();\n\n    if (tsRc !== TransportReturnCode.OK) {\n      LOG_INFO(`Received create response with return code ${TransportReturnCode.describe(tsRc)}`);\n      if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n        this.destroyCleanup('Received data decode error on create session response', ErrorSubcode.DATA_DECODE_ERROR);\n      } else {\n        this.destroyCleanup('Failed to handle create session response', ErrorSubcode.CONNECTION_ERROR);\n      }\n      return;\n    }\n\n    if (response.length === 0) {\n      return; // null read indicating end of stream\n    }\n\n    // Parse the Transport Session SMF\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(response, 'latin1'), 0);\n    if (!parsedResponse) {\n      LOG_ERROR('Could not parse create response as SMF. Destroying transport');\n      this.destroyCleanup('Failed to parse create response message', ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    const smfresponse = parsedResponse.getResponse();\n    if (smfresponse.responseCode !== 200) {\n      this.destroyCleanup(`Transport create request failed (${smfresponse.responseCode}, ${smfresponse.responseString})`,\n                          ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    this.cancelConnectTimeout();\n    this._createConn.abort();\n    this._createConn = null;\n    this._state = TransportSessionState.SESSION_UP;\n    this._sid = parsedResponse.sessionId;\n    this._routerTag = parsedResponse.routerTag;\n\n    // Trim any parameters off the create url before using it for the routerUrl\n    this._routerUrl = this._createUrl.replace(/\\?.*/, '');\n    if (this._routerTag !== '') {\n      this._routerUrl = this._routerUrl + this._routerTag;\n    }\n\n    this.initPreformattedHeaders(this._sid);\n    const useBase64 = !this._useBinaryTransport;\n    const useStreaming = this._useStreamingTransport;\n\n    // Create the two connections to the router\n    // By now, getXhrObj() should not throw any exception inside HTTPConnection constructor\n    this._httpSendConn = new HTTPConnection(this._routerUrl, useBase64, false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType);\n    if (this._useStreamingTransport) {\n      // When the transport is HTTP_BINARY_STREAMING the SMF encapsulation\n      // is complete, the SMF header indicates a message length of 0xFFFFFFFF\n      // and after decoding just the header alone the data is passed through\n      // to the session layer, so we must use a simplified SMF parser and a\n      // stateful data callback in that case.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxStreaming(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType,\n            true);\n    } else {\n      // Create a SMF client for the Receive Data channel, when http is used.\n      // SMF messages are encapsualated in a solace http-transport which is itself\n      // encapsulated in SMF.  So create an SMF client that will callback with\n      // an smfMessage construct to the HTTPTransportSession.\n      this._rxChannelClient = new SMFClient(\n            rxData => this.handleSmfMessage(rxData),\n            rxError => this.handleSmfParseError(rxError),\n            null);    // we don't have a 'session' for this client. It's just a parser.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxData(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType);\n    }\n\n    // Give the router the data token so that it will be able to send data\n    this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n\n    // Send the event to the application letting it know that the session is up\n    this._eventCB(\n      new TransportSessionEvent(TransportSessionEventCode.UP_NOTICE,\n                                smfresponse.responseString,\n                                smfresponse.responseCode,\n                                0,\n                                parsedResponse.sessionId));\n  }\n\n  // Called when receiving a destroy response\n  handleDestroyResponse(response) {\n    LOG_DEBUG('Handle destroy response');\n    // Stop the timer\n    this.cancelDestroyTimeout();\n    const innerResponse = response.getResponse();\n    const responseString = innerResponse ? innerResponse.responseString : '';\n    this.destroyCleanup(\n      `${responseString} handled Destroy Response addressed to session ${\n      formatHexString(response.sessionId)}, on session ${formatHexString(this._sid)}`,\n      0);\n  }\n\n  handleSmfMessage(tsmsg) {\n    const smfHeader = tsmsg.smfHeader;\n    if (smfHeader.smf_protocol !== SMFLib.SMFProtocol.TSESSION) {\n      this.handleSmfParseError(`Unexpected Message Prototcol (${smfHeader.smf_protocol}) on ReceiveData connection`);\n      return;\n    }\n\n      // we have found a transport SMF, can we now read the Transport SMF chunk\n    const data = tsmsg.payload;\n    const TotalPayloadToRead = tsmsg.payloadLength;\n\n    switch (tsmsg.messageType) {\n      case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n        this.handleDestroyResponse(tsmsg);\n        return;\n\n      case SMFLib.SMFTransportSessionMessageType.DATA:\n        if (tsmsg.sessionId !== this._sid) {\n          // The router may have given us an error code; if so, include in the error message.\n          const smfErrResponse = tsmsg.getResponse();\n          const responseErrStr = smfErrResponse\n              ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n              : '';\n          const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n          LOG_DEBUG(`HandleRxData Bad Session ID received in message. Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n\n          this._state = TransportSessionState.CONNECTION_FAILED;\n          this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                        responseCode,\n                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n          return;\n        }\n\n        // pass-through encapsulated data to parent\n        if (TotalPayloadToRead > 0) {\n          this._client.rxDataBuffer(data);\n        }\n        break;\n      default:\n        // Unexpected message type\n        this.handleSmfParseError(`Unexpected message type (${\n                    tsmsg.messageType}) on ReceiveData connection`);\n    }\n  }\n\n  handleSmfParseError() {\n    this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n        'Received data decode error', null,\n        ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n  }\n\n  // Called when data is received on the connection\n  handleRxData(tsRc, data) {\n    if (this._httpReceiveConn === null || this._rxChannelClient === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_INFO('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from receive connection, ' +\n               `dump first 64 bytes (or fewer) of data:\\n${\n                 DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_DEBUG('Send write token to router');\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n    } else {\n      this._rxChannelClient.rxDataString(data);\n    } // end have data to process\n  }\n\n  // Called when data is received on a HTTP_BINARY_STREAMING connection\n  handleRxStreaming(tsRc, data) {\n    if (this._httpReceiveConn === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_DEBUG('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from streaming receive ' +\n               `connection, dump first 64 bytes (or fewer) of data:\\n${\n               DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_TRACE('Send write token to router');\n      this._packetReadState = PacketReadState.READING_HEADER;\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n      return;\n    }\n\n    // pass-through encapsulated data to parent\n    if (this._packetReadState === PacketReadState.STREAMING) {\n      this._client.rxDataString(data);\n      return;\n    }\n\n    this._incomingBuffer += data;\n    const smfheader = SMFLib.Codec.ParseSMF.parseSMFAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                       0, true);\n    if (smfheader) {\n        // we have a valid smf header, see if there is a transport header and session-id\n      const tsmsg = SMFLib.Codec.Transport.parseTsSmfHdrAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                           smfheader.headerLength,\n                                                           smfheader);\n      if (!tsmsg) {\n        // Not tsMsg but there is an smf header, just return until more data arrives\n        return;\n      }\n\n      // We have the transport message header too, if it is a DATA message enter\n      // STREAMING state\n      switch (tsmsg.messageType) {\n        case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n          this.handleDestroyResponse(tsmsg);\n          return;\n\n        case SMFLib.SMFTransportSessionMessageType.DATA:\n          if (tsmsg.sessionId !== this._sid) {\n            // The router may have given us an error code, if so, include in the error message.\n            const smfErrResponse = tsmsg.getResponse();\n            const responseErrStr = smfErrResponse\n                ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n                : '';\n            const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n            LOG_DEBUG(`HandleRxData Bad Session ID received in message.  Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n            LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n            this._state = TransportSessionState.CONNECTION_FAILED;\n            this._eventCB(\n              new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                                        responseCode,\n                                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n            return;\n          }\n          // all is good. We can now STREAM the rest of the data until a empty message is received.\n          this._packetReadState = PacketReadState.STREAMING;\n          // pass-through any remaining data\n          if (this._incomingBuffer.length > (smfheader.headerLength + tsmsg.tsHeaderLength)) {\n            this._client.rxDataString(\n              this._incomingBuffer.substr(smfheader.headerLength + tsmsg.tsHeaderLength));\n          }\n          this._incomingBuffer = '';\n          return;\n\n        default:\n          // Unexpected message type\n          throw new TransportError(`Unexpected message type (${tsmsg.messageType}) on ReceiveData connection`, 0);\n      }\n    } else if (SMFLib.Codec.ParseSMF.isSMFHeaderAvailable(BufferImpl.from(this._incomingBuffer, 'latin1'), 0) &&\n               !SMFLib.Codec.ParseSMF.isSMFHeaderValid(BufferImpl.from(this._incomingBuffer, 'latin1'), 0)) {\n      // Probably lost framing\n      LOG_ERROR(`Couldn't decode message due to invalid smf header, dump first 64 bytes (or fewer) of buffer content:\\n${\n                 DebugLib.Debug.formatDumpBytes(this._incomingBuffer.substring(0, 64), true, 0)}`);\n\n      const errorInfo = 'Error parsing incoming message - invalid SMF header detected';\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                  errorInfo, null,\n                                  ErrorSubcode.PROTOCOL_ERROR,\n                                  null));\n    }\n  }\n\n  // Called when data is received on the httpDataSend\n  handleRxDataToken(tsRc, data) {\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      return; // handle End of Stream\n    }\n\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(data, 'latin1'), 0);\n    if (!parsedResponse) {\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                'Failed to parse received data message', null,\n                ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Failed to parse received data message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType === SMFLib.SMFTransportSessionMessageType.DESTROY_RESP) {\n      this.handleDestroyResponse(parsedResponse);\n      return;\n    }\n\n    if (parsedResponse.sessionId !== this._sid) {\n        // The router may have given us an error code, if so, include in the error message.\n      const smfErrResponse = parsedResponse.getResponse();\n      const responseErrStr = smfErrResponse ?\n            (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`) :\n            '';\n      const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n      LOG_DEBUG(`HandleRxDataToken Bad SID received in message.  Expected: ${strToByteArray(this._sid)\n            }, Received: ${strToByteArray(parsedResponse.sessionId)}${responseErrStr}`);\n      LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                `Session ID mismatch in response message, expected: ${formatHexString(this._sid)}, got: ${formatHexString(parsedResponse.sessionId)}, ${responseErrStr}`,\n                responseCode, ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Session ID mismatch in response message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_TOKEN ||\n        parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_STREAM_TOKEN) {\n      this._haveToken = true;\n      this._httpSendConn.recStat('GotToken');\n      // this._eventCB(\n      //    new TransportSessionEvent(TransportSessionEventCode.NOTIFY_GOT_TOKEN, \"\", null, null));\n      this.sendQueuedData();\n    } else {\n        // Unexpected message type\n      throw (new TransportError(`Unexpected message type (${\n            parsedResponse.messageType}) on SendData connection`, 0));\n    }\n  }\n\n  handleRxError(tsRc) {\n    LOG_INFO(`handleRxError, transport return code ${TransportReturnCode.name(tsRc)}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n            'Received data decode error', null,\n            ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n    } else {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            'Connection error',\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection or the connection is aborted\n  handleSendFailure(status, msg) {\n    // failed to send message, if it is a destroy message, just complete the destroy process\\\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO(`Connection destroy failure (${msg}) while in state ${this._state}`);\n      this.destroyCleanup(`Connection destroy failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else {\n      // Failed to send message, return error to upper layer which may  tear the session down\n      LOG_INFO(`Connection failure (${msg}) while in state ${this._state}`);\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            `Connection error: ${msg}`, status,\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection for a session create request\n  handleCreateConnFailure(status, msg) {\n    if (this._state === TransportSessionState.DOWN) {\n      return;\n    }\n\n    LOG_INFO(`Connection create failure (${msg}) while in state ${this._state}`);\n    this.destroyCleanup(`Connection create failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  // Called when the destroy timer expires\n  destroyTimerExpiry() {\n    this.destroyCleanup('Destroy request timeout', ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  cancelDestroyTimeout() {\n    if (this._destroyTimer) {\n      clearTimeout(this._destroyTimer);\n      this._destroyTimer = null;\n    }\n  }\n\n  /**\n   * Called after receiving ts destroy response from router\n   * @param {String} infoStr The informational string to pass along\n   * @param {ErrorSubcode} subcode The subcode associated with the event\n   * @param {Boolean} asyncSendEvent If true, always send the event asynchronously.\n   */\n  destroyCleanup(infoStr, subcode, asyncSendEvent) {\n    LOG_DEBUG(`Destroy cleanup: ${infoStr}`);\n\n    // Abort any current requests for this session\n    if (this._createConn) {\n      LOG_DEBUG('Destroy cleanup: Abort createConn');\n      this._createConn.abort();\n    }\n    if (this._httpSendConn) {\n      LOG_DEBUG('Destroy cleanup: Abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn) {\n      LOG_DEBUG('Destroy cleanup: Abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Clear most internal state\n    this._createUrl = null;\n    this._routerUrl = null;\n    this._createConn = null;\n    this._httpSendConn = null;\n    this._httpReceiveConn = null;\n    this._smfDataTokenTSHeader = null;\n    this._rxChannelClient = null;\n    this._routerTag = '';\n    this._queuedData = [];\n    this._queuedDataSize = 0;\n    this._canSendNeeded = false;\n\n    // Clear timers.\n    this.cancelDestroyTimeout();\n    this.cancelConnectTimeout();\n\n    // Set final state\n    this._state = TransportSessionState.DOWN;\n\n    // Send the event to the application letting it know that the session is down\n    const finalize = () => {\n      // Check whether the callback was cleared before the timeout completes.\n      if (this._eventCB) {\n        this._eventCB(\n            new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                      infoStr || 'Session is destroyed',\n                                      null,\n                                      subcode || 0,\n                                      this._sid));\n      }\n\n      // release reference to smf client object\n      this._client = null;\n      // release reference to session object\n      this._eventCB = null;\n    };\n\n    if (asyncSendEvent) {\n      setTimeout(finalize, 0); // opportunity to use setImmediate instead\n    } else {\n      finalize();\n    }\n  }\n\n  getInfoStr() {\n    const str = `HTTPTransportSession; sid=${\n        formatHexString(this._sid)\n        }; routerTag=${this._routerTag}`;\n    return str;\n  }\n\n}\n\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\n","const { Enum } = require('solclient-eskit');\n\n// Enum name, regexp, enum value, TE applicable\nconst nameChecks = [\n  [\"EMPTY_STRING\", /^$/, \"Zero length\", true],\n  [\"LT\", /</, \"Less than sign (<)\", true],\n  [\"GT\", />/, \"Greater than sign (>)\", true],\n  [\"ASTERISK\", /\\*/, \"Asterisk (*)\", true],\n  [\"QUESTION_MARK\", /\\?/, \"Question mark (?)\", true],\n  [\"AMPERSAND\", /&/, \"Ampersand (&)\", true],\n  [\"SEMICOLON\", /;/, \"Semicolon (;)\", true],\n  [\"LEADING_SLASH\", /^\\//, \"Starts with a slash (/).\", false],\n  [\"TRAILING_SLASH\", /\\/$/, \"Ends with a slash (/).\", false],\n  [\"DOUBLE_SLASH\", /\\/\\//, \"Empty level (//)\", false],\n  [\"TOO_LONG\", /.{200,}/, \"Longer than 200 characters\", true],\n  //[\"NO_ISSUE\", undefined, \"\"]\n];\n\n/**\n * The most frequent problems with endpoint names.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst EndpointNameComplaint = {\n  EMPTY_STRING: \"Zero length\",\n  LT: \"Less than sign (<)\",\n  GT: \"Greater than sign (>)\",\n  ASTERISK: \"Asterisk (*)\",\n  QUESTION_MARK: \"Question mark (?)\",\n  AMPERSAND: \"Ampersand (&)\",\n  SEMICOLON: \"Semicolon (;)\",\n  LEADING_SLASH: \"Starts with a slash (/).\",\n  TRAILING_SLASH: \"Ends with a slash (/).\",\n  DOUBLE_SLASH: \"Empty level (//)\",\n  TOO_LONG: \"Longer than 200 characters\",\n  NO_ISSUE: \"\"\n};\n\n//This should work, but the typescript generator doesn't like it.\n/*\nconst EndpointNameComplaint = {};\nnameChecks.forEach((triplet)=>{\n  EndpointNameComplaint[triplet[0]] = triplet[2];\n})\n*/\n\nfunction explainInvalidEndpointName(name, isTE) {\n  //complaints are ordered by probability\n  for (i in nameChecks) {\n    const triplet = nameChecks[i];\n    if (isTE && !triplet[3]) {\n      // Slash-related issues are queue only, so those rules are marked \"false\" in the check list.\n      continue;\n    }\n    if (name.match(triplet[1])) {\n      return triplet[2];\n    }\n  }\n  // This is an empty string because it's falsy.\n  return EndpointNameComplaint.NO_ISSUE;\n} \t\n\nmodule.exports.EndpointNameComplaint = Enum.new(EndpointNameComplaint);\n//module.exports.EndpointNameComplaint = EndpointNameComplaint;\nmodule.exports.explainInvalidEndpointName = explainInvalidEndpointName;\n","const EPSILON = 1e6;\n\n/**\n * @param {Array} arr The array to flatten\n * @returns {Array} A maximally flattened array. The original array is not modified.\n * @private\n */\nfunction flatten(arr) {\n  return arr.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);\n}\n\n/**\n * @private\n */\nconst BaseChecks = (() => {\n  const result = {\n    /**\n     * Checks whether a value is undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined or null.\n     *\n     * @private\n     */\n    nothing(value) {\n      return (value === undefined || value === null);\n    },\n\n    /**\n     * Checks whether a value is anything, i.e. not undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True unless the value is undefined or null.\n     *\n     * @private\n     */\n    anything(value) {\n      return !BaseChecks.nothing(value);\n    },\n\n    /**\n     * Checks whether a value is undefined. Uses the conservative\n     * typeof check for compatibility with particularly ill-behaved\n     * libraries that redefine <code>undefined</code>.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined.\n     *\n     * @private\n     */\n    undefined(value) {\n      return typeof value === 'undefined';\n    },\n\n    /**\n     * Checks whether a value is defined. This is true for any value with\n     * a type that is not 'undefined'.\n     *\n     * @param {any} value The value to check\n     * @returns {Boolean} True if the value is defined.\n     *\n     * @private\n     */\n    defined(value) {\n      return !BaseChecks.undefined(value);\n    },\n\n    /**\n     * Checks whether a value is an array.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an array.\n     *\n     * @private\n     */\n    array(value) {\n      return BaseChecks.anything(value) && Array.isArray(value);\n    },\n\n    /**\n     * Checks whether a value is an object. If a value is an array, it is not an object.\n     * If a value is null, it is not an object.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an object (and not an array).\n     *\n     * @private\n     */\n    object(value) {\n      return (!BaseChecks.array(value) &&\n              value !== null &&\n              (typeof value === 'object' || value instanceof Object));\n    },\n\n    /**\n     * Checks whether a value is an instance of the given type.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} type The type to check.\n     *\n     * @returns {Boolean} True if type is in value's prototype chain.\n     *\n     * @private\n     */\n    instanceOf(val, type) {\n      return BaseChecks.object(val) && val instanceof type;\n    },\n\n    /**\n     * Checks whether a value's typeof is equal to the given type string.\n     *\n     * @param {*} val The value to check.\n     * @param {String} type The type string for comparison.\n     *\n     * @returns {Boolean} True if typeof(val) == type\n     *\n     * @private\n     */\n    type(val, type) {\n      return typeof val === type; /* dynamic */ // eslint-disable-line valid-typeof\n    },\n\n    /**\n     * Checks whether a value is an instance of any of the given types.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} types The types to check.\n     *\n     * @returns {Boolean} True if any element of types is in val's prototype chain.\n     *\n     * @private\n     */\n    instanceOfAny(val, ...types) {\n      return (BaseChecks.array(types) &&\n              flatten(types).some(type => BaseChecks.instanceOf(val, type)));\n    },\n\n    /**\n     * Checks whether the given value is empty.\n     *\n     * Emptiness is determined using the following checks:\n     *\n     * <ol>\n     *  <li>If an object is nothing, it is empty.</li>\n     *  <li>If it is an object, and it has no keys of its own, it is empty.</li>\n     *  <li>If it has a length property, it is empty if length === 0.</li>\n     *  <li>If none of the above apply, the object is not empty.</li>\n     * </ol>\n     *\n     * @param   {*} val The value to check.\n     *\n     * @returns {Boolean} True if the value is empty.\n     *\n     * @private\n     */\n    empty(val) {\n      if (BaseChecks.nothing(val)) return true;\n      if (BaseChecks.object(val)) {\n        if (Object.keys(val).length === 0) {\n          return true;\n        }\n      }\n      if (val.length === 0) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * A user-defined check.\n     *\n     * @param   {*} val The value to check\n     * @param   {Function} fn The function(val) to use.\n     *\n     * @returns {Boolean} The result of the function, coerced to a boolean.\n     *\n     * @private\n     */\n    truthy(val, fn) {\n      return !!fn(val);\n    },\n\n    rangeGe(val, rangeMinInclusive) {\n      return val >= rangeMinInclusive;\n    },\n\n    rangeGt(val, rangeMin) {\n      return val > rangeMin;\n    },\n\n    rangeLe(val, rangeMaxInclusive) {\n      return val <= rangeMaxInclusive;\n    },\n\n    rangeLt(val, rangeMax) {\n      return val < rangeMax;\n    },\n\n    rangeCompare(val, operator, operand, ...args) {\n      switch (operator) {\n        case '=':\n        case '==':\n        case '===':\n          return val === operand;\n        case '~=':\n        case '=~':\n          {\n            const epsilon = args[0] || EPSILON;\n            return Math.abs(val - operand) < epsilon;\n          }\n        case '<':\n          return val < operand;\n        case '<=':\n          return val <= operand;\n        case '>':\n          return val > operand;\n        case '>=':\n          return val >= operand;\n        default:\n          throw new Error(`Illegal operator for rangeCompare: ${operator}`);\n      }\n    },\n\n    NaN(val) {\n      return Number.isNaN(val);\n    },\n\n    /**\n     * Checks whether val is included in the object. If obj is an array, val is included if\n     * val is an element of the array. Otherwise, if obj is an object, val is included if\n     * val is one of the keys of obj.\n     *\n     * @param   {*} val The value to test\n     * @param   {*} obj The object to test\n     *\n     * @returns {Boolean} True if the value is included in the object\n     */\n    included(val, obj) {\n      if (BaseChecks.nothing(obj)) {\n        return false;\n      }\n      if (obj.includes) {\n        return obj.includes(val);\n      }\n      if (Array.isArray(obj)) {\n        // Not exactly Array.prototype.includes, which uses SameValueZero (+0 == -0)\n        return obj.indexOf(val) >= 0;\n      }\n      if (BaseChecks.object(obj)) {\n        const keys = Object.keys(obj);\n        return BaseChecks.included(val, keys);\n      }\n      return false;\n    },\n\n    /**\n     * Checks whether val is equal to expected.\n     *\n     * @param {any} val The value to check.\n     * @param {any} expected The expected value.\n     * @returns {Boolean} True if the value was equal to the expected value.\n     */\n    equal(val, expected) {\n      return val === expected;\n    },\n\n    /**\n     * Checks whether the given value appears as an attribute value in the given attributes object,\n     * e.g. whether an enumeration contains the given value. If the attributes object is an array,\n     * the array membership check {@link #included} is used instead.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} obj The object with attributes to check.\n     *\n     * @returns {Boolean} True if attrs has any attribute equal to val.\n     */\n    member(val, obj) {\n      return (BaseChecks.anything(obj) &&\n              (BaseChecks.array(obj)\n                ? BaseChecks.included(val, obj)\n                : Object.keys(obj).some(k => obj[k] === val))\n      );\n    },\n\n    boolean(v) {\n      return BaseChecks.type(v, 'boolean');\n    },\n\n    number(v) {\n      return BaseChecks.type(v, 'number');\n    },\n\n    string(v) {\n      return BaseChecks.type(v, 'string');\n    },\n\n    function(v) {\n      return BaseChecks.type(v, 'function');\n    },\n  };\n\n  /**\n   * Checks whether an object is none. This is the same check as <code>nothing</code>\n   * @see {@link nothing}\n   */\n  result.none = result.nothing;\n\n  /**\n   * Checks whether an object is something. This is the same check as <code>anything</code>\n   */\n  result.something = result.anything;\n\n  // Add check-loosening suffixes, (t | null), (t | undefined) and (t | null | undefined).\n  // Do the t check last, just in case it is not (null | undefined) safe.\n  Object.keys(result).forEach((key) => {\n    /**\n     * .orNull checks. These are equivalent to the similarly named check, but also pass if the value\n     * supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNull = function orNull(val, ...args) {\n      return val === null || result[key](val, ...args);\n    };\n\n    /**\n     * .orUndefined checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orUndefined = function orUndefined(val, ...args) {\n      return val === undefined || result[key](val, ...args);\n    };\n\n    /**\n     * .orNothing checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was null or undefined.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNothing = function orNothing(val, ...args) {\n      return result.nothing(val) || result[key](val, ...args);\n    };\n  });\n\n  return result;\n})();\n\nmodule.exports.BaseChecks = BaseChecks;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message payload types\n * (see {@link solace.Message#getBinaryAttachment})\n *\n * A message may contain unstructured byte data, or a structured container.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageType = {\n  /**\n   * Binary message (unstructured bytes stored in the binary attachment message part).\n   * @type {Number}\n   */\n  BINARY: 0,\n  /**\n   * Structured map message.\n   * @type {Number}\n   */\n  MAP:    1,\n  /**\n   * Structured stream message.\n   * @type {Number}\n   */\n  STREAM: 2,\n  /**\n   * Structured text message.\n   * @type {Number}\n   */\n  TEXT:   3,\n};\n\nmodule.exports.MessageType = Enum.new(MessageType);\n","/**\n * @private\n * @static\n */\nconst CacheContext = {\n  /**\n   * A prefix appearing on the request IDs of all requests associated with a Solcache session.\n   * @type {String}\n   * @private\n   */\n  CACHE_REQUEST_PREFIX: '#CRQ',\n\n  /**\n   * A global counter generating unique correlation IDs for cache requests.\n   * @private\n   */\n  cacheRequestCorrelationId: 0,\n};\n\nmodule.exports.CacheContext = CacheContext;\n","'use strict';\n\nconst zlib = require('zlib');\n\nconst bufferUtil = require('./buffer-util');\nconst Limiter = require('./limiter');\nconst { kStatusCode } = require('./constants');\n\nconst FastBuffer = Buffer[Symbol.species];\nconst TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);\nconst kPerMessageDeflate = Symbol('permessage-deflate');\nconst kTotalLength = Symbol('total-length');\nconst kCallback = Symbol('callback');\nconst kBuffers = Symbol('buffers');\nconst kError = Symbol('error');\n\n//\n// We limit zlib concurrency, which prevents severe memory fragmentation\n// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\n// and https://github.com/websockets/ws/issues/1202\n//\n// Intentionally global; it's the global thread pool that's an issue.\n//\nlet zlibLimiter;\n\n/**\n * permessage-deflate implementation.\n */\nclass PerMessageDeflate {\n  /**\n   * Creates a PerMessageDeflate instance.\n   *\n   * @param {Object} [options] Configuration options\n   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support\n   *     for, or request, a custom client window size\n   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/\n   *     acknowledge disabling of client context takeover\n   * @param {Number} [options.concurrencyLimit=10] The number of concurrent\n   *     calls to zlib\n   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the\n   *     use of a custom server window size\n   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept\n   *     disabling of server context takeover\n   * @param {Number} [options.threshold=1024] Size (in bytes) below which\n   *     messages should not be compressed if context takeover is disabled\n   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on\n   *     deflate\n   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on\n   *     inflate\n   * @param {Boolean} [isServer=false] Create the instance in either server or\n   *     client mode\n   * @param {Number} [maxPayload=0] The maximum allowed message length\n   */\n  constructor(options, isServer, maxPayload) {\n    this._maxPayload = maxPayload | 0;\n    this._options = options || {};\n    this._threshold =\n      this._options.threshold !== undefined ? this._options.threshold : 1024;\n    this._isServer = !!isServer;\n    this._deflate = null;\n    this._inflate = null;\n\n    this.params = null;\n\n    if (!zlibLimiter) {\n      const concurrency =\n        this._options.concurrencyLimit !== undefined\n          ? this._options.concurrencyLimit\n          : 10;\n      zlibLimiter = new Limiter(concurrency);\n    }\n  }\n\n  /**\n   * @type {String}\n   */\n  static get extensionName() {\n    return 'permessage-deflate';\n  }\n\n  /**\n   * Create an extension negotiation offer.\n   *\n   * @return {Object} Extension parameters\n   * @public\n   */\n  offer() {\n    const params = {};\n\n    if (this._options.serverNoContextTakeover) {\n      params.server_no_context_takeover = true;\n    }\n    if (this._options.clientNoContextTakeover) {\n      params.client_no_context_takeover = true;\n    }\n    if (this._options.serverMaxWindowBits) {\n      params.server_max_window_bits = this._options.serverMaxWindowBits;\n    }\n    if (this._options.clientMaxWindowBits) {\n      params.client_max_window_bits = this._options.clientMaxWindowBits;\n    } else if (this._options.clientMaxWindowBits == null) {\n      params.client_max_window_bits = true;\n    }\n\n    return params;\n  }\n\n  /**\n   * Accept an extension negotiation offer/response.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Object} Accepted configuration\n   * @public\n   */\n  accept(configurations) {\n    configurations = this.normalizeParams(configurations);\n\n    this.params = this._isServer\n      ? this.acceptAsServer(configurations)\n      : this.acceptAsClient(configurations);\n\n    return this.params;\n  }\n\n  /**\n   * Releases all resources used by the extension.\n   *\n   * @public\n   */\n  cleanup() {\n    if (this._inflate) {\n      this._inflate.close();\n      this._inflate = null;\n    }\n\n    if (this._deflate) {\n      const callback = this._deflate[kCallback];\n\n      this._deflate.close();\n      this._deflate = null;\n\n      if (callback) {\n        callback(\n          new Error(\n            'The deflate stream was closed while data was being processed'\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   *  Accept an extension negotiation offer.\n   *\n   * @param {Array} offers The extension negotiation offers\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsServer(offers) {\n    const opts = this._options;\n    const accepted = offers.find((params) => {\n      if (\n        (opts.serverNoContextTakeover === false &&\n          params.server_no_context_takeover) ||\n        (params.server_max_window_bits &&\n          (opts.serverMaxWindowBits === false ||\n            (typeof opts.serverMaxWindowBits === 'number' &&\n              opts.serverMaxWindowBits > params.server_max_window_bits))) ||\n        (typeof opts.clientMaxWindowBits === 'number' &&\n          !params.client_max_window_bits)\n      ) {\n        return false;\n      }\n\n      return true;\n    });\n\n    if (!accepted) {\n      throw new Error('None of the extension offers can be accepted');\n    }\n\n    if (opts.serverNoContextTakeover) {\n      accepted.server_no_context_takeover = true;\n    }\n    if (opts.clientNoContextTakeover) {\n      accepted.client_no_context_takeover = true;\n    }\n    if (typeof opts.serverMaxWindowBits === 'number') {\n      accepted.server_max_window_bits = opts.serverMaxWindowBits;\n    }\n    if (typeof opts.clientMaxWindowBits === 'number') {\n      accepted.client_max_window_bits = opts.clientMaxWindowBits;\n    } else if (\n      accepted.client_max_window_bits === true ||\n      opts.clientMaxWindowBits === false\n    ) {\n      delete accepted.client_max_window_bits;\n    }\n\n    return accepted;\n  }\n\n  /**\n   * Accept the extension negotiation response.\n   *\n   * @param {Array} response The extension negotiation response\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsClient(response) {\n    const params = response[0];\n\n    if (\n      this._options.clientNoContextTakeover === false &&\n      params.client_no_context_takeover\n    ) {\n      throw new Error('Unexpected parameter \"client_no_context_takeover\"');\n    }\n\n    if (!params.client_max_window_bits) {\n      if (typeof this._options.clientMaxWindowBits === 'number') {\n        params.client_max_window_bits = this._options.clientMaxWindowBits;\n      }\n    } else if (\n      this._options.clientMaxWindowBits === false ||\n      (typeof this._options.clientMaxWindowBits === 'number' &&\n        params.client_max_window_bits > this._options.clientMaxWindowBits)\n    ) {\n      throw new Error(\n        'Unexpected or invalid parameter \"client_max_window_bits\"'\n      );\n    }\n\n    return params;\n  }\n\n  /**\n   * Normalize parameters.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Array} The offers/response with normalized parameters\n   * @private\n   */\n  normalizeParams(configurations) {\n    configurations.forEach((params) => {\n      Object.keys(params).forEach((key) => {\n        let value = params[key];\n\n        if (value.length > 1) {\n          throw new Error(`Parameter \"${key}\" must have only a single value`);\n        }\n\n        value = value[0];\n\n        if (key === 'client_max_window_bits') {\n          if (value !== true) {\n            const num = +value;\n            if (!Number.isInteger(num) || num < 8 || num > 15) {\n              throw new TypeError(\n                `Invalid value for parameter \"${key}\": ${value}`\n              );\n            }\n            value = num;\n          } else if (!this._isServer) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else if (key === 'server_max_window_bits') {\n          const num = +value;\n          if (!Number.isInteger(num) || num < 8 || num > 15) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n          value = num;\n        } else if (\n          key === 'client_no_context_takeover' ||\n          key === 'server_no_context_takeover'\n        ) {\n          if (value !== true) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else {\n          throw new Error(`Unknown parameter \"${key}\"`);\n        }\n\n        params[key] = value;\n      });\n    });\n\n    return configurations;\n  }\n\n  /**\n   * Decompress data. Concurrency limited.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  decompress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._decompress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Compress data. Concurrency limited.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  compress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._compress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Decompress data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _decompress(data, fin, callback) {\n    const endpoint = this._isServer ? 'client' : 'server';\n\n    if (!this._inflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._inflate = zlib.createInflateRaw({\n        ...this._options.zlibInflateOptions,\n        windowBits\n      });\n      this._inflate[kPerMessageDeflate] = this;\n      this._inflate[kTotalLength] = 0;\n      this._inflate[kBuffers] = [];\n      this._inflate.on('error', inflateOnError);\n      this._inflate.on('data', inflateOnData);\n    }\n\n    this._inflate[kCallback] = callback;\n\n    this._inflate.write(data);\n    if (fin) this._inflate.write(TRAILER);\n\n    this._inflate.flush(() => {\n      const err = this._inflate[kError];\n\n      if (err) {\n        this._inflate.close();\n        this._inflate = null;\n        callback(err);\n        return;\n      }\n\n      const data = bufferUtil.concat(\n        this._inflate[kBuffers],\n        this._inflate[kTotalLength]\n      );\n\n      if (this._inflate._readableState.endEmitted) {\n        this._inflate.close();\n        this._inflate = null;\n      } else {\n        this._inflate[kTotalLength] = 0;\n        this._inflate[kBuffers] = [];\n\n        if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n          this._inflate.reset();\n        }\n      }\n\n      callback(null, data);\n    });\n  }\n\n  /**\n   * Compress data.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _compress(data, fin, callback) {\n    const endpoint = this._isServer ? 'server' : 'client';\n\n    if (!this._deflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._deflate = zlib.createDeflateRaw({\n        ...this._options.zlibDeflateOptions,\n        windowBits\n      });\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      this._deflate.on('data', deflateOnData);\n    }\n\n    this._deflate[kCallback] = callback;\n\n    this._deflate.write(data);\n    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {\n      if (!this._deflate) {\n        //\n        // The deflate stream was closed while data was being processed.\n        //\n        return;\n      }\n\n      let data = bufferUtil.concat(\n        this._deflate[kBuffers],\n        this._deflate[kTotalLength]\n      );\n\n      if (fin) {\n        data = new FastBuffer(data.buffer, data.byteOffset, data.length - 4);\n      }\n\n      //\n      // Ensure that the callback will not be called again in\n      // `PerMessageDeflate#cleanup()`.\n      //\n      this._deflate[kCallback] = null;\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n        this._deflate.reset();\n      }\n\n      callback(null, data);\n    });\n  }\n}\n\nmodule.exports = PerMessageDeflate;\n\n/**\n * The listener of the `zlib.DeflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction deflateOnData(chunk) {\n  this[kBuffers].push(chunk);\n  this[kTotalLength] += chunk.length;\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction inflateOnData(chunk) {\n  this[kTotalLength] += chunk.length;\n\n  if (\n    this[kPerMessageDeflate]._maxPayload < 1 ||\n    this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload\n  ) {\n    this[kBuffers].push(chunk);\n    return;\n  }\n\n  this[kError] = new RangeError('Max payload size exceeded');\n  this[kError].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';\n  this[kError][kStatusCode] = 1009;\n  this.removeListener('data', inflateOnData);\n  this.reset();\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'error'` event.\n *\n * @param {Error} err The emitted error\n * @private\n */\nfunction inflateOnError(err) {\n  //\n  // There is no need to call `Zlib#close()` as the handle is automatically\n  // closed when an error is emitted.\n  //\n  this[kPerMessageDeflate]._inflate = null;\n  err[kStatusCode] = 1007;\n  this[kCallback](err);\n}\n","const { assert } = require('solclient-eskit');\nconst { BaseMessage } = require('./base-message');\nconst { Destination, DestinationUtil } = require('solclient-destination');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('../smf-smp-message-type-flags');\n\n/**\n * Represents an SMP request or reply message\n * @memberof solace\n * @private\n */\nclass SMPMessage extends BaseMessage {\n\n  /**\n   * Creates an instance of SMPMessage.\n   *\n   * @memberOf SMPMessage\n   */\n  constructor() {\n    super(new SMFHeader(SMFProtocol.SMP, 1));\n\n    // Field: msgtype\n    this.msgType = 0;\n\n    // Field: subscription string\n    this.encodedUtf8Subscription = null;\n    this.encodedUtf8QueueName = null;\n\n    this.smpFlags = (0 | SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC); // default flags\n\n    this._encodedQueueName = null; // unused in solclientjs\n    this._encodedClientName = null; // unused in solclientjs\n  }\n\n  isFlag(flagMask) {\n    return (this.smpFlags & flagMask);\n  }\n\n  setFlag(flagMask, value) {\n    if (value) {\n      this.smpFlags |= flagMask;\n    } else {\n      this.smpFlags &= (~flagMask);\n    }\n  }\n\n  static getSubscriptionMessage(correlationTag, topic, add, requestConfirm) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDSUBSCRIPTION\n      : SMFSMPMessageType.REMSUBSCRIPTION;\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    if (requestConfirm) {\n      smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    }\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n  static getQueueSubscriptionMessage(correlationTag, topic, queue, add) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDQUEUESUBSCRIPTION\n      : SMFSMPMessageType.REMQUEUESUBSCRIPTION;\n    smp.encodedUtf8QueueName = DestinationUtil.encodeBytes(queue.getName());\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    assert(smp.encodedUtf8QueueName, 'Queue had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    // TODO: true for remove, false for add? Typo in the spec?\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_PERSIST, true);\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n\n}\n\n\nmodule.exports.SMPMessage = SMPMessage;\n","/**\n * @private\n */\nclass Timer {\n  /**\n   * Creates an instance of Timer.\n   * @param {function} cancel The action to perform on cancellation\n   */\n  constructor(cancel) {\n    this.cancel = () => {\n      this.cancel = () => {}; // change to no-op\n      cancel();\n    };\n  }\n\n  /**\n   * @static\n   * @param {Number} interval The interval for the timer, in milliseconds.\n   * @param {function} onInterval The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newInterval(interval, onInterval, ...args) {\n    const timerRef = setInterval(onInterval, interval, ...args);\n    return new Timer(() => clearInterval(timerRef));\n  }\n\n  /**\n   * @static\n   * @param {Number} timeout The timeout for the timer, in milliseconds.\n   * @param {function} onExpire The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newTimeout(timeout, onExpire, ...args) {\n    const timerRef = setTimeout(onExpire, timeout, ...args);\n    return new Timer(() => clearTimeout(timerRef));\n  }\n}\n\nmodule.exports.Timer = Timer;\n","module.exports = require(\"zlib\");","const { ErrorSubcode } = require('solclient-error');\nconst { TransportError } = require('../../transport-error');\n\n/* eslint-env browser */\nconst XHRFactory = {\n  /**\n   * Creates an XHR object.\n   *\n   * @param {Boolean} [allowFail=false] If `true`, return null on failure; otherwise throw.\n   * @throws {TransportError}\n   * @returns {XMLHttpRequest} The new XHR object\n   */\n  create(allowFail = false) {\n    const xhr = typeof XMLHttpRequest !== 'undefined' ? new XMLHttpRequest() : null;\n    if (!allowFail && !xhr) {\n      throw new TransportError('Failed to create an XMLHTTPRequest',\n                                 ErrorSubcode.CREATE_XHR_FAILED);\n    }\n    return xhr;\n  },\n};\n\nmodule.exports.XHRFactory = XHRFactory;\n","const { DestinationType } = require('solclient-destination');\nconst { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n * @private\n */\nconst SDTDestType = {\n  [DestinationType.TOPIC]:           0x00,\n  [DestinationType.QUEUE]:           0x01,\n  [DestinationType.TEMPORARY_QUEUE]: 0x01,\n};\n\nmodule.exports.SDTDestType = Enum.new(SDTDestType);\n","/* eslint-disable global-require */\nconst { BaseSMFClient } = require('./base-smf-client');\n\n// Got rid of anonymous function that checked browser and set smf-client\n// Now ignoring string-smf-client and setting it straight to buffer-smf-client\n// const SMFClient = require('./buffer-smf-client').BufferSMFClient;\n\nconst SMFClient = (() => {\n  // Got rid of the inconsequential ifs for old IE versions in 2024 (again?)\n  /* eslint-env shared-browser-node */\n  return require('./buffer-smf-client').BufferSMFClient;\n})();\n\nSMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG = BaseSMFClient.SMF_MAX_CORRELATION;\n\nmodule.exports.SMFClient = SMFClient;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionState = {\n  /**\n   * The session is connecting.\n   */\n  CONNECTING:    1,\n  /**\n   * The session is connected.\n   */\n  CONNECTED:     2,\n  /**\n   * The session experienced an error.\n   */\n  SESSION_ERROR: 3,\n  /**\n   * The session is disconnecting.\n   */\n  DISCONNECTING: 4,\n  /**\n   * The session is disconnected.\n   */\n  DISCONNECTED:  5,\n\n};\n\nmodule.exports.SessionState = Enum.new(SessionState);\n","const { BaseMessage } = require('./base-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\n\nclass KeepAliveMessage extends BaseMessage {\n  constructor() {\n    super(new SMFHeader(SMFProtocol.KEEPALIVEV2, 2));\n    this._smfHeader.smf_uh = 2;\n  }\n}\n\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of Web Transport events.\n * @enum {string}\n * @namespace\n * @memberof solace\n * @private\n */\nconst WebTransportEvent = {\n  /**\n   * The Session Layer has issued a connect request\n   */\n  CONNECT:          'Connect',\n  /**\n   * The Session Layer has issued a destroy request\n   */\n  DESTROY:          'Destroy',\n  /**\n   * A downgrade request has been received from an FSM.\n   */\n  DOWNGRADE:        'Downgrade',\n  /**\n   * The underlying transport has been destroyed. Seen in\n   * response to calling destroy() and in some cases when\n   * the transport is destroyed by the peer.\n   */\n  DESTROYED_NOTICE: 'DestroyedNotice',\n  /**\n   * The underlying transport timed out in its connection attempt.\n   * The managing component should abort this connection attempt\n   * and begin a downgrade if available.\n   */\n  CONNECT_TIMEOUT:  'ConnectTimeout',\n  /**\n   * The underlying transport is active and ready for traffic.\n   */\n  UP_NOTICE:        'UpNotice',\n  /**\n   * The transport encountered an error sending data.\n   */\n  SEND_ERROR:       'SendError',\n};\n\nmodule.exports.WebTransportEvent = Enum.new(WebTransportEvent);\n","const { ErrorSubcode } = require('solclient-error');\n\n\n/**\n * Message consumer event objects. A {@link solace.MessageConsumer} will emit\n * these events related to queue subscription management:\n * MessageConsumerEventName.SUBSCRIPTION_OK and\n * MessageConsumerEventName.SUBSCRIPTION_ERROR.\n *\n * Similar to SessionEvent.\n * Also compatible with RequestError.\n *\n * @memberof solace\n */\nclass MessageConsumerEvent {\n  /**\n   * @constructor\n   * @param {String} messageConsumerEventName one of the MessageConsumerEventNames.\n   * @param {String} infoStr Information string\n   * @param {Number} [responseCode] Any associated router response code\n   * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n   * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n   * @param {String} [reason] Any additional information\n   * @private\n   */\n  constructor(\n    messageConsumerEventName,\n    infoStr,\n    responseCode = undefined,\n    errorSubcode = 0,\n    correlationKey = undefined,\n    reason = undefined) {\n    this._messageConsumerEventName = messageConsumerEventName;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = errorSubcode;\n    this._correlationKey = correlationKey; // optional\n    this._reason = reason; // optional\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get messageConsumerEventName() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get name() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description if applicable, an information string returned by the Solace Message Router.\n   */\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  /**\n   * @type {?Number}\n   * @description if applicable, a response code returned by the Solace Message Router.\n   */\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * same as subcode.\n   */\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * Same as errorSubcode.\n   */\n  get subcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?Object}\n   * @description A user-specified object\n   * made available in the response or confirmation event by including it as a\n   * parameter in the orignal API call.  If the user did not specify a\n   * correlationKey, it will be <code>null</code>.\n   * @default null\n   */\n  get correlationKey() {\n    return this._correlationKey;\n  }\n\n  /**\n   * @type {?String}\n   * @description Additional information if it is applicable.\n   *\n   * In case of subscribe or publish events, it constains the topic.\n   */\n  get reason() {\n    return this._reason;\n  }\n  /**\n   * @param {Object} value The reason info object\n   * @internal\n   */\n  set reason(value) {\n    this._reason = value;\n  }\n\n  /**\n   * @type {?solace.SessionEventCode}\n   * @description Only here for compatibility with the RequestError exception class.\n   * Always returns undefined for a MessageConsumerEvent.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  get requestEventCode() {\n    return undefined;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'messageConsumerEventName': this.messageConsumerEventName,\n      'infoStr':                  this.infoStr,\n      'responseCode':             this.responseCode,\n      'errorSubcode':             ErrorSubcode.describe(this.errorSubcode),\n      'correlationKey':           this.correlationKey ? this.correlationKey.toString() : null,\n      'reason':                   this.reason ? this.reason : null,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of {@link solace.SDTUnsuportedValueError} causes.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTValueErrorSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The value for this field may be valid on other platforms, but is outside the\n   * range that is supported on this platform for the given type.\n   */\n  VALUE_OUTSIDE_SUPPORTED_RANGE: 1,\n};\n\nmodule.exports.SDTValueErrorSubcode = Enum.new(SDTValueErrorSubcode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Transport session states, used by WebSocketTransportSession and HTTPTransportSession\n * @enum {number}\n * @private\n */\nconst TransportSessionState = {\n  DOWN:                0,\n  WAITING_FOR_CREATE:  1,\n  SESSION_UP:          2,\n  WAITING_FOR_DESTROY: 4,\n  CONNECTION_FAILED:   5,\n};\n\nmodule.exports.TransportSessionState = Enum.new(TransportSessionState);\n","'use strict';\n\nconst { EMPTY_BUFFER } = require('./constants');\n\nconst FastBuffer = Buffer[Symbol.species];\n\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */\nfunction concat(list, totalLength) {\n  if (list.length === 0) return EMPTY_BUFFER;\n  if (list.length === 1) return list[0];\n\n  const target = Buffer.allocUnsafe(totalLength);\n  let offset = 0;\n\n  for (let i = 0; i < list.length; i++) {\n    const buf = list[i];\n    target.set(buf, offset);\n    offset += buf.length;\n  }\n\n  if (offset < totalLength) {\n    return new FastBuffer(target.buffer, target.byteOffset, offset);\n  }\n\n  return target;\n}\n\n/**\n * Masks a buffer using the given mask.\n *\n * @param {Buffer} source The buffer to mask\n * @param {Buffer} mask The mask to use\n * @param {Buffer} output The buffer where to store the result\n * @param {Number} offset The offset at which to start writing\n * @param {Number} length The number of bytes to mask.\n * @public\n */\nfunction _mask(source, mask, output, offset, length) {\n  for (let i = 0; i < length; i++) {\n    output[offset + i] = source[i] ^ mask[i & 3];\n  }\n}\n\n/**\n * Unmasks a buffer using the given mask.\n *\n * @param {Buffer} buffer The buffer to unmask\n * @param {Buffer} mask The mask to use\n * @public\n */\nfunction _unmask(buffer, mask) {\n  for (let i = 0; i < buffer.length; i++) {\n    buffer[i] ^= mask[i & 3];\n  }\n}\n\n/**\n * Converts a buffer to an `ArrayBuffer`.\n *\n * @param {Buffer} buf The buffer to convert\n * @return {ArrayBuffer} Converted buffer\n * @public\n */\nfunction toArrayBuffer(buf) {\n  if (buf.length === buf.buffer.byteLength) {\n    return buf.buffer;\n  }\n\n  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.length);\n}\n\n/**\n * Converts `data` to a `Buffer`.\n *\n * @param {*} data The data to convert\n * @return {Buffer} The buffer\n * @throws {TypeError}\n * @public\n */\nfunction toBuffer(data) {\n  toBuffer.readOnly = true;\n\n  if (Buffer.isBuffer(data)) return data;\n\n  let buf;\n\n  if (data instanceof ArrayBuffer) {\n    buf = new FastBuffer(data);\n  } else if (ArrayBuffer.isView(data)) {\n    buf = new FastBuffer(data.buffer, data.byteOffset, data.byteLength);\n  } else {\n    buf = Buffer.from(data);\n    toBuffer.readOnly = false;\n  }\n\n  return buf;\n}\n\nmodule.exports = {\n  concat,\n  mask: _mask,\n  toArrayBuffer,\n  toBuffer,\n  unmask: _unmask\n};\n\n/* istanbul ignore else  */\nif (!process.env.WS_NO_BUFFER_UTIL) {\n  try {\n    const bufferUtil = require('bufferutil');\n\n    module.exports.mask = function (source, mask, output, offset, length) {\n      if (length < 48) _mask(source, mask, output, offset, length);\n      else bufferUtil.mask(source, mask, output, offset, length);\n    };\n\n    module.exports.unmask = function (buffer, mask) {\n      if (buffer.length < 32) _unmask(buffer, mask);\n      else bufferUtil.unmask(buffer, mask);\n    };\n  } catch (e) {\n    // Continue regardless of the error.\n  }\n}\n","const { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst ParseFloat = {};\nParseFloat.parseFloatField = function parseFloatField(buf, pos, len) {\n  switch (len) {\n    case 4:\n      return SDTField.create(SDTFieldType.FLOATTYPE, buf.readFloatBE(pos));\n    case 8:\n      return SDTField.create(SDTFieldType.DOUBLETYPE, buf.readDoubleBE(pos));\n    default:\n      return SDTField.create(SDTFieldType.UNKNOWN, buf.toString('latin1', pos, pos + len));\n  }\n};\n\nmodule.exports.ParseFloat = ParseFloat;\n","const { EventEmitter } = require('./lib/event-emitter');\nconst { Timer } = require('./lib/timer');\n\nmodule.exports = {\n  EventEmitter,\n  Timer,\n};\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication schemes that can be used. The corresponding session\n * property is {@link solace.SessionProperties#authenticationScheme}.\n *\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst AuthenticationScheme = {\n  /**\n   * @description Username/Password based authentication scheme.\n   * @type {String}\n   */\n  BASIC:                       'AuthenticationScheme_basic',\n  /**\n   * @name solace.AuthenticationScheme.CLIENT_CERTIFICATE\n   * @default AuthenticationScheme_clientCertificate\n   * @description Client-side certificate based authentication scheme.\n   * @see {@link solace.SessionProperties#sslPfx}\n   * @see {@link solace.SessionProperties#sslPfxPassword}\n   * @see {@link solace.SessionProperties#sslPrivateKey}\n   * @see {@link solace.SessionProperties#sslPrivateKeyPassword}\n   * @see {@link solace.SessionProperties#sslCertificate}\n   * @type {String}\n   * @target node\n   */\n  /**\n   * @description Client-side certificate based authentication scheme.  The certificate and\n   *   private key are provided by the browser.\n   * @type {String}\n   * @target browser\n   */\n  CLIENT_CERTIFICATE:          'AuthenticationScheme_clientCertificate',\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.BASIC} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_BASIC: 'AuthenticationScheme_basic',\n\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE: 'AuthenticationScheme_clientCertificate',\n\n  /**\n   * @default AuthenticationScheme_oauth2\n   * @description Oauth2 authentication scheme.\n   * @see {@link solace.SessionProperties#accessToken}\n   * @see {@link solace.SessionProperties#idToken}\n   * @see {@link solace.SessionProperties#issuerIdentifier}\n   * @type {String}\n   */\n  OAUTH2: 'AuthenticationScheme_oauth2',\n};\n\nmodule.exports.AuthenticationScheme = Enum.new(AuthenticationScheme);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines the possible TransportSessionEvent codes.\n * @private\n * @enum {number}\n */\nconst TransportSessionEventCode = {\n  // Raised when TransportSession is up and ready to send/receive data\n  UP_NOTICE:           1,\n  // Raised if the session is destroyed\n  DESTROYED_NOTICE:    2,\n  // Raised when the send queue had reached its maximum, but now has space again\n  CAN_ACCEPT_DATA:     4,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  DATA_DECODE_ERROR:   5,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  PARSE_FAILURE:       6,\n  // Raised when the connection times out. The app should attempt downgrade if available.\n  CONNECT_TIMEOUT:     7,\n  // There was an error sending a message on an etablished transport\n  SEND_ERROR:          8,\n  // The requested downgrade was rejected.\n  DOWNGRADE_FAILED:    10,\n  // The requested downgrade completed.\n  DOWNGRADE_SUCCEEDED: 11,\n};\n\nmodule.exports.TransportSessionEventCode = Enum.new(TransportSessionEventCode);\n","const CodecLib = require('./lib/codec');\nconst { AdProtocolMessage, BinaryMetaBlock, ClientCtrlMessage, KeepAliveMessage, SMPMessage } = require('./lib/message-objects');\nconst { SMFAdProtocolMessageType } = require('./lib/smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('./lib/smf-adprotocol-params');\nconst { SMFClientCtrlMessageType } = require('./lib/smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam } = require('./lib/smf-client-ctrl-params');\nconst { SMFParameterType, SMFExtendedParameterType } = require('./lib/smf-parameter-types');\nconst { SMFProtocol } = require('./lib/smf-protocols');\nconst { SMFSMPMessageType } = require('./lib/smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('./lib/smf-smp-message-type-flags');\nconst { SMFTransportSessionMessageType } = require('./lib/smf-transport-session-message-types');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.Codec = CodecLib;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFAdProtocolMessageType = SMFAdProtocolMessageType;\nmodule.exports.SMFAdProtocolParam = SMFAdProtocolParam;\nmodule.exports.SMFClientCtrlMessageType = SMFClientCtrlMessageType;\nmodule.exports.SMFClientCtrlParam = SMFClientCtrlParam;\nmodule.exports.SMFParameterType = SMFParameterType;\nmodule.exports.SMFProtocol = SMFProtocol;\nmodule.exports.SMFSMPMessageTypeFlags = SMFSMPMessageTypeFlags;\nmodule.exports.SMFSMPMessageType = SMFSMPMessageType;\nmodule.exports.SMFTransportSessionMessageType = SMFTransportSessionMessageType;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.SMFExtendedParameterType = SMFExtendedParameterType;\n","const { Enum } = require('solclient-eskit');\n\nconst ConsumerStateNames = {\n  UNBOUND:                       'UNBOUND',\n  UNBOUND_AWAIT_SESSION_UP:      'UNBOUND_AWAIT_SESSION_UP',\n  UNBOUND_AWAIT_FLOWOPEN:        'UNBOUND_AWAIT_FLOWOPEN',\n  UNBOUND_AWAIT_ANY:             'UNBOUND_AWAIT_ANY',\n  BIND_SENT:                     'BIND_SENT',\n  FLOW_UP:                       'FLOW_UP',\n  FLOW_UP_XFER:                  'FLOW_UP_XFER',\n  FLOW_UP_XFER_INACTIVE:         'FLOW_UP_XFER_INACTIVE',\n  UNBIND_SENT:                   'UNBIND_SENT',\n  RECONNECTING:                  'RECONNECTING',\n  RECONNECTING_BIND_SENT:        'RECONNECTING_BIND_SENT',\n  RECONNECTING_AWAIT_SESSION_UP: 'RECONNECTING_AWAIT_SESSION_UP',\n  RECONNECTING_AWAIT_TIMER:      'RECONNECTING_AWAIT_TIMER',\n  CREATE_SENT:                   'CREATE_SENT',\n};\n\nmodule.exports.ConsumerStateNames = Enum.new(ConsumerStateNames);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageType = {\n  ADDSUBSCRIPTION:              0x00,\n  REMSUBSCRIPTION:              0x01,\n  ADDQUEUESUBSCRIPTION:         0x02,\n  REMQUEUESUBSCRIPTION:         0x03,\n  ADDSUBSCRIPTIONFORCLIENTNAME: 0x04,\n  REMSUBSCRIPTIONFORCLIENTNAME: 0x05,\n};\n\nmodule.exports.SMFSMPMessageType = Enum.new(SMFSMPMessageType);\n","const { LOG_ERROR } = require('solclient-log');\nconst { State } = require('./state');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This is a state machine that can host states.  States themselves can also\n * host inner states in a hierarchical manner.  This class also provides the\n * basic interface for manipulating the current state via processing of\n * events, and querying the current state through 'getActiveState' methods.\n *\n * @private\n * @memberof solace\n */\nclass StateMachine extends StateContext {\n  /**\n   * @constructor\n   *\n   * @param {Object} spec The object specifier for the FSM.\n   * @param {String} spec.name The name of the FSM, used in debug logs.\n   */\n  constructor(spec) {\n    if (spec.parentContext) {\n      throw new Error(`State machine cannot have parent state: ${spec.parentContext}`);\n    }\n    super(spec);\n    this.impl.ancestorList = [this];\n    this.impl.eventQueue = [];\n    this.impl.finalState = new State({ name: 'impl.final', parentContext: this });\n    this.impl.handleUncaughtException = (ev, exc) => {\n      LOG_ERROR(`Uncaught exception in ${this} while processing ${ev}: ${exc.stack}`);\n      return this.terminate();\n    };\n  }\n\n  /**\n   * This method enqueues the given function, and begins execution of queued functions if\n   * they aren't already executing.\n   * @param {Function} func The function to enqueue and execute.\n   * @returns {Boolean} `true` if the supplied function has completed; false if it was deferred.\n   */\n  process(func) {\n    const { impl } = this;\n    const { eventQueue } = impl;\n\n    eventQueue.push(func);\n    if (impl.processingEvents) {\n      return false;\n    }\n    impl.processingEvents = true;\n\n    while (eventQueue.length) {\n      const evt = eventQueue.shift();\n      evt.apply(this);\n    }\n\n    impl.processingEvents = false;\n    this._onEventCompletion();\n    return true;\n  }\n\n  /**\n   * This method starts a state machine after it has been created and states\n   * have been associated and configured any time getCurrentState() returns\n   * undefined.  This would be after initial creation and after the state\n   * machine has terminated (i.e. transitioned to the final state).\n   */\n  start() {\n    if (this.getCurrentState()) {\n      throw new Error(`Cannot start ${this.getName()}; it is already started.`);\n    }\n\n    this.process(() => {\n      const result = this.onInitial();\n\n      // A state machine's onInitial must specify a destState, the state\n      // cannot be the state machine itself, and the state must have the\n      // state machine as the top ancestor.\n      if (result.destState === undefined) {\n        throw new Error(`Missing destination state from initial transition for ${this}`);\n      }\n\n      if (result.destState === this) {\n        throw new Error(`Destination state for initial transition for ${this} cannot be the FSM.`);\n      }\n\n      const destAncestorList = result.destState.getAncestorList();\n      if (destAncestorList[0] !== this) {\n        throw new Error(`Invalid destination state (${result.destState\n          }) from initial transition for state machine (${this\n          }); destState ancestor (${destAncestorList[0]})`);\n      }\n\n      this.impl.currentState = this.processReactionResult(result);\n    });\n  }\n\n  /**\n   * Used to query whether the state machine is currently running\n   * @returns {Boolean} `true` if the state machine is processing events; false otherwise.\n   */\n  isRunning() {\n    return this.impl.processingEvents;\n  }\n\n  /**\n   * This is the main function to invoke an FSM with an event.\n   * @param {FsmEvent} evt The event to be processed by the FSM.\n   */\n  processEvent(evt) {\n    const { impl } = this;\n    if (!this.process(() => {\n      this.log(`Processing event ${evt}`);\n      let result;\n      if (impl.currentState) {\n        try {\n          result = impl.currentState.handleEvent(evt);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        } catch (exc) {\n          this.log(`Caught exception ${exc}, continuing`);\n          result = impl.handleUncaughtException.call(impl.currentState,\n                                                     evt,\n                                                     exc);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        }\n      }\n    })) {\n      // Didn't run immediately\n      this.log(`Deferring event ${evt}`);\n    }\n  }\n\n  /**\n   * Terminates the FSM by transitioning the FSM to its final state. After\n   * this returns, the FSM may be started again with @link start.  This method\n   * should only be called externally from the FSM, not from within a reaction.\n   * To terminate the FSM within a reaction, use the\n   * {@link StateContext.ReactionResult} returned by {@link State#terminate}.\n   */\n  terminateFsm() {\n    const curState = this.getCurrentState();\n    if (!curState) {\n      return;\n    }\n    if (this.impl.processingEvents) {\n      throw new Error('Cannot terminate state machine while FSM is processing ' +\n            'events. To terminate the FSM from within a reaction, return ' +\n            'State~terminate() from a reaction.');\n    }\n    this.process(() => {\n      const result = curState.terminate();\n      this.impl.currentState = curState.processReactionResult(result);\n    });\n  }\n\n  /**\n   * This should only be called from within the context of a reaction\n   * function, which is to say a function called by the FSM infrastructure\n   * that returns {@link StateContext~ReactionResult}.  The purpose of this\n   * function is to set a function to be called after the currently\n   * executing event is completely handled, which includes the execution of\n   * any events that have been or will be queued as a result of processing\n   * the current event.\n   *\n   * Typical uses of this would be to set a function that does one of:\n   * 1. Throws an exception to the caller.\n   * 2. Calls an application callback.\n   * @param {Function} postEventAction function to call when the FSM has finished\n   *  processing events.  The context (i.e. 'this') will be the FSM when it\n   *  is called.\n   */\n  setPostEventAction(postEventAction) {\n    if (!this.impl.processingEvents) {\n      throw new Error('Cannot set post event hook unless FSM is processing events.');\n    }\n    if (!postEventAction || typeof postEventAction !== 'function') {\n      // TBD: Do we need to allow clearing of the hook?  Not that\n      // I'm aware of for the known use cases.  If we want to allow\n      // it, I propose adding a 'clearPostEventAction' rather than\n      // allowing null or undefined as the argument.\n      throw new Error(`postEventAction must be a function; got (${postEventAction})`);\n    }\n    this.impl.postEventAction = postEventAction.bind(this);\n  }\n\n  /**\n   * Called by the FSM when it finishes processing events.  If a\n   * postEventAction had been set, it will be called, then cleared.\n   * @private\n   */\n  _onEventCompletion() {\n    const action = this.impl.postEventAction;\n    if (action) {\n      this.impl.postEventAction = undefined;\n      this.log('Running post event action');\n      action.apply(this);\n    }\n  }\n\n  /**\n   * Returns the innermost active state.\n   *\n   * If regions were implemented, this would return an iterator to innermost\n   * active states.\n   *\n   * @returns {StateContext} The innermost active state.\n   */\n  getCurrentState() {\n    return this.impl.currentState;\n  }\n\n  /**\n   * Gets an active state by name.  Returns undefined if the named state is\n   * not currently active.\n   *\n   * Note the returned state may not be the innermost state as returned by\n   * {@link StateMachine#getCurrentState}.  If the innermost active state is not\n   * returned, the returned state is guaranteed to contain the innermost active\n   * state.\n   *\n   * @param {String} name The name of the state to be retrieved.\n   * @returns {?StateContext} The state with the specified name, if the\n   *      state is active; undefined otherwise.  Note the returned state may not\n   *      be the innermost active state.\n   */\n  getActiveState(name) {\n    const activeStates = this.impl.currentState.getAncestorList();\n    // Don't include the first ancestor in the loop since it is the state\n    // machine itself, not a state.\n    for (let i = 1; i < activeStates.length; ++i) {\n      if (activeStates[i].getName() === name) {\n        return activeStates[i];\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Checks if the named state is currently active.\n   * @param {String} name The name of the state to be queried.\n   * @returns {Boolean} Whether or not the named state is active.\n   */\n  isStateActive(name) {\n    return this.getActiveState(name) !== undefined;\n  }\n\n  /**\n   * Allows a reaction to be registered for unhandled events in the FSM.  The\n   * default reaction is to log the unhandled event at debug and remain in the\n   * current state with no other side effects.\n   * @param {StateContext.reactionCallback} r The reaction to be invoked when an\n   *      event is unhandled by the FSM.\n   * @returns {StateMachine} This StateMachine object.\n   */\n  unhandledEventReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: unhandled event reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUnhandledEvent = r.bind(this);\n    return this;\n  }\n\n  /**\n   * This allows a reaction to be registered for uncaught exceptions while\n   * processing events.  Generally, it is preferred to catch exceptions from\n   * within reaction functions.  However, this is a good way to safeguard\n   * against missed exceptions.  Usually an error should be logged here,\n   * which is the default behaviour.\n   *\n   * Also note that this is only called for either:\n   * - an exception thrown from an event reaction;\n   * - an exception thrown from a transition action\n   * If exceptions are thrown from within state entry, exit, initials, etc,\n   * this function is not invoked.  These functions may end up getting\n   * invoked from the transition taken as a result of the exception in the\n   * first place.  The generate another exception would be difficult to\n   * handle in a sensible way.  Users of this infrastructure must always\n   * catch exceptions from these functions.\n   *\n   * @param {fsm.StateContext.reactionCallback} r The reaction to be\n   *      invoked when an exception has not been caught by another of the\n   *      FSM's reactionCallbacks.  When this function is invoked, 'this'\n   *      will be the FSM's current state.\n   * @returns {StateMachine} `this`, for method chaining.\n   */\n  uncaughtExceptionReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: Uncaught exception reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUncaughtException = r;\n    return this;\n  }\n\n  /**\n   * Used by the implementation to get the final state.  This should never be\n   * used by applications.  Their only need to reference this state should be\n   * indirectly via the {@link State#terminate} function.\n   * @returns {State} The FSM's final state, which is a hidden implementation\n   *      detail of the FSM.\n   * @protected\n   */\n  getFinalState() {\n    return this.impl.finalState;\n  }\n}\n\nmodule.exports.StateMachine = StateMachine;\n","const {\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst { Process } = require('solclient-util');\n\n/**\n * @classdesc\n * Base class for transports\n * @memberof solace\n * @private\n */\nclass TSHState {\n  /**\n   * @constructor\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {TransportProtocol} tpProtocol The protocol to use for this state\n   * @param {Function} exitCallback The callback to notify on exit\n   * @param {?TSHState} nextState The TSH state to use on downgrade\n   */\n  constructor(useSsl, tpProtocol, exitCallback, nextState) {\n    this._ssl = !!useSsl;\n    this._transportProtocol = tpProtocol;\n    this._exitCallback = exitCallback;\n    this._nextState = nextState;\n    this._unsupportedRuntimeMessage =\n      `${this._transportProtocol} not supported by this runtime: ${Process.userAgent}`;\n  }\n\n  getNextState() {\n    return this._nextState;\n  }\n\n  setNextState(nextState) {\n    this._nextState = nextState;\n  }\n\n  getTransportProtocol() {\n    return this._transportProtocol;\n  }\n\n  getUseSsl() {\n    return this._ssl;\n  }\n\n  // Override me\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  onEnter() {\n    if (!this.validateLegal()) {\n      if (this._nextState && this._exitCallback) {\n        this._exitCallback(this._nextState, this._unsupportedRuntimeMessage);\n      } else {\n        LOG_WARN(`${this._unsupportedRuntimeMessage}, no next state.`);\n      }\n    }\n  }\n\n  completeDowngrade(err) {\n    if (this._nextState && this._exitCallback) {\n      LOG_INFO(`Connect failed (${err}), try next state.`);\n      this._exitCallback(this._nextState, 'Connect failed');\n      return true;\n    }\n    LOG_WARN(`Connect failed (${err}), no next state.`);\n    return false;\n  }\n\n  toString() {\n    return this._transportProtocol + (this._ssl ? ' (SSL)' : '');\n  }\n\n}\n\nmodule.exports.TSHState = TSHState;\n","/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^WebSocket$\" }] */\n'use strict';\n\nconst WebSocket = require('./websocket');\nconst { Duplex } = require('stream');\n\n/**\n * Emits the `'close'` event on a stream.\n *\n * @param {Duplex} stream The stream.\n * @private\n */\nfunction emitClose(stream) {\n  stream.emit('close');\n}\n\n/**\n * The listener of the `'end'` event.\n *\n * @private\n */\nfunction duplexOnEnd() {\n  if (!this.destroyed && this._writableState.finished) {\n    this.destroy();\n  }\n}\n\n/**\n * The listener of the `'error'` event.\n *\n * @param {Error} err The error\n * @private\n */\nfunction duplexOnError(err) {\n  this.removeListener('error', duplexOnError);\n  this.destroy();\n  if (this.listenerCount('error') === 0) {\n    // Do not suppress the throwing behavior.\n    this.emit('error', err);\n  }\n}\n\n/**\n * Wraps a `WebSocket` in a duplex stream.\n *\n * @param {WebSocket} ws The `WebSocket` to wrap\n * @param {Object} [options] The options for the `Duplex` constructor\n * @return {Duplex} The duplex stream\n * @public\n */\nfunction createWebSocketStream(ws, options) {\n  let terminateOnDestroy = true;\n\n  const duplex = new Duplex({\n    ...options,\n    autoDestroy: false,\n    emitClose: false,\n    objectMode: false,\n    writableObjectMode: false\n  });\n\n  ws.on('message', function message(msg, isBinary) {\n    const data =\n      !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;\n\n    if (!duplex.push(data)) ws.pause();\n  });\n\n  ws.once('error', function error(err) {\n    if (duplex.destroyed) return;\n\n    // Prevent `ws.terminate()` from being called by `duplex._destroy()`.\n    //\n    // - If the `'error'` event is emitted before the `'open'` event, then\n    //   `ws.terminate()` is a noop as no socket is assigned.\n    // - Otherwise, the error is re-emitted by the listener of the `'error'`\n    //   event of the `Receiver` object. The listener already closes the\n    //   connection by calling `ws.close()`. This allows a close frame to be\n    //   sent to the other peer. If `ws.terminate()` is called right after this,\n    //   then the close frame might not be sent.\n    terminateOnDestroy = false;\n    duplex.destroy(err);\n  });\n\n  ws.once('close', function close() {\n    if (duplex.destroyed) return;\n\n    duplex.push(null);\n  });\n\n  duplex._destroy = function (err, callback) {\n    if (ws.readyState === ws.CLOSED) {\n      callback(err);\n      process.nextTick(emitClose, duplex);\n      return;\n    }\n\n    let called = false;\n\n    ws.once('error', function error(err) {\n      called = true;\n      callback(err);\n    });\n\n    ws.once('close', function close() {\n      if (!called) callback(err);\n      process.nextTick(emitClose, duplex);\n    });\n\n    if (terminateOnDestroy) ws.terminate();\n  };\n\n  duplex._final = function (callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._final(callback);\n      });\n      return;\n    }\n\n    // If the value of the `_socket` property is `null` it means that `ws` is a\n    // client websocket and the handshake failed. In fact, when this happens, a\n    // socket is never assigned to the websocket. Wait for the `'error'` event\n    // that will be emitted by the websocket.\n    if (ws._socket === null) return;\n\n    if (ws._socket._writableState.finished) {\n      callback();\n      if (duplex._readableState.endEmitted) duplex.destroy();\n    } else {\n      ws._socket.once('finish', function finish() {\n        // `duplex` is not destroyed here because the `'end'` event will be\n        // emitted on `duplex` after this `'finish'` event. The EOF signaling\n        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\n        callback();\n      });\n      ws.close();\n    }\n  };\n\n  duplex._read = function () {\n    if (ws.isPaused) ws.resume();\n  };\n\n  duplex._write = function (chunk, encoding, callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._write(chunk, encoding, callback);\n      });\n      return;\n    }\n\n    ws.send(chunk, callback);\n  };\n\n  duplex.on('end', duplexOnEnd);\n  duplex.on('error', duplexOnError);\n  return duplex;\n}\n\nmodule.exports = createWebSocketStream;\n","const DebugLib = require('solclient-debug');\nconst MessageDumpUtilLib = require('./message-dump-util');\nconst { Destination } = require('solclient-destination');\nconst { LOG_ERROR } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { SDTMapContainer, SDTFieldType } = require('solclient-sdt');\nconst { StringUtils } = require('solclient-util');\n\n\nconst MessageDumpStandardProvider = {\n\n  fpDestination(message/* , flags*/) {\n    const dest = message.getDestination();\n    if (dest !== null && dest instanceof Destination) {\n      return ['Destination', true, dest.toString(), null];\n    }\n    return ['Destination', false, '', null];\n  },\n\n  fpSenderId(message/* , flags*/) {\n    return ['SenderId', (message.getSenderId() !== undefined && message.getSenderId() !== null), message.getSenderId(), null];\n  },\n\n  fpAppmsgType(message/* , flags*/) {\n    return ['AppMessageType', (message.getApplicationMessageType() !== undefined && message.getApplicationMessageType() !== null),\n      message.getApplicationMessageType(), null];\n  },\n\n  fpAppMsgId(message/* , flags*/) {\n    return ['AppMessageID', (message.getApplicationMessageId() !== undefined && message.getApplicationMessageId() !== null),\n      message.getApplicationMessageId(), null];\n  },\n\n  fpSequenceNumber(message/* , flags*/) {\n    const sequenceNum = message.getSequenceNumber();\n    if (typeof sequenceNum === 'number') {\n      return ['SequenceNumber', true, sequenceNum, null];\n    }\n    return ['SequenceNumber', false, '', null];\n  },\n\n  fpTopicSequenceNumber(message/*, flags */) {\n    const topicSeqNo = message.getTopicSequenceNumber();\n    if (Long.isLong(topicSeqNo)) {\n      return ['TopicSequenceNumber', true, topicSeqNo.toString(), null];\n    }\n    return ['TopicSequenceNumber', false, '', null];\n  },\n\n  fpCorrelationId(message/* , flags*/) {\n    return ['CorrelationId', (message.getCorrelationId() !== undefined && message.getCorrelationId() !== null),\n      message.getCorrelationId(), null];\n  },\n\n  fpHttpContentType(message /*, flags*/) {\n    return ['HTTP Content Type', (message.getHttpContentType() !== undefined && message.getHttpContentType() !== null),\n      message.getHttpContentType(), null];\n  },\n\n  fpHttpContentEncoding(message /*, flags*/) {\n    return ['HTTP Content Encoding', (message.getHttpContentEncoding() !== undefined && message.getHttpContentEncoding() !== null),\n      message.getHttpContentEncoding(), null];\n  },\n\n  fpSendTimestamp(message/* , flags*/) {\n    const timestamp = message.getSenderTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['SendTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['SendTimestamp', false, '', null];\n  },\n\n  fpRcvTimestamp(message/* , flags*/) {\n    const timestamp = message.getReceiverTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['RcvTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['RcvTimestamp', false, '', null];\n  },\n\n  fpClassOfService(message/* , flags*/) {\n    const cos = message.getUserCos();\n    if (typeof cos === 'number') {\n      return ['Class Of Service', true, MessageUserCosType.nameOf(message.getUserCos()), null];\n    }\n    return ['Class Of Service', false, '', null];\n  },\n\n//  fpPriority(message/* , flags*/) {\n//    const prio = message.getPriority() !== undefined ? message.getPriority() : 'undefined';\n//    return ['Message Priority', true, prio, null];\n//  },\n\n  fpDeliveryMode(message/* , flags*/) {\n    const mode = message.getDeliveryMode();\n    if (typeof mode === 'number') {\n      return ['DeliveryMode', true, MessageDeliveryModeType.nameOf(message.getDeliveryMode()), null];\n    }\n    return ['DeliveryMode', false, '', null];\n  },\n\n  fpGuaranteedMsgId(message/*, flags*/) {\n    const msgId = message.getGuaranteedMessageId();\n    if (Long.isLong(msgId)) {\n      return ['Message Id', true, msgId.toString(10), null];\n    }\n    return ['Message Id', false, '', null];\n  },\n\n  fpReplicationGroupMessageId(message/* , flags*/) {\n    const rgmid = message.getReplicationGroupMessageId();\n    if (rgmid === undefined) {\n      return ['Replication Group Message Id', false, '', null];\n    }\n    return ['Replication Group Message Id', true, rgmid.toString(), null];\n  },\n\n  fpTimeToLive(message/* , flags */) {\n    const timeToLive = message.getTimeToLive();\n    if (typeof timeToLive === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const d = new Date();\n      return ['TimeToLive', true,\n        `${timeToLive} (${mdu.formatDate(d.getTime() + timeToLive)})`, null];\n    }\n    return ['TimeToLive', false, '', null];\n  },\n\n  fpExpiration(message/*, flags*/) {\n    const timestamp = message.getGMExpiration();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['Expiration', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['Expiration', false, '', null];\n  },\n\n  fpMessageDMQEligible(message/* , flags*/) {\n    return ['DMQ Eligible', message.isDMQEligible(), '', null];\n  },\n\n  fpMessageRedelivered(message/* , flags*/) {\n    return ['Message Re-delivered', message.isRedelivered(), '', null];\n  },\n\n  fpMessageDeliveryCount(message/* , flags*/) {\n    //TODO: exception handling!\n    try {\n      return ['Message Delivery Count', true, message.getDeliveryCount(), null];\n    } catch (e) {\n      return ['Message Delivery Count', false, '', null];\n    }\n  },\n\n  fpDiscardIndication(message/* , flags*/) {\n    return ['Discard Indication', message.isDiscardIndication(), '', null];\n  },\n\n  fpAckImmediately(message/* , flags*/) {\n    return ['ACK Immediately', message.isAcknowledgeImmediately(), '', null];\n  },\n\n  fpElidingEligible(message/* , flags*/) {\n    return ['Eliding Eligible', message.isElidingEligible(), '', null];\n  },\n\n  fpReplyMessage(message/* , flags*/) {\n    return ['Reply Message', message.isReplyMessage(), '', null];\n  },\n\n  fpReplyTo(message/* , flags*/) {\n    const replyTo = message.getReplyTo();\n    if (replyTo !== null && replyTo instanceof Destination) {\n      return ['ReplyTo', true, replyTo.toString(), null];\n    }\n    return ['ReplyTo', false, '', null];\n  },\n\n  fpDeliverToOne(message/* , flags*/) {\n    return ['Deliver To One', message.isDeliverToOne(), '', null];\n  },\n\n  fpCacheMessage(message/* , flags*/) {\n    return ['Message from cache', message.getCacheStatus() !== MessageCacheStatus.LIVE, '', null];\n  },\n\n  fpCacheRequestId(message/*, flags */) {\n    const cacheRequestId = message.getCacheRequestId();\n    if (typeof cacheRequestId === 'number') {\n      return ['Cache Request Id', true, cacheRequestId, null];\n    }\n    return ['Cache Request Id', false, '', null];\n  },\n\n  fpUserPropertyMap(message, flags) {\n    const propMap = message.getUserPropertyMap();\n    if (propMap !== null && propMap instanceof SDTMapContainer) {\n      const value = `${propMap.getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(propMap, 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['User Property Map', true, value, detailValue];\n    }\n    return ['User Property Map', false, '', null];\n  },\n\n  fpCorrelationTag(message/*, flags*/) {\n    const strValue = message.getCorrelationKey();\n    return ['Correlation Tag Pointer', (strValue !== undefined && strValue !== null),\n      strValue, null];\n  },\n\n  fpUserData(message/* , flags*/) {\n    if (StringUtils.notEmpty(message.getUserData())) {\n      return ['User Data', true, `len=${message.getUserData().length}`,\n        DebugLib.Debug.formatDumpBytes(message.getUserData(), true, 2)];\n    }\n    return ['User Data', false, '', null];\n  },\n\n  fpXmlMetadata(message, flags) {\n    const xmlMetadata = message.getXmlMetadata();\n    if (StringUtils.notEmpty(xmlMetadata)) {\n      const value = `len=${xmlMetadata.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xmlMetadata, true, 2);\n      }\n      return ['XML Metadata', true, value, detailValue];\n    }\n    return ['XML Metadata', false, '', null];\n  },\n\n\n  fpTracingCreationContext(message, flags) {\n    const _creationContext = message.getCreationContext();\n\n    const isPresent = (_creationContext != null\n      && _creationContext.getTraceId() != null\n      && _creationContext.getSpanId() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = (_creationContext != null) ? _creationContext.toString() : null;\n    }\n    return ['Tracing CreationContext', isPresent, detailValue, null];\n  },\n\n  fpTracingTransportContext(message, flags) {\n    const _transportContext = message.getTransportContext();\n\n    const isPresent = (_transportContext != null\n      && _transportContext.getTraceId() != null\n      && _transportContext.getSpanId() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = (_transportContext != null) ? _transportContext.toString() : null;\n    }\n    return ['Trace Context SMF Parameter', isPresent, detailValue, null];\n  },\n\n  fpTracingBaggage(message, flags) {\n    const isPresent = (message.getBaggage() != null\n      && message.getBaggage().getBaggage() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      const _baggage = message.getBaggage();\n      detailValue = (_baggage != null) ? _baggage.getBaggage() : null;\n    }\n    return ['Tracing Baggage', isPresent, detailValue, null];\n  },\n\n  fpSdtStream(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.STREAM) {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const value = `${mdu.countItems(sdtFieldValue.getValue())} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          detailValue = mdu.printStream(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Stream', true, value, detailValue];\n    }\n    return ['SDT Stream', false, '', null];\n  },\n\n  fpSdtMap(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.MAP) {\n      const value = `${sdtFieldValue.getValue().getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Map', true, value, detailValue];\n    }\n    return ['SDT Map', false, '', null];\n  },\n\n  fpBinaryAttachment(message, flags) {\n    if (!message._binaryAttachment || message._binaryAttachment.length < 1) {\n      return ['Binary Attachment', false, '', null];\n    }\n    const att = message._binaryAttachment.toString('latin1');\n    const value = `len=${att.length}`;\n    let detailValue = null;\n    if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = DebugLib.Debug.formatDumpBytes(att, true, 2);\n    }\n    return ['Binary Attachment', true, value, detailValue];\n  },\n\n  fpXmlContent(message, flags) {\n    const xml = message.getXmlContent();\n    if (StringUtils.notEmpty(xml)) {\n      const value = `len=${xml.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xml, true, 2);\n      }\n      return ['XML', true, value, detailValue];\n    }\n    return ['XML', false, '', null];\n  },\n\n};\n\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * The publisher currently isn't exposed, and its events are dispatched\n * via the Session. These events are therefore private. They should\n * be moved to MessageConsumerEventName when they are made public.\n * @private\n */\nconst MessagePublisherEventName = Enum.new({\n  ACKNOWLEDGED_MESSAGE:      'MessagePublisherEventName_acknowledgedMessage',\n  CONNECT_FAILED_ERROR:      'MessagePublisherEventName_connectFailedError',\n  CAN_SEND:                  'MessagePublisherEventName_canSend',\n  DISPOSED:                  'MessagePublisherEventName_disposed',\n  DOWN:                      'MessagePublisherEventName_down',\n  FLOW_NAME_CHANGED:         'MessagePublisherEventName_flowNameChanged',\n  GUARANTEED_MESSAGING_DOWN: 'MessagePublisherEventName_guaranteedMessagingDown',\n  REJECTED_MESSAGE:          'MessagePublisherEventName_rejectedMessage',\n  DISCONNECT_FAILED_ERROR:   'MessagePublisherEventName_disconnectFailedError',\n  UP:                        'MessagePublisherEventName_up',\n  TRANSPORT_FULL:            'MessagePublisherEventName_transportFull',\n});\n\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Publisher FSM\n * @enum {string}\n ********************************************************************************/\nconst PublisherFSMEventNames = {\n  SESSION_UP:       'PublisherSessionUp',\n  SESSION_UP_NO_AD: 'PublisherSessionUpNoAD',\n  SESSION_DOWN:     'PublisherSessionDown',\n  FLOW_FAILED:      'MessagePublisherFailed',\n  FLOW_UP:          'MessagePublisherUp',\n  FLOW_CLOSE:       'MessagePublisherClose',\n  FLOW_UNBOUND:     'MessagePublisherUnbound',\n  TRANSPORT_FULL:   'PublisherTransportFull',\n  ACK:              'PublisherAck',\n  ACK_TIMEOUT:      'PublisherAckTimeout',\n  BIND_TIMEOUT:     'PublisherBindTimeout',\n  UNBIND_TIMEOUT:   'PublisherUnbindTimeout',\n  CAN_SEND:         'PublisherCanSend',\n  TRANSPORT_ERROR:  'PublisherTransportError',\n  RESEND_COMPLETE:  'PublisherResendComplete',\n  DISPOSE:          'PublisherDispose',\n};\n\nmodule.exports.PublisherFSMEventNames = Enum.new(PublisherFSMEventNames);\n","const net = require('net');\nconst tls = require('tls');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_WARN, LOG_ERROR } = require('solclient-log');\nconst { mixin } = require('solclient-eskit');\nconst { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\nconst { parseURL } = require('solclient-util');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n *\n * Tcp (smf) transport with TLS (tcps://) support.\n * Only works in node.js.\n * Modelled after the WebSocket transport mostly,\n * except there is no downgrade mechanism.\n * There is no separate \"Transport\" class\n * to manage the downgrade FSM:\n * The TransportSession is the Transport.\n\n * @private\n */\nclass TcpTlsTransport extends TransportBase {\n\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._drained = true;\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * @type {?Socket}\n     * @private\n     */\n    //this._socket = null;\n    // Always the raw socket, which is stable from connect() until disconnect().\n    this._tlsSocket = null;\n    // Always the socket to write to.\n    // could be _rawsocket, _tlsSocket, or _compressor.\n    this._writable = null;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n\n    this._props.transportProtocol = null;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  setClientStats(newValue) {\n    this._clientstats = newValue;\n  }\n\n  rehome(eventCB, client) {\n    this._eventCB = eventCB;\n    this._client = client;\n  }\n  /**\n   * Extracts host and port from the router URL.\n   * @private\n   * @param {String} urlString the url\n   * @returns {{String, Number}} host and port\n   */\n  parseHostPort(urlString) {\n    let port = null;\n    const urlParsed = parseURL(urlString);\n    if (urlParsed.protocol !== 'tcp:' && urlParsed.protocol !== 'tcps:') {\n      // Should not happen.\n      LOG_ERROR(`Tcp Transport: URL with unexpected scheme: ${urlParsed.protocol}`);\n    }\n    const host = urlParsed.hostname;\n    port = urlParsed.port;\n    if (port === null) {\n      if (this._ssl) {\n        port = 55443;\n      } else {\n        port = this._compressionLevel > 0 ? 55003 : 55555;\n      }\n    }\n    // The rest of the URL (path, etc) is ignored.\n    LOG_TRACE(`Parsing url ${urlString} -> host: ${host} , port: ${port}`);\n    return { host, port };\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Buffer} data the data\n   */\n  onData(originalSocket, data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n      originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onData for previous socket, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Error} error the error\n   */\n  onError(originalSocket, error) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onError for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore error');\n      return;\n    }\n    LOG_DEBUG(`Tcp transport connection error ${error}`);\n    // net.socket invokes the error handler before the close handler.\n    // Websocket does not, and that's what the upper layer expects.\n    // Suppressing the \"double tap\" error events when connected,\n    // saving the error for the onClose handler in _socketerror.\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n        //There won't be an onClose invocation, so destroying right away.\n        LOG_DEBUG(`Tcp transport connection error during establishment. ${error}`);\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._destroy(originalSocket, `Connection failed. Message:${error.message}`, ErrorSubcode.CONNECTION_ERROR);\n      } else {\n        this._eventCB(\n          new TransportSessionEvent(\n            TransportSessionEventCode.SEND_ERROR,\n            `Connection error${error}`,\n            null,\n            ErrorSubcode.CONNECTION_ERROR, null));\n      }\n    } else { // we rely on the close listener to notify the upper layer.\n      this._socketError = error;\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   * @param {Boolean} hadError wheter there was an error\n   */\n  onClose(originalSocket, hadError) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onClose for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore close');\n      return;\n    }\n    const msg = hadError ? 'with error' : 'cleanly';\n    const errorMsg = this._socketError && this._socketError.message;\n    this._socketError = null; // clear on read.\n    LOG_DEBUG(`Tcp transport connection is closed ${msg}. Message: ${errorMsg}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this._destroy(this._rawSocket, `Connection closed ${msg}. Message:${errorMsg}`,\n                  ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  /**\n   * Callback for Socket.connect.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   */\n  onOpen(originalSocket) {\n    LOG_TRACE('TcpTransportSession received socket open event.');\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onOpen for previous socket, ignoring.');\n      return;\n    }\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_DEBUG(`TcpTransportSession stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (this._rawSocket) {\n      LOG_ERROR('TCP transport can not connect once _rawsocket exists.');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_DEBUG('Establishing Tcp transport session');\n    try {\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      const { host, port } = this.parseHostPort(this._url);\n      LOG_DEBUG('Constructing socket');\n      // Luckily raw and tls sockets have the same API.\n      this._rawSocket = new net.Socket();\n      this._rawSocket.connect(port, host);\n      const tlsOptions = this.createTLSOptions();\n      tlsOptions.socket = this._rawSocket;\n      this._tlsSocket = tls.connect(tlsOptions);\n      this._tlsSocket.on('secureConnect', this.onOpen.bind(this, this._rawSocket));\n      this._writable = this._tlsSocket;\n      LOG_TRACE('Assigning properties to socket');\n      // WARNING!\n      // This is the kind of thing that breaks on minification.\n      // Re-run unit tests in production mode when changed:\n      // grunt --gruntfile=Gruntfile_Production.js\n      // When broken, consult the closure compiler exceptions file:\n      // (sdk-root)/builder/template/-common/env/externs.js\n      this._writable.on('data', this.onData.bind(this, this._rawSocket));\n      this._writable.on('error', this.onError.bind(this, this._rawSocket));\n      this._writable.on('close', this.onClose.bind(this, this._rawSocket));\n      this._writable.on('drain', this.onDrain.bind(this, this._rawSocket));\n      this._writable.setNoDelay(true);\n\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create Tcp socket: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    LOG_DEBUG('Tcp transport is connecting');\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    // No need to flush the decompressor,\n    // the upper layer is not interested in any more data.\n    return this._destroy(this._rawSocket, msg, subcode);\n  }\n\n  _destroy(originalSocket, msg, subcode) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray _destroy for previous socket, ignoring.');\n      return TransportReturnCode.OK;\n    }\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_DEBUG(`Destroy Tcp transport: ${msg}`);\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      const onerrorStub = function onerrorStub() { };\n      if (this._writable) {\n        this._writable.removeAllListeners();\n        this._writable.on('error', onerrorStub); // Prevent unhandled errors\n        // Prefering destroy() over end() as it seems to\n        // cancel pending callbacks like onOpen more reliably.\n        //this._writable.destroy();\n        this._writable.destroy();\n        this._rawSocket = null;\n        this._writable = null;\n      }\n\n      this._canSendNeeded = false;\n      this._flushCallback = null;\n      this._drained = true;\n      this._state = TransportSessionState.DOWN;\n      this._client = null; // Don't accept data.\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    LOG_TRACE(`Destroying TCP transport. msg: ${msg} subcode: ${subcode}`);\n    if (this._eventCB) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              msg || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._state !== TransportSessionState.DOWN) {\n      const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n      LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n      if (this._rawSocket && !this._tlsSocket){\n        this._rawSocket.destroy(new Error(errorMsg));\n      } else if (this._writable) {\n        // destroy the writable which should be the _tlsSocket\n        this._writable.destroy(new Error(errorMsg));\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    if (this._drained) {\n      LOG_DEBUG('Transport emitting FLUSH immediately.');\n      callback();\n    } else if (callback) {\n      this._flushCallback = callback;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Limiting socket buffer size to _sendBufferMaxSize unless\n    // the force flag was set\n    // or the socket is drained, in which case any size message goes.\n    if (forceAllowEnqueue\n      || this._drained\n      || message.length < this._sendBufferMaxSize - this._writable.bufferSize) {\n      // _drained keeps track of \"overflowing\" writes.\n      // nodejs never refuses a write but warns when it starts buffering.\n      this._drained = this._writable.write(message, 'ascii');\n      if (this._clientstats) {\n        this._clientstats.bytesWritten += message.length;\n        ++this._clientstats.msgWritten;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destry()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   */\n  onDrain(originalSocket) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onDrain for previous socket, ignoring.');\n      return;\n    }\n    this._drained = true;\n\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._canSendNeeded) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n}\n\nmixin(TcpTlsTransport, NodeTLSOptsMixin);\n\nmodule.exports.TcpTlsTransport = TcpTlsTransport;\n","const DestinationLib = require('solclient-destination');\nconst { Convert } = require('solclient-convert');\nconst { EncodeHeader } = require('./encode-header');\nconst { EncodeInteger } = require('./encode-integer');\nconst { EncodeMap } = require('./encode-map');\nconst { EncodeStream } = require('./encode-stream');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { StringUtils } = require('solclient-util');\n\nconst { encodeHeader } = EncodeHeader;\nconst { int48ToStr } = EncodeInteger;\nconst { encodeMap } = EncodeMap;\nconst { encodeStream } = EncodeStream;\n\nconst { nullTerminate } = StringUtils;\n\nconst C_2_48 = Math.pow(2, 48);\n\n// UCS-2 --> UTF-8 conversion\nfunction strencode(data) {\n  return unescape(encodeURIComponent(data));\n}\n\n// Encode an SDTField into provided buffer buf\nfunction encodeSingleElementToBuf(sdtfield, buf) {\n  if (!(sdtfield instanceof SDTField)) {\n    return false;\n  }\n  // we write the header at the end, once we know the size\n  const value = sdtfield.getValue();\n  let fieldVal = null;\n  let tag = 0; // SMF TAG\n  switch (sdtfield.getType()) {\n    case SDTFieldType.BOOL:\n      tag = SDTDataTypes.Boolean;\n      fieldVal = Convert.int8ToStr(value ? 1 : 0);\n      break;\n    case SDTFieldType.UINT8:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.INT8:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.UINT16:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.INT16:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.UINT32:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.INT32:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.UINT64:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      break;\n    case SDTFieldType.INT64:\n      tag = SDTDataTypes.Integer;\n      if (value >= 0) {\n        fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      } else {\n        fieldVal = (String.fromCharCode(0xFF) +\n                    String.fromCharCode(0xFF) +\n                    int48ToStr(C_2_48 + value));\n      }\n      break;\n    case SDTFieldType.WCHAR:\n      tag = SDTDataTypes.Char;\n      fieldVal = Convert.int16ToStr(value.charCodeAt(0));\n      break;\n    case SDTFieldType.STRING:\n      tag = SDTDataTypes.String;\n      fieldVal = nullTerminate(strencode(value));\n      break;\n    case SDTFieldType.BYTEARRAY:\n      tag = SDTDataTypes.ByteArray;\n      fieldVal = value.toString('latin1');\n      break;\n    case SDTFieldType.FLOATTYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Single(value);\n      break;\n    case SDTFieldType.DOUBLETYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Double(value);\n      break;\n    case SDTFieldType.MAP:\n      tag = SDTDataTypes.Map;\n      fieldVal = encodeMap(value);\n      break;\n    case SDTFieldType.STREAM:\n      tag = SDTDataTypes.Stream;\n      fieldVal = encodeStream(value);\n      break;\n    case SDTFieldType.DESTINATION:\n      tag = SDTDataTypes.Destination;\n      if (value instanceof DestinationLib.Destination) {\n        fieldVal = Convert.int8ToStr(SDTDestType[value.getType()])\n          + value.getBytes();\n      }\n      break;\n    case SDTFieldType.NULLTYPE:\n      tag = SDTDataTypes.Null;\n      fieldVal = '';\n      break;\n    case SDTFieldType.UNKNOWN:\n      fieldVal = null;\n      break;\n    default:\n  }\n  if (fieldVal !== null) {\n    const hdr = encodeHeader(tag, fieldVal.length);\n    buf.push(hdr);\n    buf.push(fieldVal);\n    return true;\n  }\n\n  return false;\n}\n\nfunction encodeSingleElement(sdtfield) {\n  const buf = [];\n  encodeSingleElementToBuf(sdtfield, buf);\n  return buf.join('');\n}\n\nconst EncodeSingleElement = {\n  encodeSingleElement,\n  encodeSingleElementToBuf,\n};\n\nmodule.exports.EncodeSingleElement = EncodeSingleElement;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message dump formats. It controls\n * the output of {@link solace.Message#dump}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDumpFlag = {\n  /**\n   * Display only the length of the binary attachment, XML content and user property maps.\n   */\n  MSGDUMP_BRIEF: 0,\n  /**\n   * Display the entire message contents.\n   */\n  MSGDUMP_FULL:  1,\n};\n\nmodule.exports.MessageDumpFlag = Enum.new(MessageDumpFlag);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * The base class for all errors thrown by the API.\n * @hideconstructor\n * @extends {Error}\n *\n * @memberof solace\n */\nclass SolaceError extends Error {\n  constructor(type, message, constructor) {\n    super(message || '');\n    /**\n     * Error Message.\n     * @name solace.SolaceError#message\n     * @type {String}\n     */\n    this.message = message; // force set\n    /**\n     * The name of the error.\n     * @name solace.SolaceError#name\n     * @type {String}\n     */\n    this.name = type;\n\n    // ES6 error semantics are disappointing\n    // Cleaner stack capture for V8-based VMs\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, constructor);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n\n}\n\nmodule.exports.SolaceError = SolaceError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration for smf replay start location value type\n * @private\n */\nconst ReplayStartType = Enum.new({\n  // the value of the Enum is the value of the smf type\n  BEGINNING: 0x00,\n  DATE:      0x01,\n  RGMID:     0x02,\n});\n\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from one of the following:</b>\n * * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n * * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n * The single member variable, _replayStartTime is undefined in ReplayStartLocationBeginning and\n * contains the elapsed time in milliseconds since the epoch in ReplayStartLocationDate\n *\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocation {\n  /**\n   * @constructor\n   * @param {SObject} spec The ReplayStartLocation spec\n   * Use the factory methods on {@link solace.SolclientFactory}.\n   * @private\n   */\n  constructor(spec) {\n    Object.assign(this, spec);\n    if (this._type === undefined) {\n      // use default replay start location type when not specified\n      this._type = ReplayStartType.BEGINNING;\n    }\n  }\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartType = ReplayStartType;\n","/**\n * Copyright (c) 2011-2016 Paul Vorbach and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining \n * a copy of this software and associated documentation files \n * (the “Software”), to deal in the Software without restriction, \n * including without limitation the rights to use, copy, modify, \n * merge, publish, distribute, sublicense, and/or sell copies of \n * the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included \n * in all copies or substantial portions of the Software.\n * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * The is a local modified version of the clone npm module (https://www.npmjs.com/package/clone).\n * According to its description, it offers a foolproof deep cloning \n * of objects, arrays, numbers, strings, maps, sets, \n * promises, etc. in JavaScript.\n * \n * I refactored it to be compatible with Webpack.\n * Refator List:\n * - update the use of the 'var' keyword to 'let' and 'const' where appropriate.\n * - Made the variable names more clearer and intuitive (clean code)\n * - I used ES6 contants/definitions where possible.\n * \n * Original can be found Here:\n * - On Npm -> https://www.npmjs.com/package/clone\n * - On GitHub -> https://github.com/pvorb/node-clone\n * \n * Created by oodigie on 26/05/2023.\n */\n\n'use strict';\n\nconst clone = (function() {\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nlet nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nlet nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nlet nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  const allParents = [];\n  const allChildren = [];\n\n  const useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    let child;\n    let proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      const index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      let keyChild, valueChild;\n      parent.forEach(function(value, key) {\n        keyChild = _clone(key, depth - 1);\n        valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      let entryChild;\n      parent.forEach(function(value) {\n        entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (let i in parent) {\n      let attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      const symbols = Object.getOwnPropertySymbols(parent);\n      for (let i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        let symbol = symbols[i];\n        let descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      const allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (let i = 0; i < allPropertyNames.length; i++) {\n        let propertyName = allPropertyNames[i];\n        let descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  let emptyCloneFunc = function () {};\n  emptyCloneFunc.prototype = parent;\n  return new emptyCloneFunc();\n};\n\n// private utility functions\n\nfunction __objToStr(obj) {\n  return Object.prototype.toString.call(obj);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(regExpOptions) {\n  let flags = '';\n  if (regExpOptions.global) flags += 'g';\n  if (regExpOptions.ignoreCase) flags += 'i';\n  if (regExpOptions.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n\n})();\n\nmodule.exports = clone;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary transport\n * @memberof solace\n * @private\n */\nclass StateBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateBinary = StateBinary;\n\n","const { Enum } = require('solclient-eskit');\n\n/**\n * solace.CacheLiveDataAction\n * Enumeration of CacheLiveDataAction values, specifying how the CacheSession should handle\n * live data associated with a cache request in progress.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheLiveDataAction = {\n  /**\n   * @type {Number}\n   * @description End the cache request when live data arrives that matches the topic.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FULFILL:   1,\n  /**\n   * @type {Number}\n   * @description Queue arriving live data that matches the topic, until the cache request\n   * completes. Note that wildcard cache requests must always be {@link\n   * solace.CacheLiveDataAction.FLOW_THRU}.\n   */\n  QUEUE:     2,\n  /**\n   * @type {Number}\n   * @description Continue the outstanding cache request while allowing live data to flow through to\n   * the application.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FLOW_THRU: 3,\n};\n\nmodule.exports.CacheLiveDataAction = Enum.new(CacheLiveDataAction);\n","class TimingBucket {\n  constructor(name, interval) {\n    this.name = name;\n    this.interval = interval;\n    this.buckets = [];\n  }\n\n  get bucketCount() {\n    let c = 0;\n    for (let i = 0, n = this.buckets.length; i < n; ++i) {\n      c += this.buckets[i] || 0;\n    }\n    return c;\n  }\n\n  log(v) {\n    if (v === undefined || isNaN(v)) {\n      return;\n    }\n    const normalized = Math.floor(v / this.interval) * this.interval;\n    this.buckets[normalized] = this.buckets[normalized] || 0;\n    this.buckets[normalized]++;\n  }\n\n  toString() {\n    const cont = [];\n    this.buckets.forEach((i) => {\n      cont.push(`${i}: ${this.buckets[i]}`);\n    });\n    return `{${cont.join(', ')}}`;\n  }\n}\n\nmodule.exports.TimingBucket = TimingBucket;\n","const { SessionRequestType } = require('./session-request-types');\n\nmodule.exports = {\n  SubscriptionUpdateTimeoutMessages: {\n    [SessionRequestType.ADD_SUBSCRIPTION]:        'Add subscription request timeout',\n    [SessionRequestType.REMOVE_SUBSCRIPTION]:     'Remove subscription request timeout',\n    [SessionRequestType.ADD_P2PINBOX]:            'Add P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_P2PINBOX]:         'Remove P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_DTE_SUBSCRIPTION]: 'Remove endpoint topic subscription',\n    default:                                      'Request timeout',\n  },\n};\n","const { FactoryProfile, SolclientFactoryProfiles } = require('./lib/solclient-factory-profiles');\nconst { ProfileBinding } = require('./lib/profile-binding');\nconst { SolclientFactory } = require('./lib/solclient-factory');\nconst { SolclientFactoryProperties } = require('./lib/solclient-factory-properties');\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.ProfileBinding = ProfileBinding;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\nmodule.exports.SolclientFactory = SolclientFactory;\n\n","const { Lazy } = require('./lazy');\n\nconst { lazyProperty } = Lazy;\n\nfunction traversePath(commonSource, keySource, pathArr) {\n  return pathArr.reduce((source, value) => {\n    if (typeof value === 'string') {\n      return source[value];\n    }\n    return value;\n  }, keySource);\n}\n\n/**\n * @classdesc\n * Deferred resolution for imports. A heavyweight method of breaking circular dependencies.\n * Each specified key (see below) is resolved once by a function that lazily evaluates a\n * path.\n * <pre>\n * const resolved = new Resolver({\n *  foo: [FooLib, 'fooContainer'],        // Resolves foo from FooLib.fooContainer.foo lazily\n *  bar: ['foo'],                         // Resolves bar from previously defined foo lazily\n *  'baz,quux': [FooLib, 'bazsAndQuuxes'] // baz = FooLib.bazsAndQuuxes.baz,\n *                                        // quux = FooLib.bazsAndQuuxes.quux\n * });\n * </pre>\n * In most cases this is equivalent to using FooLib.fooContainer.foo, et cetera, directly.\n * Prefer that approach unless the dependencies are deeply hierarchical. Prefer the Resolver\n * when one-time evaluation and aliasing a path makes the code more DRY and readable.\n * @private\n */\nclass Resolver {\n  constructor(options, source) {\n    // For every key...\n    Object.keys(options).forEach((compoundKey) => {\n      // Split out key names if multiple were provided\n      compoundKey.split(',').map(k => k.trim()).forEach((key) => {\n        // Build a path array. The key name is the implicit last element.\n        const rawPath = options[compoundKey];\n        const path = typeof rawPath === 'string' ? rawPath.split('.') : rawPath;\n        const pathArr = (Array.isArray(path) ? path : [path]).concat(key);\n        // Create a defer for this key.\n        lazyProperty(this, key, () => traversePath(source, this, pathArr));\n      });\n    });\n  }\n\n  static resolve(options, source) {\n    return new Resolver(options, source);\n  }\n}\n\n\nmodule.exports.Resolver = Resolver;\n","module.exports = require(\"events\");","const IEEE754LIB = {\n  /**\n   * @preserve\n   * The MIT License\n   *\n   * Copyright (c) 2010 Alan Gutierrez\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n\n  toIEEE754(vIn, ebits, fbits) {\n    let v = vIn;\n    const bias = (1 << (ebits - 1)) - 1;\n\n    // Compute sign, exponent, fraction\n    let s;\n    let e;\n    let f;\n    if (isNaN(v)) {\n      e = (1 << bias) - 1;\n      f = 1;\n      s = 0;\n    } else if (v === Infinity || v === -Infinity) {\n      e = (1 << bias) - 1;\n      f = 0;\n      s = (v < 0) ? 1 : 0;\n    } else if (v === 0) {\n      e = 0;\n      f = 0;\n      s = (1 / v === -Infinity) ? 1 : 0;\n    } else {\n      s = v < 0;\n      v = Math.abs(v);\n\n      if (v >= Math.pow(2, 1 - bias)) {\n        const ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n        e = ln + bias;\n        f = (v * Math.pow(2, fbits - ln)) - Math.pow(2, fbits);\n      } else {\n        e = 0;\n        f = v / Math.pow(2, 1 - bias - fbits);\n      }\n    }\n\n    // Pack sign, exponent, fraction\n    const bits = [];\n    for (let i = fbits; i; i -= 1) {\n      bits.push(f % 2 ? 1 : 0);\n      f = Math.floor(f / 2);\n    }\n    for (let i = ebits; i; i -= 1) {\n      bits.push(e % 2 ? 1 : 0);\n      e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    let str = bits.join('');\n\n    // Bits to bytes\n    const bytes = [];\n    while (str.length) {\n      bytes.push(parseInt(str.substring(0, 8), 2));\n      str = str.substring(8);\n    }\n    return bytes;\n  },\n\n  fromIEEE754(bytes, ebits, fbits) {\n    // Bytes to bits\n    const bits = [];\n    for (let i = bytes.length; i; i -= 1) {\n      let byteI = bytes[i - 1];\n      for (let j = 8; j; j -= 1) {\n        bits.push(byteI % 2 ? 1 : 0);\n        byteI >>= 1;\n      }\n    }\n    bits.reverse();\n    const str = bits.join('');\n\n    // Unpack sign, exponent, fraction\n    const bias = (1 << (ebits - 1)) - 1;\n    const s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\n    const e = parseInt(str.substring(1, 1 + ebits), 2);\n    const f = parseInt(str.substring(1 + ebits), 2);\n\n    // Produce number\n    if (e === (1 << ebits) - 1) {\n      return f !== 0 ? NaN : s * Infinity;\n    }\n    if (e > 0) {\n      return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\n    }\n    if (f !== 0) {\n      return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\n    }\n    return 0;\n  },\n  strToByteArr(str) {\n    const bytes = [];\n    for (let i = 0; i < str.length; i++) { bytes.push(str.charCodeAt(i) & 0xFF); }\n    return bytes;\n  },\n  byteArrToStr(bytes) {\n    const str = [];\n    for (let i = 0; i < bytes.length; i++) { str.push(String.fromCharCode(bytes[i] & 0xFF)); }\n    return str.join('');\n  },\n  fromIEEE754Double(b) { return this.fromIEEE754(this.strToByteArr(b), 11, 52); },\n  toIEEE754Double(v) { return this.byteArrToStr(this.toIEEE754(v, 11, 52)); },\n  fromIEEE754Single(b) { return this.fromIEEE754(this.strToByteArr(b), 8, 23); },\n  toIEEE754Single(v) { return this.byteArrToStr(this.toIEEE754(v, 8, 23)); },\n};\n\nmodule.exports.IEEE754LIB = IEEE754LIB;\n","const { CacheGetResultCode } = require('./cache-get-result-codes');\n\nconst DEFAULTS = {\n  messageID:         null,\n  version:           0,\n  responseCode:      CacheGetResultCode.INVALID,\n  responseString:    '',\n  matchTopic:        '',\n  sessionID:         null,\n  isSuspect:         null,\n  hasMore:           null,\n  hasTimestamps:     null,\n  replyTo:           null,\n  messageStream:     null,\n  clusterNameStream: null,\n};\n\n/**\n * @classdesc CacheGetResult encapsulates the result of a cache get request\n * @private\n */\nclass CacheGetResult {\n  /*\n   * @constructor\n   */\n  constructor(options = DEFAULTS) {\n    Object.assign(this, options);\n  }\n\n  readFromStream(stream) {\n    this.messageID = stream.getNext().getValue();\n    this.version = stream.getNext().getValue();\n    this.responseCode = stream.getNext().getValue();\n    this.responseString = stream.getNext().getValue();\n    // SD claims instanceName is present here but empirically, it's not\n\n    this.matchTopic = stream.getNext().getValue();\n    this.sessionID = stream.getNext().getValue();\n    this.isSuspect = stream.getNext().getValue();\n    this.hasMore = stream.getNext().getValue();\n\n    this.hasTimestamps = stream.getNext().getValue();\n\n    if (stream.hasNext()) { // first stream\n      this.messageStream = stream.getNext().getValue();\n    }\n    if (stream.hasNext()) { // if two streams, first was cluster name stream\n      this.clusterNameStream = this.messageStream;\n      this.messageStream = stream.getNext().getValue();\n    }\n  }\n}\n\nmodule.exports.CacheGetResult = CacheGetResult;\n","const { BaseMessage } = require('./base-message');\n\n/**\n * @classdesc\n * Transport SMF Message\n * @memberof solace\n * @private\n */\nclass TransportSMFMessage extends BaseMessage {\n  /**\n   * @constructor\n   */\n  constructor() {\n    super(null, null);\n    this.uh = 0;\n    this.messageType = null;\n    this.sessionId = null;\n    this.routerTag = null;\n    this.payload = null;\n    this.payloadLength = 0;\n    this.tsHeaderLength = 0;\n  }\n}\n\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  windowSize:                              255,\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.QueueBrowser}.\n *\n * @memberof solace\n */\nclass QueueBrowserProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value) {\n      this._queueDescriptor = new QueueLib.QueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging in milliseconds.\n   * When the {@link solace.QueueBrowserProperties.transportAcknowledgeTimeoutInMsecs} is not\n   * exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n}\n\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of consumer acknowledgement modes. The corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#acknowledgeMode}\n * configures how acknowledgments are generated for received Guaranteed messages.\n *\n * When received messages are acknowledged they are removed from the Guaranteed\n * Message storage on the Solace Message Router. Message Consumer acknowledgements,\n * <b>only</b> remove messages from the Solace Message Router.\n *\n * In particular, withholding Message Consumer Acknowledgemnts does not stop\n * message delivery. For Message Consumer flow control see\n * {@link solace.MessageConsumer.stop}/{@link solace.MessageConsumer.start}. Message Consumer\n * flow control may also be imlpemented by removing the\n * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerAcknowledgeMode = {\n  /**\n   * The API automatically acknowledges any message that was delivered to all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listeners with no exception thrown\n   * on any of them.\n   */\n  AUTO:   'AUTO',\n  /**\n   * The API acknowledges a message only when the application calls\n   * {@link solace.Message#acknowledge}.\n   */\n  CLIENT: 'CLIENT',\n};\n\nmodule.exports.MessageConsumerAcknowledgeMode = Enum.new(MessageConsumerAcknowledgeMode);\n","const { LOG_TRACE } = require('solclient-log');\nconst { TcpRawTransport, CompressedTransport, TlsOnlyTransport, TcpTlsTransport } = BUILD_ENV.TARGET_NODE ? require('./tcp') : {};\nconst { WebTransport } = require('./web');\n\nconst TransportFactory = {\n  createTransport(host, eventCB, client, props, getId) {\n    const url = host;\n    Object.assign(props, {\n      connectTimeoutInMsecs: 100000,\n    });\n    // TCP transport is dictated by the URL (tcp:// or tcps://)\n    // It is unaffected by the transportProtocol config parameter.\n    if (TcpRawTransport && url.trim().startsWith('tcp')) {\n      if (!url.trim().startsWith('tcps')) {\n        if (props.compressionLevel === 0) {\n          LOG_TRACE('createTransport raw tcp');\n          return new TcpRawTransport(url, eventCB, client, props);\n        } // else { //compressed plaintext right off the bat.\n        LOG_TRACE('createTransport compressed plaintex.');\n        const compressingLayer = new CompressedTransport(eventCB, client, props);\n        const plaintextTransport =\n          new TcpRawTransport(url,\n                              compressingLayer.eventCB.bind(compressingLayer),\n                              compressingLayer, props);\n        compressingLayer.setClientStats(plaintextTransport.getClientStats());\n        plaintextTransport.setClientStats(null);\n        compressingLayer.setUnderlyingTransport(plaintextTransport);\n        return compressingLayer;\n      } //else { //tcps\n      if (props.sslConnectionDowngradeTo !== 'PLAIN_TEXT') { //no downgrade\n        LOG_TRACE('createTransport monolithic tls');\n        return new TcpTlsTransport(url, eventCB, client, props);\n      } //else { // Composite TLS transport anticipating downgrade.\n      LOG_TRACE('createTransport composite tls (anticipating downgrade)');\n      // passing URL for SNI.\n      const tlsLayer = new TlsOnlyTransport(url, eventCB, client, props);\n      const plaintextTransport =\n        new TcpRawTransport(url,\n                            tlsLayer.eventCB.bind(tlsLayer),\n                            tlsLayer, props);\n      tlsLayer.setClientStats(plaintextTransport.getClientStats());\n      plaintextTransport.setClientStats(null);\n      tlsLayer.setUnderlyingTransport(plaintextTransport);\n      return tlsLayer;\n    }\n    LOG_TRACE('createTransport WebTransport');\n    return new WebTransport(url, eventCB, client, props, getId);\n  },\n\n  startCompression(uncompressedTransport) {\n    const eventCB = uncompressedTransport._eventCB;\n    const client = uncompressedTransport._client;\n    const props = uncompressedTransport._props;\n\n    const compressingLayer = new CompressedTransport(eventCB, client, props);\n    uncompressedTransport.rehome(compressingLayer.eventCB.bind(compressingLayer),\n                                 compressingLayer);\n    compressingLayer.setClientStats(uncompressedTransport.getClientStats());\n    uncompressedTransport.setClientStats(null);\n    compressingLayer.setUnderlyingTransport(uncompressedTransport);\n    compressingLayer.connect();\n    return compressingLayer;\n  },\n\n  severTls(encryptedTransport, compress, callback) {\n    if (!compress) {\n      encryptedTransport.tlsShutdown(callback);\n    } else {\n      const precallback = plaintextTransport => callback(this.startCompression(plaintextTransport));\n      //encryptedTransport.tlsShutdown(precallback.bind(this));\n      encryptedTransport.tlsShutdown(precallback);\n    }\n  },\n};\n\nmodule.exports.TransportFactory = TransportFactory;\n","const MessageLib = require('solclient-message');\nconst { Base64, Bits, Convert } = require('solclient-convert');\nconst { BinaryMetaBlock, SMFHeader, SMPMessage } = require('../message-objects');\nconst { Check } = require('solclient-validate');\nconst { ClientCtrlMessage, KeepAliveMessage, AdProtocolMessage } = require('../message-objects');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { DestinationType } = require('solclient-destination');\nconst { encAdp } = require('./adprotocol');\nconst { encCC } = require('./client-ctrl');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE, LOG_INFO } = require('solclient-log');\nconst { ParamParse } = require('./param-parse');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTStreamContainer } = require('solclient-sdt');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\n\nconst { encode: base64Encode } = Base64;\nconst { set: setBits } = Bits;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n  int64ToStr,\n  uint8ArrayToString,\n} = Convert;\nconst { lazyValue } = Lazy;\nconst {\n  encContentSummary,\n  encDeliveryMode,\n  encLightSMFParam,\n  encodeSMFParam,\n  encodeSMFExtendedParam,\n  FORCED_LENGTH_MODE,\n} = ParamParse;\nconst { encodeSingleElement } = SDTCodec;\nconst { encSmp } = SMP;\n\nconst priorityForUserCos = lazyValue(() => new PriorityUserCosMap().forward);\n\nfunction addContentElementToArrays(csumm, payloadArray, dataChunk, cstype) {\n  if (Check.anything(dataChunk) && dataChunk.length > 0) {\n    const cse = new ContentSummaryElement(cstype, NaN, dataChunk.length);\n    csumm.push(cse);\n    payloadArray.push(dataChunk);\n\n  }\n}\n\nfunction addToMapIfPresent(headerMap, key, type, value) {\n  if (Check.anything(value)) {\n    headerMap.addField(key, SDTField.create(type, value));\n  }\n}\n\n// Return the binary attachment as string, sets the binaryMetaData on the message.\n// Not nice, but fast.\nfunction adaptMessageToBinaryMeta(message) {\n  let result;\n  // solace header map\n  const headerMap = new SDTMapContainer();\n  addToMapIfPresent(headerMap, 'ci', SDTFieldType.STRING, message.getCorrelationId());\n  addToMapIfPresent(headerMap, 'mi', SDTFieldType.STRING, message.getApplicationMessageId());\n  addToMapIfPresent(headerMap, 'mt', SDTFieldType.STRING, message.getApplicationMessageType());\n  addToMapIfPresent(headerMap, 'rt', SDTFieldType.DESTINATION, message.getReplyTo());\n  addToMapIfPresent(headerMap, 'si', SDTFieldType.STRING, message.getSenderId());\n  addToMapIfPresent(headerMap, 'sn', SDTFieldType.INT64, message.getSequenceNumber());\n  addToMapIfPresent(headerMap, 'ts', SDTFieldType.INT64, message.getSenderTimestamp());\n  addToMapIfPresent(headerMap, 'ex', SDTFieldType.INT64, message.getGMExpiration());\n  addToMapIfPresent(headerMap, 'ce', SDTFieldType.STRING, message._compressedCE ? message._compressedCE : message.getHttpContentEncoding());\n  addToMapIfPresent(headerMap, 'ct', SDTFieldType.STRING, message.getHttpContentType());\n\n  // the baggage value in the correct format. See - https://www.w3.org/TR/baggage/\n  const _baggage = message.getBaggage();\n  addToMapIfPresent(headerMap, 'bag', SDTFieldType.STRING, (_baggage ? _baggage.getBaggage() : null));\n  // message creation context will never be null\n  // set the encoded bytes into the map\n  const _creationContext = message.getCreationContext();\n  addToMapIfPresent(\n    headerMap, 'ctx', SDTFieldType.BYTEARRAY,\n    (_creationContext ? _creationContext.getEncodedTraceContext() : null)\n  );\n\n  // container map: solace headers + user prop map\n  const sdtMap = new SDTMapContainer();\n  if (message.getUserPropertyMap()) {\n    sdtMap.addField('p', SDTField.create(SDTFieldType.MAP, message.getUserPropertyMap()));\n  }\n  if (headerMap.getKeys().length > 0) {\n    sdtMap.addField('h', SDTField.create(SDTFieldType.MAP, headerMap));\n  }\n\n  let preambleByte0 = 0;\n\n  if (Check.anything(message._getCompressedBinaryAttachment())){\n    preambleByte0 |= 0x40;\n  }\n  \n  switch (message.getType()) {\n    case MessageLib.MessageType.BINARY:\n      preambleByte0 |= 0x80;\n      break;\n    case MessageLib.MessageType.MAP:\n      preambleByte0 |= 0x0A;\n      if (Check.nothing(message._getCompressedBinaryAttachment())) {\n        result = encodeSingleElement(message._structuredContainer);\n      } \n      break;\n    case MessageLib.MessageType.STREAM:\n      preambleByte0 |= 0x0B;\n      if (Check.nothing(message._getCompressedBinaryAttachment())) {\n        result = encodeSingleElement(message._structuredContainer);\n      } \n      break;\n    case MessageLib.MessageType.TEXT:\n      preambleByte0 |= 0x07;\n      if (Check.nothing(message._getCompressedBinaryAttachment())) {\n        result = encodeSingleElement(message._structuredContainer);\n      }\n      break;\n    default:\n      LOG_INFO(`Unhandled messageType: ${message.getType()}`);\n      break;\n  }\n  const preambleByte1 = message.isReplyMessage() ? 0x80 : 0;\n  const sdtPreamble = SDTField.create(SDTFieldType.BYTEARRAY,\n                                      String.fromCharCode(preambleByte0, preambleByte1));\n\n  // Putting it all together: a stream with the preamble and map\n  const sdtStreamContainer = new SDTStreamContainer();\n  sdtStreamContainer.addField(sdtPreamble);\n  sdtStreamContainer.addField(SDTField.create(SDTFieldType.MAP, sdtMap));\n\n  const binaryMeta = new BinaryMetaBlock();\n  binaryMeta.type = 0;\n  binaryMeta.payload = encodeSingleElement(SDTField.create(SDTFieldType.STREAM,\n                                                           sdtStreamContainer));\n  message.binaryMetadataChunk = binaryMeta;\n  return result;\n}\n\nfunction adaptMessageToSmf_nonPayload(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  const deliveryMode = message.getDeliveryMode();\n\n  smfHeader.smf_dto = message.isDeliverToOne();\n  smfHeader.pm_deliverymode = deliveryMode;\n  smfHeader.smf_adf = deliveryMode === MessageLib.MessageDeliveryModeType.DIRECT ? 0 : 1;\n  smfHeader.smf_di = message.isDiscardIndication();\n  smfHeader.smf_elidingEligible = message.isElidingEligible();\n  smfHeader.smf_deadMessageQueueEligible = message.isDMQEligible();\n  smfHeader.pm_ad_flowid = message.getFlowId();\n  smfHeader.pm_ad_publisherid = message.getPublisherId();\n  smfHeader.pm_ad_publishermsgId = message.getPublisherMessageId();\n  smfHeader.pm_ad_msgid = message.getGuaranteedMessageId();\n  smfHeader.pm_ad_prevmsgid = message.getGuaranteedPreviousMessageId();\n  smfHeader.pm_ad_ttl = message.getTimeToLive();\n  smfHeader.pm_ad_ackimm = message.isAcknowledgeImmediately();\n  smfHeader.pm_ad_redelflag = message.isRedelivered();\n\n  // get the transport context, if available\n  const _transportContext = message.getTransportContext();\n  if(_transportContext != null) {\n    // set the encoded Uint8 array into the header property\n    smfHeader.pm_ts_transport_context = _transportContext.getEncodedTraceContext();\n  }\n  \n  const dest = message.getDestination();\n  if (dest) {\n    smfHeader.pm_tr_topicname_bytes = dest.getBytes();\n    if (dest.type === DestinationType.QUEUE ||\n        dest.type === DestinationType.TEMPORARY_QUEUE) {\n      const { offset } = dest;\n      smfHeader.pm_queue_len = smfHeader.pm_tr_topicname_bytes.length - offset;\n      smfHeader.pm_queue_offset = offset;\n    }\n  }\n\n  smfHeader.smf_priority = priorityForUserCos.value.get(message.getUserCos());\n\n  if (message.getPriority() !== undefined\n    && typeof message.getPriority() === 'number'\n    && message.getPriority() <= 255\n    && message.getPriority() >= 0) {\n    smfHeader.pm_msg_priority = message.getPriority();\n  } else {\n    smfHeader.pm_msg_priority = null;\n  }\n\n  const userData = message.getUserData();\n  smfHeader.pm_userdata = (userData === null || userData === undefined)\n    ? null\n    : message.getUserData();\n}\n\nfunction adaptMessageToSmf_payloadMemoize(message) {\n  let encodedSdtPayload;\n\n  // Setup user properties, header properties, msgtype\n  if (message.getCorrelationId() ||\n      message.getApplicationMessageId() ||\n      message.getApplicationMessageType() ||\n      message.getReplyTo() ||\n      message.getSenderId() ||\n      message.getSequenceNumber() ||\n      message.getSenderTimestamp() ||\n      message.getUserPropertyMap() ||\n      message.isReplyMessage() ||\n      message.getCreationContext() ||\n      message._compressedCE ||\n      message.getHttpContentEncoding() ||\n      message.getHttpContentType() ||\n      (message.getBaggage() && message.getBaggage().getBaggage()) ||\n      (message.getType() !== MessageLib.MessageType.BINARY)) {\n    // add SDT binary metadata\n    encodedSdtPayload = adaptMessageToBinaryMeta(message);\n  }\n\n  // Build array of ContentSummaryElements\n  const csumm = [];\n  const payload = [];\n\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlMetadata(), ContentSummaryType.XML_META);\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlContent(), ContentSummaryType.XML_PAYLOAD);\n  if (encodedSdtPayload) {\n    addContentElementToArrays(csumm, payload,\n                              encodedSdtPayload, ContentSummaryType.BINARY_ATTACHMENT);\n  } else {\n    if (Check.anything(message._getCompressedBinaryAttachment())){\n      addContentElementToArrays(csumm, payload, \n        message._getCompressedBinaryAttachment().toString('latin1'), ContentSummaryType.BINARY_ATTACHMENT);\n    } else {\n      addContentElementToArrays(csumm, payload,\n        message._binaryAttachment ? message._binaryAttachment.toString('latin1') : '', ContentSummaryType.BINARY_ATTACHMENT);\n    }\n  }\n  const binaryMeta = message.binaryMetadataChunk;\n  if (binaryMeta !== null) {\n    const binaryMetaSMF = binaryMeta.asEncodedSmf();\n    const MAX_24BITS = 16777215;\n    if (binaryMetaSMF.length > MAX_24BITS) {\n      LOG_TRACE(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`);\n      throw new OperationError(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    } else {\n      addContentElementToArrays(csumm, payload, binaryMetaSMF, ContentSummaryType.BINARY_METADATA);\n    }\n  }\n\n  message._memoized_csumm = csumm;\n  message._memoized_payload = payload.join(''); \n  message._payload_is_memoized = true;\n  return message._memoized_payload ? message._memoized_payload.length : 0;\n}\n\nfunction adaptMessageToSmf_payloadFinalize(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  if (!message._payload_is_memoized) {\n    adaptMessageToSmf_payloadMemoize(message);\n  }\n  const csumm = message._memoized_csumm;\n  const payloadBytes = message._memoized_payload;\n  if (csumm.length === 0 ||\n      (csumm.length === 1 && csumm[0].type === ContentSummaryType.BINARY_ATTACHMENT)) {\n    // NULL or RAW payload (no content-summary)\n    //  Was this here to invert the condition?\n    // LOG_TRACE('NULL or RAW payload (no content-summary)');\n  } else {\n    smfHeader.pm_content_summary = csumm;\n  }\n\n  smfHeader.payload = payloadBytes;\n}\n\nfunction adaptMessageToSmf(message, smfHeaderIn) {\n  adaptMessageToSmf_payloadFinalize(message, smfHeaderIn);\n  adaptMessageToSmf_nonPayload(message, smfHeaderIn);\n}\n\n/**\n * Creates an array of all values that fit in the given number of bits.\n * e.g. bitRange(1) => [0, 1], bitRange(2) => [0, 1, 2, 3]\n * @param {Number} bits The number of bits in the range\n * @returns {Number} All values that fit in that number of bits\n * @private\n */\nconst bitRange = bits => Array.from(Array(Math.pow(2, bits))).map((el, i) => i);\nconst maskValues = (shift, bits) => bitRange(bits).map(val => setBits(0, val, shift, bits));\nconst DI_BIT = maskValues(31, 1);\nconst ELIDING_ELIGIBLE_BIT = maskValues(30, 1);\nconst DTO_BIT = maskValues(29, 1);\nconst ADF_BIT = maskValues(28, 1);\nconst DMQE_BIT = maskValues(27, 1);\nconst VERSION_BITS = maskValues(24, 3);\nconst UH_BITS = maskValues(22, 2);\nconst PROTOCOL_BITS = maskValues(16, 6);\nconst PRIORITY_BITS = maskValues(12, 4);\nconst TTL_BITS = maskValues(0, 8);\nconst QT_OFFSET_BYTES = maskValues(8, 8);\nconst QT_LEN_BYTES = maskValues(0, 8);\n\nfunction encodeSMF(header) {\n  // First 4 bytes: protocol, ttl, etc\n  let w1 = 0;\n\n  // PERF: single expression to make w1 const\n  w1 |= DI_BIT[header.smf_di && 1 || 0];\n  w1 |= ELIDING_ELIGIBLE_BIT[header.smf_elidingEligible && 1 || 0];\n  w1 |= DTO_BIT[header.smf_dto && 1 || 0];\n  w1 |= ADF_BIT[header.smf_adf && 1 || 0];\n  w1 |= DMQE_BIT[header.smf_deadMessageQueueEligible && 1 || 0];\n  w1 |= VERSION_BITS[header.smf_version || 0];\n  w1 |= UH_BITS[header.smf_uh || 0];\n  w1 |= PROTOCOL_BITS[header.smf_protocol || 0];\n  w1 |= PRIORITY_BITS[header.smf_priority || 0];\n  w1 |= TTL_BITS[header.smf_ttl || 0]; // PERF: or set w1 to ttl initially.\n\n  const params = [];\n  // Encode all standard SMF parameters\n  // Topic name and queue/topic offsets are supposed to come first\n  if (header.pm_tr_topicname_bytes) {\n    params.push(encodeSMFParam(2, SMFParameterType.TR_TOPICNAME,\n                               `${header.pm_tr_topicname_bytes}`));\n  }\n  if (header.pm_queue_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_QUEUE_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_queue_offset] |\n                                            QT_LEN_BYTES[header.pm_queue_len])));\n  }\n  if (header.pm_topic_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_TOPIC_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_topic_offset] |\n                                            QT_OFFSET_BYTES[header.pm_topic_len])));\n  }\n\n  if (header.pm_corrtag !== null && header.pm_corrtag !== undefined) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_CORRELATION,\n                                 int24ToStr(header.pm_corrtag)));\n  }\n  if (header.pm_ad_ackimm) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_ACK_IMMEDIATELY,\n                                 ''));\n  }\n\n  if (header.pm_msg_priority !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.MESSAGEPRIORITY,\n                               int8ToStr(header.pm_msg_priority)));\n  }\n  if (header.pm_userdata !== null && header.pm_userdata !== '') {\n    params.push(encodeSMFParam(0, SMFParameterType.USERDATA,\n                               header.pm_userdata));\n  }\n  if (header.pm_username) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.USERNAME,\n                               base64Encode(header.pm_username)));\n  }\n  if (header.pm_password) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.PASSWORD,\n                               base64Encode(header.pm_password)));\n  }\n  if (header.pm_respcode) {\n    // not useful API->router\n    params.push(encodeSMFParam(0, SMFParameterType.RESPONSE,\n                               int32ToStr(header.pm_respcode) + header.pm_respstr));\n  }\n\n  if (header.pm_deliverymode !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.DELIVERY_MODE,\n                               encDeliveryMode(header.pm_deliverymode)));\n  }\n\n  if (header.pm_ad_msgid !== undefined) {\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_MESSAGE_ID,\n                               int64ToStr(header.pm_ad_msgid)));\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_PREVMESSAGE_ID,\n                               int64ToStr(header.pm_ad_prevmsgid)));\n  }\n\n  if (header.pm_ad_flowid) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_FLOWID,\n                               int32ToStr(header.pm_ad_flowid)));\n  }\n\n  // header.pm_ad_redelflag\n  // Ad redelivered\n  if (header.pm_ad_redelflag) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_REDELIVERED_FLAG, undefined));\n  }\n  // header.pm_ad_flowredelflag\n\n  if (header.pm_ad_ttl !== undefined) {\n    params.push(encodeSMFParam(0, SMFParameterType.AD_TIMETOLIVE,\n                               int64ToStr(header.pm_ad_ttl)));\n  }\n\n  // sequence number?\n\n  if (header.pm_ad_publisherid) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_ID,\n                               int32ToStr(header.pm_ad_publisherid)));\n  }\n\n  if (header.pm_ad_publisherMsgId) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_MSGID,\n                               int64ToStr(header.pm_ad_publisherMsgId)));\n  }\n\n  // transactions: ackmessageid, transactionid, transactionflags\n\n  if (header.pm_content_summary) {\n    params.push(encodeSMFParam(2, SMFParameterType.MESSAGE_CONTENT_SUMMARY,\n                               encContentSummary(header.pm_content_summary)));\n  }\n  // done common SMF parameters!\n\n  // pre-collect and push extended parameters (once we have any)\n\n  let extendedStreamContents = '';\n  let extendedUH = 0;\n\n  if (header.pm_oauth2_access_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OAUTH2_ACCESS_TOKEN,\n                                                     header.pm_oauth2_access_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oidc_id_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OIDC_ID_TOKEN,\n                                                     header.pm_oidc_id_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oauth2_issuer_identifier) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType\n                                                     .OAUTH2_ISSUER_IDENTIFIER,\n                                                     header.pm_oauth2_issuer_identifier);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_ts_transport_context) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.TS_TRANSPORT_CONTEXT,\n                                                     uint8ArrayToString(header.pm_ts_transport_context),\n                                                     FORCED_LENGTH_MODE.SIX);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (extendedStreamContents.length > 0) {\n    params.push(encodeSMFParam(extendedUH,\n                               SMFParameterType.EXTENDED_TYPE_STREAM,\n                               extendedStreamContents));\n  }\n\n  // compute header size and full message size\n  const encodedParams = params.join('');\n  const hdrlen = 12 + encodedParams.length;\n  const msglen = hdrlen + header.payloadLength;\n\n  // ? Already encoded. Why bother?\n  header.setMessageSizes(hdrlen, header.payloadLength);\n\n  return (\n    int32ToStr(w1) +\n    int32ToStr(hdrlen) +\n    int32ToStr(msglen) +\n    encodedParams\n  );\n}\n\nfunction encodeCompoundMessage(msg) {\n  let payload = '';\n  if (msg instanceof MessageLib.Message) {\n    if (!msg.smfHeader) {\n      msg.smfHeader = new SMFHeader(SMFProtocol.TRMSG, 255);\n    }\n    adaptMessageToSmf(msg, msg._smfHeader);\n    payload = msg._smfHeader.payload;\n  } else if (msg instanceof ClientCtrlMessage) {\n    payload = encCC(msg);\n  } else if (msg instanceof SMPMessage) {\n    payload = encSmp(msg);\n  } else if (msg instanceof KeepAliveMessage) {\n    LOG_TRACE('Skipping retrieve payload as there is none in a KeepAliveMessage');\n  } else if (msg instanceof AdProtocolMessage) {\n    payload = encAdp(msg);\n  }\n  const header = msg.smfHeader;\n  header.setPayloadSize(payload.length);\n  const encodedHeader = encodeSMF(header);\n  return encodedHeader + payload;\n}\n\nconst Encode = {\n  encodeCompoundMessage,\n  encodeSMF,\n  adaptMessageToSmf_payloadMemoize,\n};\n\nmodule.exports.Encode = Encode;\n","module.exports = require(\"tls\");","'use strict';\n\nconst kDone = Symbol('kDone');\nconst kRun = Symbol('kRun');\n\n/**\n * A very simple job queue with adjustable concurrency. Adapted from\n * https://github.com/STRML/async-limiter\n */\nclass Limiter {\n  /**\n   * Creates a new `Limiter`.\n   *\n   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed\n   *     to run concurrently\n   */\n  constructor(concurrency) {\n    this[kDone] = () => {\n      this.pending--;\n      this[kRun]();\n    };\n    this.concurrency = concurrency || Infinity;\n    this.jobs = [];\n    this.pending = 0;\n  }\n\n  /**\n   * Adds a job to the queue.\n   *\n   * @param {Function} job The job to run\n   * @public\n   */\n  add(job) {\n    this.jobs.push(job);\n    this[kRun]();\n  }\n\n  /**\n   * Removes a job from the queue and runs it if possible.\n   *\n   * @private\n   */\n  [kRun]() {\n    if (this.pending === this.concurrency) return;\n\n    if (this.jobs.length) {\n      const job = this.jobs.shift();\n\n      this.pending++;\n      job(this[kDone]);\n    }\n  }\n}\n\nmodule.exports = Limiter;\n","const { OperationError } = require('solclient-error');\n\nlet binding = null;\n\nconst ProfileBinding = {\n  get value() {\n    if (binding === null) {\n      throw new OperationError('Profile binding not initialized. Call solace.SolclientFactory.init');\n    }\n    return binding;\n  },\n  set value(value) {\n    // private, so we'll allow it for testing\n    binding = value;\n  },\n};\n\nmodule.exports.ProfileBinding = ProfileBinding;\n","const { LOG_TRACE } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nlet hostListDNSFilter;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  /* eslint-disable global-require */\n  const dns = require('dns');\n  /* eslint-enable global-require */\n\n  // util.promisify is Node 8. This converts an (err, result) callback to a promise.\n  // The purpose is to allow us to use Promise.all, which deals with waiting until\n  // all promises are resolved, and returning the results in correctly ordered array.\n  const dnsLookupPromise = (url, options) => new Promise((resolve) => {\n    const host = parseURL(url).hostname;\n    LOG_TRACE('looking up', url, '=>', host);\n    dns.lookup(host, options, (error, result) => {\n      LOG_TRACE('DNS result', error, result);\n      return error === null\n        ? resolve({ url, host, address: result, resolved: true })\n        : resolve(\n          { url,\n            host,\n            resolved: true,\n            error:    {\n              code:     error['code'], // eslint-disable-line dot-notation\n              errno:    error['errno'], // eslint-disable-line dot-notation\n              hostname: error['hostname'], // eslint-disable-line dot-notation\n              syscall:  error['syscall'], // eslint-disable-line dot-notation\n            },\n          });\n    });\n  });\n\n  /**\n   * Resolution calls back with an array of the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: '10.0.0.1', resolved: true }`\n   * or, on error\n   * `{ url: 'http://example.com/foo', host: 'example.com', resolved: true, error: {\n   *    code: 'ENOTFOUND', errno: 'ENOTFOUND', syscall: 'getaddrinfo'\n   *  } }`\n   *\n   * If resolution could not be performed, because of platform limitations, the callback receives\n   * the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: 'example.com', resolved: false }`\n   *\n   * Even if no DNS lookup is performed, the function can still fail if an invalid URL is provided.\n   *\n   * The function always calls back asynchronously.\n   *\n   * @param {Array.<String>} urls Array of URLs to resolve\n   * @param {function} cb A function called back with results as described above\n   * @private\n   */\n  hostListDNSFilter = function hostListDNSFilterNode(urls, cb) {\n    const promises = urls.map(url => dnsLookupPromise(\n      url,\n      { 'verbatim': true }\n    ));\n    // Call back (null, [{host:, address:}, ...]) if all successful\n    // Call back (err, undefined) fast if any error\n    Promise.all(promises).then(resolved => cb(null, resolved)).catch(err => cb(err));\n  };\n} else {\n  /* eslint-env browser */\n  // Create an always-async callback that allows all hosts.\n  //hostListDNSFilter = (urls, cb) => setImmediate(() => {\n  hostListDNSFilter = (urls, cb) => setTimeout(() => {\n    try {\n      const result = urls.map((url) => {\n        const host = parseURL(url).host;\n        return { url, host, address: host, resolved: false };\n      });\n      return cb(null, result);\n    } catch (e) {\n      return cb(e);\n    }\n  }, 0);\n}\n\nmodule.exports.hostListDNSFilter = hostListDNSFilter;\n","class ContentSummaryElement {\n  constructor(type = null, position = 0, length = 0) {\n    this.type = type;\n    this.position = position;\n    this.length = length;\n  }\n}\n\nmodule.exports.ContentSummaryElement = ContentSummaryElement;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheRequestType = {\n  INVALID:                       0,\n  BULK_MSG:                      1,\n  REGISTER_REQUEST:              2,\n  REGISTER_RESPONSE:             3,\n  HEARTBEAT_REQUEST:             4,\n  HEARTBEAT_RESPONSE:            5,\n  EVENT_NOTIFY:                  6,\n  EVENT_ACK:                     7,\n  ACTION_REQUEST:                8,\n  ACTION_RESPONSE:               9,\n  GET_REQUEST:                   10,\n  GET_RESPONSE:                  11,\n  GET_NEXT_REQUEST:              12,\n  GET_NEXT_RESPONSE:             13,\n  SET_REQUEST:                   14,\n  SET_RESPONSE:                  15,\n  GET_MSG_REQUEST:               16,\n  GET_MSG_RESPONSE:              17,\n  GET_NEXT_MSG_REQUEST:          18,\n  GET_NEXT_MSG_RESPONSE:         19,\n  UNREGISTER_IND:                20,\n  BULK_SET_REQUEST:              21,\n  BULK_SET_RESPONSE:             22,\n  PURGE_MSG_SEQUENCE_REQUEST:    23,\n  PURGE_MSG_SEQUENCE_RESPONSE:   24,\n  GET_MSG_SEQUENCE_REQUEST:      25,\n  GET_NEXT_MSG_SEQUENCE_REQUEST: 26,\n  GET_TOPIC_INFO_REQUEST:        27,\n  GET_TOPIC_INFO_RESPONSE:       28,\n  READY_MARKER:                  29,\n  GET_TOPIC_INFO_REQUEST_RANGE:  30,\n  SYNC_READY_MARKER:             31,\n  VACUUM_REQUEST:                32,\n  VACUUM_RESPONSE:               33,\n};\n\nmodule.exports.CacheRequestType = Enum.new(CacheRequestType);\n","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports==='object') module.exports = Long;\n","const { AuthenticationScheme } = require('./lib/authentication-schemes');\nconst { CapabilityType, ClientCapabilityType } = require('./lib/capability-types');\nconst { MessageRxCBInfo } = require('./lib/message-rx-cb-info');\nconst { MutableSessionProperty } = require('./lib/mutable-session-properties');\nconst { Session } = require('./lib/session');\nconst { SessionEvent } = require('./lib/session-event');\nconst { ProvisionEvent } = require('./lib/provision-event');\nconst { SessionEventCBInfo } = require('./lib/session-event-cb-info');\nconst { SessionEventCode } = require('./lib/session-event-codes');\nconst { SessionEventName } = require('./lib/session-event-names');\nconst { SessionProperties } = require('./lib/session-properties');\nconst { SessionState } = require('./lib/session-states');\n\nconst { SolclientFactory } = require('solclient-factory');\nconst { SslDowngrade } = require('./lib/ssl-downgrades');\n\n/**\n * Creates a session instance.\n * @param {solace.SessionProperties} sessionProperties Properties to configure the session.\n * @param {solace.MessageRxCBInfo} [messageCallbackInfo] <b>Deprecated:</b>\n *    Callback method for messages.  Instead applications should receive message events via\n *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n * @param {solace.SessionEventCBInfo} [eventCallbackInfo] <b>Deprecated:</b> Callback method for\n *    events on the <i>Session</i>. Instaead applications should receive session events via\n *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n * @returns {solace.Session} The newly-created session.\n * @throws {solace.OperationError} if the parameters have an invalid type or value.\n *                          Subcode: {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * @method\n * @name solace.SolclientFactory.createSession\n */\nSolclientFactory.createSession = SolclientFactory.createFactory(\n  (sessionProperties, messageCallbackInfo, eventCallbackInfo) =>\n    new Session(sessionProperties, messageCallbackInfo, eventCallbackInfo));\n\n\nmodule.exports.AuthenticationScheme = AuthenticationScheme;\nmodule.exports.CapabilityType = CapabilityType;\nmodule.exports.ClientCapabilityType = ClientCapabilityType;\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\nmodule.exports.MutableSessionProperty = MutableSessionProperty;\nmodule.exports.Session = Session;\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\nmodule.exports.SessionEventCode = SessionEventCode;\nmodule.exports.SessionEvent = SessionEvent;\nmodule.exports.ProvisionEvent = ProvisionEvent;\nmodule.exports.SessionEventName = SessionEventName;\nmodule.exports.SessionProperties = SessionProperties;\nmodule.exports.SessionState = SessionState;\nmodule.exports.SslDowngrade = SslDowngrade;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an exitPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the exitPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @private\n */\nclass ExitPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the exitPoint belongs\n  *      to.\n  * @param {String} spec.exitPointName The name of the exitPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the exitPoint, which defines where to transition to\n  *      after state has been exited.\n  */\n  constructor(spec) {\n    super({ name: spec.exitPointName });\n\n    let outerState;\n    // The inner portion of the exitPoint accepts incoming transitions before\n    // exiting the exitPoint's state.  Then the exitPoint's state is exited\n    // through the use of the innerExitPoint's initial transition.\n    this.impl.innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state,\n    }).initial(() => spec.state.transitionTo(outerState));\n\n        // The job of the outer portion of the exitPoint is to follow a\n        // transition as specified by the application's reaction function.\n    outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(spec.func);\n  }\n\n  getDestState() {\n    return this.impl.innerState;\n  }\n}\n\nmodule.exports.ExitPoint = ExitPoint;\n","const { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst APIPropertiesValidators = {\n  validateInstance(typeDesc, instance, name, ...args) {\n    args.forEach((check) => {\n      const validator = check.shift();\n      const validatorArgs = [typeDesc, instance, name, ...check];\n      validator(...validatorArgs);\n    });\n  },\n\n  valInstance(typeDesc, instance, name, typeInstance, typeInstanceDesc) {\n    if (!Check.instanceOf(instance[name], typeInstance)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be instance of ${typeInstanceDesc}`);\n    }\n  },\n\n  valNotEmpty(typeDesc, instance, name) {\n    if (Check.none(instance[name]) || instance[name] === '') {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' cannot be empty.`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valLength(typeDesc, instance, name, max) {\n    if (Check.string(instance[name]) && instance[name].length > max) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' exceeded max length ${max}`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valRange(typeDesc, instance, name, min, max) {\n    if (Check.number(instance[name]) && (instance[name] < min || instance[name] > max)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' out of range [${min}; ${max}].`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valString(typeDesc, instance, name) {\n    if (!Check.string(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type string; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valNumber(typeDesc, instance, name) {\n    if (!Check.number(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type number; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valBoolean(typeDesc, instance, name) {\n    const val = instance[name];\n    if (!Check.boolean(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type boolean; was ${typeof val}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull = false) {\n    const val = instance[key];\n    if (allowNull && (val === null || val === undefined)) return;\n    if (enumInstance.values.indexOf(val) >= 0) return;\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }'=${val} must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  },\n\n  valStringOrArray(typeDesc, instance, name) {\n    const val = instance[name];\n    if (typeof val !== 'string' && !Array.isArray(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be a string or array`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valArrayIsMember(typeDesc, instance, name, enumInstance, enumName,\n                   allowUndefined, allowEmpty, allowDuplicate) {\n    const val = instance[name];\n    if ((val === undefined || val === null)) {\n      if (allowUndefined) {\n        return;\n      }\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    if (!Array.isArray(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (!allowEmpty && instance[name].length === 0) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' cannot be empty`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    instance[name].forEach((ele, index) => {\n      if (!enumInstance.values.includes(ele)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be an array of ${enumName}`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (!allowDuplicate) {\n        if (instance[name].indexOf(ele, index + 1) >= 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                          }' cannot have duplicate element value`,\n                          ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n    });\n  },\n\n  valArrayOfString(typeDesc, instance, name) {\n    const val = instance[name];\n    if (Check.something(val)) {\n      if (!Array.isArray(val)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be type Array`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      val.forEach((ele) => {\n        if (typeof ele !== 'string') {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                 }' must be an array of string`,\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      });\n    }\n  },\n\n  valTopicString(typedesc, instance, name) {\n    // Pardon this late import. I need to break a circular dependency.\n    // eslint-disable-next-line global-require\n    const { DestinationUtil, DestinationType } = require('solclient-destination');\n    module.exports.APIPropertiesValidators.valString(typedesc, instance, name);\n    const val = instance[name];\n    const result = DestinationUtil.validateAndEncode(DestinationType.TOPIC, val);\n    if (result.error) {\n      throw new OperationError(`${typedesc} validation: Property '${name}' must be ` +\n                               `a valid topic string: ${result.error}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valTopicStringOrEmpty(typedesc, instance, name) {\n    const val = instance[name];\n    if (val && val.length) {\n      module.exports.APIPropertiesValidators.valTopicString(typedesc, instance, name);\n    }\n  },\n};\n\nmodule.exports.APIPropertiesValidators = APIPropertiesValidators;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * SMFProtocol\n * @private\n * @enum {number}\n */\nconst SMFProtocol = {\n  CSPF:               0x01,\n  CSMP:               0x02,\n  PUBMSG:             0x03,\n  XMLLINK:            0x04,\n  WSE:                0x05,\n  SEMP:               0x06,\n  SUBCTRL:            0x07,\n  PUBCTRL:            0x08,\n  ADCTRL:             0x09,\n  KEEPALIVE:          0x0a,\n  KEEPALIVEV2:        0x0b,\n  CLIENTCTRL:         0x0c,\n  TRMSG:              0x0d,\n  JNDI:               0x0e,\n  SMP:                0x0f,\n  SMRP:               0x10,\n  SMF_IN_SMF:         0x11,\n  SMF_IN_RV:          0x12,\n  ADCTRL_PASSTHROUGH: 0x13,\n  TSESSION:           0x14,\n\n};\n\nmodule.exports.SMFProtocol = Enum.new(SMFProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolParam = {\n  LASTMSGIDSENT:                           0x01,\n  LASTMSGIDACKED:                          0x02,\n  WINDOW:                                  0x03,\n  TRANSPORT_PRIORITY:                      0x04,\n  APPLICATION_ACK:                         0x05,\n  FLOWID:                                  0x06,\n  QUEUENAME:                               0x07,\n  DTENAME:                                 0x08,\n  TOPICNAME:                               0x09,\n  FLOWNAME:                                0x0a,\n  EP_DURABLE:                              0x0b,\n  ACCESSTYPE:                              0x0c,\n  SELECTOR:                                0x0d,\n  TRANSPORT_WINDOW:                        0x0e,\n  LINGER_OPTION:                           0x0f,\n  LASTMSGIDRECEIVED:                       0x10,\n  EP_ALLOTHER_PERMISSION:                  0x11,\n  FLOWTYPE:                                0x12,\n  EP_QUOTA:                                0x13,\n  EP_MAX_MSGSIZE:                          0x14,\n  GRANTED_PERMISSIONS:                     0x15,\n  EP_RESPECTS_TTL:                         0x16,\n  TRANSACTION_CTRL_MESSAGE_TYPE:           0x17,\n  TRANSACTED_SESSION_ID:                   0x18,\n  TRANSACTED_SESSION_NAME:                 0x19,\n  TRANSACTION_ID:                          0x1a,\n  TRANSACTED_SESSION_STATE:                0x1b,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:  0x1c,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:     0x1d,\n  TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:     0x1e,\n  NOLOCAL:                                 0x1f,\n  ACTIVE_FLOW_INDICATION:                  0x20,\n  WANT_FLOW_CHANGE_NOTIFY:                 0x21,\n  EP_BEHAVIOUR:                            0x22,\n  PUBLISHER_ID:                            0x23,\n  APPLICATION_PUB_ACK:                     0x24,\n  NUM_MESSAGES_SPOOLED:                    0x25,\n  CUT_THROUGH:                             0x26,\n  PUBLISHER_FLAGS:                         0x27,\n  APP_MSG_ID_TYPE:                         0x28,\n  QUEUE_ENDPOINT_HASH:                     0x29,\n  MAX_REDELIVERY:                          0x2a,\n  PAYLOAD:                                 0x2b,\n  ENDPOINT_ID:                             0x2c,\n  ACK_SEQUENCE_NUMBER:                     0x2d,\n  ACK_RECONCILE_REQUEST:                   0x2e,\n  START_OF_ACK_RECONCILE:                  0x2f,\n  TIMESTAMP:                               0x30,\n  MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW: 0x31,\n  REPLAY_START_LOCATION:                   0x33,\n  ENDPOINT_ERROR_ID:                       0x34,\n  SPOOLER_UNIQUE_ID:                       0x36,\n  PARTITION_GROUP_ID:                      0x38,\n};\n\nmodule.exports.SMFAdProtocolParam = Enum.new(SMFAdProtocolParam);\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\n\n/**\n * @classdesc\n * HTTP Base64 transport\n * @memberof solace\n * @private\n */\nclass StateBase64 extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BASE64, exitCb, nextState);\n  }\n}\n\nmodule.exports.StateBase64 = StateBase64;\n\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines an error subcode enumeration which is returned as a property of\n * the errors/exceptions thrown by the API. The subcode provides more detailed\n * error information.\n *\n * The following subcodes can apply to error responses resulting from\n * any API method.\n * * {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}\n * * {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n * * {@link solace.ErrorSubcode.INTERNAL_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ErrorSubcode = {\n  /////////////\n  // SESSION //\n  /////////////\n  /**\n   * Errors that do not have a proper subcode.\n   */\n  UNKNOWN_ERROR:                                 0xFFFFFFFF,\n  /**\n   * No error is associated with this event.\n   */\n  NO_ERROR:                                      0,\n  /**\n   * The session is already connected.\n   */\n  // SESSION_ALREADY_CONNECTED: 1,\n  /**\n   * The session is not connected.\n   */\n  SESSION_NOT_CONNECTED:                         2,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   * @deprecated Use {@link solace.ErrorSubCode.INVALID_OPERATION}\n   */\n  INVALID_SESSION_OPERATION:                     3,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   */\n  INVALID_OPERATION:                             3,\n  /**\n   * An API call failed due to a timeout.\n   */\n  TIMEOUT:                                       4,\n  /////////////////\n  // MESSAGE VPN //\n  /////////////////\n  /**\n   * The Message VPN name configured for the session does not exist.\n   *\n   * Causes:\n   *  * 403 Message VPN Not Allowed\n   */\n  MESSAGE_VPN_NOT_ALLOWED:                       5,\n  /**\n   * The Message VPN name set for the session (or the default VPN if none\n   * was set) is currently shutdown on the router.\n   *\n   * Causes:\n   *  * 503 Message VPN Unavailable\n   */\n  MESSAGE_VPN_UNAVAILABLE:                       6,\n  ////////////\n  // CLIENT //\n  ////////////\n  /**\n   * The username for the client is administratively shutdown\n   * on the router.\n   *\n   * Causes:\n   *  * 403 Client Username Is Shutdown\n   */\n  CLIENT_USERNAME_IS_SHUTDOWN:                   7,\n  /**\n   * The username for the session has not been set and dynamic\n   * clients are not allowed.\n   *\n   * Causes:\n   *  * 403 Dynamic Clients Not Allowed\n   */\n  DYNAMIC_CLIENTS_NOT_ALLOWED:                   8,\n  /**\n   * The session is attempting to use a client name that is\n   * in use by another client, and the router is configured to reject the\n   * new session.\n   * A client name cannot be used by multiple clients in the same Message\n   * VPN.\n   *\n   * Causes:\n   *  * 403 Client Name Already In Use\n   */\n  CLIENT_NAME_ALREADY_IN_USE:                    9,\n  /**\n   * The client name chosen has been rejected as invalid by the router.\n   *\n   * Causes:\n   *  * 400 Client Name Parse Error\n   */\n  CLIENT_NAME_INVALID:                           10,\n  /**\n   * The client login is not currently possible because a previous\n   * instance of same client was being deleted.\n   *\n   * Causes:\n   *  * 503 Subscriber Delete In Progress\n   */\n  CLIENT_DELETE_IN_PROGRESS:                     11,\n  /**\n   * The client login is not currently possible because the maximum\n   * number of active clients on router has already been reached.\n   *\n   * Causes:\n   *  * 503 Too Many Clients\n   *  * 503 Too Many Connections for VPN\n   */\n  TOO_MANY_CLIENTS:                              12,\n  /**\n   * The client could not log into the router.\n   *\n   * Causes:\n   *  * 401 error codes\n   *  * 404 error codes\n   *  * Failed to send a session setup message in the transport.\n   */\n  LOGIN_FAILURE:                                 13,\n  //////////\n  // VRID //\n  //////////\n  /**\n   * An attempt was made to connect to the wrong IP address on\n   * the router (must use CVRID if configured), or the router CVRID has\n   * changed and this was detected on reconnect.\n   *\n   * Causes:\n   *  * 403 Invalid Virtual Router Address\n   */\n  INVALID_VIRTUAL_ADDRESS:                       14,\n  /////////\n  // ACL //\n  /////////\n  /**\n   * The client login to the router was denied because the\n   * IP address/netmask combination used for the client is designated in the\n   * ACL (Access Control List) profile associated with that client.\n   *\n   * Causes:\n   *  * 403 Forbidden\n   */\n  CLIENT_ACL_DENIED:                             15,\n  /**\n   * Adding a subscription was denied because it matched a\n   * subscription that was defined as denied on the ACL (Access Control List)\n   * profile associated with the client.\n   *\n   * Causes:\n   *  * 403 Subscription ACL Denied\n   */\n  SUBSCRIPTION_ACL_DENIED:                       16,\n  /**\n   * A message could not be published because its topic matched\n   * a topic defined as denied on the ACL (Access Control List) profile\n   * associated with the client.\n   *\n   * Causes:\n   *  * 403 Publish ACL Denied\n   */\n  PUBLISH_ACL_DENIED:                            17,\n  ////////////////\n  // VALIDATION //\n  ////////////////\n  /**\n   * An API call was made with an out-of-range parameter.\n   */\n  PARAMETER_OUT_OF_RANGE:                        18,\n  /**\n   * An API call was made with a parameter combination\n   * that is not valid.\n   */\n  PARAMETER_CONFLICT:                            19,\n  /**\n   * An API call was made with a parameter of incorrect type.\n   */\n  PARAMETER_INVALID_TYPE:                        20,\n  //////////////////\n  // FATAL ERRORS //\n  //////////////////\n  /**\n   *  An API call had an internal error (not an application fault).\n   */\n  INTERNAL_ERROR:                                21,\n  /**\n   * An API call failed due to insufficient space in the transport\n   * buffer to accept more data,\n   * or due to exhaustion of the Guaranteed Messaging Window on a publisher.\n   * After an insufficient space error of either kind, the\n   * listeners on the {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}\n   * event are notified when it is possible to retry the failed operation.\n   */\n  INSUFFICIENT_SPACE:                            22,\n  /**\n   * The message router has rejected the request. All available\n   * resources of the requested type are in use.\n   *\n   * Causes:\n   *  * 400 Not Enough Space\n   */\n  OUT_OF_RESOURCES:                              23,\n  /**\n   * An API call failed due to a protocol error with the router\n   * (not an application fault).\n   */\n  PROTOCOL_ERROR:                                24,\n  /**\n   * An API call failed due to a communication error. This typically indicates the\n   * transport connection to the message router has been unexpectedly closed.\n   */\n  COMMUNICATION_ERROR:                           25,\n  ////////////////\n  // KEEP ALIVE //\n  ////////////////\n  /**\n   * The session keep-alive detected a failed session.\n   */\n  KEEP_ALIVE_FAILURE:                            26,\n  /////////////////////\n  // MESSAGE RELATED //\n  /////////////////////\n  /**\n   * An attempt was made to use a topic which is longer\n   * than the maximum that is supported.\n   */\n  // TOPIC_TOO_LARGE: 27,\n  /**\n   * A send call was made that did not have a topic in a mode\n   * where one is required (for example, client mode).\n   */\n  TOPIC_MISSING:                                 28,\n  /**\n   *  An attempt was made to send a message with a total\n   * size greater than that supported by the protocol. (???)\n   */\n  //  MAX_TOTAL_MSGSIZE_EXCEEDED: 29,\n  /**\n   * An attempt was made to send a message with user data larger\n   * than the maximum that is supported.\n   */\n  // USER_DATA_TOO_LARGE: 30,\n  /**\n   * An attempt was made to use a topic which has a syntax that\n   * is not supported.\n   *\n   * Causes:\n   *  * 400 Topic Parse Error\n   */\n  INVALID_TOPIC_SYNTAX:                          31,\n  /**\n   * The client attempted to send a message larger than that\n   * supported by the router.\n   *\n   * Causes:\n   *  * 400 Document Is Too Large\n   *  * 400 Message Too Long\n   */\n  MESSAGE_TOO_LARGE:                             32,\n  /**\n   * The router could not parse an XML message.\n   *\n   * Causes:\n   *  * 400 XML Parse Error\n   */\n  XML_PARSE_ERROR:                               33,\n  ///////////////////\n  // SUBSCRIPTIONS //\n  ///////////////////\n  /**\n   * The client attempted to add a subscription that already\n   * exists. This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Already Exists)\n   */\n  SUBSCRIPTION_ALREADY_PRESENT:                  34,\n  /**\n   * The client attempted to remove a subscription which did not exist.\n   * This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Not Found)\n   */\n  SUBSCRIPTION_NOT_FOUND:                        35,\n  /**\n   * The client attempted to add/remove a subscription that\n   * is not valid.\n   *\n   * Causes:\n   *  * 400 Subscription Parse Error\n   */\n  SUBSCRIPTION_INVALID:                          36,\n  /**\n   * The router rejected a subscription add or remove request\n   * for a reason not separately enumerated.\n   */\n  SUBSCRIPTION_ERROR_OTHER:                      37,\n  /**\n   * The client attempted to add a subscription that\n   * exceeded the maximum number allowed.\n   *\n   * Causes:\n   *  * 400 Max Num Subscriptions Exceeded\n   */\n  SUBSCRIPTION_TOO_MANY:                         38,\n  /**\n   *  The client attempted to add a subscription which already\n   * exists but it has different properties.\n   *\n   * Causes:\n   *  * 400 Subscription Attributes Conflict With Existing Subscription\n   */\n  SUBSCRIPTION_ATTRIBUTES_CONFLICT:              39,\n  /**\n   * The client attempted to establish a session with No Local\n   * enabled and the capability is not supported by the router.\n   */\n  NO_LOCAL_NOT_SUPPORTED:                        40,\n  ////////////////////\n  // UNKNOWN ERRORS //\n  ////////////////////\n  /**\n   * The router rejected a control message for another reason\n   * not separately enumerated.\n   */\n  // CONTROL_ERROR_OTHER: 41,\n  /**\n   * The router rejected a data message for a reason\n   * not separately enumerated.\n   */\n  DATA_ERROR_OTHER:                              42,\n  //////////////////////\n  // TRANSPORT ERRORS //\n  //////////////////////\n  /**\n   * Failed to create the HTTP connection.\n   */\n  CREATE_XHR_FAILED:                             43,\n  /**\n   * Failed to create the transport.\n   */\n  CONNECTION_ERROR:                              44,\n  /**\n   * Failed to decode the data.\n   */\n  DATA_DECODE_ERROR:                             45,\n  /**\n   * @deprecated\n   * The session was inactive for too long.\n   *\n   * Causes:\n   * * 400 Inactivity Timeout\n   */\n  INACTIVITY_TIMEOUT:                            46,\n  /**\n   * @deprecated\n   * The router does not know this session's identifier.\n   *\n   * Causes:\n   * * 400 Unknown Transport Session Identfier\n   */\n  UNKNOWN_TRANSPORT_SESSION_ID:                  47,\n  /**\n   * @deprecated This subcode is not used since 10.0.0.\n   * Guaranteed Messages (with a delivery mode other than DIRECT) are not supported.\n   */\n  AD_MESSAGING_NOT_SUPPORTED:                    48,\n  /**\n   * @deprecated\n   * Creating the WebSocket transport failed.\n   */\n  CREATE_WEBSOCKET_FAILED:                       49,\n  /**\n   * An attempt to perform an operation using a VPN that is configured to be\n   * STANDBY for replication.\n   *\n   * Causes:\n   * * 403 Replication Is Standby\n   */\n  REPLICATION_IS_STANDBY:                        50,\n  ////////////////////\n  // Authentication //\n  ////////////////////\n  /**\n   * Basic authentication is administratively shut down on the\n   * router.\n   *\n   * Causes:\n   *  * 403 Basic Authentication is Shutdown\n   */\n  BASIC_AUTHENTICATION_IS_SHUTDOWN:              51,\n  /**\n   * Client certificate authentication is administratively\n   * shut down on the router.\n   *\n   * Causes:\n   *  * 403 Client Certificate Authentication Is Shutdown\n   */\n  CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN: 52,\n  //////////////////////\n  // Guaranteed Messaging //\n  //////////////////////\n  /**\n   * Guaranteed Messaging services are not enabled on the router.\n   *\n   * Causes:\n   *  * 503 Service Unavailable\n   */\n  GM_UNAVAILABLE:                                100,\n  /**\n   * The session attempted to connect to a Guaranteed Message Publisher\n   * that does not exist on this router.\n   * All unacked messages held by the API are renumbered and redelivered. This subCode\n   * is handled internally and will not be seen by the application. After successfully\n   * renumbereing and redelivering the messages, if any messages are resent, listeners\n   * on the @{link solace.SessionEventCode#event:REPUBLISHING_UNACKED_MESSAGES} event are\n   * invoked.\n   *\n   * Causes:\n   * * 400 Unknown Flow Name\n   * @private\n   */\n  UNKNOWN_FLOW_NAME:                             111,\n  /**\n   * Already bound to the Queue or not authorized to bind to the Queue.\n   *\n   * Causes:\n   *  * 400 Already Bound\n   */\n  ALREADY_BOUND:                                 112,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint with an\n   * invalid topic.\n   *\n   * Causes:\n   *  * 400 Invalid Topic Name\n   */\n  INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT:         113,\n  /**\n   * An attempt was made to bind to an unknown Queue name (for example, not\n   * configured on the router).\n   *\n   * Causes:\n   *  * 503 Unknown Queue\n   */\n  UNKNOWN_QUEUE_NAME:                            114,\n  /**\n   * An attempt was made to perform an operation on an unknown Guaranteed Messaging\n   * Topic Endpoint name (for example, not configured on router).\n   *\n   * Causes:\n   *  * 503 Unknown Durable Topic Endpoint\n   */\n  UNKNOWN_TOPIC_ENDPOINT_NAME:                   115,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Queue that has already reached\n   * its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for Queue\n   */\n  MAX_CLIENTS_FOR_QUEUE:                         116,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint that has already\n   * reached its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for durable Topic Endpoint\n   */\n  MAX_CLIENTS_FOR_TE:                            117,\n  /**\n   * An unexpected unbind response was received for a Guaranteed Messaging Queue or Topic\n   * Endpoint (for example, the Queue or Topic Endpoint was deleted from the router).\n   */\n  UNEXPECTED_UNBIND:                             118,\n  /**\n   * The specified Guaranteed Messaging Queue was not found when publishing a message.\n   *\n   * Causes:\n   *  * 400 Queue Not Found\n   */\n  QUEUE_NOT_FOUND:                               119,\n  /**\n   * Message was not delivered because the Guaranteed Message spool is over its\n   * allotted space quota.\n   *\n   * Causes:\n   *  * 503 Spool Over Quota\n   */\n  SPOOL_OVER_QUOTA:                              120,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging queue.\n   *\n   * Causes:\n   *  * 503 Queue Shutdown\n   */\n  QUEUE_SHUTDOWN:                                121,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging Topic Endpoint.\n   *\n   * Causes:\n   *  * 503 Durable Topic Endpoint Shutdown\n   *  * 503 TE Shutdown\n   *  * 503 Endpoint Shutdown\n   */\n  TOPIC_ENDPOINT_SHUTDOWN:                       122,\n  /**\n   * An attempt was made to bind to or create a Guaranteed Messaging Queue or Topic\n   * Endpoint, and the router is out of resources.\n   *\n   * Causes:\n   *  * 503 No More Non-Durable Queue or Topic Endpoint\n   */\n  NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT:   123,\n  /**\n   * An attempt was made to create a Queue or Topic Endpoint that already exists.\n   * This subcode is only returned if\n   * {@link solace.SessionProperties.ignoreProvisionEndpointExists} was not set for the current\n   * session.\n   *\n   * Causes:\n   *  * 400 Endpoint Already Exists\n   */\n  ENDPOINT_ALREADY_EXISTS:                       124,\n  /**\n   * An attempt was made to delete or create a Queue or Topic Endpoint when the\n   * Session does not have authorization for the action. This subcode is also returned when an\n   * attempt is made to remove a message from an endpoint when the Session does not have 'consume'\n   * authorization, or when an attempt is made to add or remove a Topic subscription from a Queue\n   * when the Session does not have 'modify-topic' authorization.\n   *\n   * Causes:\n   *  * 403 Permission Not Allowed\n   */\n  PERMISSION_NOT_ALLOWED:                        125,\n  /**\n   * An attempt was made to bind to a Queue or Topic Endpoint with an invalid\n   * selector.\n   *\n   * Causes:\n   *  * 400 Invalid Selector\n   */\n  INVALID_SELECTOR:                              126,\n  /**\n   * Publishing the message was denied due to exceeding the maximum spooled message\n   * count.\n   *\n   * Causes:\n   *  * 503 Max message usage exceeded\n   */\n  MAX_MESSAGE_USAGE_EXCEEDED:                    127,\n  /**\n   * An attempt was made to create a dynamic durable endpoint, and it was found to\n   * exist with different properties.\n   *\n   * Causes:\n   *  * 400 Endpoint Property Mismatch\n   */\n  ENDPOINT_PROPERTY_MISMATCH:                    128,\n  /**\n   * The client attempted to publish an Guaranteed Messaging message to a topic that\n   * did not have any guaranteed subscription matches, or only matched a replicated topic.\n   *\n   * Causes:\n   *  * 503 No Subscription Match\n   */\n  NO_SUBSCRIPTION_MATCH:                         129,\n  /**\n   * The application attempted to acknowledge a message that arrived via a delivery\n   * mode that does not allow acknowledgements.\n   */\n  MESSAGE_DELIVERY_MODE_MISMATCH:                130,\n  /**\n   * The message was already acknowledged.\n   */\n  MESSAGE_ALREADY_ACKNOWLEDGED:                  131,\n  /**\n   * The API-supplied subscription did not match when attempting to bind to a\n   * non-exclusive durable topic endoint.\n   *\n   * Causes:\n   *  * 403 Subscription Does Not Match\n   */\n\n  SUBSCRIPTION_DOES_NOT_MATCH:                       133,\n  /**\n   * The API-supplied selector did not match when attempting to bind to a\n   * non-exclusive durable topic endpoint.\n   *\n   * Causes:\n   *  * 403 Selector Does Not Match\n   */\n  SELECTOR_DOES_NOT_MATCH:                           134,\n  /**\n   * The subscriber has provided an incorrectly formatted durable topic endpoint name.\n   *\n   * Causes:\n   *  * 400 Invalid Durable Topic Endpoint Name\n   */\n  INVALID_DTE_NAME:                                  135,\n  /**\n   * The unsubscribe request was denied by the router because the durable topic endpoint\n   * had one or more clients bound.\n   *\n   * Causes:\n   *  * 400 Unsubscribe Not Allowed, Client(s) Bound To DTE\n   */\n  UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND:             136,\n  /**\n   * An application callback threw an error back to the API. The reason property describes\n   * the error that occurred.\n   */\n  CALLBACK_ERROR:                                    137,\n  /**\n   * A published message was discarded by the router because it will not be published\n   * anywhere based on the NoLocal properties. This can be considered normal.\n   *\n   * Causes:\n   * * 400 Nolocal Discard\n   */\n  NOLOCAL_DISCARD:                                   138,\n  /**\n   * The operation is delayed because Guaranteed Messaging is not ready on the router.\n   *\n   * Causes:\n   * 507 Ad Not Ready\n   */\n  GM_NOT_READY:                                      140,\n  /**\n   * The message was rejected because one or more matching endpoints'\n   * reject-low-priority-msg-limit was exceeded.\n   *\n   * Causes:\n   * * 503 Low Priority Msg Congestion\n   */\n  LOW_PRIORITY_MSG_CONGESTION:                       141,\n  /**\n   * The specified endpoint quota was out of range.\n   *\n   * Causes:\n   * 400 Quota Out Of Range\n   */\n  QUOTA_OUT_OF_RANGE:                                142,\n  /**\n   * Unable to load the certificate from the TrustStore for a SSL\n   * secured session.\n   */\n  FAILED_LOADING_TRUSTSTORE:                         143,\n  /**\n   * The client failed to load certificate and/or private key files.\n   */\n  FAILED_LOADING_CERTIFICATE_AND_KEY:                144,\n  /**\n   * DNS resolution failed for all hostnames.\n   */\n  UNRESOLVED_HOSTS:                                  145,\n  /**\n   * Replay is not supported on the Solace Message Router\n   */\n  REPLAY_NOT_SUPPORTED:                              146,\n  /**\n   *  Replay is not enabled in the message-vpn\n   */\n  REPLAY_DISABLED:                                   147,\n  /**\n   *  The client attempted to start replay on a flow bound to a non-exclusive endpoint\n   */\n  CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED: 148,\n  /**\n   *  The client attempted to start replay on an inactive flow\n   */\n  CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED: 149,\n  /**\n   *  N/A - Browser Flows are not supported.\n   */\n  CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED:  150,\n  /**\n   *  Replay is not supported on temporary endpoints\n   * @deprecated since 10.3.1 - Replay is now supported on Temp Endpoints\n   */\n  REPLAY_TEMPORARY_NOT_SUPPORTED:                    151,\n  /**\n   *  The client attempted to start a replay but provided an unknown start location type.\n   */\n  UNKNOWN_START_LOCATION_TYPE:                       152,\n  /**\n   *  A replay in progress on a flow was administratively cancelled, causing the flow to be unbound\n   */\n  REPLAY_CANCELLED:                                  153,\n  /**\n   *  A replay in progress on a flow failed because messages to be replayed were trimmed\n   *  from the replay log\n   */\n  REPLAY_MESSAGE_UNAVAILABLE:                        154,\n  /**\n   *  A replay was requested but the requested start time is not available in the replay log\n   */\n  REPLAY_START_TIME_NOT_AVAILABLE:                   155,\n  /**\n   *  The Solace Message Router attempted to replay a message, but the queue/topic\n   *  endpoint rejected the message to the sender\n   */\n  REPLAY_MESSAGE_REJECTED:                           156,\n  /**\n   *  A replay in progress on a flow failed because the replay log was modified\n   */\n  REPLAY_LOG_MODIFIED:                               157,\n  /**\n   * Endpoint error ID in the bind request does not match the endpoint's error ID.\n   */\n  MISMATCHED_ENDPOINT_ERROR_ID:                      158,\n  /**\n   * A replay was requested, but the router does not have sufficient resources\n   * to fulfill the request, due to too many active replays.\n   */\n  OUT_OF_REPLAY_RESOURCES:                           159,\n\n  /**\n   * A replay was in progress on a Durable Topic Endpoint (DTE)\n   * when its topic or selector was modified, causing the replay to fail.\n   */\n  TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT:         160,\n  /**\n   *  A replay in progress on a flow failed\n   */\n  REPLAY_FAILED:                                                161,\n  /**\n   *  A replay was started on the queue or DTE, either by another client or by the router.\n   */\n  REPLAY_STARTED:                                               162,\n  /**\n   * Router does not support Compressed TLS\n   */\n  COMPRESSED_TLS_NOT_SUPPORTED:                                 163,\n  /**\n   * The client attempted to add a shared subscription, but the capability is not supported\n   * by the appliance.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_SUPPORTED:                           164,\n  /**\n   * The client attempted to add a shared subscription on a client that is not permitted to\n   * use shared subscriptions.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_ALLOWED:                             165,\n  /**\n   * The client attempted to add a shared subscription to a queue or topic endpoint.\n   */\n  SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED:                    166,\n  /**\n   * A replay was requested but the requested start message is not available in the replay log.\n   */\n  REPLAY_START_MESSAGE_NOT_AVAILABLE:                           167,\n  /**\n   * Replication Group Message Id are not comparable.\n   * Messages must be published to the same broker or HA pair for their Replicaton Group\n   * Message Id to be comparable.\n   */\n  MESSAGE_ID_NOT_COMPARABLE:                                    168,\n  /**\n   * Replay is not supported on anonymous queue\n   * - 403 Replay Not Supported on Anonymous Queue\n   */\n  REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED:                         169,\n  /**\n   * Browser flows to Partitioned Queues are not permitted.\n   * - 403 Browsing Not Supported on Partitioned Queue\n   */\n  PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED:                     170,\n  /**\n   * Egress selectors are not permitted when binding to a Partitioned Queue.\n   * - 403 Selectors Not Supported on Partitioned Queue\n   */\n  PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED:                    171,\n  /**\n   * Replay Not Supported on Anonymous Queue Without Subscriptions\n   * - 403 Replay Not Supported on Anonymous Queue Without Subscriptions\n   */\n  REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED:   172,\n  /**\n   * The message was rejected because the appliance has been configured\n   * to reject messages when sync replication mode is ineligible.\n   * - 503 Sync Replication Ineligible (Reject Messages when Synchronous Replication Mode is Ineligible)\n   * \n   * * The transaction was started as a synchronous replicated transaction,\n   * but replication became ineligible during the transaction.\n   * - 503 Sync Replication Ineligible (Replication Ineligible during Synchronous Replicated Transaction)\n   */\n  SYNC_REPLICATION_INELIGIBLE:                                  173,\n  /**\n   * An attempt was made to bind to a durable TE or Queue \n   * with a flow property of ‘non-durable’.\n   *\n   * Causes:\n   *  * 400 Invalid Queue or Topic Endpoint Durability\n   */\n  INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY:                   174,\n  /**\n   * Provisioning failed due to invalid queue name. \n   *\n   * Causes:\n   *  * 400 Invalid Queue Name\n   */\n  INVALID_QUEUE_NAME:                   175,\n  /**\n   * Provisioning failed due to invalid topic endpoint name. \n   *\n   * Causes:\n   *  * 400 Invalid Topic Endpoint Name\n   */\n  INVALID_TE_NAME:                   176,\n  /**\n   * Provisioning failed because the requested max message size was too large. \n   *\n   * Causes:\n   *  * 400 Message Size Out Of Range\n   */\n  MESSAGE_SIZE_OUT_OF_RANGE:         177,\n  /**\n   * Provisioning failed because the requested permissions are not supported. \n   *\n   * Causes:\n   *  * 400 Unsupported permissions\n   */\n  UNSUPPORTED_PERMISSIONS:         178,\n  /**\n   * Provisioning failed because the requested permissions are not supported. \n   *\n   * Causes:\n   *  * 503 Max endpoints exceeded\n   */\n  MAX_ENDPOINTS_EXCEEDED:         179,\n  /**\n   * Provisioning failed because router is unable to perform Assured Delivery. \n   *\n   * Causes:\n   *  * 507 Assured Delivery Not Ready\n   */\n  ASSURED_DELIVERY_NOT_READY:         180,\n  /**\n   * Provisioning failed due to a queue template configuration error on the broker. \n   *\n   * Causes:\n   *  * 503 Copy-from queue template missing\n   */\n  COPY_FROM_QUEUE_TEMPLATE_MISSING:         181,\n  /**\n   * Provisioning failed due to a topic endpoint template configuration error on the broker. \n   *\n   * Causes:\n   *  * 503 Copy-from topic-endpoint template missing\n   */\n  COPY_FROM_TE_TEMPLATE_MISSING:         182,\n};\n\nmodule.exports.ErrorSubcode = Enum.new(ErrorSubcode);\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instances from\n * one of the following:</b>\n * * {@link solace.SolclientFactory.createTopicDestination}\n * * {@link solace.SolclientFactory.createDurableQueueDestination}\n * * {@link solace.MessageConsumer#getDestination}\n * * {@link solace.SDTField#getValue} when {@link solace.SDTField#getType} returns\n *   {@link solace.SDTFieldType.DESTINATION}.\n *\n * Represents a message destination.\n *\n * Publishers can send messages to topics or queues, to which subscribers can subscribe or\n * bind. A Destination specifies the target of such an operation.\n * @hideconstructor\n * @memberof solace\n */\nclass Destination {\n\n  /*\n   * @constructor\n   * @param {String|solace.Destination|Object} spec The name of the destination, or, the\n   *  destination to copy. If this is a {@link solace.Destination} then all other parameters are\n   *  ignored.\n   * @param {solace.DestinationType} [type=solace.DestinationType.Topic] The type of destination\n   *  to create\n   * @deprecated since 10.0 Applications should not call this constructor.\n   *  Use the factory methods on {@link solace.SolclientFactory}.\n   **/\n  constructor(spec, type = DestinationType.TOPIC) {\n    if (typeof spec === 'object') {\n      this._name = spec.name;\n      this._type = spec.type;\n      this._bytes = spec.bytes;\n      this._offset = spec.offset;\n      if (spec.isValidated) {\n        this._isValidated = true;\n        this._isWildcarded = spec.isWildcarded;\n        this._subscriptionInfo = spec.subscriptionInfo || {};\n      } else {\n        this._isValidated = false;\n        this._subscriptionInfo = {};\n      }\n    } else {\n      this._name = spec;\n      this._type = type;\n\n      // Don't validate encoding for deprecated construction path.\n      // This path would have more restrictions now, and it allows\n      // sdkperf a path for arbitrary topic construction.\n      const result = DestinationUtil.encode(type, spec);\n      this._bytes = result.bytes;\n      this._offset = result.offset;\n      this._isValidated = false;\n      this._subscriptionInfo = {};\n    }\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time.\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @type {String}\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @returns {solace.DestinationType} The destination type\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.DestinationType}\n   * @readonly\n   */\n  get type() {\n    return this.getType();\n  }\n\n  /**\n   * @returns {String} Returns the null-terminated UTF-8 encoded destination bytes.\n   *\n   * @private\n   */\n  getBytes() {\n    return this._bytes;\n  }\n  get bytes() {\n    return this.getBytes();\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  /**\n   * This provides the legacy validation that was done post-creation and is used in some code paths\n   * on use.  It is preferred to use non-deprecated ways of creating destinations, which do\n   * validation on create instead.\n   * @throws OperationError if the destination is not valid.\n   * @private\n   */\n  validate() {\n    if (this._isValidated) {\n      if (this._error) throw this._error;\n      return;\n    }\n\n    const { error, isWildcarded } =\n      DestinationUtil.legacyValidate(this.type, this.bytes, this.name);\n    this._isValidated = true;\n    if (error) {\n      this._error = error;\n      throw error;\n    }\n    this._isWildcarded = isWildcarded;\n  }\n\n  /**\n   * This is really only useful for topics.  If a queue name contains a wildcarded construct, it is\n   * up to the router what to do -- it would either reject it or treat the wildcard as literal.  But\n   * it is included here for all destination types since we have the info.\n   * @returns {Boolean} True if the underlying name represents a wildcarded topic; false otherwise.\n   * @throws {OperationError} If the destination is not valid.\n   * @private\n   */\n  isWildcarded() {\n    this.validate();\n    return this._isWildcarded;\n  }\n\n  /**\n   * @returns {Object} subscriptionInfo object or empty object\n   * @private\n   */\n  getSubscriptionInfo() {\n    return this._subscriptionInfo || {};\n  }\n\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * @param {*} other The other object for comparison\n   * @returns {Boolean} True if the passed destination is the same\n   * @private\n   */\n  equals(other) {\n    if (!(other instanceof Destination)) {\n      return false;\n    }\n    return (this.toString().valueOf() === other.toString().valueOf());\n  }\n}\n\nmodule.exports.Destination = Destination;\n","module.exports.WebSocketCloseCodes = {\n  0: {\n    name:        'Unknown code',\n    description: 'No status code was returned by the operation',\n  },\n  1000: {\n    name:        'Normal Closure',\n    description: 'The connection closed normally',\n  },\n  1001: {\n    name:        'Going Away',\n    description: 'The endpoint is going away due to a server failure or client navigation',\n  },\n  1002: {\n    name:        'Protocol Error',\n    description: 'A WebSocket protocol error occurred',\n  },\n  1003: {\n    name:        'Unsupported Data',\n    description: 'The endpoint cannot handle the specified data type',\n  },\n  1004: {\n    name:        'Reserved',\n    description: '',\n  },\n  1005: {\n    name:        'No Status Recvd',\n    description: 'Expected a status code but none was provided',\n  },\n  1006: {\n    name:        'Abnormal Closure',\n    description: 'No close frame was received before remote hangup',\n  },\n  1007: {\n    name:        'Invalid Frame Payload Data',\n    description: 'A message contained data inconsistent with its encoding',\n  },\n  1008: {\n    name:        'Policy Violation',\n    description: 'A message violated endpoint policy',\n  },\n  1009: {\n    name:        'Message Too Big',\n    description: 'A data frame was too large',\n  },\n  1010: {\n    name:        'Missing Extension',\n    description: 'The endpoint did not negotiate an expected extension',\n  },\n  1011: {\n    name:        'Internal Error',\n    description: 'The server encountered an unexpected condition that prevented it from fulfilling the request',\n  },\n  1012: {\n    name:        'Service Restart',\n    description: 'The server is restarting',\n  },\n  1013: {\n    name:        'Try Again Later',\n    description: 'The server is terminating the connection due to a temporary condition',\n  },\n  1014: {\n    name:        'Bad Gateway',\n    description: 'A gateway or proxy received an invalid response from the upstream server',\n  },\n  1015: {\n    name:        'TLS Handshake',\n    description: 'The connection was closed due to a failure to perform a TLS handshake',\n  },\n};\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown by the API when an operational error is encountered.\n * @memberof solace\n * @extends {solace.SolaceError}\n * @hideconstructor\n */\nclass OperationError extends SolaceError {\n\n  /*\n   * @constructor\n   * @param {String} message The message to include in the error.\n   * @param {Number} [subcode] The subcode. See {@link ErrorSubcode} for valid values\n   * @param {Object} [reason] Embedded error or exception (optional)\n   */\n  constructor(message, subcode, reason) {\n    /**\n     * The name of the error.\n     * @name solace.OperationError#name\n     * @type {String}\n     * @readonly\n     * @description 'OperationError'\n     */\n    super('OperationError', message, OperationError);\n    /**\n     * The subcode for the error. @see {@link solace.ErrorSubcode}\n     * @name solace.OperationError#subcode\n     * @type {solace.ErrorSubcode}\n     */\n    this.subcode = subcode;\n    /**\n     * The reason for the error: an embedded error object or exception.\n     * @name solace.OperationError#reason\n     * @type {Object}\n     */\n    this.reason = reason;\n  }\n\n}\n\nmodule.exports.OperationError = OperationError;\n","const WebTransportsLib = require('./web');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\nconst { TransportBase } = require('./transport-base');\nconst { TransportProtocol } = require('./transport-protocols');\n\nconst { lazyValue } = Lazy;\n\n// Define transportProtocol to transport mapping\nconst lutTransportProtocols = lazyValue(() => {\n  const protocols = {\n    [TransportProtocol.HTTP_BASE64]:           WebTransportsLib.StateBase64,\n    [TransportProtocol.HTTP_BINARY]:           WebTransportsLib.StateBinary,\n    [TransportProtocol.HTTP_BINARY_STREAMING]: WebTransportsLib.StateStreamingAndBinary,\n    [TransportProtocol.WS_BINARY]:             WebTransportsLib.StateWebSocketBinary,\n  };\n  return protocols;\n});\n\n/**\n * @classdesc\n * Handles web transport selection and downgrade without creating the actual transport\n * session object\n * @memberof solace\n * @private\n */\nclass TransportProtocolHandler {\n  constructor(url, webTransportProtocolList) {\n    const useSSL = TransportBase.useSsl(url);\n    let transport = null;\n    let downgradeTransport = null;\n    webTransportProtocolList.slice().reverse().forEach((el) => {\n      const TransportConstructor = lutTransportProtocols.value[el];\n      transport = new TransportConstructor(useSSL, this.switchState.bind(this), downgradeTransport);\n      downgradeTransport = transport;\n    });\n    this._transport = transport;\n    this._transport.onEnter();\n  }\n\n  getTransportProtocol() {\n    return this._transport.getTransportProtocol();\n  }\n\n  completeDowngrade(err) {\n    return this._transport.completeDowngrade(err);\n  }\n\n  canCompleteDowngrade() {\n    return (this._transport.getNextState() !== null);\n  }\n\n  toString() {\n    return this._transport.toString();\n  }\n\n  switchState(newState, reason) {\n    LOG_TRACE(`Switching ${this._transport} => ${newState} (${reason})`);\n    this._transport = newState;\n    newState.onEnter();\n  }\n}\n\nmodule.exports.TransportProtocolHandler = TransportProtocolHandler;\n","// Node entry point\n//global.BUILD_ENV = require('./define.config.js');\nmodule.exports = require('solclient-core');\n\n","/**\n * @classdesc\n * Encapsulates the session's event callback function and an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.  Register event handlers\n * against {@link solace.SessionEventCode} events instead.\n *\n * @memberof solace\n */\n\nclass SessionEventCBInfo {\n\n  /**\n   * Creates an instance of SessionEventCBInfo.\n   *\n   * @param {function(Session, SessionEvent, Object, Object)} sessionEventCBFunction\n   *  invoked by the Messaging API when a session event occurs. The prototype\n   *  of this function is the following: ({@link solace.Session},\n   *                                      {@link solace.SessionEvent},\n   *                                      {Object}})\n   * @param {Object} userObject An optional user-specified object passed on\n   * every session event callback.\n   */\n  constructor(sessionEventCBFunction, userObject) {\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n\n    /**\n     * @type {function}\n     * @description The prototype of this function is the\n     * following:\n     * ({@link solace.Session}, {@link solace.SessionEvent},\n     * userObject {Object}, RFUObject {Object})\n     */\n    this.sessionEventCBFunction = sessionEventCBFunction;\n  }\n}\n\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * @enum {string}\n * State names on the Publisher FSM\n ********************************************************************************/\nconst PublisherStateNames = {\n  UNBOUND:         'PublisherUnbound',\n  OPENFLOWSENT:    'PublisherOpenFlowSent',\n  UP:              'PublisherUp',\n  FAILED:          'PublisherFailed',\n  CLOSEFLOWSENT:   'PublisherCloseFlowSent',\n  DATA_XFER:       'PublisherDataXfer',\n  FLOW_CONTROLLED: 'MessagePublisherFlowControlled',\n  RETRANSMITTING:  'PublisherRetransmitting',\n};\n\nmodule.exports.PublisherStateNames = Enum.new(PublisherStateNames);\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { makeMap } = require('solclient-eskit');\n\n/* eslint-disable max-len */\n\nconst SC = ErrorSubcode;\n\nconst ROOT_MAPPING = makeMap(\n  400, makeMap(\n    'client name parse error', SC.CLIENT_NAME_INVALID,\n    'document is too large', SC.MESSAGE_TOO_LARGE,\n    'inactivity timeout', SC.INACTIVITY_TIMEOUT,\n    'max num subscriptions exceeded', SC.SUBSCRIPTION_TOO_MANY,\n    'message too long', SC.MESSAGE_TOO_LARGE,\n    'nolocal discard', SC.NOLOCAL_DISCARD,\n    'not enough space', SC.OUT_OF_RESOURCES,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'subscription attributes conflict with existing subscription', SC.SUBSCRIPTION_ATTRIBUTES_CONFLICT,\n    'subscription not found', SC.SUBSCRIPTION_NOT_FOUND,\n    'subscription parse error', SC.SUBSCRIPTION_INVALID,\n    'topic parse error', SC.INVALID_TOPIC_SYNTAX,\n    'unknown transport session identifier', SC.UNKNOWN_TRANSPORT_SESSION_ID,\n    'xml parse error', SC.XML_PARSE_ERROR,\n    'unsupported ssl downgrade value', SC.LOGIN_FAILURE\n  ),\n  401, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  403, makeMap(\n    'basic authentication is shutdown', SC.BASIC_AUTHENTICATION_IS_SHUTDOWN,\n    'client certificate authentication is shutdown', SC.CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN,\n    'client name already in use', SC.CLIENT_NAME_ALREADY_IN_USE,\n    'client username is shutdown', SC.CLIENT_USERNAME_IS_SHUTDOWN,\n    'dynamic clients not allowed', SC.DYNAMIC_CLIENTS_NOT_ALLOWED,\n    'invalid virtual router address', SC.INVALID_VIRTUAL_ADDRESS,\n    'forbidden', SC.CLIENT_ACL_DENIED,\n    'message vpn not allowed', SC.MESSAGE_VPN_NOT_ALLOWED,\n    'publish acl denied', SC.PUBLISH_ACL_DENIED,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'selector does not match', SC.SELECTOR_DOES_NOT_MATCH,\n    'subscription acl denied', SC.SUBSCRIPTION_ACL_DENIED,\n    'subscription does not match', SC.SUBSCRIPTION_DOES_NOT_MATCH,\n    'compression is shutdown', SC.LOGIN_FAILURE,\n    'shared subscriptions not supported on topic endpoints', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscriptions not supported on queues', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscription permission denied', SC.SHARED_SUBSCRIPTIONS_NOT_ALLOWED\n  ),\n  404, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  503, makeMap(\n    'low priority msg congestion', SC.LOW_PRIORITY_MSG_CONGESTION,\n    'message vpn unavailable', SC.MESSAGE_VPN_UNAVAILABLE,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'service unavailable', SC.GM_UNAVAILABLE,\n    'spool over quota', SC.SPOOL_OVER_QUOTA,\n    'subscriber delete in progress', SC.CLIENT_DELETE_IN_PROGRESS,\n    'too many clients', SC.TOO_MANY_CLIENTS,\n    'too many connections for vpn', SC.TOO_MANY_CLIENTS,\n    'max message usage exceeded', SC.MAX_MESSAGE_USAGE_EXCEEDED\n  ),\n  507, makeMap(\n    'ad not ready', SC.GM_NOT_READY\n  )\n);\n\nconst AD_MAPPING = makeMap(\n  'PARENT', ROOT_MAPPING,\n  400, makeMap(\n    'already bound', SC.ALREADY_BOUND,\n    'endpoint already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'endpoint property mismatch', SC.ENDPOINT_PROPERTY_MISMATCH,\n    'invalid durable topic endpoint name', SC.INVALID_DTE_NAME,\n    'invalid selector', SC.INVALID_SELECTOR,\n    'invalid topic name', SC.INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT,\n    'invalid queue or topic endpoint durability', SC.INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY,\n    'queue not found', SC.QUEUE_NOT_FOUND,\n    'quota out of range', SC.QUOTA_OUT_OF_RANGE,\n    'unknown flow name', SC.UNKNOWN_FLOW_NAME,\n    'unsubscribe not allowed', SC.UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND,\n    'invalid queue name', SC.INVALID_QUEUE_NAME,\n    'invalid topic endpoint name', SC.INVALID_TE_NAME,\n    'message size out of range', SC.MESSAGE_SIZE_OUT_OF_RANGE,\n    'unsupported permissions', SC.UNSUPPORTED_PERMISSIONS,\n  ),\n  403, makeMap(\n    'permission not allowed', SC.PERMISSION_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive topic endpoint', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive queue', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay from inactive flow not allowed', SC.CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED,\n    'client initiated replay from browser flow not allowed', SC.CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED,\n    // 'replay not supported on temporary topic endpoint', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on temporary queue', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on anonymous queue', SC.REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED,\n    'replay not supported on anonymous queue without subscriptions', SC.REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED,\n    'unknown start location type', SC.UNKNOWN_START_LOCATION_TYPE,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE,\n    'browsing not supported on partitioned queue', SC.PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED,\n    'selectors not supported on partitioned queue', SC.PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED\n  ),\n  503, makeMap(\n    'durable topic endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'max clients exceeded for durable topic endpoint', SC.MAX_CLIENTS_FOR_TE,\n    'max clients exceeded for topic endpoint', SC.MAX_CLIENTS_FOR_TE,\n    'max clients exceeded for queue', SC.MAX_CLIENTS_FOR_QUEUE,\n    'no more non-durable queue or topic endpoint', SC.NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT,\n    'no subscription match', SC.NO_SUBSCRIPTION_MATCH,\n    'queue shutdown', SC.QUEUE_SHUTDOWN,\n    'te shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'unknown durable topic endpoint', SC.UNKNOWN_TOPIC_ENDPOINT_NAME,\n    'unknown queue', SC.UNKNOWN_QUEUE_NAME,\n    'replay disabled', SC.REPLAY_DISABLED,\n    'replay cancelled', SC.REPLAY_CANCELLED,\n    'replay message unavailable', SC.REPLAY_MESSAGE_UNAVAILABLE,\n    'replay started', SC.REPLAY_STARTED,\n    'replayed message rejected by topic endpoint', SC.REPLAY_MESSAGE_REJECTED,\n    'replayed message rejected by queue\"', SC.REPLAY_MESSAGE_REJECTED,\n    'replay log modified', SC.REPLAY_LOG_MODIFIED,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'out of replay resources', SC.OUT_OF_REPLAY_RESOURCES,\n    'topic or selector modified on durable topic endpoint', SC.TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT,\n    'replay failed', SC.REPLAY_FAILED,\n    'replay start time not available', SC.REPLAY_START_TIME_NOT_AVAILABLE,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE,\n    'sync replication ineligible', SC.SYNC_REPLICATION_INELIGIBLE,\n    'max endpoints exceeded', SC.MAX_ENDPOINTS_EXCEEDED,\n    'copy-from queue template missing', SC.COPY_FROM_QUEUE_TEMPLATE_MISSING,\n    'copy-from topic-endpoint template missing', SC.COPY_FROM_TE_TEMPLATE_MISSING,\n  ),\n  507, makeMap(\n    'assured delivery not ready', SC.ASSURED_DELIVERY_NOT_READY,\n  )\n);\n\nfunction getSubcodeMappingInner(root, respErrorCode, respStr) {\n  if (respErrorCode === 200) {\n    // success response, error subcode is 0 -  transport session use 0 as OK\n    return 0;\n  }\n  const codeMap = root[respErrorCode] || {};\n  const searchKey = (respStr || '').toLowerCase();\n  const foundKey = Object.keys(codeMap)\n    .find(mapKey => mapKey === searchKey || searchKey.indexOf(mapKey) >= 0);\n\n  if (foundKey) {\n    return codeMap[foundKey];\n  }\n\n  if (codeMap['']) {\n    return codeMap[''];\n  }\n\n  /* eslint-disable dot-notation */\n  // Don't access string keys via dot properties\n  if (root['PARENT']) {\n    return getSubcodeMappingInner(root['PARENT'], respErrorCode, respStr);\n  }\n  /* eslint-enable dot-notation */\n\n  return undefined;\n}\n\nfunction getSubcodeMapping(root, respErrorCode, respStr) {\n  const result = getSubcodeMappingInner(root, respErrorCode, respStr);\n  if (result === undefined) {\n    return SC.UNKNOWN_ERROR;\n  }\n  return result;\n}\n\n/**\n * @classdesc\n * Return {ErrorSubcode} based on response code and response string\n * from the router.\n * @private\n */\nconst ErrorResponseSubcodeMapper = {\n  /**\n   * @param {Number} respErrorCode The response code (an HTTP-like integer) to use in the lookup.\n   * @param {String} respStr The response string to use in the lookup.\n   * @returns {solace.ErrorSubcode} The subcode found, or ErrorSubcode.UNKNOWN_ERROR if not found.\n   * @static\n   * @private\n   */\n  getErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(ROOT_MAPPING, respErrorCode, respStr);\n  },\n\n  getADErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(AD_MAPPING, respErrorCode, respStr);\n  },\n};\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends ReplayStartLocation\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationDate extends ReplayStartLocation {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    super({\n      _replayStartValue: spec.getTime(),\n      _type:             ReplayStartType.DATE,\n    });\n  }\n  [util_inspect_custom]() {\n    return `[Epoch Time: ${this._replayStartValue}]`;\n  }\n  /**\n   * @static\n   * @param {Date} dateTime The Date for the replay start location\n   * @returns {ReplayStartLocation} the ReplayStartLocation\n   * @private\n   */\n  static createReplayStartLocationDate(dateTime) {\n    return new ReplayStartLocationDate(dateTime);\n  }\n}\n\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\n","/**\n * @private\n */\nclass BidiMap {\n  constructor(...pairs) {\n    this.forward = new Map();\n    this.reverse = new Map();\n    pairs.forEach((p) => {\n      this.setValues(p[0], p[1]);\n    });\n  }\n\n  /**\n   * Sets the key => value and value => key relationships for the supplied parameters.\n   *\n   * Method name is #set, not #put, for alignment with ES map method names.\n   * @param {*} key The key for the forward mapping (value in the reverse mapping)\n   * @param {*} value The value for the forward mapping (key in the reverse mapping)\n   */\n  setValues(key, value) {\n    this.forward.set(key, value);\n    this.reverse.set(value, key);\n  }\n\n}\n\nmodule.exports.BidiMap = BidiMap;\n","const { DestinationType } = require('./destination-type');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * determines if subscription has the #noexport/ prefix\n *\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isNoExport\n * @private\n */\nfunction subscriptionParseNoExport(type, name, bytes, offset, result) {\n  const NOEXPORT_PREFIX = '#noexport/';\n  const NOEXPORT_PREFIX_LEN = NOEXPORT_PREFIX.length;\n  let index = offset;\n  let error;\n  if (name.length - index > NOEXPORT_PREFIX_LEN && !result.isNoExport) {\n    if (name.startsWith(NOEXPORT_PREFIX, index)) {\n      index += NOEXPORT_PREFIX_LEN;\n      result.isNoExport = true;\n    } else {\n      result.isNoExport = false;\n    }\n  } else {\n    result.isNoExport = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isShared or {String} shareGroup or {Number}\n *   dispatchTopicIndex\n * @private\n */\nfunction subscriptionParseShare(type, name, bytes, offset,\n                                result, exceptionCreator) {\n  const SHARE_PREFIX = '#share/';\n  const SHARE_PREFIX_LEN = SHARE_PREFIX.length;\n  const LEVEL_DELIMETER = '/';\n  const LEVEL_DELIMETER_LEN = LEVEL_DELIMETER.length;\n  let index = offset;\n  let error;\n  let groupIndex = -1;\n  let shareGroup;\n  if (name.length - index > SHARE_PREFIX_LEN && !result.isShare) {\n    /* parse '#share/' prefix */\n    /*\n     * name starts with '#share/' prefix\n     * and has enough room for at least one character for share group\n     */\n    if (name.startsWith(SHARE_PREFIX, offset)\n        && (name.length - (index + SHARE_PREFIX_LEN)) > LEVEL_DELIMETER_LEN + 1) {\n      index += SHARE_PREFIX_LEN;\n      /* parse share group to next '/' */\n      groupIndex = index;\n      index = name.indexOf(LEVEL_DELIMETER, groupIndex);\n      if (index > 0) {\n        shareGroup = name.substring(groupIndex, index);\n        index += LEVEL_DELIMETER_LEN;\n        result.isShare = true;\n        result.shareGroup = shareGroup;\n        result.dispatchTopicIndex = index;\n      } else {\n        // error\n        error = exceptionCreator(`Illegal share Group in '${name}'@${groupIndex}.`);\n        result.isShare = true;\n      }\n    } else {\n      // not share subscription\n      result.isShare = false;\n    }\n  } else {\n    // not share subscription\n    result.isShare = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {Array.Function} layers The parsing functions executed from 0 to layers.length\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {solace.SubscriptionInfo} subInfo The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, result} returns the parsed information in the SubscriptionInfo\n * object and error, when error is set result's values may be partially set\n * @private\n */\nfunction subscriptionStringParse(layers, type, name, bytes, subInfo, exceptionCreator) {\n  const parseLayers = layers.length || 0;\n  let offset = 0;\n  let error;\n  let result = subInfo || {};\n  for (let i = 0; i < parseLayers; ++i) {\n    const { error: constError, index: constOffset, result: constResult } =\n      layers[i](type, name, bytes, offset, result, exceptionCreator);\n    offset = constOffset;\n    result = constResult;\n    error = constError;\n    if (error) break;\n  }\n  return { error, result };\n}\n\n// Subscription parser map by DestinationType\n// Currently only Topics have subscription information to parse, but more can be added as needed\n// The _layers attribute for the parser defines the order of parsing destination names\n// The _layers are made up of functions that can execute with the signature:\n//   { error, index, result } function funcName(type, name, bytes, result[, exceptionCreator])\n// To add more subscription information parsing add more layers to _layers of the DestinationType\nconst SUBSCRIPTION_LAYER_PARSER_FROM_TYPE = {\n  [DestinationType.TOPIC]: {\n    _layers: [subscriptionParseNoExport, subscriptionParseShare],\n    parse:   function subParse(type, name, bytes, subInfo, exceptionCreator) {\n      const { error, result } =\n        subscriptionStringParse(this._layers, type, name, bytes, subInfo, exceptionCreator);\n      return { error, result };\n    },\n  },\n};\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n/**\n * @classdesc\n * <b> This class is not exposed. This object contains useful subscription information about\n * a {solace.Destination#name}</b>\n * @hideconstructor\n * @memberof solace\n * @private\n */\nclass SubscriptionInfo {\n  /**\n   * @constructor\n   * @param {String} name The name of the destination to be used as a subscription\n   * @private\n   */\n  constructor(name) {\n    this._name = name;\n    // set default values\n    this._isShare = false;\n    this._isNoExport = false;\n    this._dispatchTopicIndex = -1;\n    this._shareGroup = null;\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @returns {String} subscription name\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isShare\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a shared\n   * subscription\n   * @default false\n   */\n  get isShare() {\n    return this._isShare;\n  }\n  set isShare(value) {\n    this._isShare = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isNoExport\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a no export\n   * subscription\n   * @default false\n   */\n  get isNoExport() {\n    return this._isNoExport;\n  }\n  set isNoExport(value) {\n    this._isNoExport = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#dispatchTopicIndex\n   * @type {Number}\n   * @description String index of the topic filter after subscription prefixes\n   * @default 0, the whole name as the topic filter\n   */\n  get dispatchTopicIndex() {\n    return this._dispatchTopicIndex < 0 ? 0 : this._dispatchTopicIndex;\n  }\n  set dispatchTopicIndex(value) {\n    this._dispatchTopicIndex = value < 0 ? -1 /* uninitialized*/ : value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#shareGroup\n   * @type {?String}\n   * @description The Share group of a shared subscription, should be null if\n   * {solace.SubscriptionInfo#isShare} is false\n   */\n  get shareGroup() {\n    return this.isShare ? this._shareGroup : null;\n  }\n  set shareGroup(value) {\n    if (this.isShare) {\n      this._shareGroup = value;\n    }\n  }\n\n  /**\n   * @returns {String} A generic description of the SubscriptionInfo\n   */\n  toString() {\n    return util_inspect(this);\n  }\n  /**\n   * @static\n   * @type {Object}\n   * @param {String} name The name of the destination\n   * @param {DestinationType} type The Destination type\n   * @returns {Object} the subscription infomation from the destination name\n   * @private\n   */\n  static parseFromName(name, type = DestinationType.TOPIC) {\n    let subInfo = new SubscriptionInfo(name);\n    let error = null;\n    const parser = SUBSCRIPTION_LAYER_PARSER_FROM_TYPE[type];\n    if (parser) {\n      const { error: errorConst, result: subInfoConst } =\n      parser.parse(type, name, null, subInfo, createOperationError.bind(null, type));\n      subInfo = subInfoConst;\n      error = errorConst;\n    }\n    return { error, subInfo };\n  }\n}\nmodule.exports.SubscriptionInfo = SubscriptionInfo;\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst { FactoryProfile, SolclientFactoryProfiles } = require('./solclient-factory-profiles');\nconst { Parameter } = require('solclient-validate');\nconst { ProfileBinding } = require('./profile-binding');\nconst { SolclientFactoryProperties } = require('./solclient-factory-properties');\n\nconst factoryState = {\n  initializeCount: 0,\n  initializers:    [],\n};\n/**\n * @global\n * @name solClientJS\n * @description\n * <b>solClientJS</b> is a full functioned Solace Messaging API written entirely in JavaScript.\n * Applications using the <i>solClientJS</i> API can access all the features of a\n * Solace Message Router.\n *\n * The API is intended for use by applications written in JavaScript, targetting\n * either <b>NODE</b> or a traditional web browser.\n *\n * All classes, objects, methods of the API are encapsulated in the {@link solace} namespace.\n * The starting point for all applications is {@link solace.SolclientFactory}. This factory object\n * generates the {@link solace.Session} for connecting to the Solace Message Router.\n * {@link solace.SolclientFactory} also generates the {@link solace.Message} object\n * which enncapsulates the messages and {@link solace.Destination} the application will use\n * to send and receive data.\n * @summary The Solace Message Router Messaging API for Javascript.\n * @importTypeDefinitions import {EventEmitter} from 'events';\n * @importTypeDefinitions import Long = require('long');\n */\n\n/**\n * A singleton used as the main factory for the messaging APIs. The very first operation by\n * any application must be to initialize the API:\n * * {@link solace.SolclientFactory.init}\n *\n * <i>SolclientFactory</i> provides methods to construct:\n * * {@link solace.Session}\n * * {@link solace.Message}\n * * {@link solace.Destination}\n *\n * Additionally <i>SolclientFactory</i> manages the\n * logging level in the API.\n * @namespace\n * @public\n * @memberof solace\n */\nconst SolclientFactory = {\n\n  /**\n   * Adds a function to be called on factory initialization\n   * @param {function(factoryProps, factoryState)} func initializer function to be called\n   * @internal\n   */\n  addInitializer(func) {\n    factoryState.initializers.push(func);\n  },\n\n  /**\n   * @param {function} func function to wrap\n   * @returns {function} new factory method\n   * @internal\n   */\n  createFactory(func) {\n    return function factoryMethod(...args) {\n      if (factoryState.initializeCount === 0) {\n        throw new OperationError('SolclientFactory not initialized', ErrorSubcode.INVALID_OPERATION);\n      }\n      return func(...args);\n    };\n  },\n\n  /**\n   * Initialize global properties. This function must be called before any other API call is made.\n   *\n   * Note: After the first call to this method, subsequent calls have no effect.\n   *\n   * @param {solace.SolclientFactoryProperties} [factoryProps] The initialization properties for\n   *  the factory, if required.\n   * @param {solace.LogImpl} [factoryProps.logger] A logging implementation\n   * @param {solace.LogLevel}[factoryProps.logLevel] The logging level to use\n   *  for filtering log events.\n   * @param {solace.SolclientFactoryProfiles}\n   *  [factoryProps.profile=solace.SolclientFactoryProfiles.version7]\n   *     The factory profile. This class cannot be created by an API user; choose one of the static\n   *     instances from {@link solace.SolclientFactoryProfiles}.\n   * @throws {solace.OperationError} Invalid logger implementation\n   * @returns {solace.SolclientFactory} For method chaining\n   */\n  init(factoryProps) {\n    if (factoryState.initializeCount > 0) {\n      return this;\n    }\n\n    const props = new SolclientFactoryProperties(factoryProps);\n    const profile = factoryProps && factoryProps.profile || SolclientFactoryProfiles.version7;\n    Parameter.isInstanceOf('factoryProps.profile', profile, FactoryProfile);\n    ProfileBinding.value = profile;\n\n    factoryState.initializers.forEach((initializer) => {\n      initializer.call(this, props, factoryState);\n    });\n    ++factoryState.initializeCount;\n\n    if ((factoryProps !== undefined) && (factoryProps !== null)) {\n      // Factory should not depend on other packages at file scope\n      // eslint-disable-next-line global-require\n      const { LOG_DEBUG } = require('solclient-log');\n      LOG_DEBUG('Factory properties:\\n', factoryProps);\n    }\n    return this;\n  },\n\n  /**\n   * @private\n   */\n  reset() {\n    factoryState.initializeCount = 0;\n  },\n\n\n  /**\n   * @returns {Number} Count of factory initializations.\n   *    Nonzero means cannot be initialized again.\n   * @internal\n   */\n  _getInitializeCount() {\n    return factoryState.initializeCount;\n  },\n\n  /**\n   * @private\n   * @name solace.SolclientFactory.profiles\n   * @type {solace.SolclientFactoryProfiles}\n   * @readonly\n   * @description The collection of {@link solace.FactoryProfile}. See a description of\n   * each in {@link solace.SolclientFactoryProfiles}.\n   */\n  get profiles() {\n    return SolclientFactoryProfiles;\n  },\n};\n\nmodule.exports.SolclientFactory = SolclientFactory;\n","const { DestinationFromNetwork, DestinationType, Queue } = require('solclient-destination');\nconst { LOG_DEBUG, LOG_INFO } = require('solclient-log');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { Topic } = require('solclient-destination');\n\nconst ParseDestination = {};\nParseDestination.parseDestination = function parseDestination(dataBuf, pos, len) {\n  const destType = dataBuf.readUInt8(pos);\n  const destBytes = dataBuf.toString('latin1', pos + 1, pos + len);\n  // first try to create a destination from the string, this handles strings with\n  // the preamble ('#P2P/QUE' or '#P2P/TQUE').\n  let destination = DestinationFromNetwork.createDestinationFromBytes(destBytes);\n  if (SDTDestType[destination.type] !== destType) {\n    // SDT destination type does not match the string format. This means either:\n    //    * that the string contains a queue preamble and the type is topic,\n    //      so just make it a topic\n    //    * that the type is queue and the string does not have the preamble, which means we\n    //      should construct a queue.\n    if (SDTDestType[DestinationType.QUEUE] === destType) {\n      destination = Queue.createFromLocalName(destBytes); //createFromLocal has issue with buffer\n    } else if (SDTDestType[DestinationType.TOPIC] === destType) {\n      LOG_DEBUG(`Found and allowed SDT field with  destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      //\n      // override the format and set destType as specified in the SMF (i.e. TOPIC)\n      destination = new Topic(destBytes);\n    } else {\n      LOG_INFO(`Drop SDT field with invalid destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      return null;\n    }\n  }\n  return SDTField.create(SDTFieldType.DESTINATION, destination);\n};\n\nmodule.exports.ParseDestination = ParseDestination;\n","module.exports = require(\"https\");","const SDTFieldLib = require('./sdt-field');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) stream container. A stream is an iterable collection of\n * {@link solace.SDTField}s.\n * @memberof solace\n */\nclass SDTStreamContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._stream = [];\n    this._writable = true;\n    this._readPt = 0;\n  }\n\n  /**\n   * Returns true if the stream has at least one more {@link solace.SDTField}\n   * at the current position.\n   * @returns {Boolean} true, if there is an available field at the read pointer; false, otherwise.\n   */\n  hasNext() {\n    return (this._stream.length > this._readPt);\n  }\n\n  /**\n   * Returns the next field in the stream and advances the read pointer.\n   * If the end of the stream is reached, it returns undefined.\n   * @returns {solace.SDTField} The next field in the stream.\n   */\n  getNext() {\n    return (this._readPt < this._stream.length) ? this._stream[this._readPt++] : undefined;\n  }\n\n  /**\n   * Rewinds the read pointer to the beginning of the stream. Normally when {@link hasNext}\n   * returns false, a client application must call rewind() to reiterate over the stream's fields.\n   * @throws {@link solace.OperationError} if the stream cannot be rewound.\n   */\n  rewind() {\n    this._readPt = 0;\n  }\n\n  /**\n   * Appends a SDTField to the stream.\n   * <p>\n   * If <code>field</code> is a {@link solace.SDTField}, this field is appended to the stream.\n   * <br>\n   * If <code>field</code> is a {@link solace.SDTFieldType},\n   * then the API will create a SDTField of this\n   * type with a value of <code>optValue</code> and append this new SDTField to\n   * the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} field The field to append to the stream.\n   * @param {*} [optValue] The value to wrap as an SDTField.\n   */\n  /**\n   * Appends a field to this stream.\n   * <p>\n   * @deprecated If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is appended to the stream.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> and append this new SDTField\n   * to the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {@link solace.OperationError} if value does not match type\n   * @throws {@link solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(typeOrField, value = undefined) {\n    if (!this._writable) return;\n\n    if (typeOrField instanceof SDTFieldLib.SDTField) {\n      this._stream.push(typeOrField);\n      return;\n    }\n\n    if (typeof value !== 'undefined') {\n      this._stream.push(SDTFieldLib.SDTField.create(typeOrField, value));\n      return;\n    }\n\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\n","const { Stats } = require('./lib/stats.js');\nconst { StatsByMode } = require('./lib/stat-bymode');\nconst { StatType } = require('./lib/stat-types');\n\nmodule.exports = {\n  Stats,\n  StatType,\n  StatsByMode,\n};\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown when calling an API that has not been implemented.\n * @hideconstructor\n * @extends {solace.SolaceError}\n *\n * @memberof solace\n */\nclass NotImplementedError extends SolaceError {\n  /*\n   * Creates an instance of NotImplementedError.\n   * @param {any} message The message to include in the error.\n   * @memberof NotImplementedError\n   */\n  constructor(message) {\n    super('NotImplementedError', message || '', NotImplementedError);\n  }\n  /**\n   * The name of the error.\n   * @name solace.NotImplementedError#name\n   * @type {String}\n   * @readonly\n   * @description 'NotImplementedError'\n   */\n}\n\nmodule.exports.NotImplementedError = NotImplementedError;\n\n","let assert;\n\n/**\n * Browsers and Node share a common console.assert interface, console.assert(assertion, ...);\n * In Node, console.assert throws AssertionError if its assertion is falsy.\n * In browsers, they print to the console.\n * Extend browser behaviour to also throw.\n */\n\nif (BUILD_ENV.MODE_DEBUG) {\n  let internalAssert;\n  if (BUILD_ENV.TARGET_NODE) {\n    // _eslint-disable-next-line no-console\n    internalAssert = console.assert;\n  } else {\n    internalAssert = function browserAssert(assertion, ...args) {\n      if (!assertion) {\n        throw new Error(`Assertion error: ${typeof assertion} ${assertion} (${args.join(' ')})`);\n      }\n    };\n  }\n  // Now, wrap the assert in a catch and rethrow to give us a single place\n  // to set assert breakpoints.\n  assert = function outerAssert(...args) {\n    // eslint-disable-next-line no-useless-catch\n    try {\n      internalAssert(...args);\n    } catch (e) {\n      // if (BUILD_ENV.MODE_DEBUG) debugger;\n      throw (e);\n    }\n  };\n} else {\n  // In production mode, asserts are generally disabled.\n  assert = () => {};\n}\n\nmodule.exports.assert = assert;\n","const { Parameter } = require('solclient-validate');\nconst { Convert } = require('solclient-convert');\nconst { TraceContextSetter } = require('./message-trace-context-setter');\n\nconst {\n    isBoolean,\n    isStringOrNothing,\n} = Parameter;\n\nconst {\n    stringToUint8Array,\n    hexStringToUint8Array,\n} = Convert;\n\n/**\n * @classdesc\n * <b>This class abstracts readonly view on a metadata used for \n * distributed message tracing with Solace messaging APIs\n * types. This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\nclass TraceContext {\n\n    /**\n     * Abstract constructor for readonly view on metadata used \n     * for distributed message tracing.\n     * \n     * @param {TraceContextSetter} traceContextSetter {TraceContextSetter}\n     * \n     * @constructor\n     * @hideconstructor\n     * @private\n     */\n    constructor(traceContextSetter) {\n        this._traceId = isStringOrNothing('traceId', traceContextSetter.traceId);\n        this._spanId = isStringOrNothing('spanId', traceContextSetter.spanId);\n        this._isSampled = isBoolean('isSampled', traceContextSetter.isSampled);\n        this._traceState = traceContextSetter.traceState;\n        this._version = traceContextSetter.version;\n    }\n\n    /**\n     * Clone the a TraceContext object used \n     * for distributed message tracing.\n     * \n     * @param {TraceContext} toClone {TraceContext}\n     * @returns {TraceContext} the newly cloned TraceContext instance\n     */\n    static clone(toClone) {\n        const newContextSetter = new TraceContextSetter();\n        newContextSetter._setSpanId(toClone.getSpanId());\n        newContextSetter._setTraceId(toClone.getTraceId());\n        newContextSetter._setSampled(toClone.getIsSampled());\n        newContextSetter._setTraceState(toClone.getTraceState());\n        newContextSetter._setVersion(toClone.getVersion());\n        return new TraceContext(newContextSetter);\n    }\n\n    /**\n     * The version which for now is 1.\n    */\n    get version() {\n        return this._version || 0x01; // version=0001 (4 bits, version=1);\n    }\n    /**\n     * Gets the version associated with the message trace.\n     * \n     * @returns {Number} The version encoded as Hex value\n     */\n    getVersion() {\n        return this.version;\n    }\n\n    /**\n     * The maximum allowed string size of trace state to propagate.\n     * \n     * Refer: https://www.w3.org/TR/trace-context/#tracestate-limits\n    */\n    get MAX_TRACE_STATE_LENGTH() {\n        return 512;\n    }\n \n    /**\n     * The tranceId property as a 16-length string\n    */\n    get traceId() {\n        return this._traceId;\n    }\n    /**\n     * Gets the value of the trace identifier associated with the message.\n     * \n     * @returns {String} value of trace identifier associated with the message as\n     * 16-length string.\n     */\n    getTraceId() {\n        return this._traceId;\n    }\n \n    /**\n     * The spanId property a 8-length string\n    */\n    get spanId() {\n        return this._spanId;\n    }\n    /**\n     * Gets the value of the span identifier associated with the message.\n     * \n     * @returns {String} value of span identifier associated with the message as\n     * 8-length string.\n     */\n    getSpanId() {\n        return this._spanId;\n    }\n\n    /**\n     * The isSampled boolean property\n    */\n    get isSampled() {\n        return this._isSampled;\n    }\n    /**\n     * Returns true if the sampling for the associated message is on,\n     * otherwise false.\n     * \n     * @returns {Boolean} indicates whether the sampling is on or off\n     */\n    getIsSampled() {\n        return this._isSampled || false;\n    }\n\n    /**\n     * The traceState property\n    */\n    get traceState() {\n        return this._traceState;\n    }\n    /**\n     * Gets the value of the trace state associated with the message.\n     * \n     * @returns {?String} The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    getTraceState() {\n        return this._traceState || null;\n    }\n    /**\n     * Gets the value of the trace state associated with the message.\n     * \n     * @returns {?String} The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    getTruncatedTraceState() {\n        return this._standardTraceStateTruncation(this.MAX_TRACE_STATE_LENGTH);\n    }\n\n\n    /**\n     * It returns the encoded bytes that is \n     * passed to the SMF header to be encoded in \n     * SMF for the message.\n     * \n     * @returns {?Uint8Array} The value of encoded trace span context\n     */\n    getEncodedTraceContext() {\n        // format the string payload \n        // and return the correct format as a byte array or null\n        if (this.traceId == null || this.spanId == null) {\n            return null;\n        }\n\n        const traceStateLength = this.traceState == null ? 0 : this.traceState.length;\n\n        // the fixed part of the encoded data is at least 32 bytes\n        const contentBuffer = new ArrayBuffer(32 + traceStateLength);\n        let offsetPos = 0; // start from the beginning of the buffer\n        const contentBufferDataView = new DataView(contentBuffer);\n\n        let byte1 = 0; // headerByte: version 4 bits, sampled 2 bits and RFU=0 2 bits\n        // set the version to the four MSB\n        byte1 |= (this.version << 4); // version=0001 (4 bits, version=1)\n        byte1 |= this.isSampled ? 0x04 : 0x00; //sampled=0100 (2 bits, sampled=1 and 2 bits RFU=0)\n\n        // write the 1 byte header\n        contentBufferDataView.setUint8(offsetPos, byte1, false);\n        offsetPos ++; // move pointer to next free position\n\n        // write the first 16 bytes traceId\n        const traceId16byte = hexStringToUint8Array(this.traceId); // get the 8 byte array\n        for(let i = 0; i < 16; i ++) { // write the first 16 bytes\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint8(offsetPos + i, traceId16byte[i], false); // write the bytes\n        }\n        offsetPos += 16; // move pointer to next free position (plus 16 bytes)\n\n        // write the first 8 bytes spanId\n        const spanId8byte = hexStringToUint8Array(this.spanId) // get the 8 byte array\n        for(let i = 0; i < 8; i ++) { // write the first 8 bytes\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint8(offsetPos + i, spanId8byte[i], false); // write the bytes\n        }\n        offsetPos += 8; // move pointer to next free position (plus 8 bytes)\n\n        // write 1 byte InjectionStandard=1 (W3C)\n        contentBufferDataView.setUint8(offsetPos, 0x01, false);\n        offsetPos ++; // move pointer to next free position\n\n        // write 4 bytes RFU=0\n        // use BigEndian; litteEndian = false\n        contentBufferDataView.setUint16(offsetPos, 0, false); // write first two RFU bytes of zeros\n        contentBufferDataView.setUint16(offsetPos + 2, 0, false); // write last two RFU bytes of zeros\n        offsetPos += 4; // move pointer to next free position\n\n\t    if (this.traceState == null) {\n            // write 2 bytes TraceState length\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint16(offsetPos, 0, false); // write two bytes of zeros\n            offsetPos += 2; // move pointer to next free position\n\t    } else {\n\t      // If required, apply truncation logic on traceState\n\t      const truncatedTraceState = this.getTruncatedTraceState();\n\t      if (truncatedTraceState != null) {\n            // write 2 bytes TraceState length\n            const traceStateLength = truncatedTraceState.length;\n            // convert to two bytes\n            const traceStateLengthBytes = new Uint16Array([traceStateLength]); // get 2 bytes of length\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint16(offsetPos, traceStateLengthBytes, false);\n            offsetPos += 2; // move pointer to next free position\n\n            // set the remaining trace state bytes\n            const traceStateBytes = stringToUint8Array(truncatedTraceState);\n            for(let i = 0; i < traceStateBytes.length; i ++) {\n                // use BigEndian; litteEndian = false\n                contentBufferDataView.setUint8(offsetPos + i, traceStateBytes[i], false); // write the bytes\n            }\n            offsetPos += traceStateBytes.length;\n\t      }\n\t    }\n\n        // get the 8-byte array\n\t    return new Uint8Array(contentBuffer);\n    }\n\n    /**\n     * Truncate long trace states properly\n     * \n     * Refer: https://www.w3.org/TR/trace-context/#tracestate-limits\n     * @private\n     * @param {Number} maxTraceStateLength the maximum length for the trace state\n     * @returns {?String} The truncated trace state\n     */\n    _standardTraceStateTruncation(maxTraceStateLength) {\n        // cover corner cases\n\t    if (!this._traceState || this._traceState == null) {\n\t      return null;\n\t    } else if (this._traceState.length < maxTraceStateLength) {\n\t      return this._traceState; // no need to truncate\n\t    }\n\t\n        const ignoredMembers = new Array();\n\t    const traceStateBuilderArray = new Array();\n        let traceStateBuilderArrayLength = 0;\n\t    const listMembers = this._traceState.split(',');\n\n\t    for (let i = 0; i < listMembers.length; i++) {\n            let listMember = listMembers[i]; // current iteration object\n            if (listMember !== '' && listMember != null) {\n                let currentMemberLength = listMember.length;\n                if (currentMemberLength > 128) {\n                    // first of all, let's ignore members with length > 128 char\n                    ignoredMembers.push(listMember);\n                } else {\n                    let newExpectedLength = (traceStateBuilderArrayLength + currentMemberLength + (\n                        traceStateBuilderArrayLength > 0 ? 1 : 0));\n\n                    if (newExpectedLength <= maxTraceStateLength) {\n                        // the comma seperator is added at the end when building the string\n                        traceStateBuilderArray.push(listMember);\n                        // increment by length of added member + 1 (for the comma)\n                        traceStateBuilderArrayLength += (currentMemberLength + (\n                            traceStateBuilderArrayLength > 0 ? 1 : 0));\n                    } else {\n                        ignoredMembers.push(listMember);\n                    }\n                }\n            }\n\t    }\n\t\n\t    // See if we can add the ignored members now\n\t    for (let i = 0; i < ignoredMembers.length; i++) {\n            let currentMember = ignoredMembers[i];\n            let currentMemberLength = currentMember.length;\n\n            let newExpectedLength = (traceStateBuilderArrayLength + currentMemberLength + (\n                traceStateBuilderArrayLength > 0 ? 1 : 0));\n            if (newExpectedLength <= maxTraceStateLength) {\n                // the comma seperator is added at the end when building the string\n                traceStateBuilderArray.push(currentMember);\n                // increment by length of added member + 1 (for the comma)\n                traceStateBuilderArrayLength += (currentMemberLength + (\n                    traceStateBuilderArrayLength > 0 ? 1 : 0));\n            }\n\t    }\n\t\n        // build the string with comma seperating the members\n\t    return traceStateBuilderArray.join(',');\n\t}\n\n    /**\n     * Returns the string representation of this object\n     * \n     * @override\n     */\n    toString() {\n        return \"{traceId=\" + this.getTraceId()\n            + \", spanId=\" + this.getSpanId()\n            + \", sampled=\" + this.isSampled\n            + \", traceState=\" + ((this.traceState == null) ? \"}\" : \"'\" + this.traceState + \"'}\");\n    }\n}\n\nmodule.exports.TraceContext = TraceContext;\n","'use strict';\n\nconst { isUtf8 } = require('buffer');\n\nconst { hasBlob } = require('./constants');\n\n//\n// Allowed token characters:\n//\n// '!', '#', '$', '%', '&', ''', '*', '+', '-',\n// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'\n//\n// tokenChars[32] === 0 // ' '\n// tokenChars[33] === 1 // '!'\n// tokenChars[34] === 0 // '\"'\n// ...\n//\n// prettier-ignore\nconst tokenChars = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31\n  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127\n];\n\n/**\n * Checks if a status code is allowed in a close frame.\n *\n * @param {Number} code The status code\n * @return {Boolean} `true` if the status code is valid, else `false`\n * @public\n */\nfunction isValidStatusCode(code) {\n  return (\n    (code >= 1000 &&\n      code <= 1014 &&\n      code !== 1004 &&\n      code !== 1005 &&\n      code !== 1006) ||\n    (code >= 3000 && code <= 4999)\n  );\n}\n\n/**\n * Checks if a given buffer contains only correct UTF-8.\n * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by\n * Markus Kuhn.\n *\n * @param {Buffer} buf The buffer to check\n * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`\n * @public\n */\nfunction _isValidUTF8(buf) {\n  const len = buf.length;\n  let i = 0;\n\n  while (i < len) {\n    if ((buf[i] & 0x80) === 0) {\n      // 0xxxxxxx\n      i++;\n    } else if ((buf[i] & 0xe0) === 0xc0) {\n      // 110xxxxx 10xxxxxx\n      if (\n        i + 1 === len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i] & 0xfe) === 0xc0 // Overlong\n      ) {\n        return false;\n      }\n\n      i += 2;\n    } else if ((buf[i] & 0xf0) === 0xe0) {\n      // 1110xxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 2 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80) || // Overlong\n        (buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0) // Surrogate (U+D800 - U+DFFF)\n      ) {\n        return false;\n      }\n\n      i += 3;\n    } else if ((buf[i] & 0xf8) === 0xf0) {\n      // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 3 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i + 3] & 0xc0) !== 0x80 ||\n        (buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80) || // Overlong\n        (buf[i] === 0xf4 && buf[i + 1] > 0x8f) ||\n        buf[i] > 0xf4 // > U+10FFFF\n      ) {\n        return false;\n      }\n\n      i += 4;\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Determines whether a value is a `Blob`.\n *\n * @param {*} value The value to be tested\n * @return {Boolean} `true` if `value` is a `Blob`, else `false`\n * @private\n */\nfunction isBlob(value) {\n  return (\n    hasBlob &&\n    typeof value === 'object' &&\n    typeof value.arrayBuffer === 'function' &&\n    typeof value.type === 'string' &&\n    typeof value.stream === 'function' &&\n    (value[Symbol.toStringTag] === 'Blob' ||\n      value[Symbol.toStringTag] === 'File')\n  );\n}\n\nmodule.exports = {\n  isBlob,\n  isValidStatusCode,\n  isValidUTF8: _isValidUTF8,\n  tokenChars\n};\n\nif (isUtf8) {\n  module.exports.isValidUTF8 = function (buf) {\n    return buf.length < 24 ? _isValidUTF8(buf) : isUtf8(buf);\n  };\n} /* istanbul ignore else  */ else if (!process.env.WS_NO_UTF_8_VALIDATE) {\n  try {\n    const isValidUTF8 = require('utf-8-validate');\n\n    module.exports.isValidUTF8 = function (buf) {\n      return buf.length < 32 ? _isValidUTF8(buf) : isValidUTF8(buf);\n    };\n  } catch (e) {\n    // Continue regardless of the error.\n  }\n}\n","const { MessagePublisher } = require('./lib/message-publisher');\nconst { MessagePublisherAcknowledgeMode } = require('./lib/message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./lib/message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./lib/message-publisher-properties');\nconst { MessagePublisherPropertiesValidator } = require('./lib/message-publisher-properties-validator');\nconst { PublisherFSMEvent } = require('./lib/publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./lib/publisher-fsm-event-names');\n\nmodule.exports.MessagePublisherAcknowledgeMode = MessagePublisherAcknowledgeMode;\nmodule.exports.MessagePublisher = MessagePublisher;\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\nmodule.exports.PublisherFSMEventNames = PublisherFSMEventNames;\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an entryPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the entryPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @extends FsmObject\n * @private\n */\nclass EntryPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the entryPoint belongs\n  *      to.\n  * @param {String} spec.entryPointName The name of the entryPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the entryPoint, which defines where to transition to\n  *      after state has been entered.\n  */\n  constructor(spec) {\n    super({ name: spec.entryPointName });\n\n    let innerState;\n    this.impl = this.impl || {};\n    // The outer portion of the entryPoint accepts incoming transitions before\n    // entering the entryPoint's state.  Then the entryPoint's state is\n    // entered through the use of the outerEntryPoint's initial transition.\n    this.impl.outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(() => spec.state.transitionTo(innerState));\n\n    // The job of the inner portion of the entryPoint is to follow a\n    // transition as specified by the application's reaction function.\n    innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state,\n    }).initial(spec.func);\n  }\n\n  /**\n   * @returns {fsm.State} The destination state for a transition to the\n   *      EntryPoint.\n   */\n  getDestState() {\n    return this.impl.outerState;\n  }\n}\n\nmodule.exports.EntryPoint = EntryPoint;\n","'use strict';\n\nconst { tokenChars } = require('./validation');\n\n/**\n * Adds an offer to the map of extension offers or a parameter to the map of\n * parameters.\n *\n * @param {Object} dest The map of extension offers or parameters\n * @param {String} name The extension or parameter name\n * @param {(Object|Boolean|String)} elem The extension parameters or the\n *     parameter value\n * @private\n */\nfunction push(dest, name, elem) {\n  if (dest[name] === undefined) dest[name] = [elem];\n  else dest[name].push(elem);\n}\n\n/**\n * Parses the `Sec-WebSocket-Extensions` header into an object.\n *\n * @param {String} header The field value of the header\n * @return {Object} The parsed object\n * @public\n */\nfunction parse(header) {\n  const offers = Object.create(null);\n  let params = Object.create(null);\n  let mustUnescape = false;\n  let isEscaping = false;\n  let inQuotes = false;\n  let extensionName;\n  let paramName;\n  let start = -1;\n  let code = -1;\n  let end = -1;\n  let i = 0;\n\n  for (; i < header.length; i++) {\n    code = header.charCodeAt(i);\n\n    if (extensionName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (\n        i !== 0 &&\n        (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\n      ) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        const name = header.slice(start, end);\n        if (code === 0x2c) {\n          push(offers, name, params);\n          params = Object.create(null);\n        } else {\n          extensionName = name;\n        }\n\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else if (paramName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (code === 0x20 || code === 0x09) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        push(params, header.slice(start, end), true);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        start = end = -1;\n      } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {\n        paramName = header.slice(start, i);\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else {\n      //\n      // The value of a quoted-string after unescaping must conform to the\n      // token ABNF, so only token characters are valid.\n      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1\n      //\n      if (isEscaping) {\n        if (tokenChars[code] !== 1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n        if (start === -1) start = i;\n        else if (!mustUnescape) mustUnescape = true;\n        isEscaping = false;\n      } else if (inQuotes) {\n        if (tokenChars[code] === 1) {\n          if (start === -1) start = i;\n        } else if (code === 0x22 /* '\"' */ && start !== -1) {\n          inQuotes = false;\n          end = i;\n        } else if (code === 0x5c /* '\\' */) {\n          isEscaping = true;\n        } else {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\n        inQuotes = true;\n      } else if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {\n        if (end === -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        let value = header.slice(start, end);\n        if (mustUnescape) {\n          value = value.replace(/\\\\/g, '');\n          mustUnescape = false;\n        }\n        push(params, paramName, value);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        paramName = undefined;\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    }\n  }\n\n  if (start === -1 || inQuotes || code === 0x20 || code === 0x09) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  if (end === -1) end = i;\n  const token = header.slice(start, end);\n  if (extensionName === undefined) {\n    push(offers, token, params);\n  } else {\n    if (paramName === undefined) {\n      push(params, token, true);\n    } else if (mustUnescape) {\n      push(params, paramName, token.replace(/\\\\/g, ''));\n    } else {\n      push(params, paramName, token);\n    }\n    push(offers, extensionName, params);\n  }\n\n  return offers;\n}\n\n/**\n * Builds the `Sec-WebSocket-Extensions` header field value.\n *\n * @param {Object} extensions The map of extensions and parameters to format\n * @return {String} A string representing the given object\n * @public\n */\nfunction format(extensions) {\n  return Object.keys(extensions)\n    .map((extension) => {\n      let configurations = extensions[extension];\n      if (!Array.isArray(configurations)) configurations = [configurations];\n      return configurations\n        .map((params) => {\n          return [extension]\n            .concat(\n              Object.keys(params).map((k) => {\n                let values = params[k];\n                if (!Array.isArray(values)) values = [values];\n                return values\n                  .map((v) => (v === true ? k : `${k}=${v}`))\n                  .join('; ');\n              })\n            )\n            .join('; ');\n        })\n        .join(', ');\n    })\n    .join(', ');\n}\n\nmodule.exports = { format, parse };\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { BaseSMFClient } = require('./base-smf-client');\nconst { BufferQueue } = require('./buffer-queue');\nconst { Convert, Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\n\nconst BufferImpl = require('buffer').Buffer;\n\nconst { stringToUint8Array } = Convert;\nconst { formatHexString } = Hex;\n\nconst SMF_LOST_FRAMING_THRESHOLD = 80000000;\n\nconst { LOG_ERROR } = new LogFormatter('[buffer-smf-client]');\n\nfunction logPeekBuffer(buffer) {\n  const bufPair = buffer.peekView(Math.min(buffer.remaining(), 64));\n  LOG_ERROR(`First 64 bytes (or fewer) of incoming buffer: \\n${\n    DebugLib.Debug.formatDumpBytes(bufPair[0].toString('latin1', bufPair[1]), true, 0)}`);\n}\n\n/**\n * Interact with underlying transport to send and receive SMF messages\n * @private\n */\nclass BufferSMFClient extends BaseSMFClient {\n\n  /**\n   * @constructor\n   * @param {Function} rxSmfCB The callback to notify on SMF binary data received\n   * @param {Function} rxMessageErrorCB The callback to notify on message errors\n   * @param {Session} session The session owning this client\n   */\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    super(rxSmfCB, rxMessageErrorCB, session);\n    this._incomingBuffer = new BufferQueue(SMF_LOST_FRAMING_THRESHOLD);\n  }\n\n  reset() {\n    super.reset();\n    // Called from super constructor, so guard this\n    if (this._incomingBuffer) this._incomingBuffer.reset();\n  }\n\n  /**\n   * @param {String} data Incoming data as binary string\n   */\n  rxDataString(data) {\n    this._rxDataCB(BufferImpl.from(stringToUint8Array(data)));\n  }\n\n  /**\n   * @param {ArrayBuffer} data Incoming data\n   */\n  rxDataArrayBuffer(data) {\n    this._rxDataCB(BufferImpl.from(data));\n  }\n\n  /**\n   * @param {Buffer} data Incoming data\n   */\n  rxDataBuffer(data) {\n    this._rxDataCB(data);\n  }\n\n  /**\n   * Invoked by transport session. Handles multiple SMF messages in input, as well as defragmenting\n   * partial SMF messages. The state we keep is in this._incomingBuffer.\n   * @param {Buffer} data The binary data to decode\n   */\n  _rxDataCB(data) {\n    if (this._session) {\n      // each incoming data chunk resets KA counter\n      this._session.resetKeepAliveCounter();\n    }\n    const buffer = this._incomingBuffer;\n    const putSuccess = buffer.put(data);\n    let remaining = buffer.remaining();\n\n    if (!putSuccess) {\n      // 80 megabytes - lost SMF framing: may never complete\n      logPeekBuffer(buffer);\n      this._rxMessageErrorCB(`Buffer overflow (length: ${remaining})`);\n      this._incomingBuffer.reset();\n    }\n\n    while (remaining > 12) {\n      const version = buffer.readUInt8(0) & 0x7;\n      if (version !== 3) {\n        LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n        // Throw away the buffer and bail out\n        LOG_ERROR(\"BufferSMFClient._rxDataCB(): couldn't decode message due to invalid smf header\");\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF - invalid SMF header detected');\n        return;\n      }\n\n      const messageLen = buffer.readUInt32BE(8);\n      if (messageLen > buffer.remaining()) {\n        break; // no full message\n      }\n      const msgBuffer = buffer.peekView(messageLen);\n\n      //const binaryString = messageBuffer.toString('binary');\n      const incomingMsg = SMFLib.Codec.Decode.decodeCompoundMessage(msgBuffer[0], msgBuffer[1]);\n      if (incomingMsg && incomingMsg.smfHeader) {\n        buffer.advance(incomingMsg.smfHeader.messageLength);\n        this._rxSmfCB(incomingMsg); // hand over to core API callback\n      } else {\n        // couldn't decode! Lost SMF framing.\n        // throw away the buffer and bail out\n        const sessionId = this._session ? this._session._sessionId : null;\n        const sessionIdHex = sessionId ? formatHexString(sessionId) : 'N/A';\n        LOG_ERROR(`BufferSMFClient._rxDataCB(): couldn't decode message (sessionId=${sessionIdHex})`);\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF');\n        return;\n      }\n      remaining = buffer.remaining();\n    }\n\n    if (remaining) {\n      // We have a partial header, or a valid header and a partial message.\n      // partial message remaining: keep it in incoming buffer\n    } else {\n      // clear incoming buffer\n      this._incomingBuffer.reset();\n    }\n  }\n}\n\nmodule.exports.BufferSMFClient = BufferSMFClient;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication scheme enumeration.\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst MessagePublisherAcknowledgeMode = {\n  /**\n   * @description Applications receive an acknowledgement for every\n   * message.\n   * @type {String}\n   */\n  PER_MESSAGE: 'PER_MESSAGE',\n  /**\n   * @description Applications receive a windowed acknowledgement that\n   * acknowledges the returned correlation identifier and every message sent prior.\n   * @type {String}\n   */\n  WINDOWED:    'WINDOWED',\n};\n\nmodule.exports.MessagePublisherAcknowledgeMode = Enum.new(MessagePublisherAcknowledgeMode);\n","const NodeEventEmitter = require('events').EventEmitter;\nconst { ArrayUtils } = require('solclient-util');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN } = require('solclient-log');\n\nconst { flatten, includes } = ArrayUtils;\nconst NODE_DEFAULT_EVENTS = ['error', 'newListener', 'removeListener'];\nconst BLACKLIST_DIRECT = ['newListener', 'removeListener'];\n\nfunction buildFilter(emits) {\n  if (typeof emits === 'function') return k => includes(NODE_DEFAULT_EVENTS, k) || emits(k);\n  if (!Array.isArray(emits)) return null;\n  const emitSet = new Set(flatten(emits));\n  NODE_DEFAULT_EVENTS.forEach(el => emitSet.add(el));\n  const emitArray = Array.from(emitSet);\n  return k => includes(emitArray, k);\n}\n\nconst DISABLED_ACTIONS = {\n  ignore() {},\n  fail() {\n    throw new Error('Emitter disabled');\n  },\n};\n\nclass EventEmitter extends NodeEventEmitter {\n  /**\n   * Creates an instance of EventEmitter.\n   *\n   * An EventEmitter is an object that periodically emits events that cause function objects, known\n   * as listeners, to be called. It exposes functions to attach passed functions to named events.\n   *\n   * Typically, event names are camel-cased strings, but any valid JavaScript property key can be\n   * used.\n   *\n   * @param {?Object} options Options for the emitter\n   * @param {String} [options.direct] An event that is to be directly dispatched when possible.\n   *  Direct dispatch is a performance optimization that minimizes EventEmitter overhead. Direct\n   *  dispatch skips the safe error handling path; use _formatErrorEvent if required.\n   * @param {Array.<string>} [options.emits] Valid event names. If specified, listeners for other\n   *  events are rejected. Array can be nested, e.g. `['foo', ['bar1', 'bar2']]`\n   * @param {Boolean} [options.unsafe] Determines whether dispatch is less exception-safe.\n   *  * When `false`, if an event listener throws an error, the error is thrown all the way back\n   *    to the emitting stack frame. This makes it the emitter's responsibility to catch exceptions\n   *    in listeners. This avoids a try-catch frame and may be more performant.\n   *  * When `true`, if an event listener throws an error, and an `error` listener exists, the\n   *    exception is dispatched to that listener wrapped in an {@link solace.OperationError},\n   *    `subcode={@link solace.ErrorSubcode.CALLBACK_ERROR}`. The originating event and the error\n   *    thrown by the listener are available on `event` and `error` fields respectively.\n   *\n   *  In all cases, throwing an exception in a listener prevents the event being received by\n   *  later listeners.\n   *\n   *  This option does not affect any event selected for `options.direct`, which always uses\n   *  unsafe dispatch.\n   *\n   * @memberof solace\n   * @extends {EventEmitter}\n   * @private\n   */\n  constructor(options) {\n    super();\n    const { direct, emits, unsafe, formatEventName } = options || {};\n    this.formatEventName = formatEventName || (name => name);\n\n    // Direct mode path:\n    //  emit --> (direct emit || bareEmit).\n    const bareEmit = this.emit.bind(this);\n    this._installDirectFilter(direct, bareEmit);\n\n    // Indirect mode path:\n    //  verifier -> error handlers -> emit --> bareEmit\n    this._installErrorHandlers(unsafe);\n    this._installEmitVerifier();\n\n    this._listenerVerificationFilter = buildFilter(emits);\n    this._emits = emits;\n  }\n\n  _installDirectFilter(direct, bareEmit) {\n    if (!direct) return;\n      // Direct mode class instance modifications\n\n    if (includes(BLACKLIST_DIRECT, direct)) {\n      throw new OperationError(\n        `Cannot configure listener collection events [${BLACKLIST_DIRECT.join(', ')}] as direct`,\n        ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    // The default direct emitter is the base emitter. Skip any overrides we installed.\n    this._defaultEmitDirect = (...args) => bareEmit(direct, ...args);\n\n    // Initally not direct for 0 listeners\n    this.emitDirect = this._defaultEmitDirect;\n    this._directEventName = direct;\n\n    this.on = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.on(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.addListener = (eventName, listener) => this.on(eventName, listener);\n\n    this.once = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.once(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.prependListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependListener(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.prependOnceListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependOnceListener(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.removeAllListeners = (eventName) => {\n      const ret = super.removeAllListeners(eventName);\n      if ((eventName === this._directEventName) || (eventName === undefined)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.removeListener = (eventName, listener) => {\n      const ret = super.removeListener(eventName, listener);\n      if ((eventName === this._directEventName) && (this.listenerCount(eventName) === 0)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.directListenerCount = () => this.listenerCount(this._directEventName);\n\n    this.setOnFirstDirectListener = (firstDirect) => {\n      this._onFirstDirectListener = firstDirect;\n    };\n  }\n\n  _setEmitDirect(eventName, onListener, listener) {\n    if (eventName !== this._directEventName) {\n      return;\n    }\n\n    if (onListener && (this.directListenerCount() === 1)) {\n      this.emitDirect = listener;\n    } else {\n      this.emitDirect = this._defaultEmitDirect;\n    }\n\n    if ((this.directListenerCount() === 1) && (this._onFirstDirectListener !== undefined)) {\n      this._onFirstDirectListener();\n    }\n  }\n\n  _verifyListenerEvent(event) {\n    if (!this._listenerVerificationFilter) return;\n\n    if (event === undefined || event === null) {\n      this.throwInternal(\n          new OperationError(`Emitter rejects listener for no-name event: ${event}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n    if (!this._listenerVerificationFilter(event)) {\n      this.throwInternal(\n        new OperationError(`Emitter rejects listeners for ${event}, emits ${this._emits}`,\n                            ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n  }\n\n  _installEmitVerifier() {\n    if (BUILD_ENV.MODE_DEBUG) {\n      // Debug mode: always add assert for empty event name\n      const emitBase = this.emit.bind(this);\n      this.emit = (name, ...args) => {\n        if (name === undefined || name === null) {\n          this.throwInternal(new OperationError(`Emitter rejects no-name event: ${name}`));\n        }\n        emitBase(name, ...args);\n      };\n    }\n  }\n\n  _installErrorHandlers(unsafe) {\n    if (unsafe) {\n      // If unsafe, there's no try/catch/emit so throwInternal just throws\n      this.throwInternal = (err) => { throw err; };\n      return;\n    }\n\n    // Install try/catch/emit-as-event if not unsafe mode.\n    // Introduces throwInternal, which sets the _internalError flag restore\n    // orignal throw-to-emitter functionality in case of internal error\n\n    const emitBase = this.emit.bind(this);\n\n    this.throwInternal = function throwInternal(err) {\n      this._internalError = true;\n      throw err;\n    };\n\n    this.emit = (name, ...args) => {\n      try {\n        emitBase(name, ...args);\n      } catch (ex) {\n        if (this._internalError) {\n          this._internalError = undefined;\n          throw ex; // rethrow\n        }\n\n        const err = this.formatErrorEvent(ex, name, ...args);\n        try {\n          LOG_WARN(`Listener for '${err.info.event.formattedName}' threw exception, dispatching to 'error'`);\n          emitBase('error', err);\n        } catch (innerEx) {\n          LOG_WARN(\"Listener for 'error' threw exception:\", innerEx, '\\nOriginal exception:', ex);\n        }\n      }\n    };\n  }\n\n  get isDirect() {\n    return this.emitDirect && (this.emitDirect !== this._defaultEmitDirect);\n  }\n\n  formatErrorEvent(ex, name, ...args) {\n    const formattedName = this.formatEventName(name);\n    return Object.assign(new OperationError(\n      `Unhandled error in event handler for '${formattedName}'`,\n      ErrorSubcode.CALLBACK_ERROR,\n      `On event: ${[name, ...args]} ${ex}`\n    ), {\n      stack: ex.stack,\n      info:  {\n        event: { name, formattedName, args },\n        error: ex,\n      },\n    });\n  }\n\n  disableEmitter() {\n    this._defaultEmitDirect = DISABLED_ACTIONS.ignore;\n    // If this is a direct-enabled emitter, this will also cause emitDirect to be set to\n    // _defaultEmitDirect, which is now DISALBED_ACTIONS.ignore.\n    this.removeAllListeners();\n    this.emit = DISABLED_ACTIONS.ignore;\n    // Freeze listeners by first disabling remove, then add.\n    this.addListener('removeListener', DISABLED_ACTIONS.fail);\n    this.addListener('newListener', DISABLED_ACTIONS.fail);\n  }\n\n}\n\nmodule.exports.EventEmitter = EventEmitter;\n","const { OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * This is a base class for various FSM-related objects.\n * @private\n */\nclass FsmObject {\n\n  /**\n   * @constructor\n   * @param {Object} spec The object specifier used to implement the named\n   *      parameter idiom.\n   * @param {String} spec.name The name of the object.\n   */\n  constructor(spec) {\n    if (!spec) {\n      throw new OperationError('No spec provided');\n    }\n    if (!spec.name) {\n      throw new OperationError('No name provided for spec');\n    }\n    this.impl = {\n      name: spec.name,\n    };\n  }\n\n  /**\n   * @returns {String} A string representation of the object.\n   */\n  toString() {\n    let extraStringInfo = this.getExtraStringInfo();\n    if (extraStringInfo.length > 0) {\n      extraStringInfo = `; ${extraStringInfo}`;\n    }\n    return `{${this.constructor.name}: ${this.getName()}${extraStringInfo}}`;\n  }\n\n  /**\n   * This is overridden by classes wanting to add more data, typically in the\n   * form of 'name: value; name: value'.\n   * @returns {String} Extra string information to be included in the object's\n   *      toString() output.\n   */\n  getExtraStringInfo() { // eslint-disable-line class-methods-use-this\n    return '';\n  }\n\n  /**\n   * @returns {?String} The name passed into the object specifier.\n   */\n  getName() {\n    return this.impl.name;\n  }\n\n}\n\nmodule.exports.FsmObject = FsmObject;\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueDescriptor } = require('./queue-descriptor');\nconst { QueueType } = require('./queue-types');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valTopicString,\n} = APIPropertiesValidators;\n\n\nconst QueueDescriptorValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueDescriptor', instance);\n    if (instance instanceof QueueDescriptor) {\n      v('name', [valTopicString]);\n    } // else is abstract; don't check name\n    v('type', [valIsMember, QueueType, 'QueueType']);\n    v('durable', [valBoolean]);\n  },\n};\n\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Internal session state\n * @enum {string}\n * @memberof solace\n * @private\n */\nconst SessionStateName = {\n  DISCONNECTED:                     'SessionDisconnected',\n  CONNECTING:                       'SessionConnecting',\n  WAITING_FOR_TRANSPORT:            'WaitingForTransport',\n  WAITING_FOR_TRANSPORT_UP:         'WaitingForTransportUp',\n  WAITING_FOR_LOGIN:                'WaitingForLogin',\n  TRANSPORT_UP:                     'SessionTransportUp',\n  FULLY_CONNECTED:                  'SessionFullyConnected',\n  SESSION_ERROR:                    'SessionError',\n  DISCONNECTING:                    'SessionDisconnecting',\n  REAPPLYING_SUBSCRIPTIONS:         'ReapplyingSubscriptions',\n  WAITING_FOR_PUBFLOW:              'WaitingForMessagePublisher',\n  DISPOSED:                         'SessionDisposed',\n  WAITING_FOR_SUBCONFIRM:           'WaitForSubConfirm',\n  WAITING_FOR_CAN_ACCEPT_DATA:      'WaitForCanAcceptData',\n  DISCONNECTING_FLOWS:              'DisconnectingFlows',\n  FLUSHING_TRANSPORT:               'FlushingTransport',\n  DESTROYING_TRANSPORT:             'DestroyingTransport',\n  RECONNECTING:                     'Reconnecting',\n  TRANSPORT_FAIL:                   'TransportFail',\n  WAITING_FOR_INTERCONNECT_TIMEOUT: 'WaitingForInterconnectTimeout',\n  WAITING_FOR_DNS:                  'WaitingForDNS',\n  WAITING_FOR_TRANSPORT_CHANGE:     'WaitingForTransportChange',\n};\n\nmodule.exports.SessionStateName = Enum.new(SessionStateName);\n","\nconst { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent, State, StateMachine } = require('solclient-fsm');\nconst { LogFormatter } = require('solclient-log');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportState } = require('./web-transport-states');\n\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n} = new LogFormatter();\n\nclass WebTransportFSM extends StateMachine {\n  constructor(transportIn, getId) {\n    super({ name: 'WebTransportFSM' });\n    const transport = transportIn;\n    const fsm = this;\n    const logger = new LogFormatter();\n    logger.formatter = function logFormatter(...args) {\n      return [`[web-transport-fsm=${getId()}]`, ...args];\n    };\n    this.log = logger.wrap(this.log, this);\n    this.transport = transport;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(\n        this.WebTransportDown,\n        (context) => {\n          LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n        });\n    });\n\n    this.unhandledEventReaction(function onUnhandledEvent(wEvent) {\n      LOG_TRACE(`Ignoring event ${wEvent.getName()} in state ${this.getCurrentState().getName()}`);\n      return this;\n    });\n\n    this.WebTransportDown = new State({\n      name:          WebTransportState.DOWN,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.CONNECT, function onConnect(/* wEevent */) {\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n\n    this.WebTransportConnecting = new State({\n      name:          WebTransportState.CONNECTING,\n      parentContext: this,\n    })\n      .entry(() => {\n        try {\n          const rc = transport.connectInternal();\n          if (rc !== TransportReturnCode.OK) {\n            const connError = transport.getConnError();\n            const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n            wEvent._destroyMsg = connError ? connError.message : 'Error occurred while establishing transport';\n            wEvent._subcode = connError ? connError.subcode : null;\n            wEvent._eventReason = connError;\n            return this.processEvent(wEvent);\n          }\n        } catch (e) {\n          LOG_INFO(`transport.connectInternal threw: ${e.message}`);\n          const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n          wEvent._destroyMsg = e.message;\n          wEvent._subcode = e.subcode ? e.subcode : ErrorSubcode.CONNECTION_ERROR;\n          wEvent._eventReason = e;\n          return this.processEvent(wEvent);\n        }\n        return undefined;\n      })\n      // Transport destroy is async, so in downgrade cases we need an event to start the downgrade\n      // (and associated transport destroy) and one to complete it (DESTROYED_NOTICE).\n      // These two events trigger downgrade: SEND_ERROR on connection (protocol issue) and\n      // CONNECT_TIMEOUT (possible black hole proxy).\n      .reaction(WebTransportEvent.SEND_ERROR, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent); // Give the session a chance to intervene\n        return fsm.attemptDowngrade(wEvent._transportEvent);\n      })\n      .reaction(WebTransportEvent.CONNECT_TIMEOUT, e => fsm.attemptDowngrade(e._transportEvent))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.UP_NOTICE, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportUp);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDowngrading = new State({\n      name:          WebTransportState.DOWNGRADING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        LOG_INFO('Web transport: request downgrade');\n        if (!transport.completeDowngrade()) {\n          LOG_INFO('Web transport: connection error, no downgrade');\n          transport.notifyEvent(wEvent._transportEvent);\n          fsm.notifyDowngradeFailed();\n          return this.transitionTo(fsm.WebTransportDown);\n        }\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportUp = new State({\n      name:          WebTransportState.UP,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DOWNGRADE, wEvent =>\n        fsm.attemptDowngrade(new TransportSessionEvent(wEvent._downgradeMsg, wEvent._subcode)))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      })\n      .reaction(WebTransportEvent.SEND_ERROR, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDestroying = new State({\n      name:          WebTransportState.DESTROYING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      });\n  }\n\n\n    /**\n     * Attempt a downgrade. This is the procedure.\n     * 1. Call this. If it returns true, wait for DESTROYED_NOTICE, then\n     * 2. Call transport.completeDowngrade().\n     * @param {TransportSessionEvent} tsEvent The event triggering the downgrade\n     * @returns {Boolean} `true` if downgrade is starting (by destroying the transport)\n     */\n  attemptDowngrade(tsEvent) {\n    const { infoStr, errorSubcode } = tsEvent;\n    if (!this.transport.beginDowngrade(infoStr, errorSubcode)) {\n      LOG_TRACE('Downgrade unavailable');\n      this.transport.destroyInternal(infoStr, errorSubcode);\n      this.transport.notifyEvent(tsEvent);\n      return this.transitionTo(this.WebTransportDestroying);\n    }\n    LOG_TRACE('Downgrade available');\n    return this.transitionTo(this.WebTransportDowngrading);\n  }\n\n  notifyDowngradeFailed() {\n    LOG_TRACE('Notifying of downgrade failure');\n    this.transport.notifyEvent(new TransportSessionEvent(TransportSessionEventCode.DOWNGRADE_FAILED,\n                                  'Downgrade failed'));\n  }\n}\n\nmodule.exports.WebTransportFSM = WebTransportFSM;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Specifies the type of remote resource to which an\n * {@link solace.AbstractQueueDescriptor} refers.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueType = {\n  /**\n   * @description The queue descriptor refers to a queue endpoint.\n   * @type {String}\n   */\n  QUEUE:          'QUEUE',\n  /**\n   * @description The queue descriptor refers to a topic endpoint.\n   * @type {String}\n   */\n  TOPIC_ENDPOINT: 'TOPIC_ENDPOINT',\n};\n\nmodule.exports.QueueType = Enum.new(QueueType);\n","const {\n  ReplicationGroupMessageId,\n  RgmidFactory,\n} = require('./lib/replication-group-message-id');\nconst { Message } = require('./lib/message');\nconst { MessageCacheStatus } = require('./lib/message-cache-status');\nconst { MessageDeliveryModeType } = require('./lib/message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./lib/message-dump-flags');\nconst { MessageDumpStandardProvider } = require('./lib/message-dump-standard-provider');\nconst { MessageDumpUtil } = require('./lib/message-dump-util');\nconst { MessageType } = require('./lib/message-types');\nconst { MessageOutcome } = require('./lib/message-outcomes');\nconst { MessageUserCosType } = require('./lib/message-user-cos-types');\nconst { SolclientFactory } = require('solclient-factory');\n\n/**\n * Creates a {@link solace.Message} instance.\n * @returns {solace.Message} a new message instance.\n * @method\n * @name solace.SolclientFactory.createMessage\n */\nSolclientFactory.createMessage = SolclientFactory.createFactory(() => new Message());\n\n/**\n * Creates a {@link solace.ReplicationGroupMessageId} instance from string.\n * A ReplicationGroupMessageId is also a {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the message after the given ReplicationGroupMesageId\n * should be replayed.\n * @param {string} id a serialized ReplicationGroupMessageId had previously been returned\n *   from {@link solace.ReplicationGroupMessageId.toString}.\n * @returns {solace.ReplicationGroupMessageId} a new ReplicationGroupMessageId instance\n * @method\n * @name solace.SolclientFactory.createReplicationGroupMessageId\n * @throws {solace.OperationError}\n * * if parameter is not a string.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * * if incorrect format is detected.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n */\nSolclientFactory.createReplicationGroupMessageId = SolclientFactory.createFactory(id =>\n  RgmidFactory.fromString(id));\n\nmodule.exports.Message = Message;\nmodule.exports.MessageCacheStatus = MessageCacheStatus;\nmodule.exports.MessageDeliveryModeType = MessageDeliveryModeType;\nmodule.exports.MessageDumpFlag = MessageDumpFlag;\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\nmodule.exports.MessageType = MessageType;\nmodule.exports.MessageOutcome = MessageOutcome;\nmodule.exports.MessageUserCosType = MessageUserCosType;\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","/* eslint-disable no-nested-ternary */\n\nfunction defaultComparator(a, b) {\n  const astr = String(a);\n  const bstr = String(b);\n  return astr > bstr ? 1 : (astr < bstr ? -1 : 0);\n}\n\nfunction insertOrdered(array, element, comparator = defaultComparator) {\n  const result = [...array];\n  return this.inplaceInsertOrdered(result, element, comparator);\n}\n\nfunction inplaceInsertOrdered(array, element, comparator = defaultComparator) {\n  let index = 0;\n  let min = 0;\n  let max = array.length;\n  // Optimize for empty array\n  if (max > 0) {\n    // Optimize for append\n    if (comparator(element, array[max - 1]) > 0) {\n      index = max;\n    } else {\n      // Binary search\n      index = (min + max) >> 1; // math.floor((min + max) / 2)\n      while (max > min) {\n        if (comparator(element, array[index]) < 0) {\n          max = index;\n        } else {\n          min = index + 1;\n        }\n        index = (min + max) >> 1; // math.floor((min + max) / 2)\n      }\n    }\n  }\n  array.splice(index, 0, element);\n}\n\nmodule.exports = {\n  ArrayOperations: {\n    defaultComparator,\n    insertOrdered,\n    inplaceInsertOrdered,\n  },\n};\n","'use strict';\n\nconst { Writable } = require('stream');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  kStatusCode,\n  kWebSocket\n} = require('./constants');\nconst { concat, toArrayBuffer, unmask } = require('./buffer-util');\nconst { isValidStatusCode, isValidUTF8 } = require('./validation');\n\nconst FastBuffer = Buffer[Symbol.species];\n\nconst GET_INFO = 0;\nconst GET_PAYLOAD_LENGTH_16 = 1;\nconst GET_PAYLOAD_LENGTH_64 = 2;\nconst GET_MASK = 3;\nconst GET_DATA = 4;\nconst INFLATING = 5;\nconst DEFER_EVENT = 6;\n\n/**\n * HyBi Receiver implementation.\n *\n * @extends Writable\n */\nclass Receiver extends Writable {\n  /**\n   * Creates a Receiver instance.\n   *\n   * @param {Object} [options] Options object\n   * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether\n   *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted\n   *     multiple times in the same tick\n   * @param {String} [options.binaryType=nodebuffer] The type for binary data\n   * @param {Object} [options.extensions] An object containing the negotiated\n   *     extensions\n   * @param {Boolean} [options.isServer=false] Specifies whether to operate in\n   *     client or server mode\n   * @param {Number} [options.maxPayload=0] The maximum allowed message length\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   */\n  constructor(options = {}) {\n    super();\n\n    this._allowSynchronousEvents =\n      options.allowSynchronousEvents !== undefined\n        ? options.allowSynchronousEvents\n        : true;\n    this._binaryType = options.binaryType || BINARY_TYPES[0];\n    this._extensions = options.extensions || {};\n    this._isServer = !!options.isServer;\n    this._maxPayload = options.maxPayload | 0;\n    this._skipUTF8Validation = !!options.skipUTF8Validation;\n    this[kWebSocket] = undefined;\n\n    this._bufferedBytes = 0;\n    this._buffers = [];\n\n    this._compressed = false;\n    this._payloadLength = 0;\n    this._mask = undefined;\n    this._fragmented = 0;\n    this._masked = false;\n    this._fin = false;\n    this._opcode = 0;\n\n    this._totalPayloadLength = 0;\n    this._messageLength = 0;\n    this._fragments = [];\n\n    this._errored = false;\n    this._loop = false;\n    this._state = GET_INFO;\n  }\n\n  /**\n   * Implements `Writable.prototype._write()`.\n   *\n   * @param {Buffer} chunk The chunk of data to write\n   * @param {String} encoding The character encoding of `chunk`\n   * @param {Function} cb Callback\n   * @private\n   */\n  _write(chunk, encoding, cb) {\n    if (this._opcode === 0x08 && this._state == GET_INFO) return cb();\n\n    this._bufferedBytes += chunk.length;\n    this._buffers.push(chunk);\n    this.startLoop(cb);\n  }\n\n  /**\n   * Consumes `n` bytes from the buffered data.\n   *\n   * @param {Number} n The number of bytes to consume\n   * @return {Buffer} The consumed bytes\n   * @private\n   */\n  consume(n) {\n    this._bufferedBytes -= n;\n\n    if (n === this._buffers[0].length) return this._buffers.shift();\n\n    if (n < this._buffers[0].length) {\n      const buf = this._buffers[0];\n      this._buffers[0] = new FastBuffer(\n        buf.buffer,\n        buf.byteOffset + n,\n        buf.length - n\n      );\n\n      return new FastBuffer(buf.buffer, buf.byteOffset, n);\n    }\n\n    const dst = Buffer.allocUnsafe(n);\n\n    do {\n      const buf = this._buffers[0];\n      const offset = dst.length - n;\n\n      if (n >= buf.length) {\n        dst.set(this._buffers.shift(), offset);\n      } else {\n        dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);\n        this._buffers[0] = new FastBuffer(\n          buf.buffer,\n          buf.byteOffset + n,\n          buf.length - n\n        );\n      }\n\n      n -= buf.length;\n    } while (n > 0);\n\n    return dst;\n  }\n\n  /**\n   * Starts the parsing loop.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  startLoop(cb) {\n    this._loop = true;\n\n    do {\n      switch (this._state) {\n        case GET_INFO:\n          this.getInfo(cb);\n          break;\n        case GET_PAYLOAD_LENGTH_16:\n          this.getPayloadLength16(cb);\n          break;\n        case GET_PAYLOAD_LENGTH_64:\n          this.getPayloadLength64(cb);\n          break;\n        case GET_MASK:\n          this.getMask();\n          break;\n        case GET_DATA:\n          this.getData(cb);\n          break;\n        case INFLATING:\n        case DEFER_EVENT:\n          this._loop = false;\n          return;\n      }\n    } while (this._loop);\n\n    if (!this._errored) cb();\n  }\n\n  /**\n   * Reads the first two bytes of a frame.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  getInfo(cb) {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(2);\n\n    if ((buf[0] & 0x30) !== 0x00) {\n      const error = this.createError(\n        RangeError,\n        'RSV2 and RSV3 must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_RSV_2_3'\n      );\n\n      cb(error);\n      return;\n    }\n\n    const compressed = (buf[0] & 0x40) === 0x40;\n\n    if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {\n      const error = this.createError(\n        RangeError,\n        'RSV1 must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_RSV_1'\n      );\n\n      cb(error);\n      return;\n    }\n\n    this._fin = (buf[0] & 0x80) === 0x80;\n    this._opcode = buf[0] & 0x0f;\n    this._payloadLength = buf[1] & 0x7f;\n\n    if (this._opcode === 0x00) {\n      if (compressed) {\n        const error = this.createError(\n          RangeError,\n          'RSV1 must be clear',\n          true,\n          1002,\n          'WS_ERR_UNEXPECTED_RSV_1'\n        );\n\n        cb(error);\n        return;\n      }\n\n      if (!this._fragmented) {\n        const error = this.createError(\n          RangeError,\n          'invalid opcode 0',\n          true,\n          1002,\n          'WS_ERR_INVALID_OPCODE'\n        );\n\n        cb(error);\n        return;\n      }\n\n      this._opcode = this._fragmented;\n    } else if (this._opcode === 0x01 || this._opcode === 0x02) {\n      if (this._fragmented) {\n        const error = this.createError(\n          RangeError,\n          `invalid opcode ${this._opcode}`,\n          true,\n          1002,\n          'WS_ERR_INVALID_OPCODE'\n        );\n\n        cb(error);\n        return;\n      }\n\n      this._compressed = compressed;\n    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {\n      if (!this._fin) {\n        const error = this.createError(\n          RangeError,\n          'FIN must be set',\n          true,\n          1002,\n          'WS_ERR_EXPECTED_FIN'\n        );\n\n        cb(error);\n        return;\n      }\n\n      if (compressed) {\n        const error = this.createError(\n          RangeError,\n          'RSV1 must be clear',\n          true,\n          1002,\n          'WS_ERR_UNEXPECTED_RSV_1'\n        );\n\n        cb(error);\n        return;\n      }\n\n      if (\n        this._payloadLength > 0x7d ||\n        (this._opcode === 0x08 && this._payloadLength === 1)\n      ) {\n        const error = this.createError(\n          RangeError,\n          `invalid payload length ${this._payloadLength}`,\n          true,\n          1002,\n          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'\n        );\n\n        cb(error);\n        return;\n      }\n    } else {\n      const error = this.createError(\n        RangeError,\n        `invalid opcode ${this._opcode}`,\n        true,\n        1002,\n        'WS_ERR_INVALID_OPCODE'\n      );\n\n      cb(error);\n      return;\n    }\n\n    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;\n    this._masked = (buf[1] & 0x80) === 0x80;\n\n    if (this._isServer) {\n      if (!this._masked) {\n        const error = this.createError(\n          RangeError,\n          'MASK must be set',\n          true,\n          1002,\n          'WS_ERR_EXPECTED_MASK'\n        );\n\n        cb(error);\n        return;\n      }\n    } else if (this._masked) {\n      const error = this.createError(\n        RangeError,\n        'MASK must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_MASK'\n      );\n\n      cb(error);\n      return;\n    }\n\n    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;\n    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;\n    else this.haveLength(cb);\n  }\n\n  /**\n   * Gets extended payload length (7+16).\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  getPayloadLength16(cb) {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    this._payloadLength = this.consume(2).readUInt16BE(0);\n    this.haveLength(cb);\n  }\n\n  /**\n   * Gets extended payload length (7+64).\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  getPayloadLength64(cb) {\n    if (this._bufferedBytes < 8) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(8);\n    const num = buf.readUInt32BE(0);\n\n    //\n    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\n    // if payload length is greater than this number.\n    //\n    if (num > Math.pow(2, 53 - 32) - 1) {\n      const error = this.createError(\n        RangeError,\n        'Unsupported WebSocket frame: payload length > 2^53 - 1',\n        false,\n        1009,\n        'WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH'\n      );\n\n      cb(error);\n      return;\n    }\n\n    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);\n    this.haveLength(cb);\n  }\n\n  /**\n   * Payload length has been read.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  haveLength(cb) {\n    if (this._payloadLength && this._opcode < 0x08) {\n      this._totalPayloadLength += this._payloadLength;\n      if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {\n        const error = this.createError(\n          RangeError,\n          'Max payload size exceeded',\n          false,\n          1009,\n          'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\n        );\n\n        cb(error);\n        return;\n      }\n    }\n\n    if (this._masked) this._state = GET_MASK;\n    else this._state = GET_DATA;\n  }\n\n  /**\n   * Reads mask bytes.\n   *\n   * @private\n   */\n  getMask() {\n    if (this._bufferedBytes < 4) {\n      this._loop = false;\n      return;\n    }\n\n    this._mask = this.consume(4);\n    this._state = GET_DATA;\n  }\n\n  /**\n   * Reads data bytes.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  getData(cb) {\n    let data = EMPTY_BUFFER;\n\n    if (this._payloadLength) {\n      if (this._bufferedBytes < this._payloadLength) {\n        this._loop = false;\n        return;\n      }\n\n      data = this.consume(this._payloadLength);\n\n      if (\n        this._masked &&\n        (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0\n      ) {\n        unmask(data, this._mask);\n      }\n    }\n\n    if (this._opcode > 0x07) {\n      this.controlMessage(data, cb);\n      return;\n    }\n\n    if (this._compressed) {\n      this._state = INFLATING;\n      this.decompress(data, cb);\n      return;\n    }\n\n    if (data.length) {\n      //\n      // This message is not compressed so its length is the sum of the payload\n      // length of all fragments.\n      //\n      this._messageLength = this._totalPayloadLength;\n      this._fragments.push(data);\n    }\n\n    this.dataMessage(cb);\n  }\n\n  /**\n   * Decompresses data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Function} cb Callback\n   * @private\n   */\n  decompress(data, cb) {\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    perMessageDeflate.decompress(data, this._fin, (err, buf) => {\n      if (err) return cb(err);\n\n      if (buf.length) {\n        this._messageLength += buf.length;\n        if (this._messageLength > this._maxPayload && this._maxPayload > 0) {\n          const error = this.createError(\n            RangeError,\n            'Max payload size exceeded',\n            false,\n            1009,\n            'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\n          );\n\n          cb(error);\n          return;\n        }\n\n        this._fragments.push(buf);\n      }\n\n      this.dataMessage(cb);\n      if (this._state === GET_INFO) this.startLoop(cb);\n    });\n  }\n\n  /**\n   * Handles a data message.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  dataMessage(cb) {\n    if (!this._fin) {\n      this._state = GET_INFO;\n      return;\n    }\n\n    const messageLength = this._messageLength;\n    const fragments = this._fragments;\n\n    this._totalPayloadLength = 0;\n    this._messageLength = 0;\n    this._fragmented = 0;\n    this._fragments = [];\n\n    if (this._opcode === 2) {\n      let data;\n\n      if (this._binaryType === 'nodebuffer') {\n        data = concat(fragments, messageLength);\n      } else if (this._binaryType === 'arraybuffer') {\n        data = toArrayBuffer(concat(fragments, messageLength));\n      } else if (this._binaryType === 'blob') {\n        data = new Blob(fragments);\n      } else {\n        data = fragments;\n      }\n\n      if (this._allowSynchronousEvents) {\n        this.emit('message', data, true);\n        this._state = GET_INFO;\n      } else {\n        this._state = DEFER_EVENT;\n        setImmediate(() => {\n          this.emit('message', data, true);\n          this._state = GET_INFO;\n          this.startLoop(cb);\n        });\n      }\n    } else {\n      const buf = concat(fragments, messageLength);\n\n      if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n        const error = this.createError(\n          Error,\n          'invalid UTF-8 sequence',\n          true,\n          1007,\n          'WS_ERR_INVALID_UTF8'\n        );\n\n        cb(error);\n        return;\n      }\n\n      if (this._state === INFLATING || this._allowSynchronousEvents) {\n        this.emit('message', buf, false);\n        this._state = GET_INFO;\n      } else {\n        this._state = DEFER_EVENT;\n        setImmediate(() => {\n          this.emit('message', buf, false);\n          this._state = GET_INFO;\n          this.startLoop(cb);\n        });\n      }\n    }\n  }\n\n  /**\n   * Handles a control message.\n   *\n   * @param {Buffer} data Data to handle\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */\n  controlMessage(data, cb) {\n    if (this._opcode === 0x08) {\n      if (data.length === 0) {\n        this._loop = false;\n        this.emit('conclude', 1005, EMPTY_BUFFER);\n        this.end();\n      } else {\n        const code = data.readUInt16BE(0);\n\n        if (!isValidStatusCode(code)) {\n          const error = this.createError(\n            RangeError,\n            `invalid status code ${code}`,\n            true,\n            1002,\n            'WS_ERR_INVALID_CLOSE_CODE'\n          );\n\n          cb(error);\n          return;\n        }\n\n        const buf = new FastBuffer(\n          data.buffer,\n          data.byteOffset + 2,\n          data.length - 2\n        );\n\n        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n          const error = this.createError(\n            Error,\n            'invalid UTF-8 sequence',\n            true,\n            1007,\n            'WS_ERR_INVALID_UTF8'\n          );\n\n          cb(error);\n          return;\n        }\n\n        this._loop = false;\n        this.emit('conclude', code, buf);\n        this.end();\n      }\n\n      this._state = GET_INFO;\n      return;\n    }\n\n    if (this._allowSynchronousEvents) {\n      this.emit(this._opcode === 0x09 ? 'ping' : 'pong', data);\n      this._state = GET_INFO;\n    } else {\n      this._state = DEFER_EVENT;\n      setImmediate(() => {\n        this.emit(this._opcode === 0x09 ? 'ping' : 'pong', data);\n        this._state = GET_INFO;\n        this.startLoop(cb);\n      });\n    }\n  }\n\n  /**\n   * Builds an error object.\n   *\n   * @param {function(new:Error|RangeError)} ErrorCtor The error constructor\n   * @param {String} message The error message\n   * @param {Boolean} prefix Specifies whether or not to add a default prefix to\n   *     `message`\n   * @param {Number} statusCode The status code\n   * @param {String} errorCode The exposed error code\n   * @return {(Error|RangeError)} The error\n   * @private\n   */\n  createError(ErrorCtor, message, prefix, statusCode, errorCode) {\n    this._loop = false;\n    this._errored = true;\n\n    const err = new ErrorCtor(\n      prefix ? `Invalid WebSocket frame: ${message}` : message\n    );\n\n    Error.captureStackTrace(err, this.createError);\n    err.code = errorCode;\n    err[kStatusCode] = statusCode;\n    return err;\n  }\n}\n\nmodule.exports = Receiver;\n","/* eslint-disable global-require */\nlet parseURL;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  parseURL = require('url').parse;\n} else {\n  /* eslint-env browser */\n  const scope = typeof window !== 'undefined' ? window : this;\n  require('./browser-url-polyfill')(scope);\n  parseURL = function makeURL(...args) {\n    return new URL(...args);\n  };\n}\n\nmodule.exports.parseURL = parseURL;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionEventName = {\n  CONNECT:                       'SessionConnect',\n  DISCONNECT:                    'SessionDisconnect',\n  DISPOSE:                       'SessionDispose',\n  CONNECT_TIMEOUT:               'SessionConnectTimeout',\n  CONNECT_WAIT_TIMEOUT:          'SessionConnectWaitTimeout',\n  DOWNGRADE_TIMEOUT:             'SessionDowngradeTimeout',\n  TRANSPORT_UP:                  'SessionTransportUp',\n  TRANSPORT_DESTROYED:           'SessionTransportDestroyed',\n  TRANSPORT_CAN_ACCEPT_DATA:     'SessionTransportCanAcceptData',\n  TRANSPORT_PARSE_ERROR:         'SessionTransportParseError',\n  TRANSPORT_PROTOCOL_SMP:        'SessionSMPMessage',\n  TRANSPORT_PROTOCOL_CLIENTCTRL: 'SessionClientCtrlMessage',\n  EXCEPTION:                     'SessionException',\n  SUBSCRIBE_TIMEOUT:             'SessionSubscribeTimeout',\n  CREATE_SUBSCRIBER:             'SessionCreateSubscriber',\n  FLOW_UP:                       'SessionFlowUp',\n  FLOW_FAILED:                   'SessionFlowFailed',\n  SEND_ERROR:                    'SessionSendError',\n  FLOWS_DISCONNECTED:            'SessionFlowsDisconnected',\n  TRANSPORT_FLUSHED:             'SessionTransportFlushed',\n  DNS_RESOLUTION_COMPLETE:       'SessionDNSResolutionComplete',\n  TRANSPORT_CHANGE_DONE:         'SessionTransportChangeDone',\n};\n\nmodule.exports.SessionEventName = Enum.new(SessionEventName);\n","const { Enum } = require('solclient-eskit');\n\n\n/**\n * @callback solace.SessionEventCodes.sessionEvent\n * @function\n * @this {solace.Session} The message consumer for the event\n * @param {solace.SessionEvent|solace.OperationError} event The event. If the event is an\n *  error, the event will be an instance of {@link solace.OperationError} but will also be\n *  interface-compatible with {@link solace.SessionEvent}.\n */\n\n\n/**\n * An attribute of {@link SessionEvent}. This enumeration represents the\n * different events emitted by {@link Session} through the session event\n * callback.\n *\n * When a session is no longer in a usable state, the API tears down the underlying\n * connection and notifies the application with one of the following session events:\n *  * {@link solace.SessionEventCode#event:DOWN_ERROR}\n *  * {@link solace.SessionEventCode#event:CONNECT_FAILED_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SessionEventCode = {\n  /**\n   * The Session is ready to send/receive messages and perform control operations.\n   *\n   * At this point the transport session is up, the Session has logged in, and the\n   * P2PInbox subscription is added.\n   *\n   * The session is established.\n   * @event solace.SessionEventCode#UP_NOTICE\n   */\n  UP_NOTICE:                         0,\n  /**\n   * The session was established and then went down.\n   * @event solace.SessionEventCode#DOWN_ERROR\n   * @param {solace.OperationError} error The details related to the session failure.\n   */\n  DOWN_ERROR:                        1,\n  /**\n   * The session attempted to connect but was unsuccessful.\n   * @event solace.SessionEventCode#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error The details related to the failed connection attempt.\n   */\n  CONNECT_FAILED_ERROR:              2,\n  /**\n   * The Solace Message Router rejected a published message.\n   * @event solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n   * @param {solace.RequestError} error The details related to the rejected message.\n   */\n  REJECTED_MESSAGE_ERROR:            4,\n  /**\n   * The Solace Message Router rejected a subscription (add or remove).\n   * @event solace.SessionEventCode#SUBSCRIPTION_ERROR\n   * @param {solace.RequestError} error The details related to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:                5,\n  /**\n   * The subscribe or unsubscribe operation succeeded.\n   * @event solace.SessionEventCode#SUBSCRIPTION_OK\n   * @param {solace.SessionEvent} event The details related to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:                   6,\n  /**\n   * The Solace Message Router's Virtual Router Name changed during a reconnect operation.\n   * @event solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n   * @param {solace.SessionEvent} event Information related to the event.\n   */\n  VIRTUALROUTER_NAME_CHANGED:        7,\n  /**\n   * @deprecated\n   * A request was aborted because the session is being disconnected.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_ABORTED:                   8,\n  /**\n   * @deprecated\n   * The event represents a timed-out request API call.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_TIMEOUT:                   9,\n  /**\n   * The event represents a successful update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_OK\n   * @param {solace.SessionEvent} event Information related to the successful property update.\n   */\n  PROPERTY_UPDATE_OK:                10,\n  /**\n   * The event represents a failed update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n   * @param {solace.RequestError} error The details related to the failed property update.\n   */\n  PROPERTY_UPDATE_ERROR:             11,\n  /**\n   * The session transport can accept data again.  This event will occur after an\n   * {@link solace.OperationError} is thrown from an API call with a subcode of\n   * {@link solace.ErrorSubcode.INSUFFICIENT_SPACE} to indicate the operation can be retried.\n   * This event is used both after session-level transport buffer exhaustion,\n   * and Guaranteed Messaging Window exhaustion.\n   * @event solace.SessionEventCode#CAN_ACCEPT_DATA\n   */\n  CAN_ACCEPT_DATA:                   13,\n  /**\n   * The session connect operation failed, or the session that was once up,\n   * is now disconnected.\n   * @event solace.SessionEventCode#DISCONNECTED\n   */\n  DISCONNECTED:                      14,\n  /**\n   * The session has gone down, and an automatic reconnection attempt is in progress.\n   * @event solace.SessionEventCode#RECONNECTING_NOTICE\n   * @param {solace.SessionEvent} event The details related to the cause of the connection\n   *    interruption.\n   */\n  RECONNECTING_NOTICE:               22,\n  /**\n   * The automatic reconnect of the Session was successful, and the session is established again.\n   * @event solace.SessionEventCode#RECONNECTED_NOTICE\n   * @param {solace.SessionEvent} event The details related to the re-establishment of the\n   *    connection.\n   */\n  RECONNECTED_NOTICE:                23,\n  /**\n   * The session has automatically recovered after the Guaranteed Message publisher\n   * failed to reconnect.\n   * Messages sent but not acknowledged are being renumbered and retransmitted.\n   * Some messages may be duplicated in the system.\n   * @event solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n   * @param {solace.SessionEvent} event The details related to the republishing of messages on the\n   *    session.  {@link solace.SessionEvent#infoStr} will indicate the number of messages being\n   *    republished, which is an upper bound on the number of messages that could be duplicated due\n   *    to this action.\n   */\n  REPUBLISHING_UNACKED_MESSAGES:     24,\n  /**\n   * A message was acknowledged by the router.\n   * @event solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n   * @param {solace.SessionEvent} event Allows the acknowledgement to be correlated to the sent\n   *    message.\n   */\n  ACKNOWLEDGED_MESSAGE:              25,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint succeeded.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n   */\n  UNSUBSCRIBE_TE_TOPIC_OK:           26,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint failed.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n   * @param {solace.OperationError} error The details related to the failed attempt to remove the\n   *    subscription from a topic endpoint.\n   */\n  UNSUBSCRIBE_TE_TOPIC_ERROR:        27,\n  /**\n   * A Direct message was received on the session. This event code is only used\n   * on the <b>EventEmitter</b> session interface.  If using the deprecated callback interface,\n   * messages are received via the callback provided in {@link solace.MessageRxCBInfo}.\n   * @event solace.SessionEventCode#MESSAGE\n   * @param {solace.Message} message The message received on the session.\n   */\n  MESSAGE:                           28,\n  /**\n   * Guaranteed Messaging Publisher has been closed by the Solace\n   * message router. This usually indicates an operator has disabled the\n   * message spool.\n   * @event solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n   * @param {solace.OperationError} error Information related to the error.\n   */\n  GUARANTEED_MESSAGE_PUBLISHER_DOWN: 29,\n  /**\n   * The provision or deprovision operation failed.\n   * @event solace.SessionEventCode#PROVISION_ERROR\n   * @param {solace.SessionEvent} error The details related to the failed provision/deprovison operation.\n   */\n  PROVISION_ERROR:                    30,\n  /**\n   * The provision or deprovision operation succeeded.\n   * @event solace.SessionEventCode#PROVISION_OK\n   * @param {solace.SessionEvent} event The details related to the successful provision or deprovision operation.\n   */\n  PROVISION_OK:                     31,\n\n  \n};\n\nmodule.exports.SessionEventCode = Enum.new(SessionEventCode);\n","const DebugLib = require('solclient-debug');\nconst {\n  Convert,\n  Base64,\n} = require('solclient-convert');\nconst {\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR,\n} = require('solclient-log');\nconst {\n  sendXhrBinary,\n  sendXhrText,\n} = require('./send-xhr');\nconst { StringBuffer, TimingBucket } = require('solclient-util');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { arrayBufferToString } = Convert;\n\nconst SOL_CONNECTION_DEBUG = false;\n\n/**\n * A URI starting with a \"/\" is a \"path-absolute\" URI, and those aren't\n * allowed to have a query component (starting with \"?\").\n *\n * If an origin isn't defined in the url, tack on the one from the page.\n *\n * @param {URL} url The URL to connect to\n * @returns {URL} Adjusted URL if incoming URL was relative\n * @private\n */\nfunction prependOrigin(url) {\n  if (!url.match(/^(http|ws)(s?):/i) && window.location && window.location.origin) {\n    return window.location.origin + ((url.charAt(0) !== '/') ? '/' : '') + url;\n  }\n  return url;\n}\n\nfunction getTs() {\n  return new Date().getTime();\n}\n\nclass Stats {\n  constructor() {\n    this.WaitedToken = new TimingBucket('WaitedToken', 100);\n    this.HadToken = new TimingBucket('HadToken', 100);\n    this.ReturnedToken = new TimingBucket('ReturnedToken', 100);\n  }\n  toString() {\n    let s = '';\n    [this.WaitedToken, this.HadToken, this.ReturnedToken].forEach((b) => {\n      if (b && b.bucketCount() > 0) {\n        s += `${b.name} >> ${b}\\n`;\n      }\n    });\n    return s;\n  }\n}\n\n/**\n * @classdesc\n * This class contains all state for a single HTTP connection (XHR).\n *\n * @private\n */\nclass HTTPConnection {\n  constructor(url, base64Enc, streamProgressEvents, rxDataCb,\n              connectionErrorCb, contentType, connectionClose) {\n    this.Options = {\n      url: prependOrigin(url),\n      contentType,\n      base64Enc,\n      streamProgressEvents,\n      connectionClose,\n    };\n\n    this._streamProgressBytes = 0;\n    this._xhr = null;\n    this._rxDataCb = rxDataCb;\n    this._connErrorCb = connectionErrorCb;\n    this._reqActive = false;\n    this._REQCOUNTER = 0;\n    this._REQBASE = Math.floor(Math.random() * 1000);\n\n    this._xhr = XHRFactory.create();\n    // older browser ie9\n    this._handleAbortedReq = !HTTPConnection.browserSupportsXhrBinary();\n\n    this.stats = new Stats();\n  }\n\n  recStat(s) {\n    if (!SOL_CONNECTION_DEBUG) {\n      return;\n    }\n    const stats = this.stats;\n    if (s === 'GotToken') {\n      stats.LastGotToken = getTs();\n      if (stats.LastSendMsg) {\n        const waitedTok = stats.LastGotToken - stats.LastSendMsg;\n        stats.WaitedToken.log(waitedTok);\n        if (waitedTok > 100) {\n          LOG_WARN(`Abnormally long waitToken, last request: ${this._REQBASE}_${this._REQCOUNTER}`);\n        }\n      }\n    }\n    if (s === 'SendMsg') {\n      stats.LastSendMsg = getTs();\n      const hadToken = stats.LastSendMsg - stats.LastGotToken;\n      stats.HadToken.log(hadToken);\n    }\n    if (s === 'GotData') {\n      stats.LastGotData = getTs();\n    }\n    if (s === 'ReturnToken') {\n      stats.LastReturnToken = getTs();\n      if (stats.LastGotData) {\n        const returnedToken = stats.LastReturnToken - stats.LastGotData;\n        stats.ReturnedToken.log(returnedToken);\n      }\n    }\n  }\n\n  /*\n   * Send data over the connection - this requires a send token\n   */\n  send(data, attempt = 0, maxRetry = 1) {\n    if (attempt > 0) {\n      this._xhr.abort();\n      this._xhr = XHRFactory.create();\n    }\n    this._xhr.open('POST', this.Options.url, true);\n\n    this._streamProgressBytes = 0;\n    // We pass the write data to the CB so we can retry when it mysteriously fails.\n    this._xhr.onreadystatechange = () => this.xhrStateChange(data, attempt, maxRetry);\n\n    this._reqActive = true;\n\n    if (SOL_CONNECTION_DEBUG) {\n      this._REQCOUNTER++;\n      this._xhr.setRequestHeader('sol-request-track', `${this._REQBASE}_${this._REQCOUNTER}`);\n    }\n    if (this.Options.base64Enc) {\n      sendXhrText(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    } else {\n      sendXhrBinary(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    }\n    this.recStat('SendMsg');\n  }\n\n\n  // XmlHTTPRequest Callback\n  xhrStateChange(sentdata, attempt, maxRetry) {\n    const readyState = this._xhr.readyState;\n    const RS_LOADING = this._xhr.LOADING;\n    const RS_DONE = this._xhr.DONE;\n\n    if (!((this.Options.streamProgressEvents && readyState === RS_LOADING)\n          || readyState === RS_DONE)) {\n      // we proceed with notifications if we're LOADING and we requested streaming events,\n      // or we're DONE.\n      return;\n    }\n\n    if (!this._reqActive) {\n          // request aborted, DO NOT propagate event\n      return;\n    }\n\n    let status = null;\n    if (this._handleAbortedReq) {\n      // To avoid the following IE9 error when request is aborted by server or client and\n      // application tries to access any property in the XHR other than readyState whose value is\n      // 4 (XMLHTTPRequest.DONE):\n      // - The data necessary to complete this operation is not yet available\n      // See https://groups.google.com/forum/#!topic/websync/ysBEvtvMyb0 for details\n      // _requestActive is used to handle client initiated abort, but it does not handle\n      // the case when the request is aborted on the server side or proxy server\n      try {\n        status = this._xhr.status;\n      } catch (e) {\n        LOG_INFO(`Error trying to access status in XHR due to request aborted: ${e.message}`);\n        return;\n      }\n    } else {\n      status = this._xhr.status;\n    }\n\n    if (status === 200 || status === 304) {\n      // Success status code\n      let data = null;\n      if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n        data = arrayBufferToString(this._xhr.response);\n      } else {\n        data = this._xhr.responseText;\n      }\n      data = data.substring(this._streamProgressBytes, data.length);\n      this._streamProgressBytes += data.length;\n\n      if (data.length === 0 && readyState === RS_LOADING) {\n        // we are streaming LOADING events but have no data\n        return;\n      }\n\n      if (this.Options.base64Enc) {\n        try {\n          data = Base64.decode(data);\n        } catch (e) {\n          // Failed the decode - call the error callback\n          LOG_ERROR(`Data decode error on: ${data}`);\n          LOG_ERROR(`Data decode error is: ${e.message}`);\n          this._rxDataCb(TransportReturnCode.DATA_DECODE_ERROR, data);\n          return;\n        }\n      } else {\n        // take lower-8 bits\n        const decodedData = [];\n        const dataLength = data.length;\n        for (let i = 0; i < dataLength; i++) {\n          decodedData.push(String.fromCharCode(data.charCodeAt(i) & 0xFF));\n        }\n        data = decodedData.join('');\n      }\n      if (readyState === RS_DONE) {\n        // MUST do this BEFORE the callback invocation, because the callback can trigger a new send.\n        this._reqActive = false;\n      }\n      this._rxDataCb(TransportReturnCode.OK, data);\n      if (readyState === RS_DONE && data.length > 0) {\n        this._rxDataCb(TransportReturnCode.OK, ''); // indicate end of stream\n      }\n\n      return;\n    }\n\n    // Failure status code.\n    const statusText = this._xhr.statusText;\n    let responseText = '';\n    if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n      responseText = arrayBufferToString(this._xhr.response);\n    } else {\n      responseText = this._xhr.responseText || '';\n    }\n\n    const responseTextLen = responseText.length;\n    const requestUrl = this.Options.url;\n    const sentdataLen = sentdata ? sentdata.length : 0;\n    const { formatDumpBytes } = DebugLib.Debug;\n    const responseTextDump = formatDumpBytes(\n      responseText.substr(0, Math.min(responseTextLen, 64)), true, 0);\n    const sentTextDump = formatDumpBytes(\n      (sentdata || '').substr(0, Math.min(sentdataLen, 256)), true, 0);\n    if (BUILD_ENV.MODE_DEBUG) {\n      const stmt = new StringBuffer(\n        `Http request failed.  url=${requestUrl}, status=${status}, statusText=${statusText}, `,\n        `responseText length=${responseTextLen}, `,\n        'responseText (first 64 bytes or fewer)=\\n',\n        `${responseTextDump}, `,\n        `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''}, `,\n        `attempt=${attempt}, reqActive=${this._reqActive}, readyState=${readyState}, `,\n        `sent data length=${sentdataLen}, `,\n        'sent data (first 256 bytes or fewer)=\\n',\n        `${sentTextDump}`).toString();\n      LOG_DEBUG(stmt);\n    }\n\n    const nextMaxRetry = maxRetry;\n    if (this._reqActive\n          && status !== 400\n          && responseText.length === 0\n          && (attempt === 0 || attempt < nextMaxRetry)) {\n      LOG_INFO(`XHR failed while request active, will retry send, retry=${attempt + 1}`);\n        // RETRY (could be a transient browser connection problem)\n      this.send(sentdata, attempt + 1, nextMaxRetry);\n    } else {\n      this._reqActive = false;\n      this._connErrorCb(\n          status,\n          new StringBuffer(\n            `HTTP request failed(status=${status} statusText=${statusText}, `,\n            `responseText length=${responseTextLen}, responseText[0..64]=\\n`,\n            responseTextDump,\n            `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''})`).toString());\n    }\n  }\n\n  isUsingBase64() {\n    return this.Options.base64Enc;\n  }\n\n  // This function will abort the current xhr request if it is active\n  abort() {\n      // mark request as inactive, so we won't process statechange events\n    this._reqActive = false;\n    if (this._xhr && this._xhr.abort) {\n      this._xhr.abort();\n    }\n  }\n\n  /**\n   * Check if we can try binary XHR on this browser.\n   * @returns {Boolean} `true` if XHR binary should work; `false` otherwise\n   * @static\n   */\n  static browserSupportsXhrBinary() {\n    return sendXhrBinary !== sendXhrText;\n  }\n\n  /**\n   * Check if browser supports streaming responses (progressive reading of XHR).\n   * @returns {Boolean} `true` if feature was detected, `false` otherwise\n   * @static\n   */\n  static browserSupportsStreamingResponse() {\n    const xhr = XHRFactory.create();\n    // A conforming XHR2 implementation must include progress events.\n    // Can we assume that the event property will be null instead of undefined?\n    // A conforming XHR2 implementation must also include withCredentials.\n    const check = xhr && xhr.onprogress === null; // xhr.withCredentials === false;\n    LOG_INFO(`http browserStreamingCheck - if XMLHTTPRequest supported and XMLHTTPRequest support onprogress: ${check}`);\n    return check;\n  }\n}\n\nmodule.exports.HTTPConnection = HTTPConnection;\n","const { EncodeSingleElement } = require('./encode-single-element');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { ParseSingleElement, StringToBuffer } = require('./parse-single-element');\n\nconst { encodeSingleElement } = EncodeSingleElement;\nconst { parseSingleElement } = ParseSingleElement;\nconst { stringToBuffer } = StringToBuffer;\n\nconst Codec = {\n  encodeSingleElement,\n  parseSingleElement,\n  stringToBuffer,\n  IEEE754LIB,\n};\n\nmodule.exports.Codec = Codec;\n","const net = require('net');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_WARN, LOG_ERROR } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n * Tcp (tcps://) transport without TLS (tcps://) support.\n * Only works in node.js.\n * @private\n */\nclass TcpRawTransport extends TransportBase {\n\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._drained = true;\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * @type {?Socket}\n     * @private\n     */\n    // Always the raw socket, which is stable from connect() until disconnect().\n    this._rawSocket = null;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n    this._props.transportProtocol = null;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n  setClientStats(value) {\n    this._clientstats = value;\n  }\n\n  rehome(eventCB, client) {\n    this._eventCB = eventCB;\n    this._client = client;\n  }\n\n  /**\n   * Extracts host and port from the router URL.\n   * @private\n   * @param {String} urlString the url\n   * @returns {{String, Number}} host and port\n   */\n  parseHostPort(urlString) {\n    let port = null;\n    const urlParsed = parseURL(urlString);\n    if (urlParsed.protocol !== 'tcp:' && urlParsed.protocol !== 'tcps:') {\n      // Should not happen.\n      LOG_ERROR(`Tcp Transport: URL with unexpected scheme: ${urlParsed.protocol}`);\n    }\n    const host = urlParsed.hostname;\n    port = urlParsed.port;\n    if (port === null) {\n      if (this._ssl) {\n        port = 55443;\n      } else {\n        port = this._props._compressionLevel > 0 ? 55003 : 55555;\n      }\n    }\n    // The rest of the URL (path, etc) is ignored.\n    LOG_TRACE(`Parsing url ${urlString} -> host: ${host} , port: ${port}`);\n    return { host, port };\n  }\n\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Buffer} data the data\n   */\n  onData(originalSocket, data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n      originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onData for previous socket, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Error} error the error\n   */\n  onError(originalSocket, error) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onError for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore error');\n      return;\n    }\n\n    LOG_DEBUG(`Tcp transport connection error ${error}`);\n    // net.socket invokes the error handler before the close handler.\n    // Websocket does not, and that's what the upper layer expects.\n    // Suppressing the \"double tap\" error events when connected,\n    // saving the error for the onClose handler in _socketerror.\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n        //There won't be an onClose invocation, so destroying right away.\n        LOG_DEBUG(`Tcp transport connection error during establishment. ${error}`);\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._destroy(originalSocket, `Connection failed. Message:${error.message}`, ErrorSubcode.CONNECTION_ERROR);\n      } else {\n        this._eventCB(\n          new TransportSessionEvent(\n            TransportSessionEventCode.SEND_ERROR,\n            `Connection error${error}`,\n            null,\n            ErrorSubcode.CONNECTION_ERROR, null));\n      }\n    } else { // we rely on the close listener to notify the upper layer.\n      this._socketError = error;\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   * @param {Boolean} hadError wheter there was an error\n   */\n  onClose(originalSocket, hadError) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onClose for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore close');\n      return;\n    }\n    const msg = hadError ? 'with error' : 'cleanly';\n    const errorMsg = this._socketError && this._socketError.message;\n    this._socketError = null; // clear on read.\n    LOG_DEBUG(`Tcp transport connection is closed ${msg}. Message: ${errorMsg}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n\n    this._destroy(this._rawSocket, `Connection closed ${msg}. Message:${errorMsg}`,\n                  ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  /**\n   * Callback for Socket.connect.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   */\n  onOpen(originalSocket) {\n    LOG_TRACE('Plaintext transport received socket open event.');\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('Plaintext transport stray onOpen for previous socket, ignoring.');\n      return;\n    }\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_DEBUG(`TcpTransportSession stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (this._rawSocket) {\n      LOG_ERROR('TCP transport can not connect once _rawsocket exists.');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_DEBUG('Establishing Tcp transport session');\n    try {\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      const { host, port } = this.parseHostPort(this._url);\n      LOG_DEBUG('Constructing socket');\n      // Luckily raw and tls sockets have the same API.\n      this._rawSocket = new net.Socket();\n      this._rawSocket.on('connect', this.onOpen.bind(this, this._rawSocket));\n      // Only connect after the connect listener is registered:\n      this._rawSocket.connect(port, host);\n      LOG_TRACE('Assigning properties to socket');\n      // WARNING!\n      // This is the kind of thing that breaks on minification.\n      // Re-run unit tests in production mode when changed:\n      // grunt --gruntfile=Gruntfile_Production.js\n      // When broken, consult the closure compiler exceptions file:\n      // (sdk-root)/builder/template/-common/env/externs.js\n      this._rawSocket.on('data', this.onData.bind(this, this._rawSocket));\n      this._rawSocket.on('error', this.onError.bind(this, this._rawSocket));\n      this._rawSocket.on('close', this.onClose.bind(this, this._rawSocket));\n      this._rawSocket.on('drain', this.onDrain.bind(this, this._rawSocket));\n      this._rawSocket.setNoDelay(true);\n\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create Tcp socket: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    LOG_DEBUG('Tcp transport is connecting');\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    // No need to flush the decompressor,\n    // the upper layer is not interested in any more data.\n    return this._destroy(this._rawSocket, msg, subcode);\n  }\n\n  _destroy(originalSocket, msg, subcode) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray _destroy for previous socket, ignoring.');\n      return TransportReturnCode.OK;\n    }\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_DEBUG(`Destroy Tcp transport: ${msg}`);\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      const onerrorStub = function onerrorStub() { };\n      if (this._rawSocket) {\n        this._rawSocket.removeAllListeners();\n        this._rawSocket.on('error', onerrorStub); // Prevent unhandled errors\n        // Prefering destroy() over end() as it seems to\n        // cancel pending callbacks like onOpen more reliably.\n        //this._rawSocket.destroy();\n        this._rawSocket.destroy();\n        this._rawSocket = null;\n      }\n\n      this._canSendNeeded = false;\n      this._flushCallback = null;\n      this._drained = true;\n      this._state = TransportSessionState.DOWN;\n      this._client = null; // Don't accept data.\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    LOG_TRACE(`Destroying TCP transport. msg: ${msg} subcode: ${subcode}`);\n    if (this._eventCB) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              msg || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._state !== TransportSessionState.DOWN) {\n      const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n      LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n      if (this._rawSocket) {\n        this._rawSocket.destroy(new Error(errorMsg));\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    if (this._drained) {\n      LOG_DEBUG('Transport emitting FLUSH immediately.');\n      callback();\n    } else if (callback) {\n      this._flushCallback = callback;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      LOG_ERROR('plaintext: INVALID_STATE_FOR_OPERATION');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Limiting socket buffer size to _sendBufferMaxSize unless\n    // the force flag was set\n    // or the socket is drained, in which case any size message goes.\n    if (forceAllowEnqueue\n      || this._drained\n      || message.length < (this._sendBufferMaxSize - this._rawSocket.bufferSize)) {\n      // _drained keeps track of \"overflowing\" writes.\n      // nodejs never refuses a write but warns when it starts buffering.\n      this._drained = this._rawSocket.write(message, 'ascii');\n      if (this._clientstats) {\n        this._clientstats.bytesWritten += message.length;\n        ++this._clientstats.msgWritten;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destry()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   */\n  onDrain(originalSocket) {\n    if (originalSocket !== this._rawSocket) {\n      LOG_DEBUG('TcpTransportSession stray onDrain for previous socket, ignoring.');\n      return;\n    }\n    this._drained = true;\n\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._canSendNeeded) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  pause() {\n    if (this._rawSocket) {\n      this._rawSocket.pause();\n    }\n  }\n\n  unpause() {\n    if (this._rawSocket) {\n      this._rawSocket.resume();\n    }\n  }\n\n}\n\nmodule.exports.TcpRawTransport = TcpRawTransport;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Effectively a boolean governing TLS downgrade to plain text after authentication.\n * @see {@link solace.SessionProperties#sslConnectionDowngradeTo}\n *\n * @target node\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst SslDowngrade = {\n  /**\n   * @description No downgrade, TLS connection remains encrypted.\n   * @type {String}\n   */\n  NONE:      'NONE',\n  /**\n   * @description TLS connection downgrades to plain text after authentication.\n   * USE WITH CAUTION! Message traffic is not encrypted!\n   */\n  PLAINTEXT: 'PLAIN_TEXT',\n};\n\nmodule.exports.SslDowngrade = Enum.new(SslDowngrade);\n","const { CapabilityType } = require('./capability-types');\n\nmodule.exports.DefaultCapabilities = {\n  createDefaultCapabilities(sessionProperties) {\n    const defaultCapabilities = {\n      [CapabilityType.GUARANTEED_MESSAGE_CONSUME]: true,\n      [CapabilityType.GUARANTEED_MESSAGE_PUBLISH]: true,\n      [CapabilityType.SHARED_SUBSCRIPTIONS]:       true,\n      // The others are set TRUE by CCSMP, but not relevant for us yet\n      // [CapabilityType.TEMPORARY_ENDPOINT]:   true,\n      // [CapabilityType.GUARANTEED_MESSAGE_BROWSE]:         true,\n      // [CapabilityType.ENDPOINT_MGMT]:        true,\n      // [CapabilityType.SELECTOR]:             true,\n      // [CapabilityType.COMPRESSION]:          true,\n      // [CapabilityType.CUT_THROUGH]:          true,\n      // [CapabilityType.QUEUE_SUBSCRIPTIONS]:  true,\n      // [CapabilityType.SUBSCRIPTION_MANAGER]: true,\n      [CapabilityType.MAX_GUARANTEED_MSG_SIZE]: sessionProperties.assumedMaxAdSize,\n      // Assuming NACKs until proven otherwise (we have code to handle it missing on reconnect):\n      [CapabilityType.AD_APP_ACK_FAILED]: true,\n    };\n    return defaultCapabilities;\n  },\n};\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Long } = require('solclient-convert');\nconst { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('solclient-replaystart');\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst RMID_VERSION_1_PREFIX = 'rmid1:';\n/* prefix length + 3 '-' + 16 bytes of hex (32) */\nconst RMID_LEN = RMID_VERSION_1_PREFIX.length + 3 + 16 * 2; // 41\n/* regex for testing if data component of the rmid string parsing is valid */\nconst validRmidHexRegex = /^[0-9a-fA-F]{32}$/g;\nconst INVALID_SUID = Long.UZERO;\n\nconst {\n  isString,\n  isValue,\n  isInstanceOf,\n} = Parameter;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n *  {@link solace.SolclientFactory.createReplicationGroupMessageId} or from\n *  {@link solace.Message.getReplicationGroupMessageId}</b>\n * <p>\n * ReplicationGroupMessageId specifies a Replication Group Message ID.\n * Can be used to specify a {@link solace.ReplayStartLocation} for the message after this id.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}.\n *\n * @extends solace.ReplayStartLocation\n * @memberof solace\n * @hideconstructor\n */\nclass ReplicationGroupMessageId extends ReplayStartLocation {\n  /**\n   *@param {Long} spoolerUniqueId spooler id component of rgmid\n   *@param {Long} effectiveMessageId message id component of rgmid\n   *@private\n   */\n  constructor(spoolerUniqueId, effectiveMessageId) {\n    super({\n      _replayStartValue: {\n        suid:      spoolerUniqueId,\n        messageId: effectiveMessageId,\n      },\n      _type: ReplayStartType.RGMID,\n    });\n    /**\n     * _suid {Long} spoolerUniqueId component of the replication group message id\n     *              this should be unique to the replaication group\n     * @private\n     */\n    this._suid = spoolerUniqueId;\n    /**\n     * _messageId {Long} effectiveMessageId component of the replication group message id\n     *              this should be unique to the message in the replication group\n     * @private\n     */\n    this._messageId = effectiveMessageId;\n  }\n  /**\n   * Compares with other ReplicationGroupMessageId\n   * @param {ReplicationGroupMessageId} otherReplicationGroupMessageId the other id to compare\n   * @returns {Number} 0 if the ReplicationGroupMessageId is equal to the other\n   *   ReplicationGroupMessageId.\n   *   < 0 if the ReplicationGroupMessageId is less than the other ReplicationGroupMessageId.\n   *   \\> 0 if the ReplicationGroupMessageId is greater than the other ReplicationGroupMessageId.\n   * @throws {solace.OperationError}\n   * * if the otherReplicationGroupMessageId is not a ReplicationGroupMessageId type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the otherReplicationGroupMessageId is not comparable as it is from different origins\n   *   and can not be compared.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE}.\n   */\n  compare(otherReplicationGroupMessageId) {\n    isInstanceOf('otherReplicationGroupMessageId', otherReplicationGroupMessageId, ReplicationGroupMessageId);\n    const oId = otherReplicationGroupMessageId;\n    if (!this._suid.equals(oId._suid)) {\n      const message = 'Unable to compare Replication Group Message ID from different origins';\n      throw new OperationError(`Parameter otherReplicationGroupMessageId[${oId.toString()\n        }] failed validation`,\n        ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE, message);\n    }\n    if (this._messageId.gt(oId._messageId)) {\n      return 1;\n    } else if (this._messageId.lt(oId._messageId)) {\n      return -1;\n    }\n    return 0;\n  }\n  [util_inspect_custom]() {\n    return `[Replication Group Message Id: ${this.toString()}]`;\n  }\n  /**\n   * @override\n   * @description\n   * The ReplicationGroupMessageId toString() method returns a string that can later be passed to\n   * {@link solace.SolclientFactory.createReplicationGroupMessageId} to create a\n   * ReplicationGroupMessageId object.\n   * @returns {String} serialized string of the ReplicationGroupMessageId\n   */\n  toString() {\n    const idBuffer = BufferImpl.from(this._suid.toBytesBE().concat(this._messageId.toBytesBE()));\n    const hexString = idBuffer.toString('hex');\n    const sep = '-';\n    return `${RMID_VERSION_1_PREFIX}${hexString.substring(0, 5)}${sep\n    }${hexString.substring(5, 16)}${sep}${hexString.substring(16, 24)}${sep\n    }${hexString.substring(24, 32)}`;\n  }\n}\n\n/**\n * factory method for creating Replication Group Message Ids\n * @param {Object} spec object specification for building\n * @returns {ReplicationGroupMessageId} id instance for spec.\n * @private\n */\nfunction createReplicationGroupMessageId(spec) {\n  /* later this can be enhanced for other implementations of rgmids */\n  return new ReplicationGroupMessageId(spec.suid, spec.msgid);\n}\n\nfunction fromString(rgmidStr) {\n  /* check parameter type */\n  isString('id', rgmidStr);\n  /* validate rmid string to represent 128 bits of id data\n   * must be of format:\n   * rmid1:ttttt-rrrrrrrrrrr-mmmmmmmm-llllllll\n   *\n   * Where:\n   *\n   * * rmid1: This indicates it is a Replication Group Message ID (allows for some sanity\n   *    checking that the bytes to follow are in fact a Replication Group Message ID).\n   *    The '1' is a version to differentiate from a new type of Replication Group Message ID\n   *    that may be introduced later.\n   * * ttttt: Timestamp portion of SUID, 20 bits.\n   * * rrrrrrrrrrr: Random portion of SUID, 44 bits.\n   * * mmmmmmmm: Most significant 32-bits of ack message ID.\n   * * llllllll: Least significant 32-bits of ack message ID.\n   */\n  isValue('id', rgmidStr.length, RMID_LEN, ErrorSubcode.PARAMETER_OUT_OF_RANGE, `length expected: ${RMID_LEN} but is ${rgmidStr.length}`);\n  if (!rgmidStr.startsWith(RMID_VERSION_1_PREFIX)) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not start with ${RMID_VERSION_1_PREFIX}`);\n  }\n  const rmidBufs = rgmidStr.substring(RMID_VERSION_1_PREFIX.length).split('-');\n  if (rmidBufs.length !== 4 ||\n      rmidBufs[0].length !== 5 ||\n      rmidBufs[1].length !== 11 ||\n      rmidBufs[2].length !== 8 ||\n      rmidBufs[3].length !== 8) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not have valid separation of components`);\n  }\n  /* convert rmid data string (hex) to bytes\n   * note use Buffer to read hex string to bytes as Long.from(str, 16) uses inaccurate\n   *  calculation and loses precision, while Buffer.from(str, 'hex') does not.\n   * Browser BufferImpl is dependent on parseInt reading the string text 2 characters\n   *  at a time letting a hex string chuck of [0-9][notHex], eg '9G', is parsed as a\n   *  value 9 not NaN leading to a \"valid\" read. This means data integrity is lost\n   *  on browser buffer parsing of hex. An independent string check is required to avoid this.\n   */\n  /* valid rmid component concatenated are hex only string with 32 character length */\n  const rmidHex = rmidBufs.join('').trim();\n  /* validRmidHexRegex uses the global flag and must be reset to advance the global regex\n   * lastIndex.\n   * reset regex\n   */\n  validRmidHexRegex.test('');\n  if (!validRmidHexRegex.test(rmidHex)) {\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, invalid data string value`);\n  }\n  /* convert hex string to bytes */\n  let rmidBuffer;\n  try {\n    rmidBuffer = BufferImpl.from(rmidHex, 'hex');\n  } catch (ex) {\n    /* error parsing hex string into buffer */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data, cause: ${ex.message}`);\n  }\n  /* validate read data len is expected for 128 bits of data */\n  const buflen = rmidBuffer ? rmidBuffer.length : 0;\n  if (buflen !== 16) {\n    /* error occured during read */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data from id expected length of 16 got ${buflen}`);\n  }\n  /* extract components into long storage */\n  const suid = Long.fromBits(rmidBuffer.readUInt32BE(4), rmidBuffer.readUInt32BE(0), true);\n  if (suid.eq(INVALID_SUID)) {\n    /* invalid suid detected raise out of range parameter OperationError */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, has invalid origin`);\n  }\n  const msgid = Long.fromBits(rmidBuffer.readUInt32BE(12), rmidBuffer.readUInt32BE(8), true);\n  /* return created id object with Long values */\n  return createReplicationGroupMessageId({ suid, msgid });\n}\n\nconst RgmidFactory = {};\nRgmidFactory.fromString = fromString;\nRgmidFactory.from = createReplicationGroupMessageId;\nRgmidFactory.INVALID_SUID = INVALID_SUID;\n\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const SMFLib = require('solclient-smf');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSM } = require('./consumer-fsm');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ErrorResponseSubcodeMapper,\n  ErrorSubcode,\n  OperationError } = require('solclient-error');\nconst { Flow, FlowOperation } = require('solclient-flow');\nconst { MessageConsumerEvent } = require('./message-consumer-event');\nconst { MessageOutcome } = require('solclient-message');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./message-consumer-properties');\nconst { MessageConsumerPropertiesValidator } = require('./message-consumer-properties-validator');\nconst { Queue, Topic } = require('solclient-destination');\nconst { QueueAccessType, QueuePermissions, QueueDiscardBehavior } = require('solclient-queue');\n\n\nfunction formatEventName(eventName) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(eventName)}`;\n}\n\nlet localCounter = 0;\nfunction getConsumerLocalName() {\n  return `ConsumerFSM ${localCounter++}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Message Consumer is created by calling {@link solace.Session#createMessageConsumer}.\n *\n * A MessageConsumer controls Guaranteed Message delivery to this client.\n *\n * Consumer characteristics and behavior are defined by {@link solace.MessageConsumerProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.MessageConsumerProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue or Guaranteed Message Topic Endpoint on the Solace Message Router.\n *\n * The MessageConsumer object is an EventEmitter, and will emit events to which the\n * application may choose to subscribe, such as the connection to the Solace Message Router\n * going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.MessageConsumerEventName#ACTIVE\n * @fires solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n * @fires solace.MessageConsumerEventName#DISPOSED\n * @fires solace.MessageConsumerEventName#DOWN\n * @fires solace.MessageConsumerEventName#DOWN_ERROR\n * @fires solace.MessageConsumerEventName#GM_DISABLED\n * @fires solace.MessageConsumerEventName#INACTIVE\n * @fires solace.MessageConsumerEventName#MESSAGE\n * @fires solace.MessageConsumerEventName#UP\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_OK\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n *\n *\n * @hideconstructor\n * @extends solace.Flow\n * @memberof solace\n */\nclass MessageConsumer extends Flow {\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessageConsumerProperties(properties);\n    MessageConsumerPropertiesValidator.validate(applyProperties.browser ?\n      'QueueBrowserProperties' : 'MessageConsumerProperties',\n                                                applyProperties, properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessageConsumerEventName.MESSAGE,\n      emits:  MessageConsumerEventName.values,\n      formatEventName,\n    });\n\n    const superFormatter = this.logger.formatter;\n    this.logger.formatter = (...args) => superFormatter('[message-consumer]', ...args);\n\n    this._active = undefined;\n    this._fsm = this._makeFSM();\n    this.endpointErrorId = undefined;\n    this.partitionGroupId = undefined; // support Partition Q feature\n\n    this._on(MessageConsumerEventName.ACTIVE, () => this._onFlowActive(true));\n    this._on(MessageConsumerEventName.INACTIVE, () => this._onFlowActive(false));\n    this._on(MessageConsumerEventName.DOWN_ERROR, this._onFlowDisconnected.bind(this));\n    this._on(MessageConsumerEventName.UP, this._onFlowUp.bind(this));\n    this._fsm.start(); // Subscriber flows self-manage, so they start immediately\n  }\n\n  _makeFSM() {\n    const properties = this._properties;\n    const name = `${getConsumerLocalName()}`;\n    return new ConsumerFSM({\n      name,\n      consumer:         this,\n      sessionInterface: this._sessionInterface,\n      properties,\n    });\n  }\n\n  /**\n   * Begins delivery of messages to this consumer. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created consumer is in started state.\n   *\n   * If the consumer was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.MessageConsumer.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    this._operationCheck(FlowOperation.START);\n    this._fsm.requestStartDispatchUser();\n  }\n\n  /**\n   * Stops messages from being delivered to this consumer from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.MessageConsumer#start} is called.\n   *\n   * If the consumer was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    this._operationCheck(FlowOperation.STOP);\n    this._fsm.requestStopDispatchUser();\n  }\n\n  /**\n   * Connects the consumer immediately. The application should add event listeners (see\n   * {@link solace.MessageConsumerEventName}). If there is no listener added for\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} then up to a window\n   * {@link solace.MessageConsumerProperties.windowSize} of messages can be queued internally.\n   * to the {@link solace.MessageConsumer} before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    if ((this._sessionInterface.getCapability(CapabilityType.GUARANTEED_MESSAGE_CONSUME)\n        !== null) &&\n        (!this._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME))) {\n      throw new OperationError('Consumer is not supported by router for this client',\n              ErrorSubcode.INVALID_OPERATION, null);\n    }\n    super.connect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_OPEN }));\n  }\n\n  /**\n   * Initiates an orderly disconnection of the Message Consumer. The API will send any pending\n   * client acknowledgements on the Message Consumer, then send an unbind request.\n   * Any messages subsequently\n   * received are discarded silently. When the unbind message is acknowledged, the application\n   * receives a {@link solace.MessageConsumerEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    super.disconnect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * Returns the destination that should be used to publish messages that this consumer\n   * will receive.\n   * * For topic endpoints, this is the topic to which the topic endpoint is subscribed.\n   * * For queues, this is the associated queue destination.\n   *\n   * The destination returned can\n   * be used to set the ReplyTo field in a message, or otherwise communicated\n   * to partners that need to send messages to this Message Consumer. This is especially useful\n   * for temporary endpoints (Queues and Topic Endpoints), as the destination\n   * is unknown before the endpoint is created.\n   *\n   * This method will succeed after {@link solace.MessageConsumerEventName#event:UP} for temporaries\n   * with generated destinations.\n   *\n   * @throws {solace.OperationError}\n   * * if the {@link solace.MessageConsumer} is disconnected and the destination is temporary.\n   *\n   * @returns {solace.Destination} The publishing destination that delivers to this consumer.\n   */\n  getDestination() {\n    const destination = this._fsm.getDestination();\n    if (destination instanceof Queue) {\n      return new Queue(destination);\n    }\n    return new Topic(destination);\n  }\n\n  // Application has disconnected the session, we must continue to orderly shut down\n  // unbinding Message Consumers,\n  // but Message Consumers that are up merely treat this as a 'down' event and\n  // transition to awaitingSessionUp\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DISCONNECT }));\n  }\n\n  _operationCheck(operation) {\n    super._operationCheck(operation);\n    switch (operation) {\n      case FlowOperation.GET_DESTINATION:\n        if (this._isDisconnected()) {\n          throw new OperationError('Cannot get destination of a disconnected flow',\n                                   ErrorSubcode.INVALID_OPERATION);\n        }\n        break;\n      default:\n    }\n  }\n\n  // ----\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @param {any} isAutoAcked whether this is an auto-acked message\n   * @internal\n   */\n  applicationAck(messageId, isAutoAcked = false) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application ack for ${messageId}`);\n    this._fsm.applicationAck(messageId, isAutoAcked);\n  }\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @param {solace.MessageOutcome} settlementOutcome The message settlement outcome\n   * @internal\n   */\n  applicationSettle(messageId, settlementOutcome) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application settlement for ${\n      messageId\n    } with outcome: solace.MessageOutcome.${MessageOutcome.nameOf(settlementOutcome)}`);\n    this._fsm.applicationSettle(messageId, settlementOutcome);\n  }\n\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessageConsumerEventName.DISPOSED;\n  }\n\n  /**\n   * @param {solace.Message} message The data message to handle\n   * @internal\n   */\n  handleDataMessage(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Handling data message');\n    message.setMessageConsumer(this);\n    this._fsm.acceptMessage(message);\n  }\n\n  /**\n   * @override\n   * @param {solace.AdProtocolMessage} message The control message to handle\n   * @internal\n   */\n  handleUncorrelatedControlMessage(message) {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n    LOG_INFO('Handling uncorrelated control message');\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.UNBIND: {\n        const responseCode = message.smfHeader.pm_respcode;\n        const description = message.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        LOG_TRACE(`Handling uncorrelated UNBIND. endpointErrorId: ${message.getEndpointErrorId()}`);\n        if (message.getEndpointErrorId() !== undefined) {\n          this.endpointErrorId = message.getEndpointErrorId();\n        }\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_UNBOUND,\n        },\n          new OperationError(description, errorSubcode, responseCode)\n        ));\n      }\n        break;\n      case SMFAdProtocolMessageType.FLOWCHANGEUPDATE:\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_ACTIVE_IND,\n        }, {\n          active: message.getActiveFlow(),\n        }));\n        break;\n      default:\n        LOG_DEBUG('Dropping unhandled AD control message: ',\n                  SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Creates and returns copy of the properties for this MessageConsumer.\n   *\n   * If the object was constructed using an {@link solace.AbstractQueueDescriptor},\n   * and the queue descriptor was subsequently connected to an endpoint, the\n   * `MessageConsumerProperties` returned will include a {@link solace.QueueDescriptor}\n   * that contains the resolved name.\n   *\n   * A new copy of the properties object is returned each time this property is accessed.\n   * The returned object cannot be polled for mutations such as the one described above.\n   *\n   * @returns {solace.MessageConsumerProperties} The properties associated with this object.\n   */\n  getProperties() {\n    return super.getProperties();\n  }\n\n  /**\n   * Resets the router state contained in the consumer, e.g. on VRN change\n   *\n   * @memberof MessageConsumer\n   * @internal\n   */\n  onVRNChanged() {\n    this.processFSMEvent(new ConsumerFSMEvent({\n      name: ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED,\n    }));\n  }\n\n  /**\n   * After the MessageConsumer has connected to an endpoint\n   * ({@link solace.MessageConsumerEventName#UP}), accesstype represents\n   *  the access type for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.accessType\n   * @type {solace.QueueAccessType}\n   */\n  get accessType() {\n    return this._accessType;\n  }\n  /**\n   * @param {solace.QueueAccessType} value The value to set\n   * @internal\n   */\n  set accessType(value) {\n    this._accessType = value;\n  }\n\n  /**\n   * Whether the consumer is active. If active indications for the consumer are not\n   * enabled, this will return undefined.\n   * @type {?Boolean}\n   * @internal\n   */\n  get active() {\n    return this._active;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set active(value) {\n    if (value !== this._active) {\n      this._emit(value ? MessageConsumerEventName.ACTIVE : MessageConsumerEventName.INACTIVE);\n    }\n    this._active = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, queueDiscardBehavior represents\n   * the discard behavior flags for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.queueDiscardBehaviour\n   * @type {solace.QueueDiscardBehavior}\n   */\n  get queueDiscardBehavior() {\n    return this._queueDiscardBehavior;\n  }\n  /**\n   * @param {solace.QueueDiscardBehavior} value The value to set\n   * @internal\n   */\n  set queueDiscardBehavior(value) {\n    this._queueDiscardBehavior = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}\n   * respectsTTL is `true` when the endpoint respects Time To Live on messages\n   * and 'false' otherwise.\n   * @name solace.MessageConsumer.respectsTTL\n   * @type {Boolean}\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set respectsTTL(value) {\n    this._respectsTTL = value;\n  }\n\n  /**\n   * Gets the flow ID for this consumer. This number will change between reconnects\n   * and is purely informational.\n   * @type {Long}\n   * @internal\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The value to set\n   * @internal\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, this property represents\n   * permissions granted by the router to this user on this Message Consumer\n   * @name solace.MessageConsumer.permissions\n   * @type {solace.QueuePermissions}\n   */\n  get permissions() {\n    return this._permissions || 0;\n  }\n  /**\n   * @param {Number} value The value to set\n   * @internal\n   */\n  set permissions(value) {\n    this._permissions = value;\n  }\n\n  _onFlowActive(isActive) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG(`Flow (flowId = ${this._flowId}) became ${isActive ? 'active' : 'inactive'}`);\n    this._active = isActive;\n  }\n\n  _onFlowDisconnected(error) {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`${this} disconnected: ${error}.message`);\n  }\n\n  _disposeFSM() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Disposing FSM');\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.DISPOSE }));\n  }\n\n  _onFlowUp() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Flow is up: flowId = ${this._flowId}`);\n  }\n\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'destination':          this._destination,\n      'accessType':           QueueAccessType.describe(this.accessType),\n      'permissions':          QueuePermissions.describe(this.permissions),\n      'respectsTTL':          this.respectsTTL,\n      'active':               this.wantFlowChangeNotify ? this.active : '(indications disabled)',\n      'wantFlowChangeNotify': this.wantFlowChangeNotify,\n      'queueDiscardBehavior': QueueDiscardBehavior.describe(this.queueDiscardBehavior),\n      'maxWindowSize':        this._fsm.maxWindowSize,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n  /**\n   * Subscribe the queue to a topic, always requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Object|String|null|undefined} correlationKey If specified, this value is\n   *                                echoed in the messageConsumer event within\n   *                                {@link MessageConsumerEvent}.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  addSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      true,\n      this,\n      callback,\n      requestTimeout);\n  }\n  /**\n   * Unsubscribe the queue from a topic, requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * removed successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the message consumer event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Object|String|null|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  removeSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      false,\n      this,\n      callback,\n      requestTimeout);\n  }\n}\n\nmodule.exports.MessageConsumer = MessageConsumer;\n","module.exports = require(\"bufferutil\");","function apiEnv(envObject) {\n  if (typeof BUILD_ENV !== 'undefined' && !BUILD_ENV.TEST) {\n    throw new Error('Test environment will not override build environment');\n  }\n  global.BUILD_ENV = Object.assign({}, envObject, { TEST: true });\n  return global.BUILD_ENV;\n}\n\nif (typeof BUILD_ENV !== 'undefined' && BUILD_ENV.TEST === false) {\n  apiEnv.target = () => apiEnv();\n} else {\n  const configs = {\n    node: {\n      TARGET_NAME: 'node',\n      TARGET_NODE: true,\n    },\n    browser: {\n      TARGET_NAME:    'browser',\n      TARGET_BROWSER: true,\n    },\n    debug: {\n      MODE_NAME:    'debug',\n      MODE_DEBUG:   true,\n      MODE_RELEASE: false,\n    },\n    release: {\n      MODE_NAME:    'release',\n      MODE_DEBUG:   false,\n      MODE_RELEASE: true,\n    },\n  };\n\n  apiEnv.target = function named(...args) {\n    const objects = args.map((arg) => {\n      if (typeof arg === 'string') {\n        const obj = configs[arg];\n        if (!obj) {\n          throw new Error(`Environment ${arg} is not defined; use ${Object.keys(configs).join(', ')}`);\n        }\n        return obj;\n      } else if (arg && typeof arg === 'object') {\n        return arg;\n      }\n\n      throw new Error(`Unrecognized argument ${arg}`);\n    });\n    return apiEnv(Object.assign(...objects));\n  };\n}\nmodule.exports = apiEnv;\n","const { AuthenticationScheme, CapabilityType, ClientCapabilityType, MutableSessionProperty, SessionProperties } = require('solclient-session');\nconst { BaseMessage } = require('./base-message');\nconst { Bits, Convert } = require('solclient-convert');\nconst { DestinationType, DestinationUtil } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Process, StringUtils, Version } = require('solclient-util');\nconst { SMFClientCtrlMessageType } = require('../smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam, SMFClientCtrlAuthType } = require('../smf-client-ctrl-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\n\nconst { LOG_TRACE } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\nconst {\n  int8ToStr, strToInt8,\n  int16ToStr, int32ToStr,\n  strToInt16, strToInt32,\n} = Convert;\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\nconst {\n  validateAndEncode,\n} = DestinationUtil;\n\nconst BOOLEAN_CAPS_BITS = [\n  CapabilityType.JNDI,\n  CapabilityType.COMPRESSION,\n  CapabilityType.GUARANTEED_MESSAGE_CONSUME,\n  CapabilityType.TEMPORARY_ENDPOINT,\n  CapabilityType.GUARANTEED_MESSAGE_PUBLISH,\n  CapabilityType.GUARANTEED_MESSAGE_BROWSE,\n  CapabilityType.ENDPOINT_MGMT,\n  CapabilityType.SELECTOR,\n  CapabilityType.ENDPOINT_MESSAGE_TTL,\n  CapabilityType.QUEUE_SUBSCRIPTIONS,\n  null, // skip obsolete FLOW_RECOVER\n  CapabilityType.SUBSCRIPTION_MANAGER,\n  CapabilityType.MESSAGE_ELIDING,\n  CapabilityType.TRANSACTED_SESSION,\n  CapabilityType.NO_LOCAL,\n  CapabilityType.ACTIVE_CONSUMER_INDICATION,\n  CapabilityType.PER_TOPIC_SEQUENCE_NUMBERING,\n  CapabilityType.ENDPOINT_DISCARD_BEHAVIOR,\n  CapabilityType.CUT_THROUGH,\n  null, // skip OPENMAMA\n  CapabilityType.MESSAGE_REPLAY,\n  CapabilityType.COMPRESSED_SSL,\n  null, // skipping LONG_SELECTORS\n  CapabilityType.SHARED_SUBSCRIPTIONS,\n  CapabilityType.BR_REPLAY_ERRORID,\n  CapabilityType.AD_APP_ACK_FAILED,\n  CapabilityType.VAR_LEN_EXT_PARAM,\n];\n\nconst CLIENT_CAPS_VALUES = new Map([\n  [ClientCapabilityType.UNBIND_ACK, 0x80],\n  [ClientCapabilityType.BR_ERRORID, 0x40],\n  [ClientCapabilityType.PQ, 0x20],\n]);\n\n/**\n * @classdesc ClientCtrlMessage\n * Represents a ClientCtrl request or reply message\n * @private\n */\nclass ClientCtrlMessage extends BaseMessage {\n  constructor(messageType = 0) {\n    super(new SMFHeader(SMFProtocol.CLIENTCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = 1;\n  }\n\n  getP2PTopicValue() {\n    const p2pParam = this.getParameter(SMFClientCtrlParam.P2PTOPIC);\n    if (!p2pParam) {\n      return null;\n    }\n    return stripNullTerminate(p2pParam.getValue());\n  }\n\n  getVpnNameInUseValue() {\n    const vpnParam = this.getParameter(SMFClientCtrlParam.MSGVPNNAME);\n    if (!vpnParam) {\n      return null;\n    }\n    return stripNullTerminate(vpnParam.getValue());\n  }\n\n  getVridInUseValue() {\n    const vridParam = this.getParameter(SMFClientCtrlParam.VRIDNAME);\n    if (!vridParam) {\n      return null;\n    }\n    return stripNullTerminate(vridParam.getValue());\n  }\n\n  getUserIdValue() {\n    const userIdParam = this.getParameter(SMFClientCtrlParam.USERID);\n    if (!userIdParam) {\n      return null;\n    }\n    return stripNullTerminate(userIdParam.getValue());\n  }\n\n  getRouterCapabilities() {\n    let caps = [];\n\n    // Parse the composite capabilities parameter\n    let capParam = this.getParameter(SMFClientCtrlParam.ROUTER_CAPABILITIES);\n    if (capParam) {\n      caps = ClientCtrlMessage.prmParseCapabilitiesValue(capParam.getValue(), caps);\n    }\n\n    // Parse out the router status strings\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREVERSION);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_VERSION] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREDATE);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_DATE] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PLATFORM);\n    if (capParam) {\n      caps[CapabilityType.PEER_PLATFORM] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PHYSICALROUTERNAME);\n    if (capParam) {\n      caps[CapabilityType.PEER_ROUTER_NAME] = stripNullTerminate(capParam.getValue());\n    }\n    return caps;\n  }\n\n\n  static prmGetDtoPriorityValue(dto) {\n    if (dto.local === undefined || dto.network === undefined) {\n      return false;\n    }\n    let twobyte = 0;\n    twobyte = setBits(twobyte, dto.local, 8, 8);\n    twobyte = setBits(twobyte, dto.network, 0, 8);\n    return int16ToStr(twobyte);\n  }\n\n  static prmParseDtoPriorityValue(strDtoPriority) {\n    const dto = {};\n    const twobyte = strToInt16(strDtoPriority.substr(0, 2));\n    dto.local = bits(twobyte, 8, 8);\n    dto.network = bits(twobyte, 0, 8);\n    return dto;\n  }\n\n  /*\n  strCapabilities: parameter value\n  caps: an already existing hash array of CapabilityType\n   */\n  static prmParseCapabilitiesValue(strCapabilities, capsIn) {\n    const caps = capsIn;\n    if (!(strCapabilities && caps)) {\n      return false;\n    }\n    const CT = CapabilityType;\n    let pos = 0;\n\n    // parse boolean capabilities\n    const boolCapCount = strToInt8(strCapabilities[pos]);\n    ++pos;\n\n    // The boolean caps are listed in order as in the documentation,\n    // that is from MSB to LSB for each caps byte.\n    let capsByte;\n    for (let bitIndex = 0; bitIndex < boolCapCount; ++bitIndex) {\n      const msbIndex = bitIndex & 0x7;\n      if (msbIndex === 0) { // Consume a byte\n        capsByte = strToInt8(strCapabilities[pos]);\n        ++pos;\n      }\n      const capsKey = BOOLEAN_CAPS_BITS[bitIndex];\n      if (!capsKey) continue; // We don't know about this cap\n      // so set caps bits from MSB (bit 7) to LSB (bit 0)\n      caps[capsKey] = !!bits(capsByte, 7 - msbIndex, 1);\n    }\n    // parse non-boolean capabilities\n    const sanityLoop = 500;\n    for (let i = 0; pos < strCapabilities.length && i < sanityLoop; ++i) {\n      const onebyte = strToInt8(strCapabilities[pos]); // type\n      pos++;\n      const capLen = strToInt32(strCapabilities.substr(pos, 4)) - 5;\n      pos += 4;\n      const strValue = strCapabilities.substr(pos, capLen);\n      pos += capLen;\n      switch (onebyte) {\n        case 0x00:\n          caps[CT.PEER_PORT_SPEED] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x01:\n          caps[CT.PEER_PORT_TYPE] = (strValue.length === 1) ? strToInt8(strValue) : 0;\n          break;\n        case 0x02:\n          caps[CT.MAX_GUARANTEED_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x03:\n          caps[CT.MAX_DIRECT_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        default:\n          // NOOP (unknown cap)\n          break;\n      }\n    }\n    return caps;\n  }\n\n\n  static getLogin(sprop, compressedTLS, plaintextTLS, correlationTag) {\n    function clientCapsToStr(clientCapList) {\n      const highestCap = Math.max.apply(null, clientCapList) + 1;\n      let capBits = 0;\n      clientCapList.forEach((cap) => { capBits += CLIENT_CAPS_VALUES.get(cap); });\n      return int8ToStr(highestCap) + int8ToStr(capBits);\n    }\n    if (!(sprop instanceof SessionProperties)) {\n      return false;\n    }\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.LOGIN);\n    const smfHeader = cc._smfHeader;\n    const isClientCert = sprop.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    smfHeader.pm_corrtag = correlationTag;\n    if (sprop.password && !isClientCert) {\n      smfHeader.pm_password = sprop.password;\n    }\n    if (sprop.userName) {\n      smfHeader.pm_username = sprop.userName;\n    }\n    if (sprop.subscriberLocalPriority && sprop.subscriberNetworkPriority) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.DELIVERTOONEPRIORITY,\n                                       ClientCtrlMessage.prmGetDtoPriorityValue({\n                                         local:   sprop.subscriberLocalPriority,\n                                         network: sprop.subscriberNetworkPriority })));\n    }\n    if (sprop.vpnName && sprop.vpnName.length > 0) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.MSGVPNNAME,\n                                       nullTerminate(sprop.vpnName)));\n    }\n\n    if (sprop.applicationDescription && sprop.applicationDescription.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(sprop.applicationDescription)));\n    }\n\n    if (sprop.userIdentification && sprop.userIdentification.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.USERID,\n                                       nullTerminate(sprop.userIdentification)));\n    }\n\n    if (sprop.authenticationScheme === AuthenticationScheme.OAUTH2) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.OAUTH2));\n\n      if (sprop.idToken) {\n        smfHeader.pm_oidc_id_token = nullTerminate(sprop.idToken);\n      }\n\n      if (sprop.accessToken) {\n        smfHeader.pm_oauth2_access_token = nullTerminate(sprop.accessToken);\n      }\n\n      if (sprop.issuerIdentifier) {\n        smfHeader.pm_oauth2_issuer_identifier = nullTerminate(sprop.issuerIdentifier);\n      }\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENTNAME,\n                                     nullTerminate(sprop.clientName)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.PLATFORM,\n                                     nullTerminate(`${Process.platform} - JS API (${Version.mode})`)));\n\n    if (sprop.noLocal) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.NO_LOCAL,\n                                       '\\x01'));\n    }\n\n    if (isClientCert) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.CLIENT_CERTIFICATE));\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREDATE,\n                                     nullTerminate(Version.formattedDate)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREVERSION,\n                                     nullTerminate(Version.version)));\n\n    if (compressedTLS && plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=1 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x01'));\n    } else if (compressedTLS) {\n      LOG_TRACE('Adding SslDowngrade=2 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x02'));\n    } else if (plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=0 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x00'));\n    }\n    const clientCaps = clientCapsToStr([ClientCapabilityType.UNBIND_ACK,\n      ClientCapabilityType.BR_ERRORID, ClientCapabilityType.PQ]);\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENT_CAPABILITIES,\n                                     clientCaps));\n                                     //'\\x02\\xc0'));\n                                     //'\\x01\\x80'));\n    const keepaliveVal = int32ToStr((sprop.keepAliveIntervalInMsecs) / 1000);\n    cc.addParameter(new SMFParameter(0,\n                                    SMFClientCtrlParam.KEEP_ALIVE_INTERVAL,\n                                    keepaliveVal));\n\n    return cc;\n  }\n\n  /**\n   * Get a CC update message.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property to update\n   * @param {String} newValue The new value for the property\n   * @param {String} correlationTag The correlation tag for the request\n   * @returns {ClientCtrlMessage} The new UPDATE message\n   *\n   * @private\n   */\n  static getUpdate(mutableSessionProperty, newValue, correlationTag) {\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.UPDATE);\n    const smfHeader = cc.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n    if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n      const appdesc = (newValue || '').toString().substr(0, 250);\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(appdesc)));\n    } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n      const error =\n        ClientCtrlMessage.validateClientName(\n          newValue,\n          errorMessage =>\n            new OperationError(`Invalid clientName: ${errorMessage}`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n      if (error) {\n        throw error;\n      }\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTNAME,\n                                       nullTerminate(newValue)));\n    }\n    return cc;\n  }\n\n  static validateClientName(strName, exceptionCreator) {\n    const encodeResult = validateAndEncode(DestinationType.TOPIC, strName, exceptionCreator);\n    if (encodeResult.error) {\n      return encodeResult.error;\n    }\n    // Add 1: bytes includes terminator, 160 excludes terminator\n    if (encodeResult.bytes.length > 161) {\n      return exceptionCreator('Client Name too long (max length: 160).');\n    }\n    return null;\n  }\n}\n\n\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of user Class of Service (COS) levels. The COS is set\n * on a Message with {@link solace.Message#setUserCos}\n * The Class of Service has different semantics for direct and guaranteed messages.\n *\n * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n * class of service selects the weighted round-robin delivery queue when the\n * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n *\n * For messages published as guaranteed messages\n * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n * that message would cause any queue or topic-endpoint to exceed its configured\n * low-priority-max-msg-count.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageUserCosType = {\n  /**\n   * Direct Messages: Lowest priority, use Solace Message Router client D-1 queues for delivery.\n   *\n   * Guaranteed Messages: Messages can be rejected if the message would cause any\n   * queue or topic-endpoint to exceed its configured <i>low-priority-max-msg-count</i>.\n   * @type {Number}\n   */\n  COS1: 0,\n  /**\n   * Direct Messages: Medium priority, use Solace Message Router client D-2 queues for delivery.\n   *\n   * Guaranteed Messages: N/A (same as COS3)\n   * @type {Number}\n   */\n  COS2: 1,\n  /**\n   * Direct Messages: Highest priority, use Solace Message Router client D-3 queues for delivery.\n   *\n   * Guaranteed Messages: Messages are not rejected for exceeding <i>low-priority-max-msg-count</i>.\n   * Messages may still be rejected for other reasons such as Queue 'Spool Over Quota'.\n   * @type {Number}\n   */\n  COS3: 2,\n};\n\nmodule.exports.MessageUserCosType = Enum.new(MessageUserCosType);\n","const {\n  AbstractQueueDescriptor,\n  QueueDescriptor,\n  QueueDescriptorValidator,\n  QueueProperties,\n  QueuePropertiesValidator,\n  QueueType,\n} = require('solclient-queue');\nconst { APIPropertiesValidators } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { ReplayStartLocation } = require('solclient-replaystart');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valInstance,\n  valIsMember,\n  valNumber,\n  valRange,\n  valTopicStringOrEmpty,\n} = APIPropertiesValidators;\n\nfunction valTopicEndpointSubscription(typeDesc, instance) {\n  if (instance.queueDescriptor.getType() === QueueType.TOPIC_ENDPOINT) {\n    if (instance.queueDescriptor.isDurable() && !instance.createIfMissing) {\n      if (!instance.topicEndpointSubscription) {\n        throw new OperationError('topicEndpointSubscription must be set when queueDescriptor ' +\n                                'refers to a durable topic endpoint and not allowed to create.',\n                                ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n  } else if (instance.topicEndpointSubscription) {\n    // is QueueType.QUEUE\n    throw new OperationError('topicEndpointSubscription is set, but queueDescriptor ' +\n                              'refers to a queue that is not of type QueueType.TOPIC_ENDPOINT',\n                              ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nconst MessageConsumerPropertiesValidator = {\n  validate(prefix, instance, rawProperties) {\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeTimeoutInMsecs') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeTimeoutInMsecs')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeTimeoutInMsecs and acknowledgeTimeoutInMsecs are mutually exclusive`,\n                                ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeThresholdPercentage') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeThreshold')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeThresholdPercentage and acknowledgeThreshold are mutually exclusive`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n\n    const v = validateInstance.bind(null, prefix, instance);\n    if (!(instance.queueDescriptor instanceof AbstractQueueDescriptor ||\n          instance.queueDescriptor instanceof QueueDescriptor)) {\n      throw new OperationError(`${prefix} validation: queue descriptor must be ` +\n                                'an AbstractQueueDescriptor or a QueueDescriptor',\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    QueueDescriptorValidator.validate(instance.queueDescriptor);\n\n    if (instance.queueProperties) {\n      if (instance.queueDescriptor.durable && !instance.createIfMissing) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot be set unless ` +\n          'queueDescriptor refers to a temporary queue, or createIfMissing is set.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      v('queueProperties', [valInstance, QueueProperties, 'QueueProperties']);\n      QueuePropertiesValidator.validate(instance.queueProperties);\n      if (!instance.queueDescriptor.durable &&\n        Check.something(instance.queueProperties.accessType)) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot specify accessType ` +\n                                 'in creation of a temporary queue',\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n\n    // Validate TE subscription\n\n    if (instance.queueDescriptor.type === QueueType.TOPIC_ENDPOINT) {\n      // QueueType.TOPIC_ENDPOINT\n      if (instance.queueDescriptor.durable &&\n        !instance.createIfMissing &&\n        !instance.topicEndpointSubscription) {\n        throw new OperationError(`${prefix} validation: topicEndpointSubscription must be set for durable ` +\n          'topic endpoints unless creation is allowed.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (instance.topicEndpointSubscription) {\n      throw new OperationError(`${prefix} validation: topicEndpointSubscription cannot be set unless ` +\n        'descriptor.type is TOPIC_ENDPOINT',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n    v('connectAttempts', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('topicEndpointSubscription', [valTopicEndpointSubscription], [valTopicStringOrEmpty]);\n\n    v('acknowledgeMode', [valIsMember, MessageConsumerAcknowledgeMode, 'MessageConsumerAcknowledgeMode']);\n    v('transportAcknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 1500]);\n    v('transportAcknowledgeThresholdPercentage', [valNumber], [valRange, 1, 75]);\n\n    v('activeIndicationEnabled', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('reconnectIntervalInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n\n    if (instance.replayStartLocation &&\n      !(instance.replayStartLocation instanceof ReplayStartLocation)) {\n      throw new OperationError(`${prefix} validation: replayStartLocation must be ` +\n        'an instance of ReplayStartLocation',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n};\n\nmodule.exports.MessageConsumerPropertiesValidator = MessageConsumerPropertiesValidator;\n","const MessageLib = require('solclient-message');\nconst SessionLib = require('solclient-session');\nconst SMFLib = require('solclient-smf');\nconst StatType = require('solclient-stats');\nconst {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTStreamContainer,\n} = require('solclient-sdt');\nconst { CacheCBInfo } = require('./cache-cb-info');\nconst { CacheContext } = require('./cache-context');\nconst { CacheGetResult } = require('./cache-get-result');\nconst { CacheLiveDataAction } = require('./cache-live-data-actions');\nconst { CacheRequest } = require('./cache-request');\nconst { CacheRequestResult } = require('./cache-request-result');\nconst { CacheRequestType } = require('./cache-request-types');\nconst { CacheReturnCode } = require('./cache-return-codes');\nconst { CacheReturnSubcode } = require('./cache-return-subcodes');\nconst { CacheSessionProperties } = require('./cache-session-properties');\nconst { CacheSessionSubscribeInfo } = require('./cache-session-subscribe-info');\nconst { Destination,\n        Topic } = require('solclient-destination');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\nconst noOp = () => undefined;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.Session#createCacheSession}</b>\n * <p>\n * A session for performing cache requests.\n *\n * Applications must use {@link solace.Session#createCacheSession} to construct this class.\n *\n * The supplied {@link solace.CacheSessionProperties} will be copied. Subsequent modifications\n * to the passed properties will not modify the session. The properties may be reused.\n *\n * @hideconstructor\n * @memberof solace\n */\nclass CacheSession {\n  /*\n   * @constructor\n   * @private\n   *\n   * @param {solace.CacheSessionProperties} props The properties for the cache session.\n   * @param {solace.Session} session The Session on which the CacheSession will issue\n   *  cache requests.\n   * @param {Object} privateInterface Private methods exposed to this CacheSession.\n   *\n   * @throws {solace.OperationError}\n   *  * if the parameters have an invalid type or value;\n   *    subcode {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  constructor(props, session, privateInterface) {\n    CacheSession._validateProps(props);\n    const properties = new CacheSessionProperties(props.cacheName,\n                                                  props.maxAgeSec,\n                                                  props.maxMessages,\n                                                  props.timeoutMsec);\n    Object.assign(this,\n                  {\n                    _outstandingRequests:          {},\n                    _outstandingIDs:               {},\n                    _disposed:                     false,\n                    _nextMessageCallbackInfo:      null,\n                    _nextSessionEventCallbackInfo: null,\n                    _properties:                   properties,\n                    _session:                      session,\n                    _sessionIF:                    privateInterface,\n                  });\n    this._connectToSession(session);\n  }\n\n  /**\n   * @param {solace.Session} session The session to connect\n   * @private\n   */\n  _connectToSession(session) {\n    this._nextSessionEventCallbackInfo = session.getEventCBInfo();\n    this._nextMessageCallbackInfo = session.getMessageCBInfo();\n    session.setMessageCBInfo(new SessionLib.MessageRxCBInfo((_, message) => {\n      this._handleMessage(message);\n    }, this));\n    session.setEventCBInfo(this._createCompoundEventCB(this._nextSessionEventCallbackInfo));\n  }\n\n  /**\n   * Takes the session's existing event callback and sets it as the next delegate in a\n   * chain of responsibility. The next delegate could be the client application, or another\n   * cache session.\n   * @param {SessionEventCBInfo} nextDelegate The next event receiver in the chain\n   * @returns {SessionEventCBInfo} An event receiver that delegates to the supplied receiver\n   * @private\n   */\n  _createCompoundEventCB(nextDelegate) {\n    return new SessionLib.SessionEventCBInfo((session, sessionEvent, userObject, rfuObject) => {\n      this._handleSessionEvent(nextDelegate, session, sessionEvent, userObject, rfuObject);\n    }, null);\n  }\n\n  /**\n   * Modified chain of responsibility. Handles the event, then passes the event to the next\n   * delegate.\n   * @param {SessionEventCBInfo} nextDelegate The next delegate to notify\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} sessionEvent The session event to dispatch\n   * @private\n   */\n  _handleSessionEvent(nextDelegate, session, sessionEvent /*, userObject, rfuObject */) {\n    const passEvent = this._processSessionEvent(session, sessionEvent);\n    if (!passEvent) {\n      return;\n    }\n    const cbUserObject = nextDelegate.userObject;\n    if (!cbUserObject) {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent);\n    } else {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to forward\n   * @private\n   */\n  _sendToNextDelegate(message) {\n    const cbUserObject = this._nextMessageCallbackInfo.userObject;\n    if (!cbUserObject) {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message);\n    } else {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} event The event to process\n   * @returns {Boolean} true if event should pass to next delegate\n   * @private\n   */\n  _processSessionEvent(session, event) {\n    switch (event.sessionEventCode) {\n      case SessionLib.SessionEventCode.SUBSCRIPTION_ERROR:\n      case SessionLib.SessionEventCode.SUBSCRIPTION_OK:\n        return this._checkSubscriptionStatus(event);\n      case SessionLib.SessionEventCode.DOWN_ERROR:\n        this.dispose();\n        return true;\n      default:\n        LOG_TRACE(`Unhandled session event: ${event.sessionEventCode}`);\n        return true;\n    }\n  }\n\n  /**\n   * @param {SessionEvent} event The event to check\n   * @returns {Boolean} `true` if event should pass to next delegate\n   * @private\n   */\n  _checkSubscriptionStatus(event) {\n    // Incremental checks for whether this is our subscription.\n    if ((event.correlationKey === null || event.correlationKey === undefined) ||\n        (!(event.correlationKey instanceof CacheSessionSubscribeInfo)) ||\n        (event.correlationKey.cacheSession !== this)) {\n      return true;\n    }\n    const request = this._getOutstandingRequest(event.correlationKey.correlationID);\n    if (!request) {\n      LOG_WARN(`No request found for subscription success on ${event.correlationKey.topic}`);\n      return true;\n    }\n    if (event.sessionEventCode === SessionLib.SessionEventCode.SUBSCRIPTION_OK) {\n      this._handleSubscriptionSuccess(request, event.correlationKey.topic);\n      return false;\n    }\n    this._handleSubscriptionError(request, event);\n    return false;\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache on which to register success\n   * @param {Topic} topic The topic on which to issue the request.\n   * @private\n   */\n  _handleSubscriptionSuccess(requestIn /*, topic */) {\n    // Null out this field and check completion status.\n    const request = requestIn;\n    request.subscriptionWaiting = null;\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to register failure\n   * @private\n   */\n  _handleSubscriptionError(request/*, event */) {\n    this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.SUBSCRIPTION_ERROR);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to check completion\n   * @private\n   */\n  _checkRequestCompletion(request) {\n    if (request.childRequests.length) {\n      // Not finished with spawned child requests.\n      LOG_DEBUG(`Awaiting termination of ${request.childRequests.length} children`);\n      return;\n    }\n    if (request.subscriptionWaiting) {\n      // Waiting for confirmation of subscription to a topic.\n      LOG_DEBUG('Awaiting subscription');\n      return;\n    }\n    if (request.timeoutHandle !== null && (!request.replyReceived)) {\n      LOG_DEBUG('Awaiting timeout');\n      return;\n    }\n    if (request.parentRequest) {\n      // We're no longer waiting for a child to complete.\n      const parent = request.parentRequest;\n      request.cancel();\n      this._unregisterRequest(request);\n      this._checkRequestCompletion(parent);\n      return;\n    }\n\n    // This is a parent request and it is done.\n    let code;\n    let subcode;\n    if (request.isSuspect) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.SUSPECT_DATA;\n    } else if (request.dataReceived) {\n      code = CacheReturnCode.OK;\n      if (request.liveDataFulfilled) {\n        subcode = CacheReturnSubcode.LIVE_DATA_FULFILL;\n      } else {\n        subcode = CacheReturnSubcode.REQUEST_COMPLETE;\n      }\n    } else if (request.replyReceived) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.NO_DATA;\n    } else {\n      throw new Error('Sanity: should never happen');\n    }\n    this._terminateRequest(request, code, subcode);\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendSeeOther(parentRequest, cacheGetResult) {\n    const clusterName = cacheGetResult.clusterNameStream.getNext().getValue();\n    // var root = parentRequest.getRootRequest();\n    LOG_DEBUG(`See Other for ${clusterName}. Sending child request`);\n    const childRequest = new CacheRequest(this,\n                                          CacheRequestType.GET_MSG_REQUEST,\n                                          parentRequest.requestID,\n                                          new CacheCBInfo(noOp, null),\n                                          parentRequest.liveDataAction,\n                                          parentRequest.topic,\n                                          clusterName);\n    // Add this request to its parent\n    parentRequest.addChild(childRequest);\n    // Start the request\n    this._registerRequest(childRequest);\n    childRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                     this._properties.timeoutMsec);\n    this._startCacheRequest(childRequest, // request to send\n                            null, // no session ID\n                            null, // no specific instance target\n                            true); // don't return other clusters\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendGetNext(parentRequest, cacheGetResult) {\n    LOG_DEBUG('Cache result has more, sending GET_NEXT_MSG_REQUEST as child');\n    // This is how to trigger \"Invalid Session\":\n    //require(\"child_process\").execSync('sleep 11');\n    const nextRequest = new CacheRequest(this,\n                                         CacheRequestType.GET_NEXT_MSG_REQUEST,\n                                         parentRequest.requestID,\n                                         new CacheCBInfo(noOp, null),\n                                         parentRequest.liveDataAction,\n                                         parentRequest.topic,\n                                         parentRequest.cacheName);\n    // Set up parent-child relationship\n    parentRequest.addChild(nextRequest);\n    // Start the request\n    this._registerRequest(nextRequest);\n    nextRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                    this._properties.timeoutMsec);\n    this._startCacheRequest(nextRequest, // request to send\n                            cacheGetResult.sessionID, // supplied session ID\n                            cacheGetResult.replyTo); // supplied cache instance target\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @private\n   */\n  _handleMessage(message) {\n    // Determine if the message is associated with one of this session's requests\n    const correlationID = message.getCorrelationId();\n    const request = correlationID === null || correlationID === undefined\n      ? null\n      : this._outstandingRequests[correlationID];\n\n    // This could be live data on a relevant topic.  Check that.\n    if (!request) {\n      if (this._relevantLiveData(message)) {\n        this._sendToNextDelegate(message);\n      }\n      return;\n    }\n\n    // It's ours!\n    LOG_DEBUG(`Processing reply to ${request}`);\n    // bug 36404: We have a response. Cancel the timeout for this request.\n    request.clearRequestTimeout();\n    const streamField = message.getSdtContainer();\n    const stream = streamField && streamField.getValue();\n    if (!stream) {\n      LOG_INFO(\n        `Invalid message format for cache response: no SDT container (${\n        streamField}) or stream (${stream})`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n    // The session will never see this reply, so we need to update the stats\n    // from here.\n    this._incStat(StatType.RX_REPLY_MSG_RECVED);\n    request.replyReceived = true;\n\n    // If the request was fulfilled by live data, discard the reply and stop processing\n    // the response.\n    if (request.getRootRequest().liveDataFulfilled) {\n      this._incStat(StatType.CACHE_REQUEST_FULFILL_DISCARD_RESPONSE);\n      this._checkRequestCompletion(request);\n      return;\n    }\n\n    if (!stream) {\n      LOG_INFO('Invalid cache response did not fulfill request. Skipping response processing');\n      return;\n    }\n\n    try {\n      // Fill the result object with values from the result stream.\n      const result = new CacheGetResult();\n      result.readFromStream(stream);\n      result.replyTo = message.getReplyTo();\n      if (result.responseString) {\n        LOG_DEBUG(`Cluster response: ${result.responseString}`);\n      }\n        if (result.responseCode === 7 || result.responseString == \"Invalid Session\") {\n          LOG_INFO(`Cluster response indicates invalid session: ${result.responseString} code: ${result.responseCode}`);\n          this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.INVALID_SESSION);\n        }\n      // Apply the isSuspect flag. Don't clear it if the result is already suspect.\n      request.isSuspect = request.isSuspect || result.isSuspect;\n      // Get any inner messages.\n      const messages = CacheSession._decodeMessageStream(request, result);\n      // Update statistics.\n      this._incStat(StatType.RX_CACHE_MSG, messages.length);\n      // If we have more results to come, send a get next request.\n      if (result.hasMore) {\n        this._sendGetNext(request, result);\n      }\n      // If we have more clusters to visit, send requests to those clusters.\n      if (result.clusterNameStream) {\n        LOG_DEBUG('Receiving cluster stream');\n        while (result.clusterNameStream.hasNext()) {\n          this._sendSeeOther(request, result);\n        }\n      }\n      // Forward any retrieved messages.\n      if (messages) {\n        messages.forEach((m) => {\n          this._sendToNextDelegate(m);\n        });\n      }\n      this._checkRequestCompletion(request);\n    } catch (exception) {\n      LOG_INFO(`Invalid message format for cache response: ${exception.stack}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @returns {Boolean} `true` if the next delegate should handle this message\n   * @private\n   */\n  _relevantLiveData(message) {\n    // If the next message processor does not belong to a cache\n    // session, and this is a CRQ message, suppress it.\n    if (message.getCorrelationId() &&\n        message.getCorrelationId().startsWith(CACHE_REQUEST_PREFIX) &&\n        !(this._nextMessageCallbackInfo.userObject instanceof CacheSession)) {\n      LOG_WARN('DROP: Dropping CRQ reply due to no remaining Cache Session processors on message ' +\n               'callback chain');\n      this._incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return false;\n    }\n    // Otherwise, assume the message should flow through.\n    // If all _performLiveDataAction calls return true, we return true;\n    return Object.keys(this._outstandingRequests).every(checkCID =>\n      this._performLiveDataAction(this._outstandingRequests[checkCID], message));\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache request for which to perform the action\n   * @param {Message} message The message to process on the request\n   * @returns {Boolean} true if message should flow through after action.\n   * @private\n   */\n  _performLiveDataAction(requestIn, message) {\n    const request = requestIn;\n    request.dataReceived = true;\n    switch (request.liveDataAction) {\n      case CacheLiveDataAction.QUEUE:\n        request.queuedLiveData.push(message);\n        return false;\n\n      case CacheLiveDataAction.FULFILL:\n        if (!request.liveDataFulfilled) {\n          this._fulfillRequest(request);\n        }\n        return true;\n\n      default:\n        return true;\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to fulfill\n   * @private\n   */\n  _fulfillRequest(requestIn) {\n    const request = requestIn;\n    request.liveDataFulfilled = true;\n    this._trackCompletionStats(CacheReturnCode.OK, CacheReturnSubcode.LIVE_DATA_FULFILL);\n    // We have more work to do here -- we need to return the live data first.\n    // Schedule the notification for later.\n    setTimeout(() => {\n      CacheSession._notifyCallback(request,\n                                   CacheReturnCode.OK,\n                                   CacheReturnSubcode.LIVE_DATA_FULFILL,\n                                   request.getTopic(),\n                                   null);\n    }, 0);\n  }\n\n  /**\n   * Disposes the session.  No cache requests will be sent by this CacheSession after it is\n   * _disposed.\n   *\n   * Any subsequent operations on the session will throw {OperationError}.\n   *\n   * Any pending operations will immediately terminate, returning\n   *   * {@link solace.CacheRequestResult}\n   *     * #returnCode === {@link solace.CacheReturnCode.INCOMPLETE}\n   *     * #subcode === {@link solace.CacheReturnSubcode.CACHE_SESSION_DISPOSED}\n   * @throws {solace.OperationError} if the CacheSession is already _disposed.\n   */\n  dispose() {\n    const toTerminate = Object.keys(this._outstandingRequests)\n      .map(correlationID => this._outstandingRequests[correlationID])\n      .filter(request => request instanceof CacheRequest);\n    toTerminate.forEach((request) => {\n      this._terminateRequest(request,\n                             CacheReturnCode.INCOMPLETE,\n                             CacheReturnSubcode.CACHE_SESSION_DISPOSED);\n    });\n    this._outstandingRequests = [];\n    // Restore original listeners\n    this._session.setEventCBInfo(this._nextSessionEventCallbackInfo);\n    this._session.setMessageCBInfo(this._nextMessageCallbackInfo);\n    // Set _disposed\n    this._disposed = true;\n  }\n\n  /**\n   * Gets the cache session properties.\n   *\n   * @returns {solace.CacheSessionProperties} The properties for the session.\n   * @throws {solace.OperationError} if the CacheSession is disposed.\n   */\n  getProperties() {\n    return this._properties;\n  }\n\n  /**\n   * Issues an asynchronous cache request. The result of the request will be returned via the\n   * listener. Messages returned as a result of issuing the request will be returned to the\n   * application via the {@link solace.MessageRxCBInfo} associated with this\n   * {@link solace.CacheSession}'s {@link solace.Session}\n   *\n   * @param {Number} requestID The application-assigned ID number for the request.\n   * @param {solace.Destination} topic The topic destination for which the cache request will be\n   *    made.\n   * @param {Boolean} subscribe If true, the session will subscribe to the given {Topic}, if it is\n   * not already subscribed, before performing the cache request.\n   * @param {solace.CacheLiveDataAction} liveDataAction The action to perform when the\n   *    {@link solace.CacheSession} receives live data on the given topic.\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   *\n   * @throws {solace.OperationError} In the following cases:\n   * * If the CacheSession is disposed.\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * If one or more parameters were invalid.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}\n   * * If the supplied topic and live data action cannot be combined.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   * * If the supplied topic or live data action cannot be used given the current outstanding\n   *    requests.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  sendCacheRequest(requestID, topic, subscribe, liveDataAction, cbInfo) {\n    if (arguments.length !== 5) {\n      throw new OperationError(`sendCacheRequest() invoked with an illegal argument count of ${\n        arguments.length}`);\n    }\n    if (typeof subscribe !== 'boolean') {\n      throw new OperationError(\n        `Invalid subscribe flag argument, should be a boolean but was ${typeof subscribe}`);\n    }\n    if (typeof requestID !== 'number' || Number.isNaN(requestID)) {\n      throw new OperationError('Invalid requestID', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    if (this._outstandingIDs[requestID]) {\n      throw new OperationError('Request already in progress with this requestID');\n    }\n    if (!(topic instanceof Destination)) {\n      throw new OperationError('Invalid topic', ErrorSubcode.PARAMETER_INVALID_TYPE, (typeof topic));\n    }\n    topic.validate();\n    if (!(liveDataAction === CacheLiveDataAction.FLOW_THRU || liveDataAction ===\n        CacheLiveDataAction.FULFILL || liveDataAction === CacheLiveDataAction.QUEUE)) {\n      throw new OperationError('Invalid live data action', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (topic.isWildcarded() && liveDataAction !== CacheLiveDataAction.FLOW_THRU) {\n      throw new OperationError('Wildcarded topic not supported for this live data action',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    if (!(cbInfo instanceof CacheCBInfo)) {\n      throw new OperationError('Callback info was not an instance of CacheCBInfo');\n    }\n    if (this._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.CACHE_SESSION_DISPOSED, topic,\n                                        'Cache request failed: the cache session is disposed.');\n      return;\n    }\n    if (this._session._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.INVALID_SESSION, topic,\n                                        'Cache request failed: the session is disposed.');\n      return;\n    }\n\n    const request = new CacheRequest(this,\n      CacheRequestType.GET_MSG_REQUEST,\n      requestID,\n      cbInfo,\n      liveDataAction,\n      topic,\n      this._properties.cacheName);\n\n    const matchingRequestKeys = Object.keys(this._outstandingRequests).filter(key =>\n      this._outstandingRequests[key].topic.getName() === topic.getName());\n\n    if (matchingRequestKeys.length) {\n      // Topic name matches mean a conflict unless both requests are FLOW_THRU\n      const conflictKeys = (\n        liveDataAction !== CacheLiveDataAction.FLOW_THRU\n          ? matchingRequestKeys\n          : matchingRequestKeys.filter(k =>\n            this._outstandingRequests[k].liveDataAction !== CacheLiveDataAction.FLOW_THRU));\n      if (conflictKeys.length) {\n        const conflictRequest = this._outstandingRequests[conflictKeys[0]];\n        LOG_WARN(`Existing request ${conflictRequest} conflicts. Rejecting request ${request}`);\n         // Register this request so that it is not dismissed as an orphan.\n        this._registerRequest(request);\n        this._terminateRequest(request,\n                               CacheReturnCode.FAIL,\n                               CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS);\n        return;\n      }\n    }\n\n    this._registerRequest(request);\n    request.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                this._properties.timeoutMsec);\n    if (subscribe) {\n      const waitingForSubscribeInfo = new CacheSessionSubscribeInfo(request.correlationID, topic,\n        this);\n      request._subscriptionWaiting = waitingForSubscribeInfo;\n      this._session.subscribe(topic, true, waitingForSubscribeInfo);\n      return;\n    }\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {solace.Session} session The session associated with the request\n   * @param {SessionEvent} sessionEvent The session event\n   * @param {CacheRequest} userObject The user-specified context object\n   * @private\n   */\n  _handleCacheRequestFailed(session, sessionEvent, userObject /*, rfuObject */) {\n    this._terminateRequest(userObject.getRequestID(),\n                           CacheReturnCode.FAIL,\n                           CacheReturnSubcode.ERROR_RESPONSE);\n  }\n\n  /**\n   * @param {CacheRequest} request The new request to register\n   * @private\n   */\n  _registerRequest(request) {\n    this._outstandingRequests[request.correlationID] = request;\n    if (!request.parentRequest) {\n      this._outstandingIDs[request.requestID] = request;\n    }\n  }\n\n  /**\n   * @param {Number} correlationID The ID of an existing request\n   * @returns {CacheRequest} The existing request with the given ID\n   * @private\n   */\n  _getOutstandingRequest(correlationID) {\n    return this._outstandingRequests[correlationID];\n  }\n\n  /**\n   *\n   * @param {CacheRequest} request The request to start\n   * @param {?Number} sessionID Only when returned from a cache instance as part of a\n   * previous message\n   * @param {?Topic} destination Only when required by a cache reply\n   * @param {?Boolean} suppressClusters True when other clusters should be excluded from\n   * the response, as in a request resulting from a \"see other\"\n   * @private\n   */\n  _startCacheRequest(request, sessionID, destination, suppressClusters) {\n    const message = new MessageLib.Message();\n\n    // Prepare message\n    message.setCorrelationId(request.correlationID);\n    if (destination) {\n      message.setDestination(destination);\n    } else {\n      message.setDestination(\n        Topic.createFromName(this._properties.cachePrefix + request.cacheName));\n    }\n    message.setReplyTo(Topic.createFromName(this._session.getSessionProperties().p2pInboxInUse));\n    message.setDeliverToOne(request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST);\n\n    // Prepare stream container\n    const stream = new SDTStreamContainer();\n    stream.addField(SDTFieldType.UINT32, request.cacheMessageType);\n    stream.addField(SDTFieldType.UINT32, CacheRequest.VERSION);\n    stream.addField(SDTFieldType.STRING, request.topic.getName());\n    stream.addField(SDTFieldType.UINT32, CacheRequest.REPLY_SIZE_LIMIT);\n\n    if (typeof sessionID === 'number') {\n      LOG_DEBUG(`Including session ID: ${sessionID}`);\n      stream.addField(SDTFieldType.UINT32, sessionID);\n    }\n\n    stream.addField(SDTFieldType.UINT32, this._properties.maxMessages);\n    stream.addField(SDTFieldType.UINT32, this._properties.maxAgeSec);\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.BOOL,\n                      this._properties.includeOtherClusters && (!suppressClusters));\n    }\n\n    stream.addField(SDTFieldType.BOOL, false); // includeTimestamps, 6.17.1\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.UINT32, Math.round(this._properties.timeoutMsec / 1000));\n    }\n\n    // Load stream container\n    message.setSdtContainer(SDTField.create(SDTFieldType.STREAM, stream));\n    try {\n      LOG_DEBUG(`Sending ${request}`);\n      this._session.send(message);\n\n      if (!request.parentRequest) { // Don't count child requests in CACHE_REQUEST_SENT total\n        this._incStat(StatType.CACHE_REQUEST_SENT);\n      }\n    } catch (e) {\n      LOG_INFO(`Failed to send request: ${e.message}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE, e);\n    }\n  }\n\n  /**\n   * Increments a stat.\n   * @param  {String} statType The stat to increment\n   * @param  {Number} value    The amount by which to increment the state\n   * @private\n   */\n  _incStat(statType, value) {\n    if (!this._session) {\n      LOG_DEBUG(\"Can't log stat: session is disposed\");\n      return;\n    }\n    if (!this._sessionIF) {\n      LOG_INFO(\"Can't log stat: session statistics not available\");\n      return;\n    }\n    this._sessionIF.incStat(statType, value);\n  }\n\n  /**\n   * Unregisters the given request.\n   * @param  {CacheRequest} request The request to unreguster\n   * @private\n   */\n  _unregisterRequest(request) {\n    delete this._outstandingRequests[request.correlationID];\n    delete this._outstandingIDs[request.requestID];\n  }\n\n  /**\n   * @param {CacheReturnCode} returnCode The return code for this completion\n   * @param {CacheReturnSubcode} subcode The subcode for this completion\n   * @private\n   */\n  _trackCompletionStats(returnCode, subcode) {\n    switch (returnCode) {\n      case CacheReturnCode.OK:\n        this._incStat(StatType.CACHE_REQUEST_OK_RESPONSE);\n        if (subcode === CacheReturnSubcode.LIVE_DATA_FULFILL) {\n          this._incStat(StatType.CACHE_REQUEST_LIVE_DATA_FULFILL);\n        }\n        break;\n      case CacheReturnCode.INCOMPLETE:\n        this._incStat(StatType.CACHE_REQUEST_INCOMPLETE_RESPONSE);\n        break;\n      case CacheReturnCode.FAIL:\n        this._incStat(StatType.CACHE_REQUEST_FAIL_RESPONSE);\n        break;\n      default:\n        throw new Error('Sanity: no return code supplied');\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to terminate\n   * @param {CacheReturnCode} returnCode The return code for this operation\n   * @param {CacheReturnSubcode} subcode The subcode for this operation\n   * @param {Error} error Any error associated with this operation\n   * @private\n   */\n  _terminateRequest(requestIn, returnCode, subcode, error) {\n    const request = requestIn.getRootRequest();\n    if (!this._outstandingRequests[request.correlationID]) {\n      // Request is unknown or was previously terminated\n      return;\n    }\n    const cbInfo = request.cbInfo;\n    if (!cbInfo) {\n      LOG_WARN(`No callback info provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const callback = cbInfo.getCallback();\n    if (!callback) {\n      LOG_WARN(`No callback provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const topic = request.getTopic();\n    if (!topic) {\n      LOG_WARN(`No topic provided for ${request}`);\n    }\n    request.queuedLiveData.forEach(data => this._sendToNextDelegate(data));\n\n    // Unregister before callback so that the client application can treat the request ID\n    // as \"freed\" and reuse it\n    request.cancel();\n    this._unregisterRequest(request);\n\n    if (!request.liveDataFulfilled) {\n      // All of this has already been done on fulfill.\n      this._trackCompletionStats(returnCode, subcode);\n      CacheSession._notifyCallback(request, returnCode, subcode, topic, error);\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request with a result to decode\n   * @param {CacheGetResult} result The result to decode\n   * @returns {Array.<Message>} The messages contained in the result\n   * @private\n   */\n  static _decodeMessageStream(requestIn, result) {\n    if (!result.messageStream) {\n      return [];\n    }\n\n    LOG_DEBUG('Receiving messages');\n    const messages = [];\n    const request = requestIn;\n    while (result.messageStream.hasNext()) {\n      request.dataReceived = true;\n      const data = result.messageStream.getNext().getValue();\n      const innerMessage = SMFLib.Codec.Decode.decodeCompoundMessage(data, 0);\n      if (!innerMessage) {\n        continue;\n      }\n      const cacheStatus = result.isSuspect\n        ? MessageLib.MessageCacheStatus.SUSPECT\n        : MessageLib.MessageCacheStatus.CACHED;\n      innerMessage._setCacheStatus(cacheStatus);\n      innerMessage._setCacheRequestID(request.requestID);\n      messages.push(innerMessage);\n    }\n    LOG_DEBUG(`${messages.length} cached messages received`);\n    return messages;\n  }\n\n  /**\n   * Closure call context; `this` will be redefined\n   * @param {CacheRequest} cacheRequest The request that timed out\n   * @private\n   */\n  static _handleCacheRequestTimeout(cacheRequest) {\n    const context = cacheRequest.cacheSession;\n    if (!context._getOutstandingRequest(cacheRequest.correlationID)) {\n      LOG_INFO(`Timeout for ${cacheRequest} was not unregistered. Ignoring`);\n      // already completed\n      return;\n    }\n\n    // bug 36404: Cache request timeout is to be interpreted as timeout per session request-reply,\n    // not timeout per cache request-reply.\n    // Implementation: Timeouts on parent requests are cancelled when a child request is spawned.\n    // Timeouts on child requests cause the root request to fail.\n    LOG_INFO(`Request ${cacheRequest} timed out`);\n    context._terminateRequest(cacheRequest.getRootRequest(), CacheReturnCode.INCOMPLETE,\n                              CacheReturnSubcode.REQUEST_TIMEOUT);\n  }\n\n\n  /**\n   * @param {CacheRequest} request The request that is notifying\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallback(request, returnCode, subcode, topic, error) {\n    const cbInfo = request.cbInfo;\n    const callback = cbInfo.getCallback();\n    callback(request.requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   * @param {Number} requestID The application-assigned ID number for the request\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallbackError(cbInfo, requestID, returnCode, subcode, topic, error) {\n    const callback = cbInfo.getCallback();\n    callback(requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * Validates the cache session properties.\n   * @param {solace.CacheSessionProperties} props The properties to validate\n   * @private\n   */\n  static _validateProps(props) {\n    if ((typeof (props.cacheName) !== 'string')) {\n      throw new OperationError('Invalid parameter type for cacheName', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    // Create from name will throw if the cacheName is invalid.  This performs more checking than\n    // the legacy API did, but I think it is all justified as we shouldn't be able to use anything\n    // that would be rejected here as a cacheName.\n    if (Topic.createFromName(props.cacheName).isWildcarded()) {\n      throw new OperationError(\n        `Invalid cacheName '${props.cacheName}'. The cacheName cannot be wildcarded`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxAgeSec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxAgeSec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxAgeSec < 0) {\n      throw new OperationError('Invalid value for maxAgeSec; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxMessages) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxMessages', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxMessages < 0) {\n      throw new OperationError('Invalid value for maxMessages; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.timeoutMsec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for timeoutMsec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.timeoutMsec < 3000) {\n      throw new OperationError('Invalid value for timeoutMsec; must be >= 3000', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  }\n\n}\n\nmodule.exports.CacheSession = CacheSession;\n","/**\n * This callback is called by a cache session when a cache request\n * completes.\n *\n * @callback solace.CacheCBInfo.cacheRequestCallback\n * @function\n * @param {Number} requestID The ID of the request on which the event is notified.\n * @param {solace.CacheRequestResult} result The result of the cache request.\n * @param {Object} userObject The user object provided.\n */\n\n\n/**\n * @classdesc\n * Encapsulates a {@link solace.CacheSession}'s request listener callback function and\n * optional application-specified context object.\n *\n * Instances of this class are required as a parameter to\n * {@link solace.CacheSession#sendCacheRequest} when creating a CacheSession request.\n *\n * @memberof solace\n */\nclass CacheCBInfo {\n\n  /**\n   * Creates an instance of CacheCBInfo using the provided callback and user context object.\n   * @param {solace.CacheCBInfo.cacheRequestCallback} cacheCBFunction The callback to be invoked.\n   * @param {Object} userObject A context object to be returned with the callback.\n   */\n  constructor(cacheCBFunction, userObject) {\n    /**\n     * The function that will be called by the cache session when a request\n     * completes.\n     * @type {solace.CacheCBInfo.cacheRequestCallback}\n     */\n    this.cacheCBFunction = cacheCBFunction;\n\n    /**\n     * The user context object that will be supplied to the callback function\n     * when the cache request completes.\n     * @type {object}\n     */\n    this.userObject = userObject;\n  }\n\n  /**\n   * @returns {solace.CacheCBInfo.cacheRequestCallback} The callback function\n   * @private\n   */\n  getCallback() {\n    return this.cacheCBFunction;\n  }\n\n  /**\n   * @returns {*} The user context object, if any\n   * @private\n   */\n  getUserObject() {\n    return this.userObject;\n  }\n\n}\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\n","const zlib = require('zlib');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_INFO, LOG_WARN } = require('solclient-log');\nconst { TransportBase } = require('../transport-base');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n * Modular transport layer performing zlib compression.\n * Requires an underlying transport, can be plaintext or TLS, connected or not.\n * Uses the nodejs zlib module which in turn uses the libuv threadpool in nodejs.\n * The end user may need to increase threadpool size.\n * https://nodejs.org/api/zlib.html#zlib_threadpool_usage\n *\n * @private\n */\nclass CompressedTransport extends TransportBase {\n\n  constructor(eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super('tcp://x', eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = null;\n    this._underlyingTransport = null;\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._waitForSocketDrain = false;\n    this._waitForCompressorDrain = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._socketDrained = true;\n    this._compressorDrained = true;\n    this._interimBuffer = [];\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n\n    this._props.transportProtocol = null;\n\n    this._compressor = null;\n    this._decompressor = null;\n\n    this._compressionLevel = props.compressionLevel;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  setClientStats(value) {\n    this._clientstats = value;\n  }\n\n  setUnderlyingTransport(newUnderlyingTransoprt) {\n    this._underlyingTransport = newUnderlyingTransoprt;\n  }\n\n  // Underlying transport callback.\n  rxDataBuffer(data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('TcpTransportCompressedSession stray rxDataBuffer, ignoring.');\n      return;\n    }\n    this._decompressor.write(data);\n    this._decompressor.flush();\n  }\n\n  /**\n   * Decompressor callback.\n   * @private\n   * @param {Buffer} data the data\n   */\n  onData(data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('TcpTransportSession stray onData, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Underlying transport callback for SEND_ERROR\n   * @private\n   * @param {TransportSessionEvent} transportEvent the error\n   */\n  onError(transportEvent) {\n    // Need new state for \"waiting for decompressor flush after error\"?\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tcp transport is being destroyed, ignore error');\n      return;\n    }\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n    const onErrorStage2 = () => {\n      if (this._eventCB) {\n        LOG_TRACE('Decompressor flush returned, passing error to eventCB.');\n        this._eventCB(transportEvent);\n      } else {\n        LOG_TRACE('Decompressor flush returned, but eventCB already cleared.');\n      }\n    };\n\n    LOG_TRACE('Flushing decompressor on socket error.');\n    this._decompressor.flush(zlib.Z_SYNC_FLUSH, onErrorStage2);\n  }\n\n  /**\n   * Treat any zlib error the same as a socket error,\n   * plus close the socket.\n   * @private\n   * @param {Error} error the error\n   */\n  onZlibError(error) {\n    this._socketError = error;\n    this._underlyingTransport.destroy(`Connection closed by zlib error. Message:${error}`,\n                                      ErrorSubcode.COMMUNICATION_ERROR);\n  }\n  /**\n   * underlying transport callback for DESTROYED_NOTICE.\n   * @private\n   * @param {TransportSessionEvent} transportEvent from lower layer\n   */\n  onClose(transportEvent) {\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      this._destroy(transportEvent);\n    } else {\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      LOG_TRACE('Flushing decompressor on socket close.');\n      const stage2destroy = () => this._destroy(transportEvent);\n      this._decompressor.flush(zlib.Z_SYNC_FLUSH, stage2destroy);\n    }\n  }\n\n  /**\n   * underlying transport callback for UP_NOTICE.\n   * @private\n   * @param {TransportSessionEvent} transportEvent from lower layer\n   */\n  onOpen(transportEvent) {\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_INFO(`compressor stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(transportEvent);\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    LOG_TRACE('Initializing compressed transport');\n    let rc = TransportReturnCode.OK;\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_INFO(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    this._state = TransportSessionState.WAITING_FOR_CREATE;\n    if (this._underlyingTransport._state === TransportSessionState.DOWN) {\n      rc = this._underlyingTransport.connect();\n    } else {\n      this._state = TransportSessionState.SESSION_UP;\n    }\n    try {\n      // initialize compressor, decompressor.\n      const options = {\n        highWaterMark: this._sendBufferMaxSize,\n        level:         this._compressionLevel,\n        flush:         zlib.Z_SYNC_FLUSH,\n      };\n      this._compressor =\n        zlib.createDeflateRaw(options);\n      this._decompressor = zlib.createInflateRaw({ flush: zlib.Z_SYNC_FLUSH });\n\n      this._decompressor.on('data', this.onData.bind(this));\n      this._decompressor.on('error', this.onZlibError.bind(this));\n      this._compressor.on('error', this.onZlibError.bind(this));\n      this._compressor.on('data', this.sendCompressed.bind(this));\n      this._compressor.on('drain', this.onCompressorDrain.bind(this));\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create Tcp zlib layer: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    return rc;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * We'll clean up zlib objects on the DESTROYED_NOTICE.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n    return this._underlyingTransport.destroy(msg, subcode);\n  }\n\n  // second stage of the underlying transport callback for DESTROYED_NOTICE.\n  // We should only ever get here once the underlying transport is destroyed.\n  // See onClose.\n  _destroy(transportEvent) {\n    if (this._state !== TransportSessionState.DOWN) {\n      this._state = TransportSessionState.DOWN;\n      const onerrorStub = function onerrorStub() { };\n      this._waitForSocketDrain = false;\n      this._flushCallback = null;\n      this._socketDrained = true;\n      this._client = null; // Don't accept data.\n      this._compressor.removeAllListeners();\n      this._compressor.on('error', onerrorStub); // Prevent unhandled errors\n      this._decompressor.removeAllListeners();\n      this._decompressor.on('error', onerrorStub); // Prevent unhandled errors\n      this._compressor.unpipe();\n      //https://github.com/nodejs/node/issues/15625\n      this._compressor._hadError = true;\n      this._compressor.close();\n      this._compressor = null;\n      this._decompressor.close();\n      this._decompressor = null;\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    if (this._eventCB) {\n      this._eventCB(transportEvent);\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._underlyingTransport) {\n      return this._underlyingTransport.forceFailure(msg);\n    }\n    return TransportReturnCode.OK;\n  }\n\n  // underlying transport event dispatch\n  eventCB(transportEvent) {\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        this.onOpen(transportEvent);\n        break;\n      case TransportSessionEventCode.SEND_ERROR:\n        this.onError(transportEvent);\n        break;\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.onClose(transportEvent);\n        break;\n      case TransportSessionEventCode.CAN_ACCEPT_DATA:\n        this.onDrain(transportEvent);\n        break;\n      default:\n        LOG_WARN('Compressing transport layer got unkown event code ' +\n          `${transportEvent.getTransportEventCode}`);\n    }\n  }\n\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    const flushStage2 = () => this._underlyingTransport.flush(callback);\n    this._compressor.flush(flushStage2);\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      // On a lower layer socket error this transport is in WAITING_FOR_DESTROY state\n      // until the decompressor flushes.\n      // We could respond with NO_SPACE, but we'd have to send a CAN_SEND on reconnect.\n      LOG_INFO(`Compressing transport can't send in state ${this._state}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Congestion control.\n    // We try to avoid pumping too much data into the compressor until the socket drains.\n    // We pause()/resume() the compressor while the socket is congested, but still.\n    if (forceAllowEnqueue\n      || (this._socketDrained && this._compressorDrained)) {\n      if (this._interimBuffer.length > 0) {\n        LOG_WARN(`Allowing send when interimBuffer is ${this._interimBuffer.length}`);\n      }\n      this._compressorDrained = this._compressor.write(message, 'ascii');\n      this._compressor.flush();\n      this._clientstats.bytesWritten += message.length;\n      ++this._clientstats.msgWritten;\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    if (!this._socketDrained) {\n      this._waitForSocketDrain = true;\n    }\n    if (!this._compressorDrained) {\n      this._waitForCompressorDrain = true;\n    }\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  sendCompressed(data) {\n    if (!this._socketDrained) {\n      this._interimBuffer.push(data);\n      this._compressor.pause();\n      return;\n    }\n    const rc = this._underlyingTransport.send(data);\n    switch (rc) {\n      case TransportReturnCode.OK:\n        this._socketDrained = true;\n        break;\n      case TransportReturnCode.NO_SPACE:\n        this._socketDrained = false;\n        this._interimBuffer.push(data);\n        this._compressor.pause();\n        break;\n      case TransportReturnCode.INVALID_STATE_FOR_OPERATION:\n        this.onError(new TransportSessionEvent(\n            TransportSessionEventCode.SEND_ERROR,\n            'Underlying transport in invalid state for send.',\n            null,\n            ErrorSubcode.CONNECTION_ERROR, null));\n        break;\n      default:\n        LOG_WARN(`Unknown return code from undelying transport ${rc}`);\n    }\n  }\n\n  /**\n   * Underlying transport callback for CAN_SEND.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   */\n  onDrain() {\n    this._socketDrained = true;\n    if (this._interimBuffer && this._interimBuffer.length > 0) {\n      const resendBuffer = this._interimBuffer;\n      this._interimBuffer = [];\n      resendBuffer.forEach(data => this.sendCompressed(data));\n    }\n    if (!this._socketDrained) {\n      return;\n    }\n    this._compressor.resume();\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._waitForSocketDrain) {\n      this._waitForSocketDrain = false;\n      if (!this._waitForCompressorDrain) {\n        this._eventCB(\n          new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                    '', null, 0, this._sessionId));\n      }\n    }\n  }\n\n  onCompressorDrain() {\n    this._compressorDrained = true;\n    if (this._waitForCompressorDrain) {\n      this._waitForCompressorDrain = false;\n      if (!this._waitForSocketDrain) {\n        this._eventCB(\n          new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                    '', null, 0, this._sessionId));\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  pause() {\n    this._underlyingTransport.pause();\n    this._decompressor.pause();\n  }\n\n  unpause() {\n    this._underlyingTransport.unpause();\n    this._decompressor.resume();\n  }\n\n}\n\nmodule.exports.CompressedTransport = CompressedTransport;\n","const { ErrorResponseSubcodeMapper } = require('./lib/error-response-subcode-mapper');\nconst { ErrorSubcode } = require('./lib/error-subcodes');\nconst { NotImplementedError } = require('./lib/not-implemented-error');\nconst { OperationError } = require('./lib/operation-error');\nconst { RequestError } = require('./lib/request-error');\nconst { RequestEventCode } = require('./lib/request-event-codes');\nconst { SolaceError } = require('./lib/solace-error');\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\nmodule.exports.ErrorSubcode = ErrorSubcode;\nmodule.exports.NotImplementedError = NotImplementedError;\nmodule.exports.OperationError = OperationError;\nmodule.exports.RequestError = RequestError;\nmodule.exports.RequestEventCode = RequestEventCode;\nmodule.exports.SolaceError = SolaceError;\n","const { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nfunction formatEventName(x) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(x)}`;\n}\n\nclass MessageDispatcher {\n  constructor({ emitter, autoAck, logger } = {}) {\n    Object.assign(this, {\n      emitter,\n      queue:    [],\n      dispatch: true,\n      formatEventName,\n      logger,\n    });\n    this._dispatchOne = autoAck ? this._dispatchOneAutoAck : this._dispatchOneBare;\n    this.emitter.setOnFirstDirectListener(this._onFirstMessageListener.bind(this));\n    // Although a listener may not be available, we set it to true so that we detect a transition to\n    // false when we attempt to dispatch the first message, which will generate a log that\n    // dispatching is stopped due to a missing listener.\n    this._availableListener = true;\n  }\n\n  start() {\n    this.dispatch = true;\n    this._flush();\n  }\n\n  stop() {\n    this.dispatch = false;\n  }\n\n  get length() {\n    return this.queue.length;\n  }\n\n  push(message) {\n    const { LOG_TRACE } = this.logger;\n    this.queue.push(message);\n\n    if (this.dispatch) {\n      this._flush();\n    } else {\n      LOG_TRACE(`Dispatch disabled, message ${message.getGuaranteedMessageId()} queued locally`);\n    }\n  }\n\n  _onFirstMessageListener() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._availableListener) {\n      LOG_DEBUG(`Message listener available for dispatcher, ${this.queue.length} messages queued`);\n      LOG_DEBUG(`Dispatcher started and connected: ${this.dispatch ? 'true' : 'false'}`);\n      this._availableListener = true;\n    }\n    this._flush();\n  }\n\n  _flush() {\n    const { LOG_DEBUG } = this.logger;\n    // Check whether dispatch enabled for every element,\n    // to handle when #stop is called from a message handler\n    while (this.queue.length && this.dispatch && (this.emitter.directListenerCount() > 0)) {\n      this._dispatchOne(this.queue.shift());\n    }\n\n    if (this.queue.length && this.dispatch &&\n        (this.emitter.directListenerCount() === 0) && this._availableListener) {\n      LOG_DEBUG('Message dispatching stopped: No message listener registered');\n      this._availableListener = false;\n    }\n  }\n\n  _dispatchOneAutoAck(message) {\n    const { LOG_WARN } = this.logger;\n    // Set the current outbound message, dispatch it, and clear the current outbound message\n    let caught = null;\n\n    // Auto-ack unless the receiver throws.\n    caught = this._dispatchOneBare(message);\n    // Outside of exception block because we want to throw normally from message.acknowledge()\n    if (caught) {\n      LOG_WARN(`Suppressing message acknowledgement for message ${message.getGuaranteedMessageId()\n               } because client threw exception from listener`, caught);\n    } else {\n      // Did the user manually ack for some reason?\n      if (message.isAcknowledged) {\n        LOG_WARN(`Consumer configured to auto-acknowledge messages, but message ${\n                 message.getGuaranteedMessageId()} was application acknowledged`);\n        return;\n      }\n      message._autoAcknowledge(); // No, so auto ack the message\n    }\n  }\n\n  _dispatchOneBare(message) {\n    const { LOG_WARN } = this.logger;\n    let caught;\n    // Requires the emitter's direct option to be MessageConsumerEventName.MESSAGE\n    if (this.listenerCount === 0) {\n      LOG_WARN(`No listeners to dispatch message ${message.getGuaranteedMessageId()}`);\n    }\n    // Since _dispatchOneBare uses emitDirect, this behaviour is not affected by the presence\n    // of an 'error' handler.\n    try {\n      this.emitter.emitDirect(message);\n    } catch (ex) {\n      // User code threw an exception\n      caught = this.emitter.formatErrorEvent(ex, MessageConsumerEventName.MESSAGE, message);\n      // Also propagating to the common error handler\n      this.emitter.emit('error', caught);\n    }\n    return caught;\n  }\n\n}\n\nmodule.exports = { MessageDispatcher };\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of message consumer event names. A {@link solace.MessageConsumer} will emit\n * these events as part of its lifecycle.  Applications, having created a MessageConsumer can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     mc = solace.Session.createMessageConsumer(...);\n *     mc.on(solace.MessageConsumerEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // error can be used as an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerEventName = {\n  /**\n   * The message consumer is established.\n   * @event solace.MessageConsumerEventName#UP\n   */\n  UP:                   'MessageConsumerEventName_up',\n  /**\n   * The message consumer is successfully disconnected.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN\n   */\n  DOWN:                 'MessageConsumerEventName_down',\n /**\n   * The message consumer has become active.\n   *\n   * @event solace.MessageConsumerEventName#ACTIVE\n   */\n  ACTIVE:               'MessageConsumerEventName_active',\n  /**\n   * The message consumer has become inactive.\n   *\n   * @event solace.MessageConsumerEventName#INACTIVE\n   */\n  INACTIVE:             'MessageConsumerEventName_inactive',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention. The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'MessageConsumerEventName_downError',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention, but flow auto reconnect is active.\n   * The message consumer is disabled, but actively reconnecting.\n   * Expect a RECONNECTED or DOWN_ERROR on success of failure. respectively.\n   * See also MessageConsumerProperties.reconnectAttempts and reconnectIntervalInMsecs.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTING\n   * @param {solace.OperationError} error Details of the error that triggered the reconnect.\n   */\n  RECONNECTING:         'MessageConsumerEventName_reconnecting',\n  /**\n   * The message consumer successfully auto-reconnected.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTED\n   */\n  RECONNECTED:          'MessageConsumerEventName_reconnected',\n  /**\n   * The message consumer attempted to connect but was unsuccessful.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'MessageConsumerEventName_connectFailedError',\n  /**\n   * The message consumer will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The message consumer is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.MessageConsumerEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'MessageConsumerEventName_GMDisabled',\n  /**\n   * The message consumer is being disposed. No further events will be emitted.\n   *\n   * @event solace.MessageConsumerEventName#DISPOSED\n   */\n  DISPOSED:             'MessageConsumerEventName_disposed',\n  /**\n   * A message was received on the message consumer.\n   *\n   * If the application throws an exception in this listener, and the consumer was configured\n   * to automatically acknowledge messages\n   * (see {@link solace.MessageConsumerProperties#acknowledgeMode}),\n   * the API will not acknowledge the message, since it\n   * may not have been successfully processed by the application. Such a message must be\n   * acknowledged manually. If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.MessageConsumer#disconnect} followed by\n   * {@link solace.MessageConsumer#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a MessageConsumer, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.MessageConsumerEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'MessageConsumerEventName_message',\n  /**\n   * The subscribe or unsubscribe operation succeeded on the queue.\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_OK\n   * @param {solace.MessageConsumerEvent} event The details related\n   * to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:      'MessageConsumerEventName_ok',\n  /**\n   * The Solace Message Router rejected a queue subscription (add or remove).\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n   * @param {solace.MessageConsumerEvent} error The details related\n   * to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:   'MessageConsumerEventName_error',\n\n};\n\nmodule.exports.MessageConsumerEventName = Enum.new(MessageConsumerEventName);\n","module.exports = require(\"crypto\");","\nconst { LogFormatter } = require('solclient-log');\nconst { Baggage } = require('./baggage');\nconst { TraceContext } = require('./message-trace-context');\nconst { TraceContextSetter } = require('./message-trace-context-setter');\n\n/**\n * @classdesc\n * <b>This class is used to enable the distributed tracing \n * support for variety of Solace message types. \n * This class is for internal use only.\n * <p>\n * @hideconstructor\n * @internal\n */\nclass MessageTracingSupport {\n\n  /**\n   * Represents OpenTelementry Support for Solace Messages.\n   * The solace.Message class will extend this class.\n   * \n   * @constructor\n   * @hideconstructor\n   * @private\n   **/\n  constructor() {\n    // empty constructor\n  }\n\n  /**\n   * Retrieves a {@link TraceContextSetter} object that is used to modify \n   * an appropriate TraceContext associated with a message transparently.\n   * When no context is stored in a message it will create and store a creation \n   * context with a message that can be used as an initial\n   * transport context at the same time. \n   * It will never override an existing message creation context. \n   * When creation context is present or only transport context is present, it will\n   * override an existing transport context information with a newly provided one.\n   * \n   * @returns {solace.TraceContextSetter} Transport context setter object associated with this message; never expected to be null\n   */\n  getTraceContextSetter() {\n    if(this._traceContextSetter == null || this._traceContextSetter == undefined) {\n      // create a new context setter object\n      this._traceContextSetter = new TraceContextSetter();\n    }\n    return this._traceContextSetter;\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over \n   * of the distributed tracing transport context information usable or modifiable \n   * by intermediary instrumentation across service boundaries. \n   * It allows correlating the producer and the consumer with an intermediary.\n   * It also allows correlating multiple intermediaries among each other.\n   *\n   * @returns {?solace.TraceContext} Transport context object associated with this message\n   */\n  getTransportContext() {\n    return this._transportContext;\n  }\n  /**\n   * The transport context setter\n   * \n   * @param {TraceContextSetter} contextSetter \n   */\n  _setTransportContext(contextSetter) {\n    if(contextSetter != null) {\n      this._transportContext = new TraceContext(contextSetter);\n    }\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over of the distributed tracing\n   * message creation context information usable by intermediary instrumentation across\n   * service boundaries. It allows correlating the producer with the consumers of a message,\n   * regardless of intermediary instrumentation. It must not be altered by intermediaries.\n   *\n   * @returns {?solace.TraceContext} Message creation context object associated with this message;\n   */\n  getCreationContext() {\n    // if there is no creation context, use the context setter to create it\n    return this._creationContext;\n  }\n  /**\n   * It is created only once by the producer/publisher and cannot be\n   * changed by intermediaries\n   * @param {TraceContextSetter} contextSetter \n   */\n  _setCreationContext(contextSetter) {\n    // set the creation context only once\n    if(contextSetter != null) {\n      this._creationContext = new TraceContext(contextSetter);\n    }\n  }\n \n  /**\n   * Retrieves a {@link solace.Baggage} carrier object used for carrying over of the distributed tracing\n   * message baggage information across service boundaries.  It must not be altered by\n   * intermediaries.\n   *\n   * @return {?solace.Baggage} baggage carrier object associated with this message,\n   */\n  getBaggage() {\n    return this._baggage;\n  }\n  /**\n   * The internal setter for the baggage prop.\n   * \n   * @param {Baggage} value \n   */\n  _setBaggage(value) {\n    this._baggage = value;\n  }\n}\n\nmodule.exports.MessageTracingSupport = MessageTracingSupport;\n","module.exports = require(\"url\");","/**\n * @private\n */\nclass OutstandingDataRequest {\n  constructor(correlationId, timer, replyReceivedCBFunction, reqFailedCBFunction, userObject) {\n    this.correlationId = correlationId;\n    this.timer = timer;\n    this.replyReceivedCBFunction = replyReceivedCBFunction;\n    this.reqFailedCBFunction = reqFailedCBFunction;\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.OutstandingDataRequest = OutstandingDataRequest;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of session properties that can be modified by\n * {@link solace.Session.updateProperty} after the {@link solace.Session} is originally\n * created.\n *\n * These correspond to session properties in {@link solace.SessionProperties}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MutableSessionProperty = {\n  /**\n   * Client name: {@link solace.SessionProperties#clientName}\n   * @type {Number}\n   */\n  CLIENT_NAME:        1,\n  /**\n   * Application description: {@link solace.SessionProperties#applicationDescription}\n   * @type {Number}\n   */\n  CLIENT_DESCRIPTION: 2,\n};\n\nmodule.exports.MutableSessionProperty = Enum.new(MutableSessionProperty);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolMessageType = {\n  OPENPUBFLOW:      0x00,\n  // INTERROUTERACK:          0x01,\n  // INTERROUTERHANDSHAKEACK: 0x02,\n  CLIENTACK:        0x03,\n  BIND:             0x04,\n  UNBIND:           0x05,\n  UNSUBSCRIBE:      0x06,\n  CLOSEPUBFLOW:     0x07,\n  CREATE:           0x08,\n  DELETE:           0x09,\n  // FLOWRECOVER:  0x0a,\n  TRANSACTIONCTRL:  0x0b,\n  FLOWCHANGEUPDATE: 0x0c,\n  // EXTERNALACK:      0x0d,\n  XACTRL:           0x0e,\n  CLIENTNACK:       0x0f,\n  // TXNCTRL:          0x10,\n};\n\nmodule.exports.SMFAdProtocolMessageType = Enum.new(SMFAdProtocolMessageType);\n","const tls = require('tls');\nconst { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { LOG_TRACE, LOG_DEBUG, LOG_ERROR } = require('solclient-log');\nconst { mixin } = require('solclient-eskit');\nconst { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\nconst { ShuntableTransport } = require('./shuntable-transport');\nconst { TransportBase } = require('../transport-base');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst {\n  formatHexString,\n} = Hex;\n\n/**\n *\n * Modular transport with TLS (tcps://) support.\n * Only works in node.js.\n * Must be initialized with an underlying transport\n * (currently only the plaintext tcp transport is supported).\n * Wraps the underlying transport in a ShuntableTransport stream\n * which can be passed to tls.connect()\n * Supports  TLS shutdown leaving the socket open.\n * @private\n */\nclass TlsOnlyTransport extends TransportBase {\n\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @private\n     * @type {TransportClientStats}\n     */\n    this._clientstats = null;\n    this._underlyingTransport = null;\n\n    /**\n     * Maximum amount of send data than can be queued.\n     * NodeJS socket.write accepts all writes, growing a\n     * user space buffer indefinitely.\n     * The TCP transport (same as WS transport)\n     * manages the size of that buffer to stay below this limit.\n     * @private\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /*\n     * When true, the upper layer was told NO_SPACE and must be notified\n     * of the next \"drained\" event.\n     * @private\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /*\n     * One-shot flush callback.\n     * Set on flush(), ran and cleared on socket drain event.\n     * @private\n     */\n    this._flushCallback = null;\n\n    /**\n     * Flag to keep track of socket drained state:\n     * Set to false when socket.write returns false,\n     * (indicating user-space buffering)\n     * Set to true on socket drain events.\n     * (indicating the user space buffer has flushed to the OS.)\n     * @type {Boolean}\n     * @private\n     */\n    this._drained = true;\n\n    /**\n     * @type {TransportSessionState}\n     * @private\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * @type {?Socket}\n     * @private\n     */\n    this._tlsSocket = null;\n\n    /**\n     * Save the Event in the onError listener\n     * Use it in onClose to populate the event.\n     * (Tcp socket calls onError with the error then onClose.\n     * WS socket calls only onClose and passes the error directly.)\n     * @private\n     * @type {?Error}\n     */\n    this._socketError = null;\n\n    /**\n     * @type {?string}\n     * @private\n     */\n    this._sessionId = new Date().getTime();\n\n    // Some whitebox tests expect a transport->transportSession nesting.\n    this._transportSession = this;\n\n    this._props.transportProtocol = null;\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  setClientStats(value) {\n    this._clientstats = value;\n  }\n\n  setUnderlyingTransport(newUnderlyingTransoprt) {\n    this._underlyingTransport = newUnderlyingTransoprt;\n  }\n\n  getUnderlyingTransport() {\n    return this._underlyingTransport;\n  }\n\n  rehome(eventCB, client) {\n    this._eventCB = eventCB;\n    this._client = client;\n  }\n\n  // eventCB and rxDataBuffer forwarded to _shuntableTransport\n  // Chicken-egg problem in the factory...\n  eventCB(transportEvent) {\n    this._shuntableTransport.eventCB(transportEvent);\n  }\n\n  rxDataBuffer(data) {\n    this._shuntableTransport.rxDataBuffer(data);\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Buffer} data the data\n   */\n  onData(originalSocket, data) {\n    // We do not collect Rx stats.\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n      originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray onData for previous socket, ignoring.');\n      return;\n    }\n    if (this._client) {\n      this._client.rxDataBuffer(data);\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destroy()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   * @param {Error} error the error\n   */\n  onError(originalSocket, error) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('Tls transport stray onError for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tls transport is being destroyed, ignore error');\n      return;\n    }\n    LOG_DEBUG(`Tls transport connection error ${error}`);\n    // net.socket invokes the error handler before the close handler.\n    // Websocket does not, and that's what the upper layer expects.\n    // Suppressing the \"double tap\" error events when connected,\n    // saving the error for the onClose handler in _socketerror.\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      this._eventCB(\n        new TransportSessionEvent(\n          TransportSessionEventCode.SEND_ERROR,\n          `Connection error${error}`,\n          null,\n          ErrorSubcode.CONNECTION_ERROR, null));\n    } else { // we rely on the close listener to notify the upper layer.\n      this._socketError = error;\n    }\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   * @param {Boolean} hadError wheter there was an error\n   */\n  onClose(originalSocket, hadError) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray onClose for previous socket, ignoring.');\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('Tls transport is being destroyed, ignore close');\n      return;\n    }\n    const msg = hadError ? 'with error' : 'cleanly';\n    const errorMsg = this._socketError && this._socketError.message;\n    this._socketError = null; // clear on read.\n    LOG_DEBUG(`Tls transport connection is closed ${msg}. Message: ${errorMsg}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this._destroy(this._tlsSocket, `Connection closed ${msg}. Message:${errorMsg}`,\n                  ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  /**\n   * Callback for Socket.connect.\n   * Bind the socket argument to guard against stray invocations in a\n   * quick connect()-destroy()-connect() scenario.\n   * @private\n   * @param {Socket} originalSocket original socket\n   */\n  onOpen(originalSocket) {\n    LOG_TRACE('TlsTransportSession received socket open event.');\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TlsTransportSession stray onOpen for previous socket, ignoring.');\n      return;\n    }\n    if (this._state !== TransportSessionState.WAITING_FOR_CREATE) {\n      LOG_DEBUG(`TcpTransportSession stray onOpen when in state ${this._state}, ignoring.`);\n      return;\n    }\n\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * Establish underlying transport.\n   * @override\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (this._tlsSocket) {\n      LOG_ERROR('TCP transport can not connect once _tlsSocket exists.');\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    LOG_DEBUG('Establishing TLS transport session');\n    this._state = TransportSessionState.WAITING_FOR_CREATE;\n    try {\n      const duplexOptions = { underlyingTransport: this._underlyingTransport };\n      this._shuntableTransport = new ShuntableTransport(duplexOptions);\n      this._underlyingTransport.connect();\n      const tlsOptions = this.createTLSOptions();\n      tlsOptions.socket = this._shuntableTransport;\n      // host and port can be set here for certificate validation in the future.\n      this._tlsSocket = tls.connect(tlsOptions);\n      this._tlsSocket.on('secureConnect', this.onOpen.bind(this, this._tlsSocket));\n      LOG_TRACE('Assigning properties to socket');\n      // WARNING!\n      // This is the kind of thing that breaks on minification.\n      // Re-run unit tests in production mode when changed:\n      // grunt --gruntfile=Gruntfile_Production.js\n      // When broken, consult the closure compiler exceptions file:\n      // (sdk-root)/builder/template/-common/env/externs.js\n      this._tlsSocket.on('data', this.onData.bind(this, this._tlsSocket));\n      this._tlsSocket.on('error', this.onError.bind(this, this._tlsSocket));\n      this._tlsSocket.on('close', this.onClose.bind(this, this._tlsSocket));\n      this._tlsSocket.on('drain', this.onDrain.bind(this, this._tlsSocket));\n      this._tlsSocket.setNoDelay(true);\n\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_DEBUG(`Error connecting: ${error}`);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      throw new TransportError(`Could not create TLS socket: ${error.message}`,\n        error.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    LOG_DEBUG('TLS transport is connecting');\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(msg, subcode) {\n    //return this._underlyingTransport.destroy(msg, subcode);\n    return this._destroy(this._tlsSocket, msg, subcode);\n  }\n\n  _destroy(originalSocket, msg, subcode) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray _destroy for previous socket, ignoring.');\n      return TransportReturnCode.OK;\n    }\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_DEBUG(`Destroy Tls transport: ${msg}`);\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      const onerrorStub = function onerrorStub() { };\n      if (this._tlsSocket) {\n        this._tlsSocket.removeAllListeners();\n        this._tlsSocket.on('error', onerrorStub); // Prevent unhandled errors\n        // Prefering destroy() over end() as it seems to\n        // cancel pending callbacks like onOpen more reliably.\n        //this._tlsSocket.destroy();\n        this._tlsSocket.destroy();\n        this._tlsSocket = null;\n      }\n\n      if (this._underlyingTransport) {\n        this._underlyingTransport.destroy(msg, subcode);\n        this._underlyingTransport = null;\n      }\n\n      this._canSendNeeded = false;\n      this._flushCallback = null;\n      this._drained = true;\n      this._state = TransportSessionState.DOWN;\n      this._client = null; // Don't accept data.\n    }\n\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    LOG_TRACE(`Destroying TCP transport. msg: ${msg} subcode: ${subcode}`);\n    if (this._eventCB) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              msg || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    if (this._state !== TransportSessionState.DOWN) {\n      const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n      LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n      if (this._tlsSocket) {\n        this._tlsSocket.destroy(new Error(errorMsg));\n      }\n\n      if (this._underlyingTransport) {\n        this._underlyingTransport.forceFailure(errorMsg);\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Intended for clean shutdowns.\n   * Callback is invoked when all nodejs-buffered data\n   * has been flushed to the OS socket.\n   */\n  flush(callback) {\n    if (this._drained) {\n      LOG_DEBUG('Transport emitting FLUSH immediately.');\n      callback();\n    } else if (callback) {\n      this._flushCallback = callback;\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @description Send encoded SMF message\n   * Returns transport return code.\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    // Limiting socket buffer size to _sendBufferMaxSize unless\n    // the force flag was set\n    // or the socket is drained, in which case any size message goes.\n    if (forceAllowEnqueue\n      || this._drained\n      || message.length < this._sendBufferMaxSize - this._tlsSocket.bufferSize) {\n      // _drained keeps track of \"overflowing\" writes.\n      // nodejs never refuses a write but warns when it starts buffering.\n      this._drained = this._tlsSocket.write(message, 'ascii');\n      if (this._clientstats) {\n        this._clientstats.bytesWritten += message.length;\n        ++this._clientstats.msgWritten;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We'll unblock the user on the next onDrain.\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /**\n   * Socket callback.\n   * Bind the socket on setup to avoid stray errors from old sockets\n   * in quick connect()-destry()-connect() scenarios.\n   * @private\n   * @param {Socket} originalSocket the original socket\n   */\n  onDrain(originalSocket) {\n    if (originalSocket !== this._tlsSocket) {\n      LOG_DEBUG('TcpTransportSession stray onDrain for previous socket, ignoring.');\n      return;\n    }\n    this._drained = true;\n\n    if (this._flushCallback) {\n      LOG_DEBUG('Transport emitting FLUSH after drain.');\n      const prevCallback = this._flushCallback;\n      this._flushCallback = null;\n      prevCallback();\n    }\n\n    if (this._canSendNeeded) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    const str = `TcpTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  tlsShutdown(callback) {\n    this._tlsSocket.removeAllListeners('close');\n    this._tlsSocket.on('close', this.tlsShutdownStage2.bind(this, callback));\n    this._shuntableTransport.dontEnd();\n    this._tlsSocket.end();\n  }\n\n  tlsShutdownStage2(callback) {\n    this._shuntableTransport.shunt();\n    this._tlsSocket.removeAllListeners();\n    this._tlsSocket = null;\n    this._shuntableTransport = null;\n    this._underlyingTransport.rehome(this._eventCB, this._client);\n    this._underlyingTransport.setClientStats(this.getClientStats());\n    this.setClientStats(null);\n    this._eventCB = null;\n    this._client = null;\n    callback(this._underlyingTransport);\n  }\n}\n\nmixin(TlsOnlyTransport, NodeTLSOptsMixin);\n\nmodule.exports.TlsOnlyTransport = TlsOnlyTransport;\n","const { Parameter } = require('solclient-validate');\nconst { Convert } = require('solclient-convert');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n    isNumber,\n    isBoolean,\n    isString,\n    isStringOrNothing,\n} = Parameter;\n\nconst { uint8ArrayToString } = Convert;\n\n/**\n * @classdesc\n * <b>This class abstracts settable metadata used for \n * distributed message tracing with Solace messaging APIs \n * types. This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\n class TraceContextSetter {\n\n    /**\n     * Abstract constructor for metadata used \n     * for distributed message tracing.\n     * \n     * @constructor\n     * @hideconstructor\n     * @private\n     */\n    constructor() {\n        this._traceId = null;\n        this._spanId = null;\n        this._isSampled = false;\n        this._traceState = null;\n        this._version = 0x01; // version=0001 (4 bits, version=1);\n    }\n\n    /**\n     * Clone this TraceContextSetter object.\n     * \n     * @returns {TraceContextSetter} the cloned TraceContextSetter instance\n     */\n    clone() {\n        const _clonedContextSetter = new TraceContextSetter();\n        _clonedContextSetter._setSpanId(this._spanId);\n        _clonedContextSetter._setTraceId(this._traceId);\n        _clonedContextSetter._setSampled(this._isSampled);\n        _clonedContextSetter._setTraceState(this._traceState);\n        _clonedContextSetter._setVersion(this._version);\n        return _clonedContextSetter;\n    }\n\n    /**\n     * The length of the traceId bytes in the binary message\n    */\n    static get TRACE_ID_BYTES_LENGTH() {\n        return 16;\n    }\n\n    /**\n     * The length of the spanId bytes in the binary message\n    */\n    static get SPAN_ID_BYTES_LENGTH() {\n        return 8;\n    }\n\n    /**\n     * The version which for now is 1. -> 0001\n    */\n    get version() {\n        return this._version || 0x01; // version=0001 (4 bits, version=1);;\n    }\n    /**\n     * Sets the version\n     * \n     * @param {Number} value The version encoded as Hex value\n     */\n    setVersion(value) {\n        this._setVersion(isNumber('version', value));\n    }\n    _setVersion(value) {\n        this._version = value;\n    }\n\n    /**\n     * @private\n    */\n    get traceId() {\n        return this._traceId;\n    }\n    /**\n     * Sets the value of the trace identifier associated with the message.\n     * \n     * @param {String} value The trace identifier encoded as a 16-length Hex string\n     */\n    setTraceId(value) {\n        this._setTraceId(isString('traceId', value));\n    }\n    _setTraceId(value) {\n        this._traceId = value;\n    }\n \n    /**\n     * @private\n    */\n    get spanId() {\n        return this._spanId;\n    }\n    /**\n     * Sets the value of the span identifier associated with the message.\n     * \n     * @param {String} value The trace identifier encoded as a 8-length Hex string\n     */\n    setSpanId(value) {\n        this._setSpanId(isString('spanId', value));\n    }\n    _setSpanId(value) {\n        this._spanId = value;\n    }\n \n    /**\n     * @private\n    */\n    get isSampled() {\n        return this._isSampled || false;\n    }\n    /**\n     * Turns on or off sampling for the associated message.\n     * \n     * @param {Boolean} value if true sampling is on, off otherwise\n     */\n    setSampled(value) {\n        this._setSampled(isBoolean('isSampled', value));\n    }\n    _setSampled(value) {\n        this._isSampled = value;\n    }\n \n    /**\n     * @private\n    */\n    get traceState() {\n        return this._traceState;\n    }\n    /**\n     * Sets the value of the trace state associated with the message.\n     * \n     * @param {?String} value The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    setTraceState(value) {\n        this._setTraceState(isStringOrNothing('traceState', value));\n    }\n    _setTraceState(value) {\n        this._traceState = value;\n    }\n\n    /**\n     * Gets a new instance of the Message Trace Context Setter \n     * from the values in the SMF header associated with the message.\n     * \n     * @param {Buffer | Uint8Array | String | null} traceContextValue The value of trace context associated with the message\n     * @returns {solace.TraceContextSetter | null} Context setter object\n     */\n    static fromTraceContext(traceContextValue) {\n        // implementation here\n        if (traceContextValue == null) {\n            return null;\n        }\n\n        let traceContextBuffer = null;\n        if (BufferImpl.isBuffer(traceContextValue)) {\n            traceContextBuffer = traceContextValue; // do nothing since it is already a buffer\n        } else if (typeof traceContextValue === 'string') {\n            traceContextBuffer = BufferImpl.from(traceContextValue, 'latin1');\n        }\n\n        // the trace context value is at least 32 bytes (without trace state)\n        if (!traceContextBuffer || traceContextBuffer.length < 32) {\n            return null;\n        }\n\n        try {\n            const traceContextBytes = (new Uint8Array(traceContextBuffer)).buffer;\n            let bytesRead = 0; // to track the byte read offsets\n\n            const traceContextSetter = new TraceContextSetter();\n\n            const firstByte = traceContextBytes.slice(bytesRead, bytesRead + (1));\n            const byte1DataView = new DataView(firstByte, 0, 1);\n            let byte1 = byte1DataView.getUint8(bytesRead);// get the first byte\n\n            const version = byte1 >> 4; // get the version from the four MSB\n            traceContextSetter.setVersion(version); // set the version\n\n            const isSampled = ((byte1 & 0x0F) == 0x04);\n            traceContextSetter.setSampled(isSampled); // set the sampled status\n            bytesRead++;\n\n            const traceId16Bytes = traceContextBytes.slice(bytesRead, bytesRead + (16));\n            const traceId = uint8ArrayToString(traceId16Bytes, 'hex'); // set the traceId\n            traceContextSetter.setTraceId(traceId);\n            bytesRead += TraceContextSetter.TRACE_ID_BYTES_LENGTH;\n\n            const spanId8Bytes = traceContextBytes.slice(bytesRead, bytesRead + (8));\n            const spanId = uint8ArrayToString(spanId8Bytes, 'hex'); // set the spanId\n            traceContextSetter.setSpanId(spanId);\n            bytesRead += TraceContextSetter.SPAN_ID_BYTES_LENGTH;\n\n            bytesRead ++; // Skip InjectionStandard byte\n            bytesRead += 4; // Skip the 4 RFU bytes\n\n            const traceStateLengthBytes = traceContextBytes.slice(bytesRead, bytesRead + (2));\n            const traceStateLengthDataView = new DataView(traceStateLengthBytes, 0, traceStateLengthBytes.byteLength);\n            const traceStateLength = traceStateLengthDataView.getUint16(0, false);// get the trace length\n            bytesRead += 2; // move pointer past length bytes\n\n            // if there is a trace state value, read it\n            if (traceStateLength > 0) {\n                const traceStateBytes = traceContextBytes.slice(bytesRead, bytesRead + (traceStateLength));\n                const traceState = uint8ArrayToString(traceStateBytes); // set the trace state\n                traceContextSetter.setTraceState(traceState);\n            }\n            return traceContextSetter;\n        } catch (ex) {\n            return null;\n        }\n    }\n}\n\nmodule.exports.TraceContextSetter = TraceContextSetter;\n","/**\n * @classdesc\n *\n * Encapsulates the properties of a cache session.\n *\n * @memberof solace\n *\n */\nclass CacheSessionProperties {\n\n   /**\n    * @constructor\n    *\n    * @param {String} cacheName A property that specifies the cache name to which CacheSession\n    *   operations should be sent.\n    * @param {Number} [maxAgeSec=0] The maximum allowable message age in seconds to deliver in\n    *   response to a cache request. 0 means no restriction on age.\n    * @param {Number} [maxMessages=1] The maximum number of messages per Topic to deliver in\n    *   response to cache requests. 0 means no restriction on the number of messages.\n    * @param {Number} [timeoutMsec=10000] The timeout period (in milliseconds) to wait for a\n    *   response from the cache. This is a protocol timer used internally by the API on each\n    *   message exchange with SolCache. A single call to\n    *   {@link solace.CacheSession#sendCacheRequest} may lead to many request-reply exchanges\n    *   with SolCache and so is not bounded by this timer as long as each internal request is\n    *   satisfied in time.\n    *   * The valid range for this property is >= 3000.\n    */\n  constructor(cacheName, maxAgeSec, maxMessages, timeoutMsec) {\n    /**\n     * @type {String}\n     *\n     * @description A property that specifies the cache name to which CacheSession operations should\n     * be sent.\n     */\n    this.cacheName = cacheName;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum allowable message age in seconds to deliver in response to cache\n     * requests.  0 means no restriction on age.\n     *\n     * @default 0\n     */\n    this.maxAgeSec = maxAgeSec || 0;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum number of messages per Topic to deliver in response to cache\n     * requests.  0 means no restriction on the number of messages.\n     *\n     * @default 1\n     */\n    this.maxMessages = (maxMessages === null || maxMessages === undefined) ? 1 : maxMessages;\n\n    /**\n     * @type {Number}\n     *\n     * @description The timeout for a cache request, in milliseconds.  The valid range for this\n     * property is >= 3000.\n     *\n     * @default 10000\n     */\n    this.timeoutMsec = timeoutMsec || 10000;\n\n    /**\n     * @private\n     * @type {Boolean}\n     * @description Whether to include other clusters in the request.\n     * @default true\n     */\n    this.includeOtherClusters = true;\n\n    /**\n     * @private\n     */\n    this.cachePrefix = '#P2P/CACHEINST/';\n  }\n\n  /**\n   * Gets the cache name to which {@link solace.CacheSession} requests should be sent, for\n   * sessions constructed using these properties.\n   *\n   * @returns {String} The cache name.\n   */\n  getCacheName() {\n    return this.cacheName;\n  }\n\n  /**\n   * Sets the cache name to which requests should be sent. Cannot be null or blank.\n   * @param {String} value The cache name to which requests should be sent.\n   */\n  setCacheName(value) {\n    this.cacheName = value;\n  }\n\n  /**\n   * Gets the maximum allowable message age for messages to be delivered in response to a request\n   * made on a {@link solace.CacheSession} that was constructed using these properties.  0 means no\n   * restriction on age.\n   *\n   * @returns {Number} The maximum allowable message age to be returned by an associated\n   * {@link solace.CacheSession}, or 0 for no restriction.\n   */\n  getMaxMessageAgeSec() {\n    return this.maxAgeSec;\n  }\n\n  /**\n   * Sets the maximum allowable message age. 0 means no restriction on age.\n   *\n   * @param {Number} value The maximum allowable message age, or 0 for no restriction.\n   */\n  setMaxMessageAgeSec(value) {\n    this.maxAgeSec = value;\n  }\n\n  /**\n   * Gets the maximum count of messages to be delivered, per {@link solace.Destination}, in\n   * response to a request issued on a {@link solace.CacheSession} constructed using these\n   * properties.  0 means no restriction on the number of messages.\n   *\n   * @returns {Number} The maximum number of messages per Topic to deliver, or 0 for no restriction.\n   */\n  getMaxMessages() {\n    return this.maxMessages;\n  }\n\n  /**\n   * Sets the maximum count of messages to be delivered per {@link solace.Destination} in response\n   * to a cache request. 0 means no restriction.\n   *\n   * @param {Number} value The maximum count of messages to deliver, or 0 for no restriction.\n   */\n  setMaxMessages(value) {\n    this.maxMessages = value;\n  }\n\n  /**\n   * Gets the timeout for requests issued on a {@link solace.CacheSession} constructed\n   * using these properties.\n   *  * The valid range is >= 3000.\n   *\n   * @returns {Number} The timeout, in milliseconds, for cache session requests.\n   */\n  getTimeoutMsec() {\n    return this.timeoutMsec;\n  }\n\n  /**\n   * Sets the timeout for requests.\n   *  * The valid range is >= 3000.\n   * @param {Number} value The timeout for requests.\n   */\n  setTimeoutMsec(value) {\n    this.timeoutMsec = value;\n  }\n\n}\n\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n","const { EntryPoint } = require('./entry-point');\nconst { ExitPoint } = require('./exit-point');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This class represents a state in a state machine.\n * @private\n */\nclass State extends StateContext {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.  In addition to the properties documented here, it is also expected\n   *  to have properties required by the [StateContext base class]{@link StateContext}.\n   * @param {String} spec.name The name of the state, used in debug logs.\n   * @param {State|StateMachine} spec.parentContext One of:\n   *  - The parent state object or;\n   *  - The stateMachine object for top-level states.\n   * @param {Object} [extensions] Additional methods to add to the state.\n   */\n  constructor(spec, extensions = null) {\n    super(spec);\n\n    const parentContext = spec.parentContext;\n    Object.assign(this.impl, {\n      parentContext,\n      reactions:            {},\n      entryPoints:          {},\n      exitPoints:           {},\n      ancestorList:         [...parentContext.getAncestorList(), this],\n      handleUnhandledEvent: e => (\n        parentContext.handleEvent\n          ? parentContext.handleEvent(e)\n          : parentContext.impl.handleUnhandledEvent(e)\n      ),\n    });\n    if (parentContext) this.log = parentContext.log.bind(this);\n\n    // Extend and bind functions\n    Object.keys(extensions || {}).forEach((k) => {\n      const extension = extensions[k];\n      this[k] = typeof extension === 'function' ? extension.bind(this) : extension;\n    });\n\n    this.setLogPadding(' '.repeat(this.impl.ancestorList.length));\n  }\n\n  /**\n   * Register a reaction function for a particular event.\n   * @param {String} eventName The name of the event func is to react to.\n   * @param {StateContext.reactionCallback} func The function to call when\n   *  the state processes an event with the name eventName.  The function is\n   *  bound to this object so that this refers to this state object when it\n   *  is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  reaction(eventName, func) {\n    if (!eventName) throw new Error('No event name for reaction');\n    if (!func) throw new Error(`No reaction function for reaction ${eventName}`);\n\n    this.log(`Adding reaction to ${this} for event ${eventName}`);\n\n    if (this.impl.reactions[eventName]) {\n      this.log(`Replacing reaction ${this.impl.reactions[eventName]} with ${func}`);\n    }\n    this.impl.reactions[eventName] = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Create an entryPoint for this state.\n   * @param {String} entryPointName The name of the entryPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is entered via this entryPoint\n   * @returns {State} This state object.\n   * @public\n   */\n  entryPoint(entryPointName, func) {\n    if (!entryPointName) throw new Error('No entry point name for entry point');\n    if (!func) throw new Error(`No reaction function for entry point ${entryPointName}`);\n\n    this.log(`Adding entryPoint ${entryPointName} to ${this}`);\n\n    if (this.impl.entryPoints[entryPointName]) {\n      this.log(`EntryPoint ${entryPointName} already exists in ${this}`);\n      return this;\n    }\n\n    this.impl.entryPoints[entryPointName] = new EntryPoint({\n      state: this,\n      entryPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * Create an exitPoint for this state.\n   * @param {String} exitPointName The name of the exitPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is exited via this exitPoint.\n   * @returns {State} This state object.\n   * @public\n   */\n  exitPoint(exitPointName, func) {\n    if (!exitPointName) throw new Error('No exit point name for entry point');\n    if (!func) throw new Error(`No reaction function for exit point ${exitPointName}`);\n\n    this.log(`Adding exitPoint ${exitPointName} to ${this}`);\n\n    if (this.impl.exitPoints[exitPointName]) {\n      this.log(`ExitPoint ${exitPointName} already exists in  ${this}`);\n      return this;\n    }\n\n    this.impl.exitPoints[exitPointName] = new ExitPoint({\n      state: this,\n      exitPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * @param {String} entryPointName The name of the entry point to be\n   *      transitioned to.\n   * @returns { StateContext } The state context to transition to when\n   *      entering via the state's entryPoint named entryPointName.\n   * @protected\n   */\n  getEntryPointDestState(entryPointName) {\n    if (this.impl.entryPoints[entryPointName] === undefined) {\n      this.log(`${this}: EntryPoint ${entryPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.entryPoints[entryPointName].getDestState();\n  }\n\n  /**\n   * @param {String} exitPointName The name of the exit point to be\n   *      transitioned to.\n   * @returns {StateContext} The state context to transition to when\n   *      exiting via the state's exitPoint named exitPointName.\n   * @protected\n   */\n  getExitPointDestState(exitPointName) {\n    if (this.impl.exitPoints[exitPointName] === undefined) {\n      this.log(`${this}: ExitPoint ${exitPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.exitPoints[exitPointName].getDestState();\n  }\n\n  /**\n   * Register a function to be called when the state is entered.\n   * @param {function} func The function to call when the state is entered.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  entry(func) {\n    if (this.impl.appEntryFunc) {\n      this.log(`Replacing entry function ${this.impl.appEntryFunc} with ${func}`);\n    }\n    this.impl.appEntryFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Register a function to be called when the state is exited.\n   * @param {function} func The function to call when the state is exited.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  exit(func) {\n    if (this.impl.appExitFunc) {\n      this.log(`Replacing exit function ${this.impl.appExitFunc} with ${func}`);\n    }\n    this.impl.appExitFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is the same as [transitionTo]{@link StateContext#transitionTo},\n   * except the outermost state is exited if the source state is within the\n   * dest state or vice versa.  If one state is not within the other, this\n   * is equivalent to [transitionTo]{@link StateContext#transitionTo}.\n   * @param {State} state The state to transition to; if undefined, it is\n   *      a self-transition.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as part\n   *      of the transition, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition.\n   */\n  externalTransitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n      external:  true,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named entryPoint created on state.  If the\n   * named entryPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named entryPoint.\n   * @param {String} entryPointName The name of the entryPoint of state.\n   * @param {StateContext.actionCallback} action The action to perform as part of\n   *      the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToEntryPoint(state, entryPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getEntryPointDestState(entryPointName),\n      action,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named exitPoint created on state.  If the\n   * named exitPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named exitPoint.\n   * @param {String} exitPointName The name of the exitPoint of state.\n   * @param {StateContext.actionCallback} [action] Optional The\n   * action to perform as part of the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToExitPoint(state, exitPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getExitPointDestState(exitPointName),\n      action,\n    });\n  }\n\n  /**\n   * If a reaction evaluates the guard conditions for the reaction and none\n   * succeed, the eventUnhandled\n   * [ReactionResult]{@link StateContext.ReactionResult} should be\n   * returned.  This causes the FSM to continue looking for a reaction to\n   * process the event.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  eventUnhandled() {\n    return new StateContext.ReactionResult({\n      caller: this,\n    });\n  }\n\n  /**\n   * This [ReactionResult]{@link StateContext.ReactionResult} is used\n   * when an event has been handled in a state and the transition is a local\n   * transition back to itself.  Note that internal transitions never cause\n   * state exits or entries -- if the internal transition is defined in an\n   * outer state that contains the active state, then the behaviour is as if the\n   * active state has inherited the internal transition from the outer state.\n   * @param {?Function} action The action to perform in the transition.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  internalTransition(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getCurrentState(),\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n\n  /**\n   * @returns {StateContext} The parent state context for this state, which\n   *      could either be an outer state, or the state machine for top-level\n   *      states.\n   * @protected\n   */\n  getParent() {\n    return this.impl.parentContext;\n  }\n\n  /**\n   * Called when a state is being entered.  Calls the app's registered entry\n   * function, if any.\n   * @protected\n   */\n  onEntry() {\n    this.log(`Entering: ${this}`);\n    if (this.impl.appEntryFunc) {\n      this.impl.appEntryFunc();\n    }\n  }\n\n  /**\n   * Called when a state is being exited.  Calls the app's registered exit\n   * function, if any.\n   * @protected\n   */\n  onExit() {\n    this.log(`Exiting: ${this}`);\n    if (this.impl.appExitFunc) {\n      this.impl.appExitFunc();\n    }\n  }\n\n  /**\n   * Called when a state is to handle an event.\n   * @param {FsmEvent} e The event to handle.\n   * @returns {ReactionResult} The result of handling the event.\n   * @protected\n   */\n  handleEvent(e) {\n    this.log(`Process: ${e}`);\n    const reaction = this.impl.reactions[e.getName()];\n    if (reaction) {\n      const result = reaction(e);\n      // All ReactionResults in which an event is considered handled\n      // have a destState defined.\n      if (!result) {\n        this.log(`Reaction returned undefined: ${e} in ${this}`);\n      }\n      if (result.destState) {\n        this.log(`Handled: ${e}`);\n        return result;\n      }\n      this.log(`Unhandled: ${e} in ${this}`);\n    } else {\n      this.log(`No reaction: ${e} in ${this}`);\n    }\n\n    return this.impl.handleUnhandledEvent(e);\n  }\n}\n\nmodule.exports.State = State;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribue of a {@link solace.Message}. Applications receive messages due to subscriptions on\n * topics, or consumers connected to durable objects.  The MessageCacheStatus of such messages is:\n * {@link solace.MessageCacheStatus.LIVE}.\n *\n * Message are also delivered to an application\n * as a result of a cache request (see {@link solace.CacheSession#sendCacheRequest}) which\n * have a MessageCacheStatus that is {@link solace.MessageCacheStatus.CACHED} or\n * {@link solace.MessageCacheStatus.SUSPECT}.\n *\n * The MessageCacheStatus is retrieved with {@link solace.Message#getCacheStatus}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageCacheStatus = {\n  /**\n   * The message is live.\n   * @type {Number}\n   */\n  LIVE:    0,\n  /**\n   * The message was retrieveed from a solCache Instance.\n   * @type {Number}\n   */\n  CACHED:  1,\n  /**\n   * The message was retrieved from a suspect solCache Instance.\n   * @type {Number}\n   */\n  SUSPECT: 2,\n\n};\n\nmodule.exports.MessageCacheStatus = Enum.new(MessageCacheStatus);\n","const { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { TransportSessionEventCode } = require('./transport-session-event-codes');\n\nconst { formatHexString } = Hex;\n\n/**\n * @classdesc\n * Defines a Transport Session Event\n *\n * @private\n */\nclass TransportSessionEvent {\n\n  /**\n   * @constructor\n   * @param {Object} tsEventCode The {@link TransportSessionEventCode} associated with this event\n   * @param {String} infoStr An informational string\n   * @param {?Number} responseCode The response code from the router, if any\n   * @param {ErrorSubcode} subcode The {@link ErrorSubcode} associated with this event\n   * @param {Number} sessionId The session ID associated with this event\n   *\n   */\n  constructor(tsEventCode, infoStr, responseCode, subcode, sessionId) {\n    this._transportEventCode = tsEventCode;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = subcode;\n    this._sid = sessionId;\n  }\n\n  // TransportSessionEvent functions\n\n  getTransportEventCode() {\n    return this._transportEventCode;\n  }\n\n  get transportEventCode() {\n    return this._transportEventCode;\n  }\n\n  getInfoStr() {\n    return this.infoStr;\n  }\n\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  getResponseCode() {\n    return this.responseCode;\n  }\n\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  getSubcode() {\n    return this.errorSubcode;\n  }\n\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  getSessionId() {\n    return this.sessionId;\n  }\n\n  get sessionId() {\n    return this._sid;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'transportEventCode': TransportSessionEventCode.describe(this.transportEventCode),\n      'infoStr':            this.infoStr,\n      'responseCode':       this.responseCode,\n      'errorSubcode':       ErrorSubcode.describe(this.errorSubcode),\n      'sid':                this.sid && formatHexString(this.sid) || 'N/A',\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.TransportSessionEvent = TransportSessionEvent;\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { SDTFieldType } = require('./sdt-field-types');\nconst { validateSdtField } = require('./validate-sdt-field');\n\nconst { anythingToBuffer } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT (Structured Data Type) field. To create an instance of an <code>SDTField</code>,\n * call {@link solace.SDTField.create}.\n *\n * SDTField objects are used in Solace Containers ({@link solace.SDTMapContainer}\n * and {@link solace.SDTStreamContainer}). The <b>deprecated</b> usage of\n * {@link solace.SDTMapContainer#addField} and {@link solace.SDTStreamContainer#addField}\n * take a SDTField object as an argument. The preferred usage is to pass a\n * {@link solace.SDTFieldType} and value as arguments.\n *\n * SDTField objectts must be used as an argument to {@link solace.Message#setSdtContainer}.\n * The only valid SDTField objects for {@link solace.Message#setSdtContainer} are:\n * * {@link solace.SDTFieldType.STREAM}\n * * {@link solace.SDTFieldType.MAP}\n * * {@link solace.SDTFieldType.STRING}\n * @hideconstructor\n * @memberof solace\n */\nclass SDTField {\n\n  /*\n   * @constructor\n   * @param {SDTFieldType} [type=SDTFieldType.NULLTYPE] The field type to construct\n   * @param {*} value The value to be encapsulated\n   * @throws {solace.OperationError} if value does not match type\n   * @private\n   */\n  constructor(type = SDTFieldType.NULLTYPE, value = null) {\n    const err = validateSdtField(type, value);\n    if (err !== null) {\n      throw (err);\n    }\n    this._type = type;\n    if (type === SDTFieldType.BYTEARRAY) {\n      this._value = anythingToBuffer(value);\n    } else {\n      this._value = value;\n    }\n    this._error = undefined;\n  }\n\n  /**\n   * Gets the type of field represented.\n   * @returns {solace.SDTFieldType} The type of field represented.\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * Gets the field value.\n   * @returns {*} Field value (as one of the supported data types).\n   * @throws {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   */\n  getValue() {\n    if (this._error !== undefined) {\n      throw (this._error);\n    }\n    return this.getValueNoThrow();\n  }\n\n  /**\n   * Gets the field value or error object.\n   * @returns {*} Field value (as one of the supported data types) or\n   * {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   * @private\n   */\n  getValueNoThrow() {\n    if (this._error !== undefined) {\n      return this._error;\n    }\n    if (this._type === SDTFieldType.BYTEARRAY && ProfileBinding.value.byteArrayAsString) {\n      return this._value.toString('latin1');\n    }\n    return this._value;\n  }\n\n  /**\n   * Sets an error on the object to be thrown on getValue().\n   * Used only by parse-integer, as it is possible to receive\n   * 64 bit integers that cannot be represented in a javaScript number.\n   * JavaScript numbers are floats and can only hold a 48 bit integer.\n   * @private\n   * @param {solace.SDTUnsupportedValueError} err error object.\n   */\n  setError(err) {\n    this._error = err;\n  }\n\n  toString() {\n    return `[SDTField type:${this._type} value:${this._value}]`;\n  }\n\n  /**\n   * Create a new SDTField instance representing a Value of a given Type.\n   *\n   * @param {solace.SDTFieldType} type The type of field represented.\n   * @param {*} value The corresponding value to store in the field.\n   * @returns {solace.SDTField} The new SDT field with the given type and value\n   * @throws {solace.OperationError} if value does not match type\n   * @static\n   */\n  static create(type, value) {\n    return new SDTField(type, value);\n  }\n\n}\n\nmodule.exports.SDTField = SDTField;\n","const { assert } = require('solclient-eskit');\nconst { hostListDNSFilter } = require('./host-list-dns-filter');\nconst { LogFormatter } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nfunction parseURLs(rawURLs) {\n  if (Array.isArray(rawURLs)) {\n    return rawURLs.map(rawURL => parseURL(rawURL));\n  }\n  return parseURLs(rawURLs.split(/[,;]/));\n}\n\n/*\n *   \"When using a host list, each time the API works through the host list without establishing\n *    a connection is considered an connect retry.\"\n *   SESSION_CONNECT_RETRIES: \"When using a host list, this property defines how many times to\n *    try to connect or reconnect to a single host before moving to the next host in the list.\"\n *   Details: http://docs.solace.com/Solace-Messaging-APIs/Configuring-Connection-T.htm\n*/\n\n// In general:\n// * set initial state to invalid so that we begin needing a transition.\n// * preincrement all try counts on transition.\n// Specifics:\n// * Select try count for entire list based on whether we were connected.\n// * Try count per host is the same for both connect and reconnect.\n// * When the host changes, the waitTime is 0.\n// * Overriding the above, when the host pointer wraps to 0, the waitTime is nonzero.\n\nclass HostInfo {\n  constructor(props = { url: null, waitTime: 0 }) {\n    Object.assign(this, props);\n  }\n}\n\n/**\n * @private\n */\nclass HostList {\n  constructor({\n    url,\n    connectRetries,\n    reconnectRetries,\n    connectRetriesPerHost,\n    reconnectRetryWaitInMsecs,\n  } = {}) {\n    Object.assign(this, {\n      hosts: parseURLs(url).map(e => e.href),\n\n      // How many times will we traverse the host list without success?\n      // Try to connect one more than the 'retryCount' because we always try once.\n      connectTryCount: (connectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetries + 1\n      ),\n\n      // How many times will we traverse the host list after success?\n      reconnectTryCount: (reconnectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : reconnectRetries\n      ),\n\n      // A value of –1 in the next assignements means retry forever - \"null\" will mean that\n      // try to connect one more than the 'retryCount' because we always try once.\n      connectTryCountPerHost: (connectRetriesPerHost === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetriesPerHost + 1\n      ),\n\n      // How long do we wait before reattempting the same host or wrapping around the list?\n      reconnectRetryWaitInMsecs,\n\n      // Mutating operations affect only this.\n      _mutableState: {},\n\n      logger: new LogFormatter('[host-list]'),\n    });\n\n    // call this to initialize the _mutableState property\n    this.reset(); \n\n    assert(this.hosts.length >= 1);\n    assert(this.connectTryCount >= 1);\n    assert(this.reconnectTryCount >= 0);\n    assert(this.connectTryCountPerHost >= 1);\n  }\n\n  /**\n   * Call before first getNextHost() to validate that at least one URL contains a reachable\n   * hostname.\n   * @param {function(Error)} callback The callback to invoke when DNS resolution completes\n   */\n  resolveHosts(callback) {\n    const { LOG_TRACE, LOG_WARN } = this.logger;\n    hostListDNSFilter(this.hosts, (err, resolved) => {\n      // Exit immediately if the filter threw.\n      if (err) return callback(err);\n      assert(resolved.length === this.hosts.length, 'Resolve did not return a result for all hosts');\n\n      LOG_TRACE('Resolve result', resolved);\n      let succeeded = 0;\n      resolved.forEach((result) => {\n        if (result.address) {\n          ++succeeded;\n        }\n        if (!result.resolved) {\n          // Only log if the lookup was actually performed\n          return;\n        }\n        if (result.address) {\n          LOG_TRACE('DNS resolve OK:    ', result.address, 'for', result.url);\n        } else {\n          LOG_WARN('DNS resolve FAILED:', result.error.code,\n                   `${result.error.syscall}('${result.error.hostname}')`, 'for', result.url);\n        }\n      });\n      // finished DNS resolution checks\n      return callback(succeeded === 0 ? 'All hosts failed DNS resolution' : null);\n    });\n  }\n\n  /**\n   * @param {Object} state Properties for host selection logic\n   * @memberof HostList\n   */\n  reset(state = { wasConnected: false, disconnected: false }) {\n    // On reset, we always return to the beginning of the host list.\n    // This facilitates DR recovery by returning to the primary router.\n    // Set an invalid initial state that will trigger our first try.\n    Object.assign(this._mutableState, {\n      wasConnected: state.wasConnected,\n      disconnected: state.disconnected,\n      hostPointer:  0,\n      hostTries:    0,\n      listTries:    1,\n      exhausted:    false,\n      lastHostInfo: new HostInfo(),\n    });\n  }\n\n  /**\n   * !returns {HostInfo} Connection information for the next host.\n   * @returns {String} The URL for the next host\n   * @memberof HostList\n   */\n  getNextHost() {\n    const { LOG_TRACE } = this.logger;\n\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    const lastHostInfo = state.lastHostInfo;\n\n    assert(lastHostInfo, 'Next host request with no prior host info -- did you call reset()?');\n    // Using a try/finally as a \"goto end\" to always log final state. Exceptions not expected\n    // here, although if an assertion fails, the finally log should be helpful.\n    try {\n      // If this was passed into reset, the session is telling us to enforce no more hosts.\n      if (state.disconnected) {\n        LOG_TRACE('Host list set to disconnected, providing null next host');\n        return null;\n      }\n\n      // If exhausted, this function has returned a null url already.\n      assert(!state.exhausted, 'Next host request after host list exhausted');\n\n      // Pull immutable properties from the instance\n      const properties = Object.assign({\n        hosts:        this.hosts,\n        hostTriesMax: this.connectTryCountPerHost,\n        listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n      });\n\n      LOG_TRACE('Getting next host\\n', 'properties', properties, '\\nstate', state);\n      LOG_TRACE('Last host', lastHostInfo);\n\n      // Initial state was valid. This is a host try. Increment.\n      ++state.hostTries;\n      if (state.hostTries > properties.hostTriesMax) {\n        // Increment host pointer, possibly putting it out of bounds.\n        LOG_TRACE(`Exhausted ${state.hostTries} host tries for host ${lastHostInfo.url}.`);\n        ++state.hostPointer;\n        // If the host pointer is out of bounds, we are beginning a new list try.\n        // It was either set out of bounds deliberately by reset() or it was\n        // incremented out of bounds above.\n        if (state.hostPointer >= properties.hosts.length) {\n          // This is a new list try.\n          ++state.listTries;\n          if (state.listTries > properties.listTriesMax) {\n            // Beginning this list try has exceeded our inclusive max. The host list is\n            // exhausted.\n            LOG_TRACE(`Exhausted host list at ${properties.listTriesMax} traversals.`);\n            state.exhausted = true;\n          } else {\n            // Resetting the host pointer to begin this list try.\n            LOG_TRACE(`Host list try (${state.listTries}/${properties.listTriesMax})`);\n            state.hostPointer = 0;\n            state.hostTries = 1; // this is the first try for this host\n          }\n        } else {\n          state.hostTries = 1; // this is the first try for this host\n        }\n      } else {\n        // Continue with this host.\n        LOG_TRACE(`Host try (${state.hostTries}/${properties.hostTriesMax})`);\n      }\n\n      if (state.exhausted) {\n        LOG_TRACE('All hosts exhausted');\n        return null;\n      }\n\n      // Beyond this point, expect a valid host to be returned.\n\n      const url = properties.hosts[state.hostPointer];\n      assert(url, `No host at the host pointer! ${properties.hosts}[${state.hostPointer}]`);\n\n      // Wait time conditions:\n      // 1. On a new list (invalid lastHostInfo), zero waitTime.\n      const isNewList = lastHostInfo.url === null;\n      // 2a. On a new host, zero waitTime...\n      const isNewHost = lastHostInfo.url !== url;\n      // 2b. ...unless we are just restarting the list.\n      const didJustFinishList = lastHostInfo.url !== url && state.hostPointer === 0;\n      // (2b negates 2a for a new list)\n\n      const waitTime = (isNewList || (isNewHost && !didJustFinishList))\n        ? 0\n        : this.reconnectRetryWaitInMsecs;\n\n      // Session FSM was intended to use all of these, but handles its own events presently\n      // and expects waitTime to be a property of the list that mutates per host, so that is\n      // what is done.\n      const hostInfo = new HostInfo({\n        url,\n        waitTime,\n      });\n\n      // Set last host for next time, and return\n      LOG_TRACE('Returning host from', hostInfo);\n      state.lastHostInfo = hostInfo;\n      return hostInfo.url;\n    } finally {\n      LOG_TRACE('Final list state\\n', state);\n    }\n  }\n\n  get connectWaitTimeInMsecs() {\n    assert(this._mutableState.lastHostInfo.url, 'Getting connectWaitTimeInMsecs having never called getNextHostInfo');\n    return this._mutableState.lastHostInfo.waitTime;\n  }\n\n  currentHostToString() {\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    // Pull immutable properties from the instance\n    const properties = Object.assign({\n      hosts:        this.hosts,\n      hostTriesMax: this.connectTryCountPerHost,\n      listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n    });\n    // host pointer is zero based index into the host list\n    // so translate it to a human readable index\n    const hostNumber = state.hostPointer + 1;\n    return `host '${state.lastHostInfo.url}' (host ${hostNumber} of ${properties.hosts.length})(host connection attempt ${state.hostTries} of ${properties.hostTriesMax})(total ${wasConnected ? 'reconnection' : 'connection'} attempt ${state.listTries} of ${properties.listTriesMax})`;\n  }\n}\n\nmodule.exports.HostList = HostList;\n","/**\n * @module solace/fsm\n */\n\nconst { FsmEvent } = require('./lib/event');\nconst { State } = require('./lib/state');\nconst { StateMachine } = require('./lib/state-machine');\n\nmodule.exports.FsmEvent = FsmEvent;\nmodule.exports.State = State;\nmodule.exports.StateMachine = StateMachine;\n","const { BaseChecks } = require('./base-checks');\n\n/**\n *\n * Generates a then closure.\n *\n * @param {Boolean} doOp Whether the returned then function should call its argument.\n * @returns {Object} An object { then(fn, elseFn=undefined) }. If doOp was true, then(fn) will\n *                      call fn. If not, elseFn will be called if supplied.\n * @private\n */\nfunction thenGen(doOp) {\n  return {\n    then: doOp ? f => f() : (_, elseFn) => elseFn(),\n  };\n}\n\n/**\n *\n * none, anything, boolean, ... @returns {Boolean}\n * when(condition) @returns then(fn, elseFn) => if condition fn() else elseFn && elseFn()\n * unless(condition, else) @returns then(fn, elseFn) => if !condition fn() else elseFn && elseFn\n * whenNone, whenAnything, whenBoolean, ... @returns {function} then(fn, elseFn)\n * unlessNone, unlessAnything, unlessBoolean ... @returns {function} unless(fn, elseFn)\n * @private\n */\nconst Check = (() => {\n  const result = Object.assign({}, BaseChecks);\n  result.when = condition => thenGen(condition);\n  result.unless = condition => thenGen(!condition);\n  return result;\n})();\n\nmodule.exports.Check = Check;\n","const { Base64, Convert } = require('solclient-convert');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { encode: base64Encode } = Base64;\nconst { stringToUint8Array } = Convert;\n\nfunction sendXhrBinaryMSIE10(xhr, data, contentType) {\n  xhr.responseType = 'arraybuffer';\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data));\n}\n\nfunction sendXhrBinaryXHR2(xhr, data, contentType) {\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data).buffer);\n}\n\nfunction sendXhrText(xhr, data, contentType, connClose) {\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(data === null || data === undefined ? data : base64Encode(data), connClose);\n}\n\nconst sendXhrBinary = (() => {\n  // Uint8Array is probably shimmed by core-js. We don't use window.Blob, but\n  // it is a Working Draft, not  part of ES6, and not shimmed by core-js.\n  // Therefore it makes a workable canary for IE10 detection.\n  if (typeof window !== 'undefined' && window.Uint8Array && window.Blob /* !ie9 */) {\n    const xhr = XHRFactory.create(true);\n    if (xhr.responseType /* ie10 */) {\n      return sendXhrBinaryMSIE10;\n    }\n    return sendXhrBinaryXHR2;\n  }\n  return sendXhrText;\n})();\n\nmodule.exports.sendXhrBinary = sendXhrBinary;\nmodule.exports.sendXhrText = sendXhrText;\n","const { ArrayOperations } = require('./lib/array-operations');\nconst { assert } = require('./lib/assert');\nconst { BidiMap } = require('./lib/bidi-map');\nconst { Enum } = require('./lib/enum');\nconst { Iterator } = require('./lib/iterator');\nconst { Lazy } = require('./lib/lazy');\nconst { makeMap } = require('./lib/make-map');\nconst { Mixin } = require('./lib/mixin');\nconst { Resolver } = require('./lib/resolver');\nconst { SetOperations } = require('./lib/set-operations');\n\nmodule.exports.assert = assert;\nmodule.exports.ArrayOperations = ArrayOperations;\nmodule.exports.BidiMap = BidiMap;\nmodule.exports.Enum = Enum;\nmodule.exports.Iterator = Iterator;\nmodule.exports.Lazy = Lazy;\nmodule.exports.makeIterator = Iterator.makeIterator;\nmodule.exports.makeMap = makeMap;\nmodule.exports.Mixin = Mixin;\nmodule.exports.mixin = Mixin.mixin;\nmodule.exports.Resolver = Resolver;\nmodule.exports.resolve = Resolver.resolve;\nmodule.exports.SetOperations = SetOperations;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTField } = require('./sdt-field');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) map container.\n * @memberof solace\n */\nclass SDTMapContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._map = []; // key-value mappings (keys are strings)\n  }\n\n  /**\n   * Get the list of keys in this map, in unspecified order.\n   * @returns {Array.<String>} Array of defined keys in the map.\n   */\n  getKeys() {\n    return Object.keys(this._map);\n  }\n\n  /**\n   * Return the SDTField with the given key.\n   * @param {String} key The key to look up.\n   * @returns {solace.SDTField} The field referenced by key.\n   */\n  getField(key) {\n    return this._map[key];\n  }\n\n  /**\n   * Delete an SDTField with the given key.\n   * @param {String} key The field key to delete.\n   */\n  deleteField(key) {\n    delete this._map[key];\n  }\n\n  /**\n   * Adds a field to this map. If a key:value mapping already exists for this key, it is replaced.\n   * <p>\n   * <b>Deprecated</b> If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is added to the map.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> before adding it to the map.\n   *\n   * @param {String} key The key by which to store the given value.\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {solace.OperationError} if value does not match type\n   * @throws {solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(key, typeOrField, value = undefined) {\n    if (typeOrField instanceof SDTField) {\n      this._map[key] = typeOrField;\n      return;\n    } else if (typeof value !== 'undefined') {\n      this._map[key] = SDTField.create(typeOrField, value);\n      return;\n    }\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTMapContainer = SDTMapContainer;\n","\nconst EncodeInteger = {};\n\nEncodeInteger.int48ToStr = function int48ToStr(vIn) {\n  let v = vIn;\n  const bytes = [];\n  for (let i = 0; i < 6; i++) {\n    const byteI = (v % 256);\n    v = Math.floor(v / 256);\n    bytes.push(String.fromCharCode(byteI));\n  }\n  bytes.reverse();\n  return bytes.join('');\n};\n\nmodule.exports.EncodeInteger = EncodeInteger;\n","const P2PUtil = {\n  getP2PInboxTopic(base) {\n    return (`${base}/_`);\n  },\n  getP2PTopicSubscription(base) {\n    return (`${base}/>`);\n  },\n};\n\nmodule.exports.P2PUtil = P2PUtil;\n","const { ContentSummaryType } = require('./content-summary-types');\nconst { Decode } = require('./decode');\nconst { Encode } = require('./encode');\nconst { ParamParse } = require('./param-parse');\nconst { ParseSMF } = require('./parse-smf');\nconst { Transport } = require('./transport');\n\nmodule.exports.ContentSummaryType = ContentSummaryType;\nmodule.exports.Encode = Encode;\nmodule.exports.Decode = Decode;\nmodule.exports.ParamParse = ParamParse;\nmodule.exports.ParseSMF = ParseSMF;\nmodule.exports.Transport = Transport;\n\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnSubcode types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed successfully.\n   */\n  REQUEST_COMPLETE:            0,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed when live data arrived on the topic requested.\n   */\n  LIVE_DATA_FULFILL:           1,\n  /**\n   * @type {Number}\n   * @description\n   * The cache instance or session returned an error response to the cache request.\n   */\n  ERROR_RESPONSE:              2,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the {@link Session} used to construct it has been\n   * disposed.\n   */\n  INVALID_SESSION:             3,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the request timeout expired.\n   */\n  REQUEST_TIMEOUT:             4,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request was made on the same topic as an existing request, and\n   * {@link CacheLiveDataAction.FLOW_THRU} was not set.\n   */\n  REQUEST_ALREADY_IN_PROGRESS: 5,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned no data.\n   */\n  NO_DATA:                     6,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned suspect data.\n   */\n  SUSPECT_DATA:                7,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the cache session was disposed.\n   */\n  CACHE_SESSION_DISPOSED:      8,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the subscription request for the specified topic failed.\n   */\n  SUBSCRIPTION_ERROR:          9,\n};\n\nmodule.exports.CacheReturnSubcode = Enum.new(CacheReturnSubcode);\n","const { Enum, assert } = require('solclient-eskit');\nconst { MessageOutcome } = require('solclient-message');\nconst { LOG_DEBUG, LOG_ERROR } = require('solclient-log');\n\n/**\n * @private\n */\nconst ApplicationAckState = Enum.new({\n  UNACKED:        'UNACKED',\n  ACKED_NOT_SENT: 'ACKED_NOT_SENT',\n  ACKED_SENT:     'ACKED_SENT',\n});\n\n// For the ring buffer update index, we have two key-value options:\n//  Map() - generally faster where supported\n//  Object - seems to automatically coerce keys to string, which is what we want in this case\n// By using Map and explicly creating a .key attribute and using it whenever possible,\n// we should get performance that is no worse than Object, which may have to perform that\n// coercion more often.\n\n/**\n * @private\n */\nclass ApplicationAck {\n  constructor(id, state, settlementOutcome) {\n    if (id) {\n      this.exists = true;\n      this.id = id;\n      this.key = id.toString();\n      this.state = state || ApplicationAckState.UNACKED;\n      this.settlementOutcome = settlementOutcome || MessageOutcome.ACCEPTED;\n    } else {\n      this.exists = false;\n    }\n  }\n\n  set(id, state, settlementOutcome = undefined) {\n    this.exists = true;\n    this.id = id;\n    this.key = id.toString();\n    this.state = state || ApplicationAckState.UNACKED;\n    this.settlementOutcome = (settlementOutcome !== undefined) ? settlementOutcome : null; // outcome not yet set at point of insertion\n  }\n\n  clear() {\n    this.exists = false;\n    this.id = null;\n    this.key = null;\n    this.state = null;\n    this.settlementOutcome = null;\n  }\n}\n\n/**\n * @private\n */\nclass ApplicationAckRingBuffer {\n  /**\n   * Creates an instance of ApplicationAckRingBuffer. A standard ring buffer except that\n   * it reserves an empty entry so that an operation can occur during insert that includes\n   * both the new element and any element to be evicted. Also includes an ID-to-index map\n   * to speed updates.\n   *\n   * @param {Number} size The number of entries in the ring. Effective size is (size - 1).\n   * @memberof ApplicationAckRingBuffer\n   */\n  constructor(size) {\n    LOG_DEBUG('Creating application ack ring buffer with size ', size, ' retained size', size - 1);\n    assert(size >= 2); // one always free doesn't work with < 2 elements\n    this._size = size;\n    this._insertIndex = 0;\n    /**\n     * @property {Array.<?ApplicationAck>}\n     */\n    this._buffer = Array(size).fill(null).map(() => new ApplicationAck());\n    /**\n     * @property {Map.<String, Number>}\n     */\n    this._index = new Map();\n  }\n\n  reset() {\n    this._insertIndex = 0;\n    this._buffer.forEach((ack) => { ack.exists = false; });\n    this._index.clear();\n  }\n\n  /**\n   * @param {Long} id The id of the new entry\n   * @param {function(ApplicationAck)} beforeEvictCallback Call this before operation completes\n   * @returns {any} Return value of beforeEvictCallback\n   * @private\n   */\n  insert(id, beforeEvictCallback) {\n    assert(beforeEvictCallback);\n    assert(id);\n\n    const size = this._size;\n    const buffer = this._buffer;\n    const index = this._index;\n    const insertIndex = this._insertIndex;\n\n    /*\n     * Because of the postprocessing step, we are not re-entrant safe. It is expected\n     * that we are called from TCP -> Transport -> Session -> acceptMessage().\n     * This assert verifies that the postprocess cleanup has happened.\n     */\n    assert(!buffer[insertIndex].exists, 'Invariant not enforced (before): insert index not empty');\n\n    // First, insert.\n    const inserting = buffer[insertIndex];\n    inserting.set(id, ApplicationAckState.UNACKED);\n    if (index.has(inserting.key)) {\n      LOG_ERROR(`Duplicate ID: ${index.get(inserting.key)} insertIndex: ${insertIndex}`);\n    }\n    index.set(inserting.key, insertIndex);\n\n    const evictingIndex = (insertIndex + 1) % size;\n    const evicting = buffer[evictingIndex];\n    let result;\n    try {\n      result = beforeEvictCallback(evicting.exists ? evicting : null);\n    } finally {\n      // Always clean up to keep the RB in a consistent state.\n      // If inProgressCallback threw, this runs before the exception propagates.\n\n      // Update insert index for next operation.\n      this._insertIndex = (insertIndex + 1) % size;\n\n      if (evicting.exists) {\n        index.delete(evicting.key);\n        evicting.clear();\n      }\n    }\n\n    assert(!buffer[this._insertIndex].exists, 'Invariant not enforced (after): insert index not empty');\n    return result;\n  }\n\n  /**\n   * Returns the number of elements in this ringbuffer. Will increase to\n   * one less than the size provided to the constructor as the buffer is used.\n   *\n   * @readonly\n   * @memberof ApplicationAckRingBuffer\n   */\n  get length() {\n    return this._index.size;\n  }\n\n  /**\n   * Returns the first element in the ring buffer.\n   *\n   * This could be called from the evict callback, so insert needs to be sure\n   * that internal state is correct for that scenario.\n   *\n   * The expected case is that the first element is at insertIndex + 1, but if the\n   * buffer has not been filled yet, we will iterate the buffer and skip nonexistent\n   * elements to find it.\n   *\n   * This is a little inefficient until we have received this._size messages, but after\n   * that it is more efficient than maintaining a read pointer.\n   *\n   * @returns {?ApplicationAck} The first ack in the buffer.\n   */\n  front() {\n    if (this.length === 0) return null;\n\n    const buffer = this._buffer;\n    const insertIndex = this._insertIndex;\n    const size = this._size;\n    const firstIndex = (insertIndex + 1) % size;\n    // Cannot assert invariant here: insert is usually in progress.\n\n    // Buffer full case\n    if (buffer[firstIndex].exists) return buffer[firstIndex];\n\n    // Not yet filled case\n    // The last checked element for the iteration is the start point,\n    //  plus size, a full lap including the start index,\n    //  minus 1, to exclude the start\n    //  minus 1, to exclude the invariant null entry\n    for (let rawIndex = firstIndex, lastIndex = firstIndex + size - 1;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        return element;\n      }\n    }\n\n    // Buffer is completely empty\n    assert(this._index.size === 0, '#front() failed so buffer must be empty');\n    return null;\n  }\n\n  /**\n   * Rather than implementing the iterator protocol, which requires Symbol support,\n   * we'll implement a forEach that behaves as though this is an array.\n   *\n   * @param {function(ApplicationAppState, index, collection)} callback The iteration callback\n   */\n  forEach(callback) {\n    if (this.length === 0) return;\n\n    const buffer = this._buffer;\n    const size = this._size;\n    let index = 0;\n\n    for (let rawIndex = this._insertIndex + 1, lastIndex = this._insertIndex + size;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        callback(element, index++, this);\n      }\n    }\n\n    assert(index > 0, 'Not empty but did not dispatch');\n  }\n\n  /**\n   * @param {Long} id The ID to update\n   * @param {ApplicationAckState} state The new state for the ID\n   * @param {?MessageOutcome} settlementOutcome where available, update the settlement outcome for the ID\n   * @private\n   */\n  updateAckState(id, state, settlementOutcome = undefined) {\n    const key = id.toString(); assert(this._index.has(key), 'Ack key not found');\n    const buffer = this._buffer;\n    const updateIndex = this._index.get(key);\n    const existing = buffer[updateIndex]; assert(existing, 'Ack key has no entry');\n    existing.state = state;\n    // where available, update the settlement outcome too\n    if(settlementOutcome != undefined) {\n      existing.settlementOutcome = settlementOutcome;\n    } else if(state === ApplicationAckState.ACKED_NOT_SENT) {\n      // set default settlement outcome to ACCEPTED for ACKed messages if no outcome available\n      existing.settlementOutcome = MessageOutcome.ACCEPTED;\n    }\n  }\n\n  /**\n   * @param {Long} id The ID to look up\n   * @returns {Boolean} `true` if this ID exists in the ringbuffer\n   */\n  has(id) {\n    const key = id.toString();\n    return this._index.has(key);\n  }\n}\n\nObject.assign(module.exports, {\n  ApplicationAckState,\n  ApplicationAck,\n  ApplicationAckRingBuffer,\n});\n","'use strict';\n\nconst WebSocket = require('./lib/websocket');\n\nWebSocket.createWebSocketStream = require('./lib/stream');\nWebSocket.Server = require('./lib/websocket-server');\nWebSocket.Receiver = require('./lib/receiver');\nWebSocket.Sender = require('./lib/sender');\n\nWebSocket.WebSocket = WebSocket;\nWebSocket.WebSocketServer = WebSocket.Server;\n\nmodule.exports = WebSocket;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFParameterType = {\n  // SMF parameter types 5 bit types\n  PADDING:                  0x00,\n  PUBLISHER_ID:             0x01,\n  PUBLISHER_MSGID:          0x02,\n  MESSAGEPRIORITY:          0x03,\n  USERDATA:                 0x04,\n  USERNAME:                 0x06,\n  PASSWORD:                 0x07,\n  RESPONSE:                 0x08,\n  SUB_ID_LIST:              0x0A,\n  GENERIC_ATTACHMENT:       0x0B,\n  BINARY_ATTACHMENT:        0x0C,\n  DELIVERY_MODE:            0x10,\n  ASSURED_MESSAGE_ID:       0x11,\n  ASSURED_PREVMESSAGE_ID:   0x12,\n  ASSURED_REDELIVERED_FLAG: 0x13,\n  MESSAGE_CONTENT_SUMMARY:  0x16,\n  ASSURED_FLOWID:           0x17,\n  TR_TOPICNAME:             0x18,\n  AD_FLOWREDELIVERED_FLAG:  0x19,\n  AD_TIMETOLIVE:            0x1C,\n  AD_TOPICSEQUENCE_NUMBER:  0x1e,\n  EXTENDED_TYPE_STREAM:     0x1f,\n  /* extended parameters 12 bit types */\n  AD_ACK_MESSAGE_ID:        0x29,\n  AD_SPOOLER_UNIQUE_ID:     0x2c,\n  AD_REPL_MATE_ACK_MSGID:   0x2d,\n  AD_REDELIVERY_COUNT:      0x2e,\n\n  /* light wieght parameters */\n  LIGHT_CORRELATION:       0x00,\n  LIGHT_TOPIC_NAME_OFFSET: 0x01,\n  LIGHT_QUEUE_NAME_OFFSET: 0x02,\n  LIGHT_ACK_IMMEDIATELY:   0x03,\n};\n\nconst SMFExtendedParameterType = {\n  // SMFv3 Extended parameters inside the Extended Type Stream\n//Not supported yet\n//  GSS_API_TOKEN:        0x28,\n//  AD_ACK_MESSAGE_ID:    0x29,\n//  AD_TRANSACTION_ID:    0x2a,\n//  AD_TRANSACTION_FLAGS: 0x2b,\n  OAUTH2_ISSUER_IDENTIFIER: 0x2f,\n  OIDC_ID_TOKEN:            0x30,\n  OAUTH2_ACCESS_TOKEN:      0x31,\n  PARTITION_KEY_HASH:       0x35, // @Todo: not yet implemented as improvement for PQ\n  TS_TRANSPORT_CONTEXT:     0x36,\n};\n\nmodule.exports.SMFParameterType = Enum.new(SMFParameterType);\nmodule.exports.SMFExtendedParameterType = Enum.new(SMFExtendedParameterType);\n","module.exports.Long = require('long');\n","const { FsmObject } = require('./object');\n\nclass FsmEvent extends FsmObject {\n}\n\nmodule.exports.FsmEvent = FsmEvent;\n","/**\n * <h1> Overview </h1>\n *\n * This is the Solace Corporation Messaging API for JavaScript. Concepts defined in this API are\n * similar to those defined in other Solace Messaging APIs for Java, C, and .NET.\n *\n * <h1> Concepts </h1>\n *\n * Some general concepts:\n *\n * <li> All function calls are non-blocking; confirmation, if requested, is returned to the calling\n * client application in the form of callbacks. </li>\n *\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\n// -------------------------- Solclient Factory ------------------------------\n// Load me before the rest of the API as a plug-in point for modules\nconst FactoryLib = require('solclient-factory');\n// ---------------------------------------------------------------------------\n\nconst {\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n} = FactoryLib;\n\nconst {\n  Long,\n} = require('solclient-convert');\nconst {\n  Destination,\n  DestinationType,\n  Topic,\n} = require('solclient-destination');\nconst {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n  RequestError,\n  RequestEventCode,\n} = require('solclient-error');\nconst {\n  makeIterator,\n} = require('solclient-eskit');\nconst {\n  ConsoleLogImpl,\n  LogImpl,\n  LogLevel,\n} = require('solclient-log');\nconst {\n  Message,\n  MessageCacheStatus,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageOutcome,\n  MessageType,\n  MessageUserCosType,\n  ReplicationGroupMessageId,\n} = require('solclient-message');\nconst {\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n} = require('solclient-message-consumer');\nconst {\n  ReplayStartLocation,\n  ReplayStartLocationBeginning,\n} = require('solclient-replaystart');\nconst {\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n} = require('solclient-message-publisher');\nconst {\n  Baggage,\n  TraceContext,\n  TraceContextSetter,\n} = require('solclient-message-tracing');\nconst {\n  AbstractQueueDescriptor,\n  QueueAccessType,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n  EndpointNameComplaint,\n} = require('solclient-queue');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst {\n  AuthenticationScheme,\n  CapabilityType,\n  MessageRxCBInfo,\n  MutableSessionProperty,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SslDowngrade,\n} = require('solclient-session');\nconst {\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n} = require('solclient-solcache-session');\nconst {\n  StatType,\n} = require('solclient-stats');\nconst {\n  TransportError,\n  TransportProtocol,\n} = require('solclient-transport');\nconst {\n  Version,\n} = require('solclient-util');\n\n// --------------------------- Internal API -- do not use --------------------\n// Load me last. I disappear in production mode\nconst _internal = require('./api-internal.js');\n// ---------------------------------------------------------------------------\n\n\n/**\n * @namespace\n * @public\n */\nconst solace = {\n  AbstractQueueDescriptor,\n  AuthenticationScheme,\n  Baggage,\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n  CapabilityType,\n  ConsoleLogImpl,\n  Destination,\n  DestinationType,\n  ErrorSubcode,\n  LogImpl,\n  LogLevel,\n  Long,\n  Message,\n  MessageCacheStatus,\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageOutcome,\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n  MessageRxCBInfo,\n  MessageType,\n  MessageUserCosType,\n  MutableSessionProperty,\n  NotImplementedError,\n  OperationError,\n  QueueAccessType,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n  EndpointNameComplaint,\n  ReplayStartLocation,\n  /*\n   * This should not be here ReplayStartLocationBeginning should not be a publicly exposed type.\n   * This type must remain for backwards compatibility however it was never indented for use\n   * by applications.\n   * */\n  ReplayStartLocationBeginning,\n  ReplicationGroupMessageId,\n  RequestError,\n  RequestEventCode,\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n  SslDowngrade,\n  StatType,\n  Topic,\n  TraceContext,\n  TraceContextSetter,\n  TransportError,\n  TransportProtocol,\n  Version,\n\n  makeIterator,\n\n  _internal, //\n};\n\nObject.assign(module.exports, solace);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTFieldType = {\n  /**\n   * @type {Number}\n   * @description Maps to a boolean.\n   */\n  BOOL:        0,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT8:       1,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT8:        2,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT16:      3,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT16:       4,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT32:      5,\n  /**\n   *@type {Number}\n   * @description Maps to a number.\n   */\n  INT32:       6,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers (range: 0 to 2<sup>48</sup>-1).\n   * When decoding, only the lower 48 bits are considered significant.\n   */\n  UINT64:      7,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers + sign (range: -(2<sup>48</sup>-1) to\n   * 2<sup>48</sup>-1). When decoding, only the lower 48 bits are considered significant.\n   */\n  INT64:       8,\n  /**\n   * @type {Number}\n   * @description A single character; maps to a string.\n   */\n  WCHAR:       9,\n  /**\n   * @type {Number}\n   * @description Maps to a string.\n   */\n  STRING:      10,\n  /**\n   * @type {Number}\n   * @description Maps to a Uint8Array.\n   *\n   * Backward compatibility note:\n   * Using the version_10 factory profile or older, the getValue() method of a BYTEARRAY sdtField\n   * returns the byte array in 'latin1' String representation.\n   * Later profiles return a Uint8Array (in the form of a nodeJS Buffer instance in fact)\n   *\n   * When creating a field of type BYTEARRAY, the following datatypes are all accepted as value:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   */\n  BYTEARRAY:   11,\n  /**\n   * @type {Number}\n   * @description Single-precision float; maps to a number.\n   */\n  FLOATTYPE:   12,\n  /**\n   * @type {Number}\n   * @description Double-precision float; maps to a number.\n   */\n  DOUBLETYPE:  13,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTMapContainer}.\n   */\n  MAP:         14,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTStreamContainer}.\n   */\n  STREAM:      15,\n  /**\n   * @type {Number}\n   * @description Maps to {@link Destination}.\n   */\n  DESTINATION: 16,\n  /**\n   * @type {Number}\n   * @description Maps to <code>null</code>.\n   */\n  NULLTYPE:    17,\n  /**\n   * @type {Number}\n   * @description Maps to an unknown type.\n   */\n  UNKNOWN:     18,\n  /**\n   * @type {Number}\n   * @description Maps to an encoded SMF message.\n   */\n  SMF_MESSAGE: 19,\n};\n\nmodule.exports.SDTFieldType = Enum.new(SDTFieldType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheGetResultCode = {\n  INVALID: 0,\n  OK:      1,\n};\n\nmodule.exports.CacheGetResultCode = Enum.new(CacheGetResultCode);\n","/* eslint-disable no-restricted-syntax */\n\nfunction isSuperset(set, subset) {\n  return Array.from(subset).every(elem => set.has(elem));\n}\n\nfunction inplaceUnion(setA, setB) {\n  setB.forEach((elem) => {\n    setA.add(elem);\n  });\n  return setA;\n}\n\nfunction union(setA, setB) {\n  return inplaceUnion(new Set(setA), setB);\n}\n\nfunction inplaceIntersection(setA, setB) {\n  setA.forEach((elem) => {\n    if (!setB.has(elem)) {\n      setA.delete(elem);\n    }\n  });\n  return setA;\n}\n\nfunction intersection(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => setB.has(elem)));\n}\n\nfunction inplaceDifference(setA, setB) {\n  setB.forEach((elem) => {\n    setA.delete(elem);\n  });\n  return setA;\n}\n\nfunction difference(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => !setB.has(elem)));\n}\n\nmodule.exports = {\n  SetOperations: {\n    inplaceDifference,\n    inplaceIntersection,\n    inplaceUnion,\n    isSuperset,\n    difference,\n    intersection,\n    union,\n  },\n}\n;\n","const { CompressedTransport } = require('./transport-compression');\nconst { TcpRawTransport } = require('./transport-tcp-plaintext');\nconst { TcpTlsTransport } = require('./transport-tcp-tls');\nconst { TlsOnlyTransport } = require('./transport-tls');\n\nmodule.exports.TcpRawTransport = TcpRawTransport;\nmodule.exports.CompressedTransport = CompressedTransport;\nmodule.exports.TlsOnlyTransport = TlsOnlyTransport;\nmodule.exports.TcpTlsTransport = TcpTlsTransport;\n","const Long = require('long');\n\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @module\n * ===========================================================================\n * Convert\n *\n * This collection of functions performs all required string to number and number to string\n * conversions\n * ============================================================================\n * @private\n */\n\nconst TWO_ZEROES_STR = String.fromCharCode(0, 0);\nconst THREE_ZEROES_STR = String.fromCharCode(0, 0, 0);\nconst FOUR_ZEROES_STR = String.fromCharCode(0, 0, 0, 0);\n\nconst BYTEARRAY_CONVERT_CHUNK = 8192;\nconst UNSIGNED_LSHIFT_24 = (256 * 256 * 256);\n\nconst ARRAY_BUFFER_CONVERT_CHUNK = 32768;\n\n\nfunction uint8ArrayToString(data, format = undefined) {\n  const dataLength = data.byteLength;\n  const uint8DataArray = new Uint8Array(BufferImpl.from(data));\n  let result = '';\n  for (let i = 0; i < dataLength; i++) {\n    if(format && format.toLowerCase() === 'hex') {\n      result += (uint8DataArray[i]).toString(16).padStart(2, '0');\n    } else {\n      result += String.fromCharCode(uint8DataArray[i] & 0xff);\n    }\n  }\n  return result;\n}\n\nfunction stringToUint8Array(data) {\n  const dataLength = data.length;\n  const arrayBuf = new ArrayBuffer(dataLength);\n  const uint8Array = new Uint8Array(arrayBuf, 0, dataLength);\n  for (let i = 0; i < dataLength; i++) {\n    uint8Array[i] = data.charCodeAt(i);\n  }\n  return uint8Array;\n}\n\nfunction hexStringToUint8Array(data) {\n  // if null data, return empty Uint8Array\n  if(data == null) {\n    return new Uint8Array();\n  }\n  return Uint8Array.from(BufferImpl.from(data, 'hex'));\n}\n\nfunction arrayBufferToString(ab) {\n  if (!ab) return '';\n  const len = ab.byteLength;\n  const u8 = new Uint8Array(ab);\n  if (len < ARRAY_BUFFER_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, u8);\n  }\n\n  let k = 0;\n  let r = '';\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, u8.subarray(k, k + ARRAY_BUFFER_CONVERT_CHUNK));\n    k += ARRAY_BUFFER_CONVERT_CHUNK;\n  }\n  return r;\n}\n\nfunction stringToArrayBuffer(str) {\n  return stringToUint8Array(str).buffer;\n}\n\nfunction int8ToStr(int8) {\n  return String.fromCharCode(int8 & 0xff);\n}\n\nfunction int16ToStr(int16) {\n  return (\n      String.fromCharCode((int16 >> 8) & 0xff) +\n      String.fromCharCode(int16 & 0xff)\n  );\n}\n\nfunction int24ToStr(int24) {\n  return (\n      String.fromCharCode((int24 >> 16) & 0xff) +\n      String.fromCharCode((int24 >> 8) & 0xff) +\n      String.fromCharCode(int24 & 0xff)\n  );\n}\n\nfunction int32ToStr(int32) {\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n\n  if (int32 === 0) return FOUR_ZEROES_STR;\n  if (int32 > 0) {\n    if (int32 < 256) {\n      return THREE_ZEROES_STR + String.fromCharCode(int32);\n    }\n    if (int32 < 65536) {\n      return TWO_ZEROES_STR + String.fromCharCode(int32 >> 8) + String.fromCharCode(int32 & 0xff);\n    }\n  }\n\n  return (\n      String.fromCharCode((int32 >> 24) & 0xff) +\n      String.fromCharCode((int32 >> 16) & 0xff) +\n      String.fromCharCode((int32 >> 8) & 0xff) +\n      String.fromCharCode(int32 & 0xff)\n  );\n}\n\nfunction int64ToStr(int64) {\n  if (typeof int64 !== 'number') {\n    return int32ToStr(int64.high) + int32ToStr(int64.low);\n  }\n\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n  if (int64 >= 0) {\n    if (int64 < 256) {\n      return FOUR_ZEROES_STR + THREE_ZEROES_STR + String.fromCharCode(int64);\n    }\n    if (int64 < 65536) {\n      return FOUR_ZEROES_STR + TWO_ZEROES_STR +\n        String.fromCharCode(int64 >> 8) + String.fromCharCode(int64 & 0xff);\n    }\n    if (int64 < 4294967296) {\n      return FOUR_ZEROES_STR + (String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff));\n    }\n  }\n  return String.fromCharCode((int64 >> 56) & 0xFF) +\n        String.fromCharCode((int64 >> 48) & 0xFF) +\n        String.fromCharCode((int64 >> 40) & 0xFF) +\n        String.fromCharCode((int64 >> 32) & 0xFF) +\n        String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff);\n}\n\nfunction byteArrayToStr(byteArray) {\n  const len = byteArray.length;\n  if (len < BYTEARRAY_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, byteArray);\n  }\n\n  let k = 0;\n  let r = '';\n\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, byteArray.slice(k, k + BYTEARRAY_CONVERT_CHUNK));\n    k += BYTEARRAY_CONVERT_CHUNK;\n  }\n\n  return r;\n}\n\nfunction strToByteArray(str) {\n  const result = [];\n  let i;\n  for (i = 0; i < str.length; i++) {\n    result[i] = str.charCodeAt(i);\n  }\n  return result;\n}\n\nfunction strToHexArray(str) {\n  function toHex(c) {\n    return c.charCodeAt(0).toString(16);\n  }\n  return Array.prototype.map.call(str.split(''), toHex);\n}\n\nfunction strToInt8(data) {\n  return data.charCodeAt(0) & 0xff;\n}\n\nfunction strToInt16(data) {\n  return (\n      (data.charCodeAt(0) << 8) +\n      (data.charCodeAt(1))\n  );\n}\n\nfunction strToInt24(data) {\n  return (\n      (data.charCodeAt(0) << 16) +\n      (data.charCodeAt(1) << 8) +\n      (data.charCodeAt(2))\n  );\n}\n\nfunction strToInt32(data) {\n    // SIGNED integer\n  return (\n      (data.charCodeAt(0) << 24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt32(data) {\n  // WARNING: you cannot use a << 24 to shift a byte into\n  // a 32-bit string, because all shifts in JS are signed\n  return (\n      (data.charCodeAt(0) * UNSIGNED_LSHIFT_24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt64(data) {\n  return Long.fromBits(strToUInt32(data.substr(4, 4)),\n                       strToUInt32(data.substr(0, 4)),\n                       true);\n}\n\nfunction ucs2ToUtf8(ucs2) {\n  return unescape(encodeURIComponent(ucs2));\n}\n\nfunction utf8ToUcs2(utf8) {\n  return decodeURIComponent(escape(utf8));\n}\n\nfunction anythingToBuffer(value) {\n  if (BufferImpl.isBuffer(value)) {\n    return value;\n  }\n  if (typeof value === 'string') {\n    return BufferImpl.from(value, 'latin1');\n  }\n  if (value instanceof ArrayBuffer) {\n    return BufferImpl.from(value);\n  }\n  //TypedArrays and DataView:\n  if (value.buffer instanceof ArrayBuffer &&\n    typeof value.byteLength === 'number' &&\n    typeof value.byteOffset === 'number') {\n    if (value.byteOffset === 0 && value.byteLength === value.buffer.byteLength) {\n      // \"full sice\", no actual offset: just use the raw buffer.\n      return BufferImpl.from(value.buffer);\n    }\n    return BufferImpl.from(value.buffer, value.byteOffset, value.byteLength);\n  }\n  throw new OperationError('Parameter value failed validation',\n    ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n    'Expecting Buffer/Uint8Array, also accepting string, ArrayBuffer, any TypedArray, or DataView.');\n}\n\nconst Convert = {\n  arrayBufferToString,\n  stringToArrayBuffer,\n  \n  uint8ArrayToString,\n  stringToUint8Array,\n\n  hexStringToUint8Array,\n\n  int8ToStr,\n  strToInt8,\n\n  int16ToStr,\n  strToInt16,\n\n  int24ToStr,\n  strToInt24,\n\n  int32ToStr,\n  strToInt32,\n  strToUInt32,\n\n  int64ToStr,\n  strToUInt64,\n\n  byteArrayToStr,\n  strToByteArray,\n\n  strToHexArray,\n\n  ucs2ToUtf8,\n  utf8ToUcs2,\n  anythingToBuffer,\n};\n\nmodule.exports.Convert = Convert;\n","const Long = require('long');\nconst {\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { Base64, Bits } = require('solclient-convert');\nconst { ParamParse } = require('./param-parse');\nconst { SMFHeader } = require('../message-objects');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\n\nconst {\n  decode: base64Decode,\n} = Base64;\nconst {\n  get: bits,\n} = Bits;\n\nfunction isSMFHeaderAvailable(dataBuf, offset) {\n  const remaining = dataBuf.length - offset;\n  if (remaining < 12) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isSMFHeaderValid(dataBuf, offset) {\n  if (!isSMFHeaderAvailable(dataBuf, offset)) {\n    return false;\n  }\n  const version = dataBuf.readUInt8(offset) & 0x7;\n  if (version !== 3) {\n    LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n    return false;\n  }\n  return true;\n}\n\nfunction isSMFAvailable(dataBuf, offset) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    return false;\n  }\n  const remaining = dataBuf.length - offset;\n  const totalLen = dataBuf.readUInt32BE(offset + 8);\n  return (totalLen <= remaining);\n}\n\n/**\n * Parse the Extended Parameters from an Extended Type Stream.\n * See section \"4.2.4 Extended Parameter Types\" in the SMF spec.\n * @param {SMFHeader} smfHeader The SMF header to add the extended parameters to.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing (ETS payload)\n * @param {Number} streamLen ETS length\n * @returns {Boolean} false if framing is lost, true otherwise.\n * @private\n */\nfunction parseSMFExtendedStream(smfHeader, dataBuf, offset, streamLen) {\n  /* eslint-disable no-unused-vars */\n  let pos = offset;\n  while (pos < offset + streamLen) {\n    if (pos + 2 > offset + streamLen) {\n      LOG_ERROR('Extended parameter stream had padding inside.');\n      break;\n    }\n\n    // The first 2 bytes of Extended Parameters is fixed (MSB order):\n    // 1 bit UH\n    // 3 bits length mode selector (0-, 1-, 2-, 4-, 8-byte, or variable)\n    // 12 bits Type\n    const byte1 = dataBuf.readUInt8(pos);\n    const byte2 = dataBuf.readUInt8(pos + 1);\n    const pUH = bits(byte1, 7, 1);\n    const lengthMode = bits(byte1, 4, 3);\n    const type = (bits(byte1, 0, 4) << 8) + byte2; //FIGURE OUT WHAT bits does\n    pos += 2;\n    const lengthModeMap = { 0: 0, 1: 1, 2: 2, 3: 4, 4: 8 };\n    let valueLen = 0;\n    // EsLint made me do it\n    if (Object.prototype.hasOwnProperty.call(lengthModeMap, lengthMode)) {\n      valueLen = lengthModeMap[lengthMode];\n    } else if (lengthMode === 5) {\n      // 1-byte variable length value\n      valueLen = dataBuf.readUInt8(pos) - 3;\n      pos++;\n    } else if (lengthMode === 6) {\n      // 2-byte variable length value\n      valueLen = dataBuf.readUInt16BE(pos) - 4;\n      pos += 2;\n    } else {\n      LOG_ERROR(`Invalid length mode ${lengthMode} in Extended Parameter type ${type}`);\n      // We must be reading garbage, disconnect:\n      return false;\n    }\n\n    switch (type) {\n      case SMFParameterType.AD_REDELIVERY_COUNT:\n        smfHeader.pm_ad_redeliveryCount = dataBuf.readUInt32BE(pos);\n        break;\n      case SMFParameterType.AD_SPOOLER_UNIQUE_ID:\n        smfHeader.pm_ad_spooler_unique_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                          dataBuf.readUInt32BE(pos),\n                                                          true);\n        break;\n      case SMFParameterType.AD_ACK_MESSAGE_ID:\n        smfHeader.pm_ad_local_spooler_message_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                                 dataBuf.readUInt32BE(pos),\n                                                                 true);\n        break;\n      case SMFParameterType.AD_REPL_MATE_ACK_MSGID:\n        smfHeader.pm_ad_replication_mate_ack_message_id =\n           Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                         dataBuf.readUInt32BE(pos),\n                         true);\n        break;\n      case SMFExtendedParameterType.TS_TRANSPORT_CONTEXT:\n        // from specs, trace span context must be at least 36 bytes\n        // use 36 - 4 (account for error in 2-byte variable length value calculation above) = 32\n        if(valueLen >= 32) {\n          // will convert this string to a UInt8Array later\n          smfHeader.pm_ts_transport_context = dataBuf.toString('latin1', pos, pos + valueLen);\n        } else {\n          LOG_TRACE('Skipped due to unexpected size of extended parameter ' +\n                    `type ${type} value length ${valueLen} offset ${pos}`);\n        }\n        break;\n      default:\n        if (pUH === 0) {\n          LOG_TRACE('Dropping unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        } else {\n          smfHeader.discardMessage = true;\n          LOG_TRACE('Dropping whole message due to unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        }\n        break;\n    }\n    pos += valueLen;\n  }\n  if (pos > offset + streamLen) {\n    LOG_ERROR(`Last extended parameter ran beyond extended stream length by ${pos - (offset + streamLen)}.`);\n  }\n  return true;\n  /* eslint-enable no-unused-vars */\n}\n\n/**\n * Parse SMF in the given data buffer at the supplied offset.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing\n * @param {Boolean} readHeaderOnly If true, stop parsing at end of header\n * @returns {SMFHeader|null} The SMF header, if possible\n * @private\n */\nfunction parseSMFAt(dataBuf, offset, readHeaderOnly = false) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    LOG_DEBUG('Valid SMF header not available');\n    return null;\n  }\n  let pos = offset;\n\n  // Reading fixed header block (12 bytes)\n  const word1 = dataBuf.readUInt32BE(pos);\n  const headerLen = dataBuf.readUInt32BE(pos + 4);\n  const word3 = dataBuf.readUInt32BE(pos + 8);\n\n  const smfHeader = new SMFHeader();\n  smfHeader.smf_di = bits(word1, 31, 1);\n  smfHeader.smf_elidingEligible = bits(word1, 30, 1);\n  smfHeader.smf_dto = bits(word1, 29, 1);\n  smfHeader.smf_adf = bits(word1, 28, 1);\n  smfHeader.smf_deadMessageQueueEligible = bits(word1, 27, 1);\n  smfHeader.smf_version = bits(word1, 24, 3);\n  smfHeader.smf_uh = bits(word1, 22, 2);\n  smfHeader.smf_protocol = bits(word1, 16, 6);\n  smfHeader.smf_priority = bits(word1, 12, 4);\n  smfHeader.smf_ttl = bits(word1, 0, 8);\n\n  const payloadLen = word3 - headerLen;\n  if (payloadLen < 0) {\n    LOG_ERROR('SMF parse error: lost framing');\n    return null; // SMF parse error: lost framing\n  }\n  smfHeader.setMessageSizes(headerLen, payloadLen);\n  if (readHeaderOnly) {\n    return smfHeader;\n  }\n  pos += 12;\n\n  // Reading variable-length params\n  const end = offset + headerLen;\n  while (pos < end) {\n    const paramByte1 = dataBuf.readUInt8(pos);\n    ++pos;\n\n    const prmUh = bits(paramByte1, 6, 2);\n    const paramIsLightweight = (bits(paramByte1, 5, 1) !== 0);\n    if (paramIsLightweight) {\n      // LIGHTWEIGHT param\n      const lwpType = bits(paramByte1, 2, 3);\n      const lwpLen = bits(paramByte1, 0, 2) + 1;\n      const lwpValueLen = lwpLen - 1;\n      if (lwpLen <= 0) {\n        LOG_ERROR('Invalid lightweight parameter length');\n        return null; // Invalid parameter\n      }\n\n      switch (lwpType) {\n        case SMFParameterType.LIGHT_CORRELATION:\n          smfHeader.pm_corrtag = dataBuf.readUIntBE(pos, 3);\n          break;\n        case SMFParameterType.LIGHT_TOPIC_NAME_OFFSET:\n          {\n            const parsedQueueOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_queue_offset = parsedQueueOffsets[0];\n            smfHeader.pm_queue_len = parsedQueueOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_QUEUE_NAME_OFFSET:\n          {\n            const parsedTopicOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_topic_offset = parsedTopicOffsets[0];\n            smfHeader.pm_topic_len = parsedTopicOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_ACK_IMMEDIATELY:\n          smfHeader.pm_ad_ackimm = !!dataBuf.readUInt8(pos);\n          break;\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      }\n      pos += lwpValueLen;\n    } else {\n      // REGULAR encoded param (including breakout for Extended Type Stream)\n      const pStart = pos;\n      const pType = bits(paramByte1, 0, 5);\n      if (pType === 0) {\n        break; // PADDING (break while: header finished)\n      }\n\n      let pLen = dataBuf.readUInt8(pos);\n      pos++;\n      let pValueLen;\n      if (pLen === 0) {\n        // extended-length parameter (32-bit)\n        // Works for Extended Parameters too.\n        pLen = dataBuf.readUInt32BE(pos);\n        pos += 4;\n        pValueLen = pLen - 6;\n      } else {\n        pValueLen = pLen - 2;\n      }\n\n      if (pLen <= 0) {\n        LOG_ERROR(`Invalid regular parameter length ${pLen}/${pValueLen\n                  } with suspect type ${SMFParameterType.describe(pType)} at parameter at position ${pStart}`);\n        return null; // Invalid parameter\n      }\n\n      switch (pType) {\n        case SMFParameterType.PUBLISHER_ID:\n          // this is some kind of AD publisher ID in a direct message, but it's ony 4 bytes.\n          // It's of no use to us and is not exposed publicly.\n          // Skip.\n          break;\n        case SMFParameterType.PUBLISHER_MSGID:\n          smfHeader.pm_ad_publishermsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                         dataBuf.readUInt32BE(pos),\n                                                         true);\n          break;\n        case SMFParameterType.MESSAGEPRIORITY:\n          smfHeader.pm_msg_priority = dataBuf.readUInt8(pos);\n          break;\n        case SMFParameterType.USERDATA:\n          smfHeader.pm_userdata = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.USERNAME:\n          // only useful on API -> router\n          smfHeader.pm_username = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.PASSWORD:\n          // only useful on API -> router\n          smfHeader.pm_password = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.RESPONSE:\n          {\n            const parsedResponse = ParamParse.parseResponseParam(dataBuf, pos, pValueLen); //CHECK\n            smfHeader.pm_respcode = parsedResponse[0];\n            smfHeader.pm_respstr = parsedResponse[1];\n            break;\n          }\n        case SMFParameterType.SUB_ID_LIST:\n        case SMFParameterType.GENERIC_ATTACHMENT:\n        case SMFParameterType.BINARY_ATTACHMENT:\n          LOG_INFO('Skipping deprecated parameter type');\n          // deprecated\n          break;\n        case SMFParameterType.DELIVERY_MODE:\n          // DeliveryMode is DIRECT unless the AD flag is set. The\n          // deliveryMode parameter (and all other guaranteed messaging\n          // parameters may be present in demoted messages reflecting how\n          // the message was published.\n          // IF ever solClientJS must support the horror that is cut-through\n          // persistence, then we must defer setting deliveryMode back to\n          // DIRECT until the session decides whether it is a true direct\n          // message or a cut-through direct message.  But until that is\n          // forced upon us, the cleanest place to set deliveryMode is always\n          // here in the parser.\n          if (smfHeader.smf_adf) {\n            smfHeader.pm_deliverymode = ParamParse.parseDeliveryMode(dataBuf, pos);\n          }\n          break;\n        case SMFParameterType.ASSURED_MESSAGE_ID:\n          smfHeader.pm_ad_msgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                dataBuf.readUInt32BE(pos),\n                                                true);\n          break;\n        case SMFParameterType.ASSURED_PREVMESSAGE_ID:\n          smfHeader.pm_ad_prevmsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                    dataBuf.readUInt32BE(pos),\n                                                    true);\n          break;\n        case SMFParameterType.ASSURED_REDELIVERED_FLAG:\n          smfHeader.pm_ad_redelflag = true;\n          break;\n        case SMFParameterType.AD_TIMETOLIVE:\n          smfHeader.pm_ad_ttl = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                              dataBuf.readUInt32BE(pos),\n                                              true);\n          break;\n        case SMFParameterType.AD_TOPICSEQUENCE_NUMBER:\n          smfHeader.pm_ad_topicSequenceNumber = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                              dataBuf.readUInt32BE(pos),\n                                                              true);\n          break;\n        case SMFParameterType.MESSAGE_CONTENT_SUMMARY:\n          {\n            const contentSummary = ParamParse.parseContentSummary(dataBuf, pos, pValueLen);\n            if (!contentSummary) {\n              LOG_ERROR(`Invalid message content summary at ${pos}, len ${pValueLen}`);\n              return false; // invalid message content summary parameter\n            }\n            smfHeader.pm_content_summary = contentSummary;\n            break;\n          }\n        case SMFParameterType.ASSURED_FLOWID:\n          smfHeader.pm_ad_flowid = dataBuf.readUInt32BE(pos);\n          break;\n        case SMFParameterType.TR_TOPICNAME:\n          // copy bytes. Don't strip null terminator\n          smfHeader.pm_tr_topicname_bytes = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.AD_FLOWREDELIVERED_FLAG:\n          smfHeader.pm_ad_flowredelflag = true;\n          break;\n        case SMFParameterType.EXTENDED_TYPE_STREAM: {\n          const extSuccess = parseSMFExtendedStream(smfHeader, dataBuf, pos, pValueLen);\n          if (!extSuccess) { return null; }\n          break;\n        }\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      } // end param type switch block\n\n      pos += pValueLen;\n    } // end (regular param)\n  } // end while\n\n  return smfHeader;\n}\n\nconst ParseSMF = {\n  isSMFHeaderAvailable,\n  isSMFHeaderValid,\n  isSMFAvailable,\n  parseSMFAt,\n};\n\nmodule.exports.ParseSMF = ParseSMF;\n","class CorrelatedRequest {\n  /**\n   * Creates an instance of CorrelatedRequest.\n   * @param {String} correlationTag The associated tag\n   * @param {?} timer The opaque timer handle\n   * @param {String} correlationKey The associated key\n   * @param {function} respRecvdCallback The associated callback\n   * @memberof CorrelatedRequest\n   * @private\n   */\n  constructor(correlationTag, timer, correlationKey, respRecvdCallback) {\n    this.correlationTag = correlationTag;\n    this.timer = timer;\n    this.correlationKey = correlationKey;\n    this.respRecvdCallback = respRecvdCallback;\n  }\n}\n\nmodule.exports.CorrelatedRequest = CorrelatedRequest;\n","module.exports = require(\"worker_threads\");","/**\n * @private\n * @constructor\n */\nclass TransportClientStats {\n  constructor() {\n    this.bytesWritten = 0;\n    this.msgWritten = 0;\n  }\n}\n\nmodule.exports.TransportClientStats = TransportClientStats;\n","const { SMFClient } = require('./lib/smf-client');\nconst { TransportCapabilities } = require('./lib/transport-capabilities');\nconst { TransportError } = require('./lib/transport-error');\nconst { TransportFactory } = require('./lib/transport-factory');\nconst { TransportProtocol } = require('./lib/transport-protocols');\nconst { TransportReturnCode } = require('./lib/transport-return-codes');\nconst { TransportSessionEventCode } = require('./lib/transport-session-event-codes');\nconst { TransportSessionStates } = require('./lib/transport-session-states');\n\n\nmodule.exports.SMFClient = SMFClient;\nmodule.exports.TransportCapabilities = TransportCapabilities;\nmodule.exports.TransportError = TransportError;\nmodule.exports.TransportFactory = TransportFactory;\nmodule.exports.TransportProtocol = TransportProtocol;\nmodule.exports.TransportReturnCode = TransportReturnCode;\nmodule.exports.TransportSessionEventCode = TransportSessionEventCode;\nmodule.exports.TransportSessionStates = TransportSessionStates;\n","const { ErrorSubcode,\n        OperationError,\n        RequestError,\n        RequestEventCode } = require('solclient-error');\nconst { SessionEventCode } = require('./session-event-codes');\n\nfunction buildType(Superclass) {\n  /**\n   * @classdesc\n   * Represents a session event; events are passed to the application-provided\n   * event handling callback provided when creating the session.\n   * @memberof solace\n   * @hideconstructor\n   */\n  class SessionEvent extends Superclass {\n    /**\n     * @constructor\n     * @param {Array} superclassArgs Args to pass to super\n     * @param {solace.SessionEventCode} sessionEventCode The event code\n     * @param {String} infoStr Information string\n     * @param {Number} [responseCode] Any associated router response code\n     * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n     * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n     * @param {String} [reason] Any additional information\n     * @private\n     */\n    constructor(superclassArgs,\n                sessionEventCode,\n                infoStr,\n                responseCode = undefined,\n                errorSubcode = 0,\n                correlationKey = undefined,\n                reason = undefined) {\n      super(...superclassArgs);\n      this._sessionEventCode = sessionEventCode;\n      this._infoStr = infoStr;\n      this._responseCode = responseCode;\n      this._errorSubcode = errorSubcode;\n      this._correlationKey = correlationKey; // optional\n      this._reason = reason; // optional\n    }\n\n    /**\n     * @type {solace.SessionEventCode}\n     * @description Further qualifies the session event.\n     */\n    get sessionEventCode() {\n      return this._sessionEventCode;\n    }\n\n    /**\n     * @type {String}\n     * @description if applicable, an information string returned by the Solace Message Router.\n     */\n    get infoStr() {\n      return this._infoStr;\n    }\n\n    /**\n     * @type {?Number}\n     * @description if applicable, a response code returned by the Solace Message Router.\n     */\n    get responseCode() {\n      return this._responseCode;\n    }\n\n    /**\n     * @type {?solace.ErrorSubcode}\n     * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n     */\n    get errorSubcode() {\n      // _eslint-disable-next-line quote-property\n      return this.subcode || this._errorSubcode;\n    }\n\n    /**\n     * @deprecated Use {@link solace.SessionEvent#errorSubcode} instead.\n     * @readonly\n     */\n    // coverity[identifier_typo]\n    get errorSubCode() {\n      return this.errorSubcode;\n    }\n\n    /**\n     * @type {?Object}\n     * @description A user-specified object\n     * made available in the response or confirmation event by including it as a\n     * parameter in the orignal API call.  If the user did not specify a\n     * correlationKey, it will be <code>null</code>.\n     * @default null\n     */\n    get correlationKey() {\n      return this._correlationKey;\n    }\n\n    /**\n     * @type {?String}\n     * @description Additional information if it is applicable.\n     * In case of subscribe or publish errors, it constains the topic.\n     */\n    get reason() {\n      return this._reason;\n    }\n    /**\n     * @param {Object} value The reason info object\n     * @internal\n     */\n    set reason(value) {\n      this._reason = value;\n    }\n\n    [util_inspect_custom]() {\n      // Is this supposed to invoke the custom inspect function of the superclass if it exists?\n      return Object.assign(super[util_inspect_custom] || {}, {\n        'sessionEventCode': SessionEventCode.describe(this.sessionEventCode),\n        'infoStr':          this.infoStr,\n        'responseCode':     this.responseCode,\n        'errorSubcode':     ErrorSubcode.describe(this.errorSubcode),\n        'correlationKey':   this.correlationKey ? this.correlationKey.toString() : null,\n        'reason':           this.reason ? this.reason : null,\n      });\n    }\n\n    toString() {\n      return util_inspect(this);\n    }\n  }\n\n  return SessionEvent;\n}\n\nconst SUPERCLASS_FOR_SESSION_EVENT = {\n  [SessionEventCode.CONNECT_FAILED_ERROR]:              OperationError,\n  [SessionEventCode.DOWN_ERROR]:                        OperationError,\n  [SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN]: OperationError,\n  [SessionEventCode.PROPERTY_UPDATE_ERROR]:             RequestError,\n  [SessionEventCode.REJECTED_MESSAGE_ERROR]:            RequestError,\n  [SessionEventCode.SUBSCRIPTION_ERROR]:                RequestError,\n  [SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR]:        OperationError,\n  [RequestEventCode.REQUEST_ABORTED]:                   RequestError,\n  [RequestEventCode.REQUEST_TIMEOUT]:                   RequestError,\n};\n\nconst SUPERCLASS_ARGS = new Map()\n  .set(Object, () => [])\n  .set(OperationError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, subcode, reason])\n  .set(RequestError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, sec, ck, reason]);\n\nconst TYPE_CACHE = new Map();\n\nfunction build(sessionEventCode,\n               infoStr,\n               responseCode = undefined,\n               errorSubcode = 0,\n               correlationKey = undefined,\n               reason = undefined) {\n  const Superclass = SUPERCLASS_FOR_SESSION_EVENT[sessionEventCode] || Object;\n  const SessionEvent = (() => {\n    let result = TYPE_CACHE.get(Superclass);\n    if (result) return result;\n    result = buildType(Superclass);\n    TYPE_CACHE.set(Superclass, result);\n    return result;\n  })();\n  const superclassArgsBuilder = (SUPERCLASS_ARGS.get(Superclass) || (() => []));\n  const superclassArgs = superclassArgsBuilder(sessionEventCode,\n                                               infoStr,\n                                               responseCode,\n                                               errorSubcode,\n                                               correlationKey,\n                                               reason);\n  return new SessionEvent(superclassArgs,\n                          sessionEventCode,\n                          infoStr,\n                          responseCode,\n                          errorSubcode,\n                          correlationKey,\n                          reason);\n}\n\n// Expose a type\nconst SessionEvent = buildType(Object);\nSessionEvent.build = build;\n\nmodule.exports.SessionEvent = SessionEvent;\n","'use strict';\n\nconst { tokenChars } = require('./validation');\n\n/**\n * Parses the `Sec-WebSocket-Protocol` header into a set of subprotocol names.\n *\n * @param {String} header The field value of the header\n * @return {Set} The subprotocol names\n * @public\n */\nfunction parse(header) {\n  const protocols = new Set();\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (i; i < header.length; i++) {\n    const code = header.charCodeAt(i);\n\n    if (end === -1 && tokenChars[code] === 1) {\n      if (start === -1) start = i;\n    } else if (\n      i !== 0 &&\n      (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\n    ) {\n      if (end === -1 && start !== -1) end = i;\n    } else if (code === 0x2c /* ',' */) {\n      if (start === -1) {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n\n      if (end === -1) end = i;\n\n      const protocol = header.slice(start, end);\n\n      if (protocols.has(protocol)) {\n        throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n      }\n\n      protocols.add(protocol);\n      start = end = -1;\n    } else {\n      throw new SyntaxError(`Unexpected character at index ${i}`);\n    }\n  }\n\n  if (start === -1 || end !== -1) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  const protocol = header.slice(start, i);\n\n  if (protocols.has(protocol)) {\n    throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n  }\n\n  protocols.add(protocol);\n  return protocols;\n}\n\nmodule.exports = { parse };\n","const { AdProtocolMessage } = require('./adprotocol-message');\nconst { BinaryMetaBlock } = require('./binary-meta-block');\nconst { ClientCtrlMessage } = require('./client-ctrl-message');\nconst { KeepAliveMessage } = require('./keep-alive-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFUH } = require('./smf-uh');\nconst { SMPMessage } = require('./smp-message');\nconst { TransportSMFMessage } = require('./transport-smf-message');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFHeader = SMFHeader;\nmodule.exports.SMFParameter = SMFParameter;\nmodule.exports.SMFUH = SMFUH;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Type maching SMF encoding value\n * @enum {number}\n * @memberof solace\n * @private\n */\nconst ContentSummaryType = {\n  XML_META:          0,\n  XML_PAYLOAD:       1,\n  BINARY_ATTACHMENT: 2,\n  CID_LIST:          3,\n  BINARY_METADATA:   4,\n};\n\nmodule.exports.ContentSummaryType = Enum.new(ContentSummaryType);\n","const { APIProperties } = require('solclient-util');\nconst { DestinationType } = require('solclient-destination');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { QueueType } = require('./queue-types');\n\nconst DEFAULTS = {\n  durable: true,\n  type:    undefined,\n};\n\nconst TYPE_DESCRIPTION = {\n  [QueueType.QUEUE]:          'queue',\n  [QueueType.TOPIC_ENDPOINT]: 'topic endpoint',\n};\n\nconst DESINATION_TYPE_TO_DESCRIPTOR_TYPE = {\n  [DestinationType.TOPIC]:           null,\n  [DestinationType.QUEUE]:           QueueType.QUEUE,\n  [DestinationType.TEMPORARY_QUEUE]: QueueType.QUEUE,\n};\n\nfunction maybeAdaptFromDestination(spec) {\n  if (spec && spec.name && spec.type && DestinationType.values.includes(spec.type)) {\n    const targetType = DESINATION_TYPE_TO_DESCRIPTOR_TYPE[spec.type];\n    if (!targetType) {\n      throw new OperationError(`Cannot create a descriptor from a ${\n                               DestinationType.describe(spec.type)} destination`,\n                               ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    return {\n      name:    spec.name,\n      type:    QueueType.QUEUE,\n      durable: spec.type !== DestinationType.TEMPORARY_QUEUE,\n    };\n  }\n  return spec;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * <p>\n * This is a base class for {@link solace.QueueDescriptor}. API users should access the\n * methods described here through a {@link solace.QueueDescriptor}.\n * @memberof solace\n * @hideconstructor\n */\nclass AbstractQueueDescriptor extends APIProperties {\n  /*\n   * @param {Object|solace.AbstractQueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] Whether this spec refers to a durable queue.\n   * @constructor\n   */\n  constructor(queueSpec) { // eslint-disable-line no-useless-constructor\n    super(DEFAULTS, maybeAdaptFromDestination(queueSpec));\n  }\n\n  /**\n   * Gets the queue type to which this descriptor refers.\n   * @returns {solace.QueueType} The queue type that this object describes\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.QueueType}\n   * @description The Queue Type.\n   */\n  get type() {\n    return this.getType();\n  }\n  set type(value) {\n    this._type = value;\n  }\n\n  /**\n   * Gets whether this descriptor refers to a durable queue.\n   *\n   * @returns {Boolean} `true` if this describes a durable queue\n   */\n  isDurable() { // eslint-disable-line class-methods-use-this\n    return this._durable;\n  }\n  /**\n   * @type {Boolean}\n   * @description True if this descriptor refers to a durable queue.\n   */\n  get durable() {\n    return this.isDurable();\n  }\n  set durable(value) {\n    this._durable = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${!this.isDurable() ? 'non' : ''}-durable ` +\n           `${TYPE_DESCRIPTION[this.getType()]}`;\n  }\n\n}\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribute of {@link solace.RequestError}. This enumeration represents the\n * different errors emitted by\n * {@link solace.Session.requestFailedCallback}\n * when a {@link solace.Session#sendRequest} fails.\n *\n * The client application receives a request error with event code\n * {@link solace.RequestEventCode.REQUEST_ABORTED}\n * when the underlying connection is successfully closed, or closed as a result\n * of a communication error.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst RequestEventCode = {\n  /**\n   * A request was aborted because the session is disconnected.\n   */\n  REQUEST_ABORTED: 8,\n  /**\n   * The event represents a timed-out request API call.\n   */\n  REQUEST_TIMEOUT: 9,\n};\n\nmodule.exports.RequestEventCode = Enum.new(RequestEventCode);\n","const DestinationUtilLib = require('./destination-util');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Topic, which is a type of {@link solace.Destination}.\n *\n * @extends solace.Destination\n * @memberof solace\n * @deprecated since 10.0 Applications should not directly refer to this type.\n *  {@link solace.Destination} provides the full interface available to topic, and it can be\n *  determined whether the destination represents a topic if {@link solace.Destination#getType}\n *  returns {@link solace.DestinationType.TOPIC}.\n */\nclass Topic extends Destination {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    if (typeof spec === 'object') {\n      super({\n        type:             DestinationType.TOPIC,\n        name:             spec.name,\n        bytes:            spec.bytes,\n        offset:           spec.offset,\n        isValidated:      spec.isValidated,\n        isWildcarded:     spec.isWildcarded,\n        subscriptionInfo: spec.subscriptionInfo,\n      });\n    } else {\n      // Deprecated path -- super will do topic encode\n      super(spec, DestinationType.TOPIC);\n    }\n  }\n\n  [util_inspect_custom]() {\n    return `[Topic ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} topicName The name for the topic\n   * @returns {Topic} the Topic\n   * @private\n   */\n  static createFromName(topicName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.TOPIC, topicName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Topic({\n      name:             topicName,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n}\n\nmodule.exports.Topic = Topic;\n","/* eslint-disable global-require */\n// Do late binding for these debug utilities to break cyclic dependencies.\n\nconst PRINTABLE_LUT = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nconst SPACER = '   ';\nconst UNPRINTABLE = '.';\n\n\nfunction formatDumpBytes(data, showDecode, leftPadding) {\n  const { StringBuffer, StringUtils } = require('solclient-util');\n  const { isEmpty, padLeft, padRight } = StringUtils;\n\n  if (isEmpty(data)) {\n    return null;\n  }\n\n  const output = new StringBuffer();\n  const ascii = new StringBuffer();\n  const line = new StringBuffer();\n  let lineBytes = 0;\n  const asciiOffset = 54;\n\n  for (let i = 0, dataLen = data.length; i < dataLen; ++i) {\n    const ccode = data.charCodeAt(i);\n    //const ccode = dataBuf.readInt8(i);\n    line.append(padLeft(ccode.toString(16), 2, '0'), ' ');\n    ascii.append(PRINTABLE_LUT[ccode] || UNPRINTABLE);\n    lineBytes++;\n\n    if (lineBytes === 8) {\n      line.append(SPACER);\n    }\n\n    if (lineBytes === 16 || i === data.length - 1) {\n      if (leftPadding > 0) {\n        output.append(padRight('', leftPadding, ' '));\n      }\n\n      output.append(padRight(line.toString(), asciiOffset, ' '));\n\n      if (showDecode) {\n        output.append(ascii);\n      }\n\n      output.append('\\n');\n      line.clear();\n      ascii.clear();\n      lineBytes = 0;\n    }\n  }\n\n  return output.toString();\n}\n\nfunction parseSMFStream(data) {\n  const { Codec: { Decode: { decodeCompoundMessage } } } = require('solclient-smf');\n  const { LOG_WARN, LOG_ERROR } = require('solclient-log');\n\n  if (data === null) {\n    LOG_ERROR('data null in debugParseSmfStream');\n    return;\n  }\n  let pos = 0;\n  LOG_WARN(`parseSMFStream(): Starting parse, length ${data.length}`);\n  while (pos < data.length) {\n    const incomingMsg = decodeCompoundMessage(data, pos);\n    const smf = incomingMsg ? incomingMsg.smfHeader : null;\n    if (!(incomingMsg && smf)) {\n      // couldn't decode! Lost SMF framing.\n      LOG_WARN(\"parseSMFStream(): couldn't decode message.\");\n      LOG_WARN(`Position: ${pos} length: ${data.length}`);\n      return;\n    }\n\n    LOG_WARN(`>> Pos(${pos}) Protocol ${smf.smf_protocol}, Length: ${smf.messageLength}`);\n    pos += smf.messageLength;\n  }\n}\n\nconst Debug = {\n  formatDumpBytes,\n  parseSMFStream,\n};\n\nmodule.exports.Debug = Debug;\n","const { StatType } = require('./stat-types');\n\nmodule.exports = {\n  StatsByMode: {\n    STAT_TX_BYMODE_MSGS: [\n      StatType.TX_DIRECT_MSGS,\n      StatType.TX_PERSISTENT_MSGS,\n      StatType.TX_NONPERSISTENT_MSGS,\n    ],\n    STAT_TX_BYMODE_BYTES: [\n      StatType.TX_DIRECT_BYTES,\n      StatType.TX_PERSISTENT_BYTES,\n      StatType.TX_NONPERSISTENT_BYTES,\n    ],\n    STAT_TX_BYMODE_REDELIVERED: [\n      StatType.TX_DIRECT_MSGS,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_REDELIVERED,\n      StatType.TX_NONPERSISTENT_REDELIVERED,\n    ],\n    STAT_TX_BYMODE_BYTES_REDELIVERED: [\n      StatType.TX_DIRECT_BYTES,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_BYTES_REDELIVERED,\n      StatType.TX_NONPERSISTENT_BYTES_REDELIVERED,\n    ],\n    STAT_RX_BYMODE_MSGS: [\n      StatType.RX_DIRECT_MSGS,\n      StatType.RX_PERSISTENT_MSGS,\n      StatType.RX_NONPERSISTENT_MSGS,\n    ],\n    STAT_RX_BYMODE_BYTES: [\n      StatType.RX_DIRECT_BYTES,\n      StatType.RX_PERSISTENT_BYTES,\n      StatType.RX_NONPERSISTENT_BYTES,\n    ],\n  },\n};\n","const { Enum } = require('solclient-eskit');\n\nconst SMFUH = {\n  IGNORE: 0x0,\n  REJECT: 0x2,\n};\n\nmodule.exports.SMFUH = Enum.new(SMFUH);\n","/**\n * A tuple associating subscriptions, correlation IDs and cache sessions.\n * @param {String} correlationID The correlation ID for this tuple\n * @param {Topic} topic The topic for this tuple\n * @param {CacheSession} cacheSession The cache session for this tuple\n * @private\n */\nclass CacheSessionSubscribeInfo {\n  constructor(correlationID, topic, cacheSession) {\n    Object.assign(this, {\n      correlationID,\n      topic,\n      cacheSession,\n    });\n  }\n}\n\nmodule.exports.CacheSessionSubscribeInfo = CacheSessionSubscribeInfo;\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of queue browser event names. A {@link solace.QueueBrowser} will emit\n * these events as part of its lifecycle.  Applications, having created a QueueBrowser can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     qb = solace.Session.createQueueBrowser(...);\n *     qb.on(solace.QueueBrowserEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // details is an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst QueueBrowserEventName = {\n  /**\n   * The queue browser is established.\n   * @event solace.QueueBrowserEventName#UP\n   */\n  UP:                   'QueueBrowserEventName_up',\n  /**\n   * The queue browser is successfully disconnected.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN\n   */\n  DOWN:                 'QueueBrowserEventName_down',\n /**\n   * The queue browser was established and then disconnected by the router,\n   * likely due to operator intervention. The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'QueueBrowserEventName_downError',\n  /**\n   * The queue browser attempted to connect but was unsuccessful.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'QueueBrowserEventName_connectFailedError',\n  /**\n   * The queue browser will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The queue browser is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.QueueBrowserEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'QueueBrowserEventName_GMDisabled',\n  /**\n   * The queue browser is being disposed. No further events will be emitted.\n   *\n   * @event solace.QueueBrowserEventName#DISPOSED\n   */\n  DISPOSED:             'QueueBrowserEventName_disposed',\n  /**\n   * A message was received on the queue browser.\n   *\n   * If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.QueueBrowser#disconnect} followed by\n   * {@link solace.QueueBrowser#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a QueueBrowser, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.QueueBrowserEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'QueueBrowserEventName_message',\n};\n\nmodule.exports.QueueBrowserEventName = Enum.new(QueueBrowserEventName);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SDTDataTypes = {\n  Null:            0x00,\n  Boolean:         0x01,\n  Integer:         0x02,\n  UnsignedInteger: 0x03,\n  Float:           0x04,\n  Char:            0x05,\n  ByteArray:       0x06,\n  String:          0x07,\n  Destination:     0x08,\n  SMFMessage:      0x09,\n  Map:             0x0A,\n  Stream:          0x0B,\n};\n\nmodule.exports.SDTDataTypes = Enum.new(SDTDataTypes);\n","module.exports = require(\"http\");","/**\n * @constructor BaseMessage\n * @private\n */\nclass BaseMessage {\n  constructor(header = null, params = []) {\n    this._smfHeader = header;\n    this._parameters = params;\n  }\n\n  addParameter(param) {\n    this._parameters[param.getType()] = param;\n  }\n\n  getParameter(paramType) {\n    return this._parameters[paramType];\n  }\n\n  getParameterArray() {\n    return this._parameters;\n  }\n\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  getResponse() {\n    const smf = this.smfHeader;\n    if (!(smf && smf.pm_respcode && smf.pm_respstr)) {\n      return null;\n    }\n    return {\n      responseCode:   smf.pm_respcode,\n      responseString: smf.pm_respstr,\n    };\n  }\n}\n\nmodule.exports.BaseMessage = BaseMessage;\n","const {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n} = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { FlowOperation } = require('./flow-operation');\nconst { LogFormatter } = require('solclient-log');\nconst { PrivateFlowEventName } = require('./private-flow-event-names');\nconst { Stats } = require('solclient-stats');\n\n// Unless flow is disposed, these operations are always allowed\nconst ALWAYS_OPS = [\n  FlowOperation.DISPOSE,\n  FlowOperation.GET_STATS,\n  FlowOperation.GET_PROPERTIES,\n  FlowOperation.RESET_STATS,\n];\n\n\n/**\n * @classdesc Flow\n * * <b>This class is not exposed for construction by API users.</b>\n * A Flow is an abstract base class. A Flow represents a guaranteed message connection to the\n * Solace Message Router. There may be many Guaranteed Message\n * Consumers on a {@link solace.Session}, each\n * instantiated as a {@link solace.MessageConsumer}.\n * @memberof solace\n * @extends {solace.EventEmitter}\n * @private\n */\nclass Flow extends EventEmitter {\n\n  /**\n   * Creates a Flow instance.\n   * @constructor Flow\n   * @param {APIProperties} flowProperties The properties object for this flow.\n   * @param {Object} sessionInterfaceFactory Function that creates session interface methods\n   * @param {Object} [emitterOptions] The options to pass to the EventEmitter constructor.\n   * @private\n   */\n  constructor(flowProperties, sessionInterfaceFactory, emitterOptions) {\n    const emitterOptionsFull = Object.assign({}, emitterOptions);\n    emitterOptionsFull.emits = (emitterOptionsFull.emits || []).concat(\n      PrivateFlowEventName.values\n    );\n    super(emitterOptionsFull);\n    const sessionInterface = sessionInterfaceFactory(this);\n    const self = this;\n    this.logger = new LogFormatter((...args) =>\n      [`[session=${sessionInterface.sessionIdHex}]`, `[flow=${self.flowIdDec}]`, ...args]);\n    this.log = this.logger.wrap(this.log, this);\n    // dispose() was called on this flow.\n    // It is not always executed immediately, leaving time for the auto-ack.\n    this._disposing = false;\n    // The flow truly was destroyed, no more delays.\n    this._disposed = false;\n    this._userDisconnected = true;\n    this._properties = flowProperties;\n    this._sessionInterface = sessionInterface;\n    this._stats = new Stats(sessionInterface);\n    this._privateEventEmitter = new EventEmitter(emitterOptionsFull);\n  }\n\n  // Private event emitter functions, hidden from the public interface.\n  _emit(type, ...args) {\n    this._privateEventEmitter.emit(type, ...args);\n    this.emit(type, ...args);\n  }\n  _on(type, listener) {\n    this._privateEventEmitter.on(type, listener);\n  }\n  _once(type, listener) {\n    this._privateEventEmitter.once(type, listener);\n  }\n  _removeListener(type, listener) {\n    this._privateEventEmitter.removeListener(type, listener);\n  }\n\n  /**\n   * Clears all statistics for this Guaranteed Message Connection. All previous Guaranteed\n   * Message Connection statistics are lost\n   * when this is called.\n   * @throws {solace.OperationError}\n   *  * if the Message Consumer is disposed. subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  clearStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Clearing stats');\n    this._operationCheck(FlowOperation.RESET_STATS);\n    this._stats.resetStats();\n  }\n\n  /**\n   * Establish a Guaranteed Messaging connection.\n   * The Messge Consumer may immediately begin emitting events. The application is expected to\n   * add listeners for events on this Message Consumer before calling this method.\n   */\n  connect() {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Connecting');\n    this.userDisconnected = false;\n    this._operationCheck(FlowOperation.CONNECT);\n  }\n\n  /**\n   * Disposes the Guaranteed Message connection, removing all listeners and releasing references.\n   */\n  dispose() {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    // The session may dispose the publisher or consumer, so be tolerant of\n    // multiple attempts to do so.\n    if (this._disposed || this._disposing) {\n      LOG_TRACE('Ignoring #dispose on disposed Guaranteed Message connection');\n      return;\n    }\n    LOG_TRACE('Disposing');\n\n    this._operationCheck(FlowOperation.DISPOSE);\n\n    this._disposing = true;\n\n    const terminate = () => {\n      this._disposed = true;\n      this._properties = null;\n      this._userDisconnected = true;\n      this._emit(this.getDisposedEvent());\n      this.disableEmitter();\n      this._privateEventEmitter.disableEmitter();\n      LOG_DEBUG('Disposed');\n    };\n    if (this._fsm._midDispatch) {\n      // weird case, dispose was called by the user from a message callback:\n      // Guard this in a timeout\n      const terminateWithRunningFSM = () => {\n        this._fsm.terminateFsm();\n        terminate();\n      };\n      //setImmediate(() => terminateWithRunningFSM());\n      setTimeout(() => terminateWithRunningFSM(), 0);\n    } else {\n      // normal case:\n      terminate();\n    }\n  }\n\n  /**\n   * Disconnects the Message Consumer in such a way that it can be reconnected.\n   */\n  disconnect() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Disconnecting');\n    this.userDisconnected = true;\n  }\n\n  /**\n   *\n   * Begins a disconnect that is not user-initiated.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  _disconnectSession() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n  }\n\n  /**\n   * Gets the event to be returned when the Consumer or Publisher is disposed.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Abstract method');\n  }\n\n  /**\n   * Creates and returns copy of the properties for this object.\n   * @returns {?} The properties object\n   * @internal\n   */\n  getProperties() {\n    this._operationCheck(FlowOperation.GET_PROPERTIES);\n    return this._properties.clone();\n  }\n\n  /**\n   * Returns a statistic for this Guaranteed Message connection.\n   *\n   * @param {solace.StatType} statType The statistic to return.\n   * @returns {Number} The value for the statistic.\n   */\n  getStat(statType) {\n    this._operationCheck(FlowOperation.GET_STATS);\n    return this._stats.getStat(statType);\n  }\n\n  /**\n   * @param {AdMessage} message The message to be handled by this Consumer or Publisher\n   * @private\n   */\n  handleUncorrelatedControlMessage(message) { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Guaranteed Message Connection does not implement a control message handler', message);\n  }\n\n  /**\n   * @param {StatType} statType The stat to increment\n   * @param {Number} [value] The value to add to the statistic.\n   * @private\n   */\n  incStat(statType, value) {\n    this._stats.incStat(statType, value);\n  }\n\n  /**\n   * @param {any} event The event to be handled by this objects's FSM\n   * @private\n   */\n  processFSMEvent(event) {\n    this._fsm.processEvent(event);\n  }\n\n  /**\n   * @returns {String} An inspection of this object's properties\n   * @private\n   */\n  [util_inspect_custom]() {\n    return {\n      'flowId': this.flowIdDec,\n    };\n  }\n\n  /**\n   * @returns {String} A description of this Guaranteed Message Connection\n   */\n  toString() {\n    return this[util_inspect_custom]();\n  }\n\n  /**\n   * @returns {Boolean} Whether this Publisher or Consumer can be connected.\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    return !this.disposed;\n  }\n\n  /**\n   * Returns `true` if this Guaranteed Message Consumer was disposed.\n   * @readonly\n   * @type {Boolean}\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  get flowIdDec() {\n    return this.flowId || '(N/A)';\n  }\n\n  /**\n   * @returns {Number} The ID for this flow\n   * @readonly\n   * @private\n   */\n  get flowId() { // eslint-disable-line class-methods-use-this\n    return new NotImplementedError('Flow does not implement ID accessor');\n  }\n\n  /**\n   * @returns {solace.Session} The owning session for this MessageConsumer.\n   * @readonly\n   */\n  get session() {\n    return this._session;\n  }\n\n  get userDisconnected() {\n    return this._userDisconnected;\n  }\n  set userDisconnected(value) {\n    this._userDisconnected = value;\n  }\n\n  /**\n   * @param {FlowOperation} operation The operation to check\n   * @returns {Boolean} `true` if the operation is allowed.\n   * @throws {@link solace.OperationError} if the operation is not allowed.\n   * @private\n   */\n  _operationCheck(operation) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Checking operation ${FlowOperation.describe(operation)}`);\n    if (this._disposed) {\n      throw new OperationError('Operation is invalid for Message Consumer in disposed state',\n                               ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // Any read-only operation is always valid unless the object was disposed\n    // (which purges properties)\n    if (ALWAYS_OPS.some(v => v === operation)) return true;\n\n    if (operation === FlowOperation.DISCONNECT && this._isDisconnected()) {\n      throw new OperationError(\n        'Operation is invalid for Message Consumer in disconnected state',\n        ErrorSubcode.INVALID_OPERATION\n      );\n    }\n\n    return undefined;\n  }\n\n  _isDisconnected() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Flow#_isDisconnected not implemented');\n  }\n\n}\n\nmodule.exports.Flow = Flow;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates destination types for destination objects.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst DestinationType = {\n  /**\n   * A Topic destination.\n   */\n  TOPIC:           'topic',\n  /**\n   * A queue destination.\n   */\n  QUEUE:           'queue',\n  /**\n   * A temporary queue destination.\n   */\n  TEMPORARY_QUEUE: 'temporary_queue',\n};\n\nmodule.exports.DestinationType = Enum.new(DestinationType);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70131\nmodule.exports.DestinationType._setCanonical({\n  'TOPIC':           DestinationType.TOPIC,\n  'QUEUE':           DestinationType.QUEUE,\n  'TEMPORARY_QUEUE': DestinationType.TEMPORARY_QUEUE\n});\n/* eslint-enable */\n","function flatten(array) {\n  return array.reduce((acc, el) => acc.concat(Array.isArray(el) ? flatten(el) : el), []);\n}\n\nfunction includes(array, el) {\n  return array.some(v => v === el);\n}\n\nmodule.exports.ArrayUtils = {\n  flatten,\n  includes,\n};\n","const { CacheContext } = require('./cache-context');\nconst { LOG_DEBUG } = require('solclient-log');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\n/**\n * @private\n */\nclass CacheRequest {\n  /**\n   * @constructor\n   * @param {CacheSession} cacheSession The owning session\n   * @param {CacheRequestType} cacheMessageType The type of request\n   * @param {Number} requestID The ID for the request\n   * @param {CacheCBInfo} cbInfo Callback target\n   * @param {CacheLiveDataAction} liveDataAction Action on live data received\n   * @param {Topic} topic Associated topic\n   * @param {String} cacheName Associated remote cache name\n   * @private\n   */\n  constructor(cacheSession, cacheMessageType, requestID, cbInfo, liveDataAction, topic, cacheName) {\n    this.cacheSession = cacheSession;\n    this.cacheMessageType = cacheMessageType;\n    this.requestID = requestID;\n    this.cbInfo = cbInfo;\n    this.liveDataAction = liveDataAction;\n    this.topic = topic;\n    this.cacheName = cacheName;\n\n    this.subscriptionWaiting = null;\n    this.replyReceived = false;\n    this.dataReceived = false;\n    this.isSuspect = false;\n\n    this.correlationID = `${CACHE_REQUEST_PREFIX}${CacheContext.cacheRequestCorrelationId++}`;\n\n    this.childRequests = [];\n    this.parentRequest = null;\n\n    this.queuedLiveData = [];\n    this.liveDataFulfilled = false;\n\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * @returns {CacheRequest} The root cache request in the current request tree\n   * @private\n   */\n  getRootRequest() {\n    if (!this.parentRequest) {\n      return this;\n    }\n    return this.parentRequest.getRootRequest();\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to make a descendant of this node in the request tree\n   * @private\n   */\n  addChild(childIn) {\n    if (!(childIn instanceof CacheRequest)) {\n      throw new Error(`Invalid child ${childIn}`);\n    }\n    if (childIn === this) {\n      throw new Error('Constructing circular child reference');\n    }\n    const child = childIn;\n    child.parentRequest = this;\n    this.childRequests.push(child);\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to remove as a descendant of this node\n   * @private\n   */\n  removeChild(childIn) {\n    if (childIn === this) {\n      throw new Error('Attempting to deconstruct invalid circular child reference');\n    }\n    const child = childIn;\n    const childIndex = this.childRequests.indexOf(child);\n    if (childIndex === -1) {\n      LOG_DEBUG(`Child ${child} not found in ${this}`);\n    }\n    this.childRequests.splice(childIndex, 1);\n    child.parentRequest = null;\n  }\n\n  /**\n   * @private\n   */\n  collapse() {\n    const parentRequest = this.parentRequest;\n    parentRequest.isSuspect = parentRequest.isSuspect || this.isSuspect;\n    parentRequest.dataReceived = parentRequest.dataReceived || this.dataReceived;\n    parentRequest.removeChild(this);\n  }\n\n  /**\n   * @private\n   */\n  cancel() {\n    if (this.parentRequest) {\n      this.collapse();\n    }\n\n    while (this.childRequests.length) {\n      const child = this.childRequests.shift();\n      if (child.childRequests) {\n        child.cancel();\n      }\n      this.removeChild(child);\n    }\n\n    this.clearRequestTimeout();\n  }\n\n  /**\n   * @returns {Number} The ID of this request\n   * @private\n   */\n  getRequestID() {\n    return this.requestID;\n  }\n\n\n  /**\n   * @returns {CacheCBInfo} The callback object for this request\n   * @private\n   */\n  getCBInfo() {\n    return this.cbInfo;\n  }\n\n  /**\n   * @returns {Topic} The topic for this request\n   * @private\n   */\n  getTopic() {\n    return this.topic;\n  }\n\n\n  /**\n   * @returns {CacheLiveDataAction} The live data action for this request\n   * @private\n   */\n  getLiveDataAction() {\n    return this.liveDataAction;\n  }\n\n  /**\n   * @param {function({solace.CacheRequest})} cacheSessionTimeoutCB Callback to notify on timeout\n   * @param {Number} timeoutMsec Timeout in milliseconds\n   * @private\n   */\n  startRequestTimeout(cacheSessionTimeoutCB, timeoutMsec) {\n    this.timeoutHandle = setTimeout(() => {\n      cacheSessionTimeoutCB(this);\n    }, timeoutMsec);\n  }\n\n  /**\n   * @private\n   */\n  clearRequestTimeout() {\n    if (this.timeoutHandle === null || this.timeoutHandle === undefined) {\n      return;\n    }\n\n    LOG_DEBUG(`Clearing timeout for ${this}`);\n    clearTimeout(this.timeoutHandle);\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * Returns a string representing the request.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return `CacheRequest[correlationID=${this.correlationID\n        },requestID=${this.requestID\n        },cacheName=${this.cacheName\n        },topic=${this.topic.getName()}]`;\n  }\n\n}\n\n/**\n * @private\n */\nCacheRequest.VERSION = 1;\n\n/**\n * @private\n */\nCacheRequest.DEFAULT_REPLY_SIZE_LIMIT = 1000000;\n\n/**\n * @private\n */\nCacheRequest.REPLY_SIZE_LIMIT = CacheRequest.DEFAULT_REPLY_SIZE_LIMIT;\n\nmodule.exports.CacheRequest = CacheRequest;\n","const { Flow } = require('./lib/flow');\nconst { FlowOperation } = require('./lib/flow-operation');\nconst { PrivateFlowEventName } = require('./lib/private-flow-event-names');\n\nmodule.exports.Flow = Flow;\nmodule.exports.FlowOperation = FlowOperation;\nmodule.exports.PrivateFlowEventName = PrivateFlowEventName;\n","const DebugLib = require('solclient-debug');\nconst MessageDumpStandardProviderLib = require('./message-dump-standard-provider');\nconst {\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { StringBuffer, StringUtils } = require('solclient-util');\n\nconst MessageDumpState = {\n  get dumpProviders() {\n    const providers = MessageDumpStandardProviderLib.MessageDumpStandardProvider;\n    return Object.keys(providers).map(k => providers[k]);\n  },\n};\n\nconst MessageDumpUtil = {\n  getOutOfRangeValue(rawData) {\n    if (typeof rawData === 'string') {\n      return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData)}`;\n    }\n    return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData.toString('latin1'))}`;\n  },\n\n  getValue(sdtField) {\n    let value = null;\n    try {\n      value = sdtField.getValue();\n      return value;\n    } catch (e) {\n      if (e instanceof SDTUnsupportedValueError) {\n        if (e.getSubcode() === SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE) {\n          return this.getOutOfRangeValue(e.getSourceData());\n        }\n      } else if (e instanceof OperationError && e.subcode === ErrorSubcode.PARAMETER_INVALID_TYPE) {\n        return '<invalid type>';\n      }\n      throw e;\n    }\n  },\n\n  printMap(sdtMap, indent) {\n    if (Check.nothing(sdtMap) || !(sdtMap instanceof SDTMapContainer)) {\n      return null;\n    }\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    const keys = sdtMap.getKeys().sort();\n    keys.forEach((key) => {\n      const sdtFieldValue = sdtMap.getField(key);\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}Key '${key}' (${SDTFieldType.nameOf(type)}): ${strValue}`);\n    });\n    return lines.join('\\n');\n  },\n\n  printStream(sdtStream, indent) {\n    if (Check.nothing(sdtStream) || !(sdtStream instanceof SDTStreamContainer)) {\n      return null;\n    }\n    sdtStream.rewind();\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    while (sdtStream.hasNext()) {\n      const sdtFieldValue = sdtStream.getNext();\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        case SDTFieldType.DESTINATION:\n          strValue = value.toString();\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}(${SDTFieldType.nameOf(type)}): ${strValue}`);\n    }\n    sdtStream.rewind();\n    return lines.join('\\n');\n  },\n\n  countItems(sdtStream) {\n    if (Check.nothing(sdtStream) || (!(sdtStream instanceof SDTStreamContainer))) {\n      return 0;\n    }\n    sdtStream.rewind();\n    let count = 0;\n    while (sdtStream.hasNext()) {\n      sdtStream.getNext();\n      count++;\n    }\n    sdtStream.rewind();\n    return count;\n  },\n\n  formatDate(timeStamp) {\n    return new Date(timeStamp).toString();\n  },\n\n  dump(message, flags, separator, colPadding) {\n    const sb = new StringBuffer();\n    let theSeparator = '\\n';\n    let needSeparator = false;\n    let theColPadding = 40;\n    if (separator !== undefined && separator !== null && typeof separator === 'string') {\n      theSeparator = separator;\n    }\n    if (colPadding !== undefined && colPadding !== null && typeof colPadding === 'number') {\n      theColPadding = colPadding;\n    }\n\n    MessageDumpState.dumpProviders.forEach((provider, index) => {\n      const [key, isPresent, value, detailValue] = provider(message, flags);\n      if (!isPresent) {\n        return;\n      }\n      if (needSeparator) {\n        sb.append(theSeparator);\n      }\n\n      if (value === null || value.length === 0) {\n        // If we have no VALUE field, this is probably a boolean flag\n        // and we just end up displaying the key and a newline.\n        sb.append(key);\n      } else {\n        sb.append(StringUtils.padRight(`${key}:`, theColPadding, ' '));\n        sb.append(value);\n      }\n\n      if (detailValue !== null && (flags & MessageDumpFlag.MSGDUMP_FULL)) {\n        sb.append('\\n');\n        if (detailValue.indexOf('  ') !== 0) {\n          sb.append('  ');\n        }\n        sb.append(detailValue);\n        if (detailValue.substr(-1) !== '\\n' && index < (MessageDumpState.dumpProviders.length - 1)) {\n          sb.append('\\n');\n        }\n      }\n      needSeparator = true;\n    });\n    return sb.toString();\n  },\n};\n\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\n","const { ParseInteger } = require('./parse-integer');\n\nconst { autoDecodeVarLengthNumber } = ParseInteger;\n\nconst ParseFieldHeader = {};\n// Parse the header part of an SDT field.\n// Returns [TYPE, DECLARED_LENGTH, VALUE_DATA_LENGTH, CONSUMED_BYTES]\nParseFieldHeader.parseFieldHeader = function parseFieldHeader(dataBuf, offset) {\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  const elemType = (onebyte & 0xFC) >> 2;\n  const lenBytes = (onebyte & 0x03) + 1;\n  pos++;\n  const elemLen = autoDecodeVarLengthNumber(dataBuf, pos, lenBytes);\n  pos += lenBytes;\n  const elemValLen = elemLen - (1 + lenBytes);\n  return [elemType, elemLen, elemValLen, pos - offset];\n};\n\nmodule.exports.ParseFieldHeader = ParseFieldHeader;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { OperationError } = require('./operation-error');\nconst { RequestEventCode } = require('./request-event-codes');\n\n\nconst SUBCODE_FROM_EC = {\n  [RequestEventCode.REQUEST_ABORTED]: ErrorSubcode.SESSION_NOT_CONNECTED,\n  [RequestEventCode.REQUEST_TIMEOUT]: ErrorSubcode.TIMEOUT,\n};\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a request failure event; request failure events are passed to the application\n * event handling callback provided when sending the request {@link solace.Session#sendRequest}\n * @memberof solace\n * @extends solace.OperationError\n * @hideconstructor\n */\nclass RequestError extends OperationError {\n  /*\n   * <b>This class is not exposed for construction by API users.</b> Instances of this object will\n   * be passed to the application in calls to the application's\n   * {@link solace.Session.requestFailedCallback}, provided when invoking\n   * {@link solace.Session.sendReqeust}.\n   * @constructor\n   * @param {String} message Information string\n   * @param {solace.RequestEventCode} eventCode The event code\n   * @param {Object} [correlationKey] Any associated correlation key\n   * @param {Object} [reason] Any additional information\n   * @private\n   */\n  constructor(message, eventCode, correlationKey, reason) {\n    super(message, SUBCODE_FROM_EC[eventCode], reason);\n    /**\n     * The name of the error.\n     * @name solace.RequestError#name\n     * @type {String}\n     * @readonly\n     * @description 'RequestError'\n     */\n    this.name = 'RequestError';\n    this._eventCode = eventCode;\n    this._correlationKey = correlationKey;\n  }\n\n  /**\n   * @type {solace.SessionEventCode}\n   * @name solace.RequestError#requestEventCode\n   * @description A code that provides more information about the error event.\n   */\n  get requestEventCode() {\n    return this._requestEventCode;\n  }\n\n  /**\n   * @deprecated Use {@link solace.RequestError#subcode}\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link ErrorSubcode}\n   */\n  get errorSubcode() {\n    return super.subcode;\n  }\n\n  [util_inspect_custom]() {\n    const superObj = super[util_inspect_custom] ? super[util_inspect_custom]() : {};\n    return Object.assign(superObj, {\n      'requestEventCode': RequestEventCode.describe(this.requestEventCode),\n      'infoStr':          this.infoStr,\n      'correlationKey':   this.correlationKey,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.RequestError = RequestError;\n","function numToHex(n) {\n  if (typeof n !== 'number') {\n    return '';\n  }\n  const s = n.toString(16);\n  return (s.length < 2) ? `0${s}` : s;\n}\n\n\nfunction formatHexString(obj) {\n  if (typeof obj === 'number') {\n    return `0x${numToHex(obj)}`;\n  }\n\n  if (typeof obj === 'object' && Array.isArray(obj)) {\n    return obj.map(numToHex).join();\n  }\n\n  if (typeof obj === 'string') {\n    return Array.prototype.map.call(obj, (_, i) => numToHex(obj.charCodeAt(i))).join('');\n  }\n\n  return null;\n}\n\nconst Hex = {\n  formatHexString,\n};\n\nmodule.exports.Hex = Hex;\n","const { assert } = require('solclient-eskit');\nconst { MessageConsumer } = require('./message-consumer');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nclass ConsumerFlows {\n  /**\n   * Defines a set of Guaranteed Messaging Flows.  There are two sets allocated, one\n   * for publishers (typically just one entry) and one for Subscribers.\n   * There is a separate set for flows in RECONNECTING state.\n   * These need special treatment during SESSION_DOWN:\n   * they need to be notified, but not waited on by the session FSM.\n   * Flows in _reconnectingFlows are not in _allFLows.\n   * @param {any} options Construction options\n   * @private\n   */\n  constructor() {\n    this._allFlows = new Set();\n    this._reconnectingFlows = new Set();\n    // Flows by id (UP)\n    this._flowsById = {};\n  }\n\n  add(flow) {\n    assert(flow instanceof MessageConsumer, 'Flow was not a consumer');\n    if (this._allFlows.has(flow)) {\n      return flow;\n    }\n\n    const flowUp = () => {\n      // Don't worry about flow collisions -- the router assigned the new flow to the same ID\n      // so it won't address the old flow. Retain the old flow in _allFlows and make sure we\n      // dispose the right flow.\n      this._flowsById[flow.flowId] = flow;\n    };\n    const flowDisposed = () => {\n      const flowId = flow.flowId;\n      this._allFlows.delete(flow);\n      this._reconnectingFlows.delete(flow);\n      const flowById = this._flowsById[flowId];\n      // If this test fails, the router reassigned the flow ID, and we were only keeping the\n      // _allFlows set reference for blanket cleanup.\n      if (flowById === flow) {\n        delete this._flowsById[flowId];\n      }\n      // Flow will be disposed and this will happen automatically\n    };\n    const flowReconnecting = () => {\n      flowDisposed();\n      this._reconnectingFlows.add(flow);\n    };\n    const flowReconnected = () => {\n      flowUp();\n      this._allFlows.add(flow);\n      this._reconnectingFlows.delete(flow);\n    };\n    const flowDown = () => {\n      this._reconnectingFlows.delete(flow);\n    };\n\n    flow._on(MessageConsumerEventName.UP, flowUp);\n    flow._on(MessageConsumerEventName.RECONNECTED, flowReconnected);\n    flow._on(MessageConsumerEventName.DISPOSED, flowDisposed);\n    flow._on(MessageConsumerEventName.RECONNECTING, flowReconnecting);\n    flow._on(MessageConsumerEventName.DOWN, flowDown);\n    flow._on(MessageConsumerEventName.DOWN_ERROR, flowDown);\n\n    this._allFlows.add(flow);\n    return flow;\n  }\n\n  get flows() {\n    return Array.from(this._allFlows);\n  }\n  get reconnectingFlows() {\n    return Array.from(this._reconnectingFlows);\n  }\n\n  getFlowById(flowId) {\n    return this._flowsById[flowId];\n  }\n\n  disposeAll() {\n    this._allFlows.forEach(flow => flow.dispose());\n  }\n\n}\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\n","function enumName(instance, keys, value) {\n  const matches = keys.filter(k => instance[k] === value);\n  return matches.length ? matches[0] : null;\n}\n\nfunction enumValues(instance, keys) {\n  return Array.from(new Set(keys.map(k => instance[k])));\n}\n\n/**\n * The base for all enumerated types. Provides common functionality such as\n * collections of keys and values, reverse mapping, and readable descriptions. Also\n * supports overriding the canonical key-value mapping to maintain readability in\n * minified environments.\n *\n * @mixin\n * @memberof solace\n */\nclass Enum {\n\n  /**\n   * Creates an Enum with the given key-value mapping.\n   *\n   * @param {Object} values The key-value mapping to use. This mapping is set as the initial\n   * canonical key-value mapping. To override, use {@link solace.Enum#_setCanonical}.\n   */\n  constructor(values) {\n    Object.defineProperties(this, {\n      _canonical: {\n        value:        null,\n        enumerable:   false,\n        writable:     true,\n        configurable: true,\n      },\n    });\n    this._setCanonical(values);\n  }\n\n  /**\n   * Resets the canonical key value mapping for the enumeration. Using this method,\n   * you add additional sets of keys that map to the same values, and specify that\n   * these new keys take precedence for reverse mapping. Any older set of keys is made\n   * non-canonical and non-enumerable.\n   *\n   * @example\n   * const c = new Enum({ HELLO: 'world' });\n   * c._setCanonical({ MAD: 'world' });\n   * c.nameOf('world') === 'MAD'; // true\n   *\n   * @param {Object} values The new key-value mapping to add to the object and set as canonical.\n   * @param {Boolean} final Whether this enumeration should accept further reconfiguration.\n   * @private\n   */\n  _setCanonical(values, final = false) {\n    this._canonical = Object.assign({}, values);\n    Object.keys(this).forEach((key) => {\n      const descriptor = Object.getOwnPropertyDescriptor(this, key);\n      if (descriptor.value !== undefined) {\n        Object.defineProperty(this, key, {\n          enumerable:   false,\n          writable:     true,\n          configurable: true,\n          value:        descriptor.value,\n        });\n      }\n    });\n    Object.keys(values).forEach((key) => {\n      Object.defineProperty(this, key, {\n        enumerable:   true,\n        writable:     !final,\n        configurable: !final,\n        value:        values[key],\n      });\n    });\n  }\n\n  /**\n   * Create a human-readable string describing the given enumeration value. This\n   * result is informational and may vary between SDK versions.\n   *\n   * Currently, it either returns the value provided (if the associated key is\n   * the same), or a string of the form `key (value)`.\n   *\n   * @example\n   * console.log(new Enum({ ANSWER: 42 }).describe(42)); // ANSWER (42)\n   * console.log(new Enum({ ECHO: 'ECHO' })).describe('ECHO'); // ECHO\n   *\n   * @param {any} enumValue The value on which to perform reverse mapping.\n   * @param {String} [noneValue=''] The string to return if the enumeration value is\n   *    undefined or null.\n   * @param {String} [unknownValue='<unknown>'] The string to return if the enumeration\n   *    value was not found in any of the canonical keys.\n   * @returns {String} A human-readable description of the reverse mapping for the value.\n   */\n  describe(enumValue, noneValue = '<none>', unknownValue = '<unknown>') {\n    if (enumValue === null || enumValue === undefined) return noneValue;\n    const name = enumName(this._canonical,\n                          Object.keys(this._canonical || {}),\n                          enumValue)\n                 || unknownValue;\n    return name === enumValue ? name : `${name} (${enumValue})`;\n  }\n\n  /**\n   * Returns the canonical name in this enumeration for the given value. This function is\n   * designed to facilitate reflection, whereas for display\n   *\n   * @param {any} enumValue The value for which to get the enumeration key.\n   * @returns {String} The name for the given value.\n   */\n  nameOf(enumValue) {\n    return enumName(this._canonical, Object.keys(this._canonical || {}), enumValue);\n  }\n\n  /**\n   * Returns all canonical names/keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array.<String>} All canonical names in this enumeration.\n   */\n  get names() {\n    return Object.keys(this._canonical || {});\n  }\n\n  /**\n   * Returns all values assigned to canonical keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array} All values defined for enumeration keys.\n   */\n  get values() {\n    return enumValues(this._canonical, Object.keys(this._canonical || {}));\n  }\n\n  /**\n   * A property returning true to faciliate duck-typing with {solace.Enum} objects.\n   *\n   * @readonly\n   * @returns {Boolean} true This is an enumeration.\n   */\n  get isEnum() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  /**\n   * Returns the name of an enuerated value given the\n   * enumeration and the value.\n   *\n   * @param {Object} instance The enumeration instance.\n   * @param {*} value The value for which to return the key name.\n   * @returns {String} The key name for the given enumeration value.\n   */\n  static nameOf(instance, value) {\n    return instance.nameOf(value);\n  }\n\n  /**\n   * Returns values defined on this enumeration for the given keys. To get the enumeration keys,\n   * use {@link Object#keys}.\n   * @param {Object} instance The enumeration on which to return values.\n   * @returns {Array} The values defined on the given enumeration.\n   **/\n  static values(instance) {\n    return instance.values();\n  }\n\n  /**\n   * Alternate construction method for enumerations.\n   *\n   * @static\n   * @param {Object} values Initial key-value mapping\n   * @returns {solace.Enum} A new enumeration instance\n   * @private\n   */\n  static new(values) {\n    return new Enum(values);\n  }\n\n  /**\n   * Constructs a private enumeration in which the values are equal to the keys.\n   *\n   * @static\n   * @param {Array.<String>} strings Key names. The values will be equal to the keys.\n   * @returns {solace.Enum} An enumeration instance of the given strings\n   * @private\n   */\n  static ofStrings(strings) {\n    const map = {};\n    strings.forEach((s) => {\n      map[s] = s;\n    });\n    return Enum.new(map);\n  }\n\n  /**\n   * Constructs an enumeration in which each key is assigned a distinct integer value.\n   * Enums created this way are subject to renumbering if keys are reordered.\n   *\n   * @static\n   * @param {Array.<String>} keys Key names. The values will be sequential from zero.\n   * @returns {solace.Enum} An enumeration instance of the given values\n   * @private\n   */\n  static ofNumbers(keys) {\n    const map = {};\n    keys.forEach((key, index) => {\n      map[key] = index;\n    });\n    return Enum.new(map);\n  }\n}\n\nmodule.exports.Enum = Enum;\n","const { AbstractQueueDescriptor } = require('./abstract-queue-descriptor');\nconst { Destination } = require('solclient-destination');\n\nconst DEFAULTS = {\n  name:    undefined,\n  durable: true,\n};\n\n/**\n * This class identifies a queue or topic endpoint on the message router.\n *\n * Operations that make use of queue descriptors include\n *  * {@link solace.Session#createMessageConsumer}\n *  * {@link solace.Session#dteUnsubscribe}\n *\n * @classdesc QueueDescriptor\n * @extends {AbstractQueueDescriptor}\n * @memberof solace\n */\nclass QueueDescriptor extends AbstractQueueDescriptor {\n\n  /**\n   * Creates an instance of {@link solace.QueueDescriptor}.\n   *\n   * @param {Object|solace.QueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {String} [queueSpec.name=null] The remote name to which this specification refers.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] `true` if this refers to a durable queue.\n   */\n  constructor(queueSpec) {\n    super(queueSpec instanceof Destination\n            ? { name: queueSpec.name, type: queueSpec.type } // synthesize durable later\n            : Object.assign({ }, DEFAULTS, queueSpec));\n  }\n\n  /**\n   * Gets/sets the remote name to which this descriptor refers.\n   * @returns {String} The name of the queue.\n   */\n  getName() {\n    return this._name;\n  }\n  get name() {\n    return this.getName();\n  }\n  set name(value) {\n    this._name = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'name':    this.name,\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${super.toString()} '${this.getName() || ''}'`;\n  }\n\n  /**\n   * @static\n   * @param {any} spec The descriptor spec\n   * @returns {QueueDescriptor|AbstractQueueDescriptor} A new descriptor for the spec\n   * @private\n   */\n  static createFromSpec(spec) {\n    if (spec.name) return new QueueDescriptor(spec);\n    return AbstractQueueDescriptor(spec);\n  }\n}\n\nmodule.exports.QueueDescriptor = QueueDescriptor;\n","const { HTTPConnection } = require('./http-connection');\nconst { HTTPTransportSession } = require('./http-transport-session');\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  module.exports.HTTPConnection = HTTPConnection;\n  module.exports.HTTPTransportSession = HTTPTransportSession;\n}\n","module.exports = require(\"util\");","const SMFLib = require('solclient-smf');\nconst { ApplicationAck,\n        ApplicationAckRingBuffer,\n        ApplicationAckState } = require('./application-acks');\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ConsumerStateNames } = require('./consumer-state-names');\nconst { DestinationFromNetwork,\n        DestinationType,\n        Queue,\n        Topic } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageDispatcher } = require('./message-dispatcher');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { QueueAccessType,\n        QueueDescriptor,\n        QueuePermissions,\n        QueueProperties,\n        QueueType } = require('solclient-queue');\nconst { MessageOutcome, RgmidFactory } = require('solclient-message');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { Timer } = require('solclient-events');\nconst { TransportAcks,\n        TransportAckResult } = require('./transport-acks');\n\nconst RING_BUFFER_SIZE = 512;\n// assumption is that this first message (messageId = 0) settlement outcome is ACCEPTED (ACKed)\nconst ZERO_APP_ACK = new ApplicationAck(Long.UZERO, ApplicationAckState.ACKED_SENT, MessageOutcome.ACCEPTED);\n\n\nclass ConsumerFSM extends StateMachine {\n  constructor({ name, consumer, sessionInterface, properties } = {}) {\n    super({ name });\n\n    const fsm = this;\n    const formatter = function formatter(...args) {\n      return [\n        `[session=${sessionInterface.sessionIdHex}]`,\n        `[message-consumer-fsm=${consumer.flowIdDec}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(formatter);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n      LOG_ERROR,\n    } = logger;\n    this.log = logger.wrap(this.log, this);\n\n    const autoAck = properties.acknowledgeMode === MessageConsumerAcknowledgeMode.AUTO;\n\n    this._consumer = consumer;\n    this._sessionInterface = sessionInterface;\n\n    // Save copies of properties accessed outside the constructor\n    this._acknowledgeTimeoutInMsecs = properties.acknowledgeTimeoutInMsecs;\n    this._acknowledgeThreshold = properties.acknowledgeThreshold;\n    this._localPreferredWindowSize = properties.windowSize;\n    this._localMaxWindowSize = properties.windowSize;\n    this._hasAutoAckSupport = autoAck;\n\n    this._messageDispatch = new MessageDispatcher({ emitter: consumer, autoAck, logger });\n\n    this._stats = new Stats();\n\n    this._resetRemoteConnectionState();\n    this._resetLocalConnectionState();\n\n    // Flag to delay flow dispose() for autoAck.\n    this._midDispatch = false;\n    // Save a copy to clear out on first successful bind\n    this._replayStartLocation = properties.replayStartLocation;\n\n    this._errorCausingReconnect = null;\n    //**********************************************************************************************\n    // A bit of infrastructure around post-event actions, which includes maintaining a queue of\n    // pending actions, and some logic to pre-process the actions before performing them.\n\n    // These should not be the same as any MessageConsumerEventName value or they will collide in\n    // the actionLocations object during event pre-processing.\n    const emitEventActionType = 'EMIT';\n    const startDispatchActionType = 'DISPATCH';\n    const stopDispatchActionType = 'NO_DISPATCH';\n\n    let postEventActions = [];\n    function preprocessPostEventActions(startIndex) {\n      // first pre-process post event actions.  This isn't an exhaustive search of every possible\n      // combination of event sequences, as many are practically impossible, and therefore\n      // impossible to test.  We only handle sequences that are known to be possible.  If there\n      // are other sequences that need to be considered, we can add processing for them when we\n      // know they are possible.\n      LOG_TRACE(`Pre-processing post event action list @${startIndex}`, postEventActions);\n      const actionLocations = {};\n      postEventActions.forEach((action, i, arr) => {\n        function cancelAction(firstActionName, cancellingActionName) {\n          if (actionLocations[firstActionName] === undefined) {\n            return;\n          }\n          const firstLocation = actionLocations[firstActionName];\n          LOG_TRACE(`Cancelling post event action ${firstActionName}@${firstLocation} with ${\n            cancellingActionName}@${i}`);\n          actionLocations[firstActionName] = undefined;\n          arr[firstLocation] = null;\n          arr[i] = null;\n        }\n        if ((i < startIndex) || (!action)) {\n          LOG_TRACE(`Skip n/a action@${i}, start: ${startIndex}, action:`, action);\n          return;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            switch (action.data) {\n              case MessageConsumerEventName.UP:\n              case MessageConsumerEventName.ACTIVE:\n              case MessageConsumerEventName.RECONNECTED:\n                actionLocations[action.data] = i;\n                break;\n\n              case MessageConsumerEventName.DOWN:\n              case MessageConsumerEventName.DOWN_ERROR:\n              //case MessageConsumerEventName.RECONNECTED: // I can't get this to work :-/\n                cancelAction(MessageConsumerEventName.UP, action.data);\n                break;\n\n              case MessageConsumerEventName.INACTIVE:\n                cancelAction(MessageConsumerEventName.ACTIVE, action.data);\n                break;\n\n              default:\n                LOG_ERROR(`Unexpected event in post-event action: ${action.data}`);\n                break;\n            }\n            break;\n\n          case startDispatchActionType:\n            actionLocations[action.type] = i;\n            break;\n\n          case stopDispatchActionType:\n            cancelAction(startDispatchActionType, action.type);\n            break;\n\n          default:\n            break;\n        }\n      });\n    }\n\n    function processPostEventActions() {\n      let preprocessedActions = 0;\n      let i;\n\n      // Now we've pre-processed the list, execute any remaining non-null entries.  We don't use a\n      // foreach loop since foreach won't include elements added after processing has started.  This\n      // can occur if a callback causes more postEventActions to be added.\n      LOG_TRACE('Executing post event action list', postEventActions);\n      for (i = 0; i < postEventActions.length; ++i) {\n        if (preprocessedActions < postEventActions.length) {\n          preprocessPostEventActions(i);\n          preprocessedActions = postEventActions.length;\n        }\n        const action = postEventActions[i];\n        LOG_TRACE(`Action ${i}:`, action);\n        if (!action) {\n          continue;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            if (action.error !== undefined) {\n              consumer._emit(action.data, action.error);\n            } else {\n              consumer._emit(action.data);\n            }\n            break;\n\n          case stopDispatchActionType:\n            // We don't actually do the stop here -- it is always done when this is enqueued.\n            // The reason for enqueuing this event is to that it can cencel a startDispatch, if\n            // present.\n            break;\n\n          case startDispatchActionType:\n            this.requestStartDispatchFSM();\n            break;\n\n          default:\n            LOG_ERROR(`Unhandled post event action type: ${action.type}`);\n            break;\n        }\n      }\n      postEventActions = [];\n    }\n\n    function addPostEventAction(type, data, error) {\n      let newEvent;\n      if (data !== undefined) {\n        newEvent = { type, data, error };\n      } else {\n        newEvent = { type };\n      }\n      postEventActions.push(newEvent);\n      LOG_TRACE(`Added post event action ${postEventActions.length}:`, newEvent);\n      if (postEventActions.length === 1) {\n        fsm.setPostEventAction(processPostEventActions);\n      }\n    }\n\n    const addEventToEmit = (event, error) => {\n      if (!properties.activeIndicationEnabled) {\n        if ((event === MessageConsumerEventName.INACTIVE) ||\n            (event === MessageConsumerEventName.ACTIVE)) {\n          LOG_TRACE(`Skip emitting ${event} due to disabled flow active indications`);\n          return;\n        }\n      }\n      addPostEventAction(emitEventActionType, event, error);\n    };\n    const requestStartDispatch = () => {\n      addPostEventAction(startDispatchActionType);\n    };\n    const requestStopDispatch = () => {\n      // We do the stop inline, then add a post-event action so that it can have the effect of\n      // cancelling a previous start.  It will not execute the stop when processed however since we\n      // have already done it here.\n      this.requestStopDispatchFSM();\n      addPostEventAction(stopDispatchActionType);\n    };\n\n    this._addEventToEmit = addEventToEmit;\n    this._requestStartDispatch = requestStartDispatch;\n    this._requestStopDispatch = requestStopDispatch;\n\n    // End of post-event action infrastructure\n\n    // Utility functions\n    function emitBindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.CONNECT_FAILED_ERROR, error);\n    }\n\n    function emitRebindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.DOWN_ERROR, error);\n    }\n\n    function verifyEndpointSubscription(destination) {\n      let error = null;\n      if (destination) {\n        const subInfo = destination.getSubscriptionInfo();\n        if (subInfo && (subInfo.isShare || subInfo.isNoExport) &&\n            !fsm._sessionInterface.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n          error = new OperationError('Shared Subscriptions not Supported',\n                                     ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED);\n        }\n      }\n      return error;\n    }\n\n    function verifyNackSettlementOutcomesSupport(requiredSettlementOutcomes) {\n      let error = null;\n      // check for whether the broker session supports the NACK capability\n      const settlementOutcomes = requiredSettlementOutcomes;\n      if (settlementOutcomes && settlementOutcomes.length > 0) {\n        // check the capability bit for settlement outcome (NACK) support or throw OperationError()\n        const isNackRequired = settlementOutcomes.some(v => v === MessageOutcome.FAILED || MessageOutcome.REJECTED);\n        if(isNackRequired && !fsm._sessionInterface.isCapable(CapabilityType.AD_APP_ACK_FAILED)) {\n          const outcomeNotSupportedError = `Session.capabilitySettlementOutcomeNotSupported: [ ${\n            settlementOutcomes.map(v => MessageOutcome.nameOf(v)).join(', ')\n          } ]`;\n          // log the operation error as a Warning\n          LOG_WARN(outcomeNotSupportedError);\n          // then create the actual OperationError object here\n          error = new OperationError(outcomeNotSupportedError, ErrorSubcode.INVALID_OPERATION);\n        }      \n      }\n      return error;\n    }\n    //**********************************************************************************************\n    // ChoicePoints on transitions.\n    // Not every transition is unilateral. In some cases, particularly with session-up/flow-open\n    // we want to check the session capabilities, which will effect which transition is taken.\n    // The following choicePoints are NOT generic, they may only be used in the documented states\n    // to control the transition out of that state.\n    // ChoicePoints must return a new state (this.transitionTo())\n    //\n    // checkCapabiltiesChoicePoint - Check the session capabilities against the consumer properties.\n    // If all requested properties are supported by the session capabilties, transitionTo(BindSent).\n    // otherwise emitError and transitionTo unbound.\n    // Used in:  fsm.Unbound.AwaitFlowOpen\n    //           fsm.Unbound.AwaitSessionUp\n    //\n    function checkCapabilitiesChoicePoint(curState) {\n      let error = null;\n      if (fsm._replayStartLocation !== undefined &&\n        !fsm._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n        error = new OperationError('Message Replay Not Supported',\n              ErrorSubcode.REPLAY_NOT_SUPPORTED);\n      } else if (properties.topicEndpointSubscription) {\n        error = verifyEndpointSubscription(properties.topicEndpointSubscription);\n      }\n      else if (properties.requiredSettlementOutcomes) {\n        error = verifyNackSettlementOutcomesSupport(properties.requiredSettlementOutcomes);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to bind\n      if (properties.createIfMissing &&\n        properties.queueDescriptor &&\n        properties.queueDescriptor.durable) {\n        return curState.transitionTo(fsm.CreateSent);\n      }\n      return curState.transitionTo(fsm.BindSent);\n    }\n\n    /**\n     * Check Capabilities on Re-Bind\n     * \n     * @param {*} curState - current state\n     * @param {*} externalTransition - is an external transition?\n     * @returns {State} retrurns the new state for the state machine\n     * @private\n     */\n    function checkCapabilitiesChoicePointOnRebind(curState, externalTransition = false) {\n      let error = null;\n      if (properties.requiredSettlementOutcomes) {\n        error = verifyNackSettlementOutcomesSupport(properties.requiredSettlementOutcomes);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to re-bind\n      if (externalTransition) {\n        return curState.externalTransitionTo(fsm.Reconnecting.RBindSent);\n      }\n      return curState.transitionTo(fsm.Reconnecting.RBindSent);\n    }\n    // End of ChoicePoints\n    //*********************************************************************************************\n    // FSM config\n\n    function handleAccidentalBind(msg) {\n      // Unbind with timout-recursion using flowid.\n\n      LOG_TRACE(`handleAccidentalBind mssg: ${msg}`);\n      const correlationTag = sessionInterface.getCorrelationTag();\n      const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(msg.flowId, correlationTag);\n      sessionInterface.sendControl(message);\n      sessionInterface.enqueueRequest(\n        correlationTag,\n        () => this.handleAccidentalBind(msg),\n        properties.connectTimeoutInMsecs,\n        null,\n        null); //ignore response. Maybe log?\n    }\n\n    this.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED:\n          LOG_INFO('VirtualRouter name change: clearing all acknowledgement state and partition group ID, if any');\n          fsm._resetRemoteConnectionState();\n          return this;\n        case ConsumerFSMEventNames.FLOW_UNBOUND:\n          LOG_INFO('Received unsolicited unbind. Flow may be manually reconnected.');\n          return this.transitionToUnbound(MessageConsumerEventName.DOWN_ERROR, event.details);\n        case ConsumerFSMEventNames.DISPOSE:\n          fsm._dispose();\n          return fsm.getCurrentState().terminate();\n        case ConsumerFSMEventNames.BIND_RESPONSE:\n          LOG_TRACE('Unhandled bind, assuming accidental BIND duplication');\n          handleAccidentalBind(event.details);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()} in state ${this.getCurrentState().getName()}`);\n          return this;\n      }\n    });\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.Unbound, (context) => {\n        LOG_INFO(`Starting ${context.getStateMachine().getName()}`);\n      });\n    });\n\n    /*\n      We don't transition directly from Unbound to BindSent.\n      We need the following events:\n       * FLOW_OPEN\n       * SESSION_UP\n      (The session ensures we get SESSION_UP or SESSION_UP_NO_AD if we are created\n      and there is a session already up.)\n      The Unbound base state implements transitions to its wait state children:\n       * FLOW_OPEN -> AwaitSessionUp\n       * SESSION_UP -> AwaitFlowOpen\n      It also has the following transitions that pull the FSM out of its children\n      and back to itself:\n       * FLOW_CLOSE\n       * SESSION_DOWN\n      The child states can override these with internal transitions.\n     */\n    this.Unbound = new State({\n      name:          ConsumerStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDisabledEvent() {\n        consumer._emit(MessageConsumerEventName.GM_DISABLED);\n      },\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSesssionDisconnect() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp); // Enter child state\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        if (fsm._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME)) {\n          return this.transitionTo(fsm.Unbound.AwaitFlowOpen); // Enter child state\n        }\n        LOG_WARN(`Consumer is not supported by router for this client on sessionId 0x${\n                 fsm._sessionInterface.sessionIdHex}`);\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP_NO_AD, function onSessionUpNoAD() {\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .exit(() => {\n        fsm._connectAttempts = properties.connectAttempts;\n      });\n\n    /*\n      In this state, we have received FLOW_OPEN, but no SESSION_UP.\n      SESSION_DOWN does not cancel this wait, so we must override the\n      parent and explicitly do nothing.\n    */\n    this.Unbound.AwaitSessionUp = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_SESSION_UP,\n      parentContext: this.Unbound,\n    }, {\n      emitBindWaiting() {\n        consumer._emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitBindWaiting();\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n\n    /*\n      In this state, we have received SESSION_UP but not FLOW_OPEN.\n      If we get FLOW_OPEN, attempt to bind. Any other event is handled\n      by the parent.\n     */\n    this.Unbound.AwaitFlowOpen = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_FLOWOPEN,\n      parentContext: this.Unbound,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n    // Factored out the extension object from the State constructor for reuse in\n    // flow auto-reconnect sister-states.\n    this.BindSentExtensions = {\n      sendBindRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const transportAcks = fsm._transportAcks;\n\n        fsm._endpointEnsure();\n        const endpoint = fsm._endpoint;\n        const subscription = fsm._subscription;\n\n        const message = SMFLib.AdProtocolMessage.getOpenMessageConsumer(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId,\n          consumer.partitionGroupId,\n          (properties.requiredSettlementOutcomes && properties.requiredSettlementOutcomes.length > 0));\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        this.handleBindTimeout.bind(this),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        this.handleBindResponse.bind(this));\n        LOG_TRACE('Sent consumer bind request with arguments', [\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId,\n          consumer.partitionGroupId,\n          properties.requiredSettlementOutcomes]);\n      },\n      cancelBindRequestTimer() {\n        LOG_TRACE('Cancelling bindRequestTimer.');\n        this.bindRequestTimer.cancel();\n      },\n      handleBindTimeout() {\n        LOG_INFO('Bind timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleExpectedBind(msg) {\n        const accessTypeOrDefault = x => (x === undefined ? QueueAccessType.EXCLUSIVE : x);\n\n        // the partition group ID\n        let partitionGroupIdValue = msg.getPartitionGroupId();\n        if(partitionGroupIdValue == undefined || partitionGroupIdValue == null) {\n          partitionGroupIdValue = undefined; // set it as undefined\n          fsm._clearPartitionGroupId(); // clear the partitionGroupId\n        }\n\n        const attrs = {\n          lastMsgIdAcked:       msg.getLastMsgIdAcked(),\n          flowId:               msg.getFlowId(),\n          accessType:           accessTypeOrDefault(msg.getAccessType()),\n          topicEndpointBytes:   msg.getTopicEndpointBytes(),\n          grantedPermissions:   msg.getGrantedPermissions(),\n          allOthersPermissions: msg.getAllOthersPermissions(),\n          respectsTTL:          msg.getRespectsTTL(),\n          activeFlow:           msg.getActiveFlow(),\n          wantFlowChangeNotify: msg.getWantFlowChangeNotify(),\n          discardBehavior:      msg.getQueueDiscardBehavior(),\n          deliveryCountSent:    msg.getEndpointDeliveryCountSent(),\n          endpointId:           msg.getEndpointId(),\n          maxUnackedMessages:   msg.getMaxUnackedMessages(),\n          endpointErrorId:      msg.getEndpointErrorId(),\n          spoolerUniqueId:      msg.getSpoolerUniqueId(),\n          quota:                msg.getQuota(),\n          maxMsgSize:           msg.getMaxMsgSize(),\n          maxRedelivery:        msg.getMaxRedelivery(),\n          partitionGroupId:     partitionGroupIdValue,\n        };\n        LOG_DEBUG('BIND response attributes:', attrs);\n\n        Object.assign(consumer, {\n          accessType:           attrs.accessType,\n          queueDiscardBehavior: attrs.discardBehavior,\n          deliveryCountSent:    attrs.deliveryCountSent,\n          endpointId:           attrs.endpointId,\n          respectsTTL:          attrs.respectsTTL,\n          flowId:               attrs.flowId,\n          permissions:          attrs.grantedPermissions,\n          wantFlowChangeNotify: attrs.wantFlowChangeNotify,\n          endpointErrorId:      attrs.endpointErrorId,\n          spoolerUniqueId:      attrs.spoolerUniqueId,\n          partitionGroupId:     partitionGroupIdValue,\n        });\n        if (fsm._sessionInterface.isCapable(CapabilityType.BR_REPLAY_ERRORID)) {\n          consumer.endpointErrorId = attrs.endpointErrorId;\n        }\n\n        if (attrs.topicEndpointBytes && attrs.topicEndpointBytes.length) {\n          attrs.endpoint = DestinationFromNetwork.createDestinationFromBytes(\n            attrs.topicEndpointBytes);\n          LOG_DEBUG('Overwriting local endpoint:', fsm._endpoint, 'with remote:', attrs.endpoint);\n          fsm._endpoint = attrs.endpoint;\n          const consumerProperties = fsm._consumer._properties;\n          consumerProperties.queueDescriptor = new QueueDescriptor({\n            name:    attrs.endpoint.name,\n            type:    consumerProperties.queueDescriptor.type,\n            durable: consumerProperties.queueDescriptor.durable,\n          });\n        }\n\n        const consumerProperties = fsm._consumer._properties;\n        consumerProperties.queueProperties = new QueueProperties({\n          respectsTTL:          attrs.respectsTTL,\n          permissions:          attrs.allOthersPermissions,\n          quotaMB:              attrs.quota,\n          maxMessageSize:       attrs.maxMsgSize,\n          discardBehavior:      attrs.discardBehavior,\n          maxMessageRedelivery: attrs.maxRedelivery,\n          accessType:           attrs.accessType,\n        });\n        if (!consumerProperties.queueProperties.permissions) {\n          consumerProperties.queueProperties.permissions = QueuePermissions.NONE;\n        }\n\n\n        Object.assign(fsm, {\n          _active:           attrs.activeFlow,\n          _remoteWindowSize: attrs.maxUnackedMessages,\n        });\n\n        if (Long.UZERO.eq(fsm._transportAcks.lastAcked)) {\n          fsm._transportAcks.lastAcked = attrs.lastMsgIdAcked || Long.UZERO;\n        } else {\n          LOG_DEBUG(`Retaining last acked/last received: ${fsm._transportAcks}`);\n        }\n        //return this.transitionTo(fsm.FlowUp);\n        //return fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UP }));\n      },\n      handleBindResponse(msg) {\n        LOG_TRACE(`handleBindResponse called for message ${msg}`);\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.BIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(`Unexpected bind response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode === null) {\n          // Drop message and increment stats. Flow will time out\n          this._consumer.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    this._sessionInterface.sessionIdHex}`);\n          return undefined;\n        }\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Flow failed (bind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.BIND_RESPONSE };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    };\n    this.BindSent = new State({\n      name:          ConsumerStateNames.BIND_SENT,\n      parentContext: fsm,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return this.externalTransitionTo(fsm.BindSent);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Bind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // Act like a newly created flow\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting = new State({\n      name:          ConsumerStateNames.RECONNECTING,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        LOG_TRACE('RECONNECTING onEntry: emitting RECONNECTING, resetting attempt counters');\n        LOG_TRACE(`this._errorCausingReconnect: ${this._errorCausingReconnect}`);\n        LOG_TRACE(`fsm._errorCausingReconnect: ${fsm._errorCausingReconnect}`);\n        consumer._emit(MessageConsumerEventName.RECONNECTING, fsm._errorCausingReconnect);\n        fsm._connectAttempts = properties.connectAttempts;\n        fsm.reconnectAttempts = properties.reconnectAttempts;\n      })\n      .initial(\n        function onInitial() {\n          return checkCapabilitiesChoicePointOnRebind(this, false);\n          // return this.transitionTo(fsm.Reconnecting.RBindSent);\n        })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      });\n    this.Reconnecting.RAwaitSessionUp = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_SESSION_UP,\n      parentContext: this.Reconnecting,\n    })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        fsm._connectAttempts = properties.connectAttempts;\n        return checkCapabilitiesChoicePointOnRebind(this, false);\n        // return this.transitionTo(fsm.Reconnecting.RBindSent);\n      });\n    this.Reconnecting.RBindSent = new State({\n      name:          ConsumerStateNames.RECONNECTING_BIND_SENT,\n      parentContext: this.Reconnecting,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // TODO: This is probably wrong in the original state machine too:\n        // flowid is either missing or stale. Keeping it the same as there for now.\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout during reconnect, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return checkCapabilitiesChoicePointOnRebind(this, true);\n          // return this.externalTransitionTo(fsm.Reconnecting.RBindSent);\n        }\n        // Running out of rebinds is a non rebindable failure, so break the reconect loop.\n        LOG_TRACE('Running out of rebinds is a non rebindable failure, so break the reconect loop.');\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Rebind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // These three reconnect-errors are \"rebindable\",\n        // anything else breaks the reconnect loop.\n        if (fsm.reconnectAttempts > 0 || fsm.reconnectAttempts === -1) {\n          if (evt && evt.details && evt.details.subcode) {\n            if (evt.details.subcode === ErrorSubcode.QUEUE_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.TOPIC_ENDPOINT_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n              LOG_TRACE(`ReconnectAttempts left: ${fsm.reconnectAttempts} subcode: ${evt.details.subcode}, giving it another shot.`);\n              return this.transitionTo(fsm.Reconnecting.RAwaitTimer);\n            }\n          } else {\n            LOG_DEBUG(`Hmm, no subcode in FLOW_FAILED? ${evt}`);\n          }\n        } else {\n          LOG_TRACE(`Ran out of reconnectAttempts: ${fsm.reconnectAttempts}`);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitRebindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n                                 //() => consumer._emit(MessageConsumerEventName.RECONNECTING));\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting.RAwaitTimer = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_TIMER,\n      parentContext: this.Reconnecting,\n    }, {\n      handleReconnectIntervalTimeout() {\n        LOG_DEBUG('Reconnect interval timeout (expected)');\n        fsm.processEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT }));\n      },\n      cancelReconnectIntervalTimer() {\n        this.reconnectIntervalTimer.cancel();\n      },\n\n    }).entry(function onEntry() {\n      if (fsm.reconnectAttempts > 0) {\n        --fsm.reconnectAttempts;\n      }\n      LOG_TRACE(`Setting up timer for ${properties.reconnectIntervalInMsecs}. reconnectAttempts left: ${fsm.reconnectAttempts}`);\n      this.reconnectIntervalTimer = Timer.newTimeout(properties.reconnectIntervalInMsecs,\n                                                     this.handleReconnectIntervalTimeout);\n    }).exit(function onExit() {\n      this.cancelReconnectIntervalTimer();\n    }).reaction(ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT, function onTimeout() {\n      fsm._connectAttempts = properties.connectAttempts;\n      return checkCapabilitiesChoicePointOnRebind(this, false);\n      // return this.transitionTo(fsm.Reconnecting.RBindSent);\n    });\n\n    const flowUpFSM = this.FlowUp = new State({\n      name:          ConsumerStateNames.FLOW_UP,\n      parentContext: fsm,\n    })\n      .initial(\n        function onInitial() {\n          return this.transitionTo(fsm._active === 0\n            ? flowUpFSM.XferInactive\n            : flowUpFSM.Xfer);\n        }\n      )\n      .entry(() => {\n        fsm._replayStartLocation = undefined; //SOL-12945: only replay once.\n        // This is ugly, but I can't coerce the post event action queue to work with me:\n        // RECONNECTING should suppress UP.\n        if (!fsm._errorCausingReconnect) {\n          LOG_TRACE('Emitting UP, because there is no errorCausingReconnect');\n          fsm._addEventToEmit(MessageConsumerEventName.UP);\n        } else {\n          LOG_TRACE('Not emitting UP, because there is errorCausingReconnect');\n          fsm._errorCausingReconnect = null;\n        }\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDisconnect() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // Acks will be sent by UnbindSent\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND, event =>\n        // Acks will be sent by UnbindSent\n        fsm.transitionToUnboundFromUp(\n          properties,\n          MessageConsumerEventName.DOWN_ERROR,\n          event.details)\n      );\n\n    flowUpFSM.Xfer = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER,\n      parentContext: flowUpFSM,\n    })\n      .entry(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.ACTIVE);\n        fsm._sendAcks(true);\n        fsm._requestStartDispatch();\n      })\n      .exit(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.INACTIVE);\n        fsm._requestStopDispatch();\n      })\n      // Here we send acks on disconnect.  Acks for the FLOW_CLOSE event are coupled to the sending\n      // of the unbind.\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        fsm._sendAcks(true);            // send acks, then...\n        return this.eventUnhandled();   // let the parent state handle the remaining steps.\n      });\n\n    flowUpFSM.XferInactive = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER_INACTIVE,\n      parentContext: flowUpFSM,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_ACTIVE_IND, function onFlowActiveIndication() {\n        return this.transitionTo(flowUpFSM.Xfer);\n      });\n\n    this.UnbindSent = new State({\n      name:          ConsumerStateNames.UNBIND_SENT,\n      parentContext: fsm,\n    }, {\n\n      sendUnbindRequest() {\n        // Don't do this on entry to UNBIND, do it when the user\n        // wants to unbind\n\n        fsm._endpointClear();\n        try {\n          const correlationTag = sessionInterface.getCorrelationTag();\n          const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(consumer.flowId,\n                                                                           correlationTag);\n          sessionInterface.sendControl(message);\n          sessionInterface.enqueueRequest(\n            correlationTag,\n            () => this.handleUnbindTimeout(),\n            properties.connectTimeoutInMsecs,\n            null,\n            response => this.handleUnbindResponse(response));\n          LOG_INFO('Sent consumer unbind request with arguments',\n                   {\n                     flowId: consumer.flowId,\n                     correlationTag,\n                   });\n        } catch (e) {\n          LOG_INFO(`Exception in sendUnbindRequest while trying to send unbind request: ${e}`);\n          LOG_DEBUG(`Session (${sessionInterface.getCurrentStateName()}) assumed lost before flow unbind could be sent. Considering this flow unbound.`);\n          fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UNBOUND }));\n        }\n      },\n\n      handleUnbindTimeout() {\n        LOG_INFO('Unbind timeout');\n        return fsm.processEvent(\n          new ConsumerFSMEvent({ name: ConsumerFSMEventNames.UNBIND_TIMEOUT })\n        );\n      },\n\n      handleUnbindResponse(msg) {\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.UNBIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n        }\n        const responseCode = msg.smfHeader.pm_respcode;\n        const description = msg.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        consumer.endpointErrorId = msg.getEndpointErrorId();\n        LOG_INFO('Flow failed (unbind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n        return fsm.processEvent(new ConsumerFSMEvent(\n          { name: ConsumerFSMEventNames.FLOW_UNBOUND },\n          new OperationError(description, errorSubcode, responseCode)));\n      },\n\n    })\n      .entry(function onEntry() {\n        this.sendUnbindRequest();\n      })\n      .reaction(ConsumerFSMEventNames.UNBIND_TIMEOUT, function onUnbindTimeout() {\n        return this.externalTransitionTo(fsm.UnbindSent);\n      })\n      // The choice point will emit on this transition, not on exit, which is OK:\n      // we don't want to repeatedly dispatch \"unbound\" when the unbinds are timing out\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND,\n                () => fsm.transitionToUnbound(MessageConsumerEventName.DOWN));\n\n\n    this.CreateSent = new State({\n      name:          ConsumerStateNames.CREATE_SENT,\n      parentContext: fsm,\n    }, {\n      sendCreateRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const message = SMFLib.AdProtocolMessage.getCreate(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          correlationTag);\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(\n          correlationTag,\n          this.handleCreateTimeout.bind(this),\n          properties.connectTimeoutInMsecs,\n          null,\n          this.handleCreateResponse.bind(this));\n      },\n      handleCreateTimeout() {\n        LOG_INFO('Create timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.CREATE_TIMEOUT }));\n      },\n      handleCreateResponse(msg) {\n        LOG_TRACE(`handleCreateResponse called for message ${msg}`);\n\n\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.CREATE) {\n          LOG_INFO(`Unexpected message type in create response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(`Unexpected create response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Endpoint create failed:', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          if (errorSubcode === ErrorSubcode.ENDPOINT_ALREADY_EXISTS) {\n            LOG_TRACE('subcode recognized as ALREADY EXISTS:', errorSubcode);\n            const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n            return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n          }\n          LOG_TRACE('subcode not recognized as ALREADY EXISTS:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    }\n    )\n      .entry(function onEntry() {\n        //send create request\n        this.sendCreateRequest();\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_TIMEOUT, function onCreateTimeout() {\n        LOG_DEBUG('Create timeout, just moving on to bind and hoping for the best.');\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_SUCCESS, function onCreateSuccess() {\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_FAILED, function onCreateFailed(evt) {\n        // \"queue exists\" should be noticed in the response handler and emit CREATE_SUCCESS.:\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      });\n  }\n\n  /**\n   *\n   * @param {solace.Message} message The message being accepted by the flow.\n   * @returns {Boolean} True if the message was accepted.\n   * @private\n   */\n  acceptMessage(message) {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    const messageID = message.getGuaranteedMessageId();\n    const idstr = messageID.toString();\n    const consumer = this._consumer;\n\n    if (!this._fsmDispatch) {\n      // We're disconnecting. Drop the message.\n      LOG_TRACE('Dropping message because this flow cannot acknowledge it');\n      consumer.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return false;\n    }\n    //Booby trap getDeliveryCount() on the message if the flow doesn't support it:\n    if (!consumer.deliveryCountSent) {\n      message.setDeliveryCount(-1);\n    }\n    // SMF flow suid can be updated via data message if there is a\n    // header parameter containing the suid. All subsequent data messages\n    // without suid must have the stored Flow suid set on data message.\n    //\n    // Update flow with message suid if and only if there was an initialized\n    // suid from the flow bind response.\n    // There is a legacy router case where suid are passed opaquely through the\n    // network of brokers on the message. In the case where a suid is present\n    // on a message without a suid on the bind response this indicates the suid\n    // is not an update to subsequent messages suid values. As the current broker\n    // connected does not support suid generation or assignment.\n    //\n    // Note a spooler unique id is only set if the message SMF\n    // contained the SpoolerUniqueId header parameter.\n    // See decode for details.\n    const messageSuid = message._getSpoolerUniqueId();\n    if (RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // set the message suid value to stored consumer suid value\n      message._setSpoolerUniqueId(consumer.spoolerUniqueId);\n    } else if (consumer.spoolerUniqueId !== undefined\n        && !RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId)) {\n      // otherwise update the consumer with new suid value if consumer suid was initialized\n      const consumerSuidStr = consumer.spoolerUniqueId.toString();\n      const msgSuidStr = messageSuid.toString();\n      LOG_DEBUG('Updating Consumer message spoolerUniqueId from ', consumerSuidStr,\n                ' to ', msgSuidStr);\n      consumer.spoolerUniqueId = messageSuid;\n    } else if ((consumer.spoolerUniqueId === undefined\n        || RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId))\n        && !RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // clear the message spooler unique id on flows without initial spooler\n      // unique id as rmid is not supported\n      message._setSpoolerUniqueId(RgmidFactory.INVALID_SUID);\n    }\n\n    const transportAcks = this._transportAcks;\n    const ackResult = transportAcks.tryReceive(messageID,\n                                               message.getGuaranteedPreviousMessageId());\n    const transportAckRequired = transportAcks.acksPending > this.maxPendingAcks;\n    switch (ackResult) {\n      case TransportAckResult.OK:\n        break; // carry on\n      case TransportAckResult.DUPLICATE:\n        consumer.incStat(StatType.RX_DISCARD_DUPLICATE);\n        // Two options here: could check membership in the ringbuffer,\n        // or could check whether the ID is less than ringbuffer.front().\n        // Untested assumption: arithmetic comparison on boxed Long at front()\n        // is more computationally expensive than native Map() lookup.\n        if (!this._applicationAcks.has(messageID) &&\n            !this._oldUnacked.has(idstr)) {\n          LOG_TRACE('Will application ack unknown duplicate ID', idstr);\n          const dupAckRanges = new Map();\n          dupAckRanges.set(MessageOutcome.ACCEPTED, [[messageID, messageID]]);\n          this._sendAck(dupAckRanges); // send ack for duplicates as ACCEPTED outcome (broker would use previous settlement outcome for message)\n        } else if (transportAckRequired) {\n          this._sendAcks(transportAckRequired);\n        } else {\n          // if we are receiving dups we should make sure we send\n          // and ack in case we don't receive any non duplicates\n          // and we don't receive enough duplicates to exceed\n          // maxPendingAcks.  Eventually we would but only after\n          // the  router retransmitted many times.\n          this._setTransportAckTimer();\n        }\n        return false;\n      case TransportAckResult.OUT_OF_ORDER:\n        consumer.incStat(StatType.RX_DISCARD_OUT_OF_ORDER);\n        return false;\n      default:\n        assert(false, 'Unhandled transport ack result', ackResult);\n        return false;\n    }\n\n    return this._applicationAcks.insert(messageID, (evicting) => {\n      let applicationAckRequired = false;\n      if (evicting) {\n        switch (evicting.state) {\n          case ApplicationAckState.UNACKED:\n            this._oldUnacked.add(evicting.key);\n            break;\n          case ApplicationAckState.ACKED_NOT_SENT:\n            applicationAckRequired = true;\n            break;\n          case ApplicationAckState.ACKED_SENT:\n            // OK to evict\n            break;\n          default:\n            assert(false,\n                   'Unhandled application ack state',\n                   ApplicationAckState.describe(evicting.state));\n        }\n      }\n\n      this._midDispatch = true;\n      this._messageDispatch.push(message);\n      this._midDispatch = false;\n\n      if (transportAckRequired || applicationAckRequired) {\n        LOG_TRACE('Need to send acks:',\n                  'transport', transportAckRequired,\n                  'application', applicationAckRequired);\n        this._sendAcks(transportAckRequired);\n      } else {\n        this._setTransportAckTimer();\n      }\n\n      return true;\n    });\n  }\n\n  applicationAck(messageId, isAutoAcked = false) {\n    // internally call the applicationSettle(messageId, MessageOutcome.ACCEPTED); \n    // since the implementations are the same\n    this.applicationSettle(messageId, MessageOutcome.ACCEPTED, isAutoAcked);\n  }\n\n  applicationSettle(messageId, messageOutcome = MessageOutcome.ACCEPTED, isAutoAcked = false) {\n    const { LOG_TRACE } = this.logger;\n\n    const idstr = messageId.toString();\n\n    // increment the correct stat for the outcome\n    switch(messageOutcome) {\n      case MessageOutcome.FAILED:\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.FAILED');\n        // count persistent and non-persistent settled failed msgs\n        this._consumer.incStat(StatType.RX_SETTLE_FAILED);\n        break;\n      // case MessageOutcome.RELEASED:\n      //   // no current support for RELEASED settlement Outcome\n      //   break;\n      case MessageOutcome.REJECTED:\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.REJECTED');\n        // count persistent and non-persistent settled rejected msgs\n        this._consumer.incStat(StatType.RX_SETTLE_REJECTED);\n        break;\n\n      case MessageOutcome.ACCEPTED:\n         // count persistent and non-persistent settled accepted msgs\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.ACCEPTED');\n        // count for manual calls on Message.acknowledge(); or Message.settle(outcome); methods\n        // so that we don't count for auto-Acks\n        if(!isAutoAcked) {\n          this._consumer.incStat(StatType.RX_SETTLE_ACCEPTED); // count persistent and non-persistent settled accepted msgs\n        }\n        // increment the Acked stat for calls to accept() and auto-acks\n        this._consumer.incStat(StatType.RX_ACKED); // count it as normal acknowledgement\n        break;\n    }\n\n    // Was the message old, and demoted to _oldUnacked?\n    if (this._oldUnacked.delete(idstr)) { // True if idstr was member\n      // It was old. Ack immediatesly.\n      LOG_TRACE('Application acking old message immediately');\n      const oldAckRanges = new Map();\n      oldAckRanges.set(messageOutcome, [[messageId, messageId]]);\n      this._sendAck(oldAckRanges); // send settlement outcome for message\n      return;\n    }\n\n    // We can't regress the ack_state this way; message.acknowledge() throws if called\n    // more than once.\n    this._applicationAcks.updateAckState(messageId, ApplicationAckState.ACKED_NOT_SENT, messageOutcome);\n    // if the message outcome is not ACCEPTED, then flush the buffer immediately\n    if(messageOutcome !== MessageOutcome.ACCEPTED) {\n      this._sendAcks(true); // send the accumulated Ack(s) and Nacks immediately\n    } else {\n      this._setTransportAckTimer();\n    }\n  }\n\n  getDestination() {\n    this._endpointEnsure();\n    return this._destination;\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return (\n      this.getActiveState(ConsumerStateNames.UNBOUND) ||\n      this.getActiveState(ConsumerStateNames.UNBOUND_AWAITING_FLOWOPEN)\n    );\n  }\n\n  requestStartDispatchUser() {\n    this._userDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  requestStartDispatchFSM() {\n    this._fsmDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  applyStartDispatch() {\n    if (this._userDispatch && this._fsmDispatch) {\n      this.log(`Starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n      this._messageDispatch.start();\n      this._localMaxWindowSize = this._localPreferredWindowSize;\n      this._sendAcks(true);\n    } else {\n      this.log(`Not starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    }\n  }\n\n  transitionToUnbound(eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Flow down, user disconnected?', consumer.userDisconnected);\n\n    this._clearPartitionGroupId(); // clear the partitionGroupId\n\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  transitionToUnboundFromUp(properties, eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Choice point for FLOW_UNBOUND in FlowUp state.');\n    // Always clear duplicate filter state on \"Replay started\"\n    // (no way to maintain it and drop the replayed messages as duplicates)\n    if (error && error instanceof OperationError && error.subcode) {\n      if (error.subcode === ErrorSubcode.REPLAY_STARTED) {\n        // \"this\" is the fsm.\n        this._transportAcks.reset();\n        this._applicationAcks.reset();\n      }\n    }\n\n    this._clearPartitionGroupId(); // clear the partitionGroupId\n\n    if (consumer.endpointErrorId &&\n      this._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n      LOG_TRACE(`Acking unsolicited unbind with endpointErrorId ${consumer.endpointErrorId}`);\n      const unbindAck = SMFLib.AdProtocolMessage.getUnbindAck(consumer._flowId,\n                                                              consumer.endpointErrorId,\n                                                              this._transportAcks.lastAcked);\n      this._sessionInterface.sendControl(unbindAck); // Must succeed or throw\n    }\n    if (properties.reconnectAttempts === -1 || properties.reconnectAttempts > 0) {\n      if (error && error instanceof OperationError && error.subcode) {\n        if (error.subcode === ErrorSubcode.REPLAY_STARTED ||\n          error.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n          LOG_TRACE(`Saving errorCausingReconnect: ${error}`);\n          this._errorCausingReconnect = error;\n          // Reconnecting state emits the RECONNECTING event.\n          return this.transitionTo(this.Reconnecting);\n        }\n      }\n    } //else: flow reconnect feature disabled, or not applicable.\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  requestStopDispatchUser() {\n    this._userDispatch = false;\n    this.log(`Stop dispatch user (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._messageDispatch.stop();\n  }\n\n  requestStopDispatchFSM() {\n    this._fsmDispatch = false;\n    this.log(`Stop dispatch FSM (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._sendAcks(true);\n  }\n\n  _clearTransportAckTimer() {\n    if (!this._transportAckTimer) return;\n\n    clearTimeout(this._transportAckTimer);\n    this._transportAckTimer = null;\n  }\n\n  _dispose() {\n    this._clearTransportAckTimer();\n    this._endpointClear();\n    this._destination = undefined;\n    this._unacked = null;\n    this._messageDispatch = null;\n    this._transportAcks = null;\n    this._consumer = null;\n    this._sessionInterface = null;\n  }\n\n  _endpointClear() {\n    this._endpoint = undefined;\n    this._subscription = undefined;\n  }\n\n  _endpointEnsure() {\n    if (this._endpoint) {\n      // The endpoint, destination and any possible topic subscription are generated\n      // at the same time. Use the presence of the endpoint to determine whether\n      // any of this has already been done.\n      return;\n    }\n\n    const sessionInterface = this._sessionInterface;\n    const properties = this._consumer._properties;\n    const { queueDescriptor } = properties;\n\n    let destination;\n    let endpoint;\n    let subscription;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      // The publish destination needs a prefix. Create a destination from\n      // the descriptor, then derive the endpoint name from that.\n      destination = sessionInterface.createDestinationFromDescriptor(queueDescriptor);\n\n      // The bind target is the queue name encoded as though a topic -- no prefix\n      // Use the offset information to build a bind target\n      endpoint = new Queue({\n        name:   destination.name,\n        type:   DestinationType.QUEUE,\n        offset: 0,\n        bytes:  destination.bytes.substr(destination.offset),\n      });\n\n      subscription = undefined;\n    } else {\n      // QueueType.TOPIC_ENDPOINT\n      endpoint = queueDescriptor.name\n        ? sessionInterface.createDestinationFromDescriptor(queueDescriptor)\n        : new Topic({ name: '\\0?', offset: 0, bytes: '\\0' });\n      subscription = properties.topicEndpointSubscription ||\n        sessionInterface.createTemporaryDestination(DestinationType.TOPIC);\n      destination = subscription;\n    }\n\n    // Using Object.assign to enforce the invariant that these three properties are set together\n    // or not at all.\n    Object.assign(this, {\n      _destination:  destination,\n      _endpoint:     endpoint,\n      _subscription: subscription,\n    });\n\n    // Update the properties object (if TTMP, we may modify it again)\n    properties.queueDescriptor = new QueueDescriptor({\n      name:    endpoint.name,\n      type:    queueDescriptor.type,\n      durable: queueDescriptor.durable,\n    });\n  }\n\n  _resetLocalConnectionState() {\n    Object.assign(this, {\n      _remoteWindowSize: 0,\n      _active:           undefined,\n      _fsmDispatch:      false,\n      _userDispatch:     true, // User flow is initially started\n    });\n  }\n\n  _clearPartitionGroupId() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Clear the consumer.partitionGroupId; Set it to undefined');\n    this._consumer.partitionGroupId = undefined;\n  }\n\n  _resetRemoteConnectionState() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Initializing transport acks');\n    this._transportAcks = new TransportAcks();\n\n    LOG_TRACE('Initializing application acks');\n    this._applicationAcks = new ApplicationAckRingBuffer(RING_BUFFER_SIZE);\n    this._oldUnacked = new Set();\n\n    LOG_TRACE('Initializing endpointErrorId');\n    this._consumer.endpointErrorId = undefined;\n\n    LOG_TRACE('Initializing partitionGroupId');\n    this._consumer.partitionGroupId = undefined;\n  }\n\n  /**\n   * Sends a single ack.\n   *\n   * @param {Map.<Array.<ackpair>>} applicationAcks The application ack ranges to send\n   * @memberof ConsumerFSM\n   * @private\n   */\n  _sendAck(applicationAcks) {\n    const transportAck = SMFLib.AdProtocolMessage.getAck(\n      this._consumer.flowId,\n      this._transportAcks.lastReceived,\n      this.windowSize,\n      applicationAcks);\n    this._sessionInterface.sendControl(transportAck); // Must succeed or throw\n  }\n\n  /**\n   * Adds the current ack ranges to an accumulator. Call this for each applicationAck.\n   * When a range ends (we receive an unacked), or we are explictly flushing\n   * (applicationAck === null), we convert the accumulator to acks, send them, update state,\n   * and reset accumulators.\n   *\n   * This should be called at least once with the last invocation having ackRange = null.\n   * This invokes the flush path, which is necessary if any ranges were in progress,\n   * and this is the only path that repects the forceTransportAck flag.\n   *\n   * @param {Object} acksPendingState State associated with this activity\n   * @param {ApplicationAck} applicationAck The ack to process for ack ranges.\n   *    If `null`, any pending acks are flushed and a transport ack is sent, if\n   *    required.\n   * @private\n   */\n  _addAckToRanges(acksPendingState, applicationAck = null) {\n    // they will hold an Array of Arrays for each supported settlement outcomes (i.e. indexes -> 0,1,2,3)\n    const currentRange = acksPendingState.currentRange;\n    const ackRanges = acksPendingState.ackRanges;\n\n    // All message settlement outcomes\n    const allMessageOutcomes = MessageOutcome.values;\n\n    const currentRangeLength = currentRange.length;\n    if (applicationAck && applicationAck.state !== ApplicationAckState.UNACKED) {\n      // check for the type of settlement outcome and push if same as aggregation group\n      if(\n        currentRangeLength === 0 ||\n        ((currentRangeLength > 0)\n        && currentRange[currentRangeLength - 1].settlementOutcome === applicationAck.settlementOutcome)\n      ) {\n        currentRange.push(applicationAck);\n        return; // Wait for end of range or flush\n      }\n      // if settlement outcomes were flushed and applicationAck still remaining, start another aggregation group\n      else if(\n        ((currentRangeLength > 0)\n        && currentRange[currentRangeLength - 1].settlementOutcome !== applicationAck.settlementOutcome)\n      ) {\n        const rangeOutcome = currentRange[currentRangeLength - 1].settlementOutcome;\n        ackRanges[rangeOutcome].push(currentRange); // flush the range since we detect a change in outcomes\n\n        acksPendingState.currentRange = []; // Clear the accumulators for this range.\n        acksPendingState.currentRange.push(applicationAck); // push the detected change\n        return; // Wait for end of range or flush\n      }\n    }\n\n    // We received an UNACKED or a null ack (flush). Complete this range for each of the settlement outcomes.\n    if (currentRangeLength) {\n      const rangeOutcome = currentRange[currentRangeLength - 1].settlementOutcome;\n      ackRanges[rangeOutcome].push(currentRange);\n    }\n\n    // If we're flushing or we've hit the protocol limit for ranges in a single ack,\n    // we send ack messages, update ack states and clear the accumulator.\n    // This condition will be true at least once (must flush at the end).\n\n    // aggregate the total length of the ack/nack ranges\n    let totalRangeLen  = 0;\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      totalRangeLen += ackRanges[allMessageOutcomes[i]].length;\n    }\n\n    if (applicationAck === null || (totalRangeLen === SMFLib.AdProtocolMessage.MAX_CLIENT_ACK_RANGES)) {\n      // Reduce each range for each of the settlement outcomes to a first and last ID.\n      const bareRanges = new Map(); // ackRanges.map(range => [range[0].id, range[range.length - 1].id]);\n      let hasAnyBareRanges = false;\n\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        // check for value and only put real values into map\n        if(ackRanges[allMessageOutcomes[i]].length > 0) {\n          bareRanges.set(allMessageOutcomes[i], ackRanges[allMessageOutcomes[i]].map(\n            range => [range[0].id, range[range.length - 1].id]\n          ));\n          // we have written at least one outcome ack/nack range into the map\n          hasAnyBareRanges = true;\n        }\n      }\n\n      if (hasAnyBareRanges || acksPendingState.forceTransportAck) {\n        // We send the ranges. This could throw.\n        const { LOG_TRACE } = this.logger;\n\n        this._sendAck(bareRanges); // now contains a Map of Arrays to pass settlement outcomes to Broker\n\n        // expectation is only ONE NACK before we flush the (N)acks in the RingBuffer to the broker\n        const failedBareRanges = bareRanges.get(MessageOutcome.FAILED);\n        const rejectedBareRanges = bareRanges.get(MessageOutcome.REJECTED);\n\n        // Warning: this log statement reduces debug performance by about 25%!\n        LOG_TRACE(\n          'Sent ack: ',\n          `Transport ack: ${this._transportAcks.lastReceived}`,\n          `Application acks(ACCEPTED): ${bareRanges.has(MessageOutcome.ACCEPTED)\n            ? bareRanges.get(MessageOutcome.ACCEPTED).map(g => `[${g[0]}..${g[1]}]`)\n            : '[]'}\\n`,\n          `Application Nacks(FAILED): ${bareRanges.has(MessageOutcome.FAILED)\n            ? `[${failedBareRanges[0][0]}..${failedBareRanges[0][1]}]`\n            : '[]'}\\n`,\n          `Application Nacks(REJECTED): ${bareRanges.has(MessageOutcome.REJECTED)\n            ? `[${rejectedBareRanges[0][0]}..${rejectedBareRanges[0][1]}]`\n            : '[]'}`\n        );\n        // If the intent was to force a transport ack, that condition is fulfilled.\n        this._transportAcks.setAcked();\n        acksPendingState.forceTransportAck = false;\n      }\n\n      // Since the range send succeeded, update the ack states.\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        ackRanges[allMessageOutcomes[i]].forEach((ackRange) => {\n          ackRange.forEach((ack) => {\n            if (ack.state !== ApplicationAckState.ACKED_SENT) {\n              try {\n                this._applicationAcks.updateAckState(ack.id,\n                                                     ApplicationAckState.ACKED_SENT);\n              } catch (e) {\n                const { LOG_ERROR } = this.logger;\n                LOG_ERROR(`Marking ack ${ack.id} as sent failed: ${e}`);\n              }\n            }\n          });\n        });\n      }\n\n      // Clear the main accumulators since it has hit the wire.\n      acksPendingState.ackRanges = [];\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        acksPendingState.ackRanges[allMessageOutcomes[i]] = [];\n      }\n    }\n    // Clear the accumulators for this range.\n    acksPendingState.currentRange = [];\n  }\n\n  /**\n   * Sends acknowledgements, along with a window update for this flow.\n   *\n   * @param {Boolean} forceTransportAck `true` sends transport ack even if no acks pending\n   * @private\n   */\n  _sendAcks(forceTransportAck = false) {\n    this._clearTransportAckTimer();\n\n    const applicationAcks = this._applicationAcks;\n    const transportAcks = this._transportAcks;\n    // All message settlement outcomes\n    const allMessageOutcomes = MessageOutcome.values;\n\n    // This state is temporary and shared with the ack generating function.\n    const acksPendingState = {\n      forceTransportAck: forceTransportAck || (transportAcks.acksPending > 0),\n      ackRanges:         [], // holds an Array of Arrays for each supported settlement outcomes (i.e. indexes -> 0,1,2,3)\n      currentRange:      [], // holds an Array for each supported settlement outcomes per aggregation (i.e. indexes -> 0,1,2,3)\n    };\n\n    // initialize the ackRanges with Array of Arrays\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      acksPendingState.ackRanges[allMessageOutcomes[i]] = [];\n    }\n\n    // If the first ringbuffer ack state is acked and there are no unacked before this,\n    // we can create an ack range that includes zero.\n    // If the first ringbuffer ack state is unacked, we can say nothing about the\n    // range before the first acked ID in the ringbuffer.\n    const front = this._applicationAcks.front();\n    if (this._oldUnacked.size === 0 && front && front.state !== ApplicationAckState.UNACKED) {\n      // State is acked_sent so we don't try to update the ring buffer.\n      this._addAckToRanges(acksPendingState, ZERO_APP_ACK);\n      // We know that front will be added to this range by the iteration.\n    }\n\n    // Build ack ranges using the accumulator\n    applicationAcks.forEach(ack => this._addAckToRanges(acksPendingState, ack));\n    // Flush the last pending ack range.\n    this._addAckToRanges(acksPendingState);\n\n    // On successful exit, we've sent and cleared all accumulators, and we've sent\n    // a transport ack if we were supposed to do that.\n    assert(acksPendingState.forceTransportAck === false);\n    assert(acksPendingState.currentRange.length === 0);\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      assert(acksPendingState.ackRanges[allMessageOutcomes[i]].length === 0);\n    }\n  }\n\n  _setTransportAckTimer() {\n    if (this._transportAckTimer) return;\n    if (this._consumer.disposed) return;\n    this._transportAckTimer = setTimeout(\n      () => this._sendAcks(true),\n      this._acknowledgeTimeoutInMsecs\n    );\n  }\n\n  get maxWindowSize() {\n    return Math.min(this._localMaxWindowSize,\n                    this._remoteWindowSize || Number.POSITIVE_INFINITY);\n  }\n\n  get windowSize() {\n    return this.maxWindowSize - this._messageDispatch.length;\n  }\n\n  get maxPendingAcks() {\n    return this.windowSize * this._acknowledgeThreshold / 100.0;\n  }\n\n  get hasAutoAckSupport() {\n    return this._hasAutoAckSupport;\n  }\n\n}\n\nmodule.exports.ConsumerFSM = ConsumerFSM;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Connection scheme types referenced by {@link solace.SessionProperties#transportProtocol},\n * {@link solace.SessionProperties#webTransportProtocolList} (browser only), and\n * {@link solace.SessionProperties#transportProtocolInUse}.\n *\n * @target browser\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst TransportProtocol = {\n\n  /**\n   * A COMET model that uses base64 payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BASE64: 'HTTP_BASE64',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY: 'HTTP_BINARY',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses use Chunked Transfer-Encoding\n   * to stream data from the Solace Message Router to the client without needing to terminate the\n   * HTTP response.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY_STREAMING: 'HTTP_BINARY_STREAMING',\n\n  /**\n   * A WebSocket communication channel uses binary payload encoding and provides full-duplex\n   * communication between the client and the Solace Message Router over a single TCP connection.\n   *\n   * This is the preferred protocol to use if all networking infrastructure betweed the application\n   * and the Solace Message router support WebSockets. If this is not the case, it may be necessary\n   * to use one of the HTTP protocols that use the COMET model of messaging.\n   *\n   * This transport protocol supports Guaranteed Messaging.\n   */\n  WS_BINARY: 'WS_BINARY',\n\n};\n\nmodule.exports.TransportProtocol = Enum.new(TransportProtocol);\n","// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n\nfunction concatFrom(list, from, length) {\n  const buffer = BufferImpl.allocUnsafe(length);\n  let pos = 0;\n  let i;\n  const buf0 = list[0];\n  pos += buf0.copy(buffer, 0, from, buf0.length);\n  for (i = 1; i < list.length && pos < length; i++) {\n    const buf = list[i];\n    pos += buf.copy(buffer, pos, 0, buf.length);\n  }\n  return buffer;\n}\n\n\nfunction readUInt32BEFrag(bufList, listOffsetParam, byteIndexParam) {\n  let listOffset = listOffsetParam;\n  let byteIndex = byteIndexParam;\n  const bytes = []; // the 4 bytes\n  let i = 0;\n  for (i = 0; i < 4; i++) {\n    while (bufList[listOffset].length <= byteIndex) {\n      byteIndex -= bufList[listOffset].length;\n      listOffset++;\n      if (listOffset >= bufList.length) { return null; } // should not happen.\n    }\n    bytes[i] = bufList[listOffset].readUInt8(byteIndex);\n    byteIndex++;\n  }\n  // shift the bytes into a 32 bit number, BE.\n  return (bytes[0] << 24) + (bytes[1] << 16) + (bytes[2] << 8) + bytes[3];\n}\n\n/**\n * Simplified FIFO of buffers.\n * Holds transport buffers without copying, allows 12 byte peeks for header and length detection.\n * For pops either a slice is returned if possible,\n * or a copy if the message spans transport buffers.\n * Pushes are refused when over capacity.\n * @internal\n */\nclass BufferQueue {\n  constructor(maxSize) {\n    let _queue = [];\n    const _maxSize = maxSize;\n    let _size = 0;\n    let _offset = 0;\n\n    /**\n     * Creates a slice (view) of the buffer with the given size. Conceptually.\n     * Since slicing is expensive, it just retruns the raw transport buffer with the offset.\n     * Buffer - offset pair if possible, copy (with zero offset) if beyond first buffer boundary.\n     *\n     *\n     * @param {Number} size Bytes to view\n     * @returns {?Array} Buffer - offset pair if there was enough data to peek, or `null`\n     */\n    this.peekView = function peekView(size) {\n      const result = [];\n      if (_queue.length < 1 || size > _size) { return null; }\n      if (_queue[0].length >= size + _offset) {\n        result[0] = _queue[0];\n        result[1] = _offset;\n      } else {  //over buffer boundary, must copy.\n        result[0] = concatFrom(_queue, _offset, size);\n        result[1] = 0;\n      }\n      return result;\n    };\n\n    this.readUInt8 = function readUInt8(index) {\n      if (index >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex < _queue[0].length) {\n        return _queue[0].readUInt8(oIndex);\n      } // else\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      return _queue[i].readUInt8(oIndex - pos);\n    };\n\n    this.readUInt32BE = function readUInt32BE(index) {\n      if (index + 3 >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex + 3 < _queue[0].length) {\n        return _queue[0].readUInt32BE(oIndex);\n      } // else\n      if (oIndex < _queue[0].length) {\n        return readUInt32BEFrag(_queue, 0, oIndex);\n      }\n\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      if (oIndex - pos + 3 < _queue[i].length) {\n        return _queue[i].readUInt32BE(oIndex - pos);\n      } // else\n      return readUInt32BEFrag(_queue, i, oIndex - pos);\n    };\n\n    /**\n     * Adds a buffer to the queue.\n     * Fails if maxsize is exeeded.\n     *\n     * @param {Buffer} dataIn Source data\n     * @returns {Boolean} `true` if the data fits.\n     */\n    this.put = function put(dataIn) {\n      const buffer = BufferQueue.adaptData(dataIn);\n      const size = buffer.length;\n      if (size === 0) { return true; }\n\n      if (_size + size >= _maxSize) return false;\n\n      _queue.push(buffer);\n      _size += size;\n\n      return true;\n    };\n\n    this.advance = function advance(size) {\n      if (size < 1) {\n        return;\n      }\n      if (size >= _size) {\n        this.reset();\n        return;\n      }\n      let done = 0;\n      while (done < size) {\n        if (_queue[0].length - _offset <= size - done) { // drop first buffer entirely\n          const chunk = _queue[0].length - _offset;\n          _queue.shift();\n          done += chunk;\n          _size -= chunk; // invariants are good.\n          _offset = 0;\n        } else { // cut into first buffer, virtually, with _offset\n          _offset += (size - done);\n          _size -= (size - done);\n          break;\n        }\n      }\n    };\n\n    this.reset = function reset() {\n      _queue = [];\n      _size = 0;\n      _offset = 0;\n    };\n\n    this.remaining = function remaining() {\n      return _size;\n    };\n\n    this.isEmpty = function isEmpty() {\n      return _size === 0;\n    };\n  }\n\n  /**\n   * Adapt incoming data to the format expected by this.put().\n   * @param {*} data The data to adapt.\n   * @returns {Buffer} The adapted data.\n   */\n  static adaptData(data) {\n    if (data instanceof BufferImpl) return data;\n    return BufferImpl.from(data);\n  }\n}\n\nmodule.exports.BufferQueue = BufferQueue;\nmodule.exports.concatFrom = concatFrom;\n","module.exports = require(\"constants\");","const Long = require('long');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTUnsupportedValueError } = require('../sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('../sdt-value-error-subcodes');\n\nconst { create: createField } = SDTField;\n\nconst ParseInteger = {};\n\n// Util: decode 1, 2, 3, 4 byte UINT.\nParseInteger.autoDecodeVarLengthNumber = function autoDecodeVarLengthNumber(dataBuf, pos, len) {\n  if ([1, 2, 3, 4].includes(len)) {\n    return dataBuf.readUIntBE(pos, len);\n  }\n  return false;\n};\n\n// Parse an integer SDT Field: [U]INT 8, 16, 32, 64.\nParseInteger.parseIntegerField = function parseIntegerField(isSigned, dataBuf, pos, len) {\n  let val = 0;\n\n  switch (len) {\n    case 1:\n      if (isSigned) {\n        val = dataBuf.readInt8(pos);\n        return createField(SDTFieldType.INT8, val);\n      } // else unsigned:\n      val = dataBuf.readUInt8(pos);\n      return createField(SDTFieldType.UINT8, val);\n\n    case 2:\n      if (isSigned) {\n        val = dataBuf.readInt16BE(pos);\n        return createField(SDTFieldType.INT16, val);\n      } // else signed:\n      val = dataBuf.readUInt16BE(pos);\n      return createField(SDTFieldType.UINT16, val);\n\n    case 4:\n      if (isSigned) {\n        val = dataBuf.readInt32BE(pos);\n        return createField(SDTFieldType.INT32, val);\n      } // else signed:\n      val = dataBuf.readUInt32BE(pos);\n      return createField(SDTFieldType.UINT32, val);\n\n    case 8:\n      {\n        let error = null;\n        const longValue =\n          Long.fromBits(dataBuf.readUInt32BE(pos + 4), dataBuf.readUInt32BE(pos), !isSigned);\n        if (longValue.getNumBitsAbs() > 48) {\n          error = new SDTUnsupportedValueError('Value is not supported',\n            SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE,\n            dataBuf.toString('latin1', pos, len));\n        }\n        val = longValue.toNumber();\n        const field = createField(isSigned ? SDTFieldType.INT64 : SDTFieldType.UINT64, val);\n        if (error) {\n          field.setError(error);\n        }\n\n        return field;\n      }\n\n    default:\n      return null;\n  }\n};\n\nmodule.exports.ParseInteger = ParseInteger;\n","module.exports = require(\"net\");","const { APIProperties } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst DEFAULTS = {\n  permissions:          undefined,\n  accessType:           undefined,\n  quotaMB:              undefined,\n  maxMessageSize:       undefined,\n  respectsTTL:          undefined,\n  discardBehavior:      undefined,\n  maxMessageRedelivery: undefined,\n};\n\n/**\n * @classdesc\n * Represents a queue properties object. May be passed in to\n * {@link solace.Session#createMessageConsumer} when creating a\n * {@link solace.MessageConsumer} object, or to {@link solace.Session#provisionEndpoint} .\n * Upon creation of a queue or TE, undefined\n * properties are set to default values chosen by the router.\n *\n * @memberof solace\n */\nclass QueueProperties extends APIProperties {\n\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Gets/sets permissions for this queue.\n   *\n   * When creating a temporary queue, these are the permissions that apply\n   * to all other users; the user creating the temporary queue is always\n   * granted DELETE permissions.\n   *\n   * @type {solace.QueuePermissions}\n   * @default undefined\n   */\n  get permissions() {\n    return this._permissions;\n  }\n  set permissions(newValue) {\n    this._permissions = newValue;\n  }\n\n  /**\n   * Gets/sets the access type for this queue.\n   *\n   * This parameter must NOT be set when creating a temporary queue via\n   * {@link solace.Session#createMessageConsumer}. Such a queue has its\n   * access type determined by the remote message router.\n   *\n   * @type {solace.QueueAccessType}\n   * @default undefined\n   */\n  get accessType() {\n    return this._accessType || DEFAULTS.accessType;\n  }\n  set accessType(newValue) {\n    this._accessType = newValue;\n  }\n\n  /**\n   * Gets/sets the quota, in megabytes, for this queue.\n   *  * The allowed values are (0 <= quotaMB) || undefined.\n   *  * A value of 0 configures the queue to act as a Last-Value-Queue (LVQ), where the router\n   *    enforces a Queue depth of one, and only the most current message is spooled by the\n   *    queue. When a new message is received, the current queued message is first\n   *    automatically deleted from the queue, then the new message is spooled.\n   * @type {?Number}\n   * @default undefined\n   */\n  get quotaMB() {\n    return this._quotaMB;\n  }\n  set quotaMB(newValue) {\n    this._quotaMB = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum message size, in bytes, for any single message spooled on this queue.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageSize() {\n    return this._maxMessageSize;\n  }\n  set maxMessageSize(newValue) {\n    this._maxMessageSize = newValue;\n  }\n\n  /**\n   * Gets/sets whether this queue respects Time To Live on messages.\n   * @type {Boolean}\n   * @default false\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  set respectsTTL(newValue) {\n    this._respectsTTL = newValue;\n  }\n\n  /**\n   * Gets/sets the discard behavior for this queue.\n   * @type {solace.QueueDiscardBehavior}\n   * @default {solace.QueueDiscardBehavior.NOTIFY_SENDER_OFF}\n   */\n  get discardBehavior() {\n    return this._discardBehavior;\n  }\n  set discardBehavior(newValue) {\n    this._discardBehavior = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum number of times to attempt message redelivery for this queue.\n   *  * The valid range is 0 <= maxMessageRedelivery <= 255\n   *  * A value of 0 means retry forever.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageRedelivery() {\n    return this._maxMessageRedelivery;\n  }\n  set maxMessageRedelivery(newValue) {\n    this._maxMessageRedelivery = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'permissions':     QueuePermissions.describe(this.permissions),\n      'accessType':      QueueAccessType.describe(this.accessType),\n      'quotaMB':         this.quotaMB,\n      'maxMessageSize':  this.maxMessageSize,\n      'respectsTTL':     this.respectsTTL,\n      'discardBehavior': this.discardBehavior\n                            ? QueueDiscardBehavior.describe(this.discardBehavior)\n                            : undefined,\n      'maxMessageRedelivery': this.maxMessageRedelivery,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.QueueProperties = QueueProperties;\n","const { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('./lib/replayStartLocation');\nconst { ReplayStartLocationBeginning } = require('./lib/replayStartLocationBeginning');\nconst { ReplayStartLocationDate } = require('./lib/replayStartLocationDate');\nconst { SolclientFactory } = require('solclient-factory');\n\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\nmodule.exports.ReplayStartType = ReplayStartType;\n\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that all messages available\n * in the replay log should be retrieved.\n *\n *\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationBeginning\n */\nSolclientFactory.createReplayStartLocationBeginning = SolclientFactory.createFactory(() =>\n  new ReplayStartLocationBeginning()\n);\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the given Date should be retrieved.\n *\n * @param {Date} dateTime The Date object the represents the date and time of the replay\n * start location.  dateTime is always converted to UTC time if not already a UTC time.\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationDate\n */\nSolclientFactory.createReplayStartLocationDate = SolclientFactory.createFactory(dateTime =>\n  ReplayStartLocationDate.createReplayStartLocationDate(Parameter.isInstanceOf('date', dateTime, Date))\n);\n","// Coverity scanned is configured to run against the generated monolithic\n// solclient.js file (debug) version. On the loadbuild server BUILD_ENV.VERSION is\n// substituted and never null (it is null in developer workspace) so\n// coverity will complain that the \" || '0.0.0-source' \" is DEADCODE\n// coverity[dead_error_line]\nconst VERSION = BUILD_ENV.VERSION || '0.0.0-source';\n// Parse the date if provided. Was seeing NaN formatted dates in source mode, so add fallback\nconst DATE = BUILD_ENV.DATE\n  ? new Date(Date.parse(BUILD_ENV.DATE))\n  : new Date();\nconst MODE = BUILD_ENV.MODE_NAME;\n\n// These property names are all for export, so make sure they're not mangled\nconst TARGET = {\n  'name':    BUILD_ENV.TARGET_NAME,\n  'node':    BUILD_ENV.TARGET_NODE,\n  'browser': BUILD_ENV.TARGET_BROWSER,\n};\n\nconst FORMATTED_DATE = (() => {\n  const pad = n => (n < 10 ? `0${n}` : n);\n  const d = DATE;\n  const YYYY = d.getFullYear();\n  const MM = pad(d.getMonth() + 1);\n  const DD = pad(d.getDate());\n  const hh = pad(d.getHours());\n  const mm = pad(d.getMinutes());\n  return `${YYYY}/${MM}/${DD} ${hh}:${mm}`;\n})();\nconst SUMMARY = ['SolclientJS', BUILD_ENV.VERSION, MODE, FORMATTED_DATE].join(', ');\n\n/**\n * Returns the API version. Use version, date and mode properties for build details.\n * Use the summary property or the .toString() method to return a summary.\n * @static\n * @type {Object}\n * @namespace\n * @memberof solace\n */\nconst Version = {\n  /**\n   * The API version, as an informational string. The format of this string is subject to change.\n   * @type {String}\n   */\n  'version':       VERSION,\n  /**\n   * The API build date.\n   * @type {Date}\n   */\n  'date':          DATE,\n  /**\n   * The API build date, as a formatted string.\n   * The format of this date is:\n   * `YYYY-MM-DD hh:mm`\n   * where\n   *  * `YYYY` is the 4-digit year,\n   *  * `MM` is the 2-digit month   (01-12),\n   *  * `DD` is the 2-digit day     (01-31),\n   *  * `hh` is the 2-digit hour    (00-23),\n   *  * `mm` is the 2-digit minute  (00-59)\n   *\n   * @type {String}\n   */\n  'formattedDate': FORMATTED_DATE,\n  /**\n   * Information about the build target. This object is informational; its type, structure and\n   * content are subject to change.\n   * @type {Object}\n   */\n  'target':        TARGET,\n  /**\n   * The build mode. This may be one of 'debug' or 'release'. Other build modes may be added\n   * in the future.\n   * @type {String}\n   */\n  'mode':          MODE,\n  /**\n   * If `true`, this is an unoptimized debug build.\n   * @type {Boolean}\n   */\n  'debug':         BUILD_ENV.MODE_DEBUG,\n  /**\n   * If `true`, this is an optimized release build. Note that there may be multiple release\n   * builds in a distribution, with varying degrees of optimization.\n   * @type {Boolean}\n   */\n  'release':       BUILD_ENV.MODE_RELEASE,\n  /**\n   * An informational string summarizing the API name, version and build date.\n   * @type {String}\n   */\n  'summary':       SUMMARY,\n\n  toString() {\n    return SUMMARY;\n  },\n};\nmodule.exports.Version = Version;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates the behavior options when a message cannot be added to an endpoint\n * (for example, the maximum quota {@link solace.QueueProperties#quotaMB} was exceeded).\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueDiscardBehavior = {\n  /**\n   * @description Send the publisher a message reject notification.\n   * @type {String}\n   */\n  NOTIFY_SENDER_ON:  'NOTIFY_SENDER_ON',\n  /**\n   * @description Discard the message and acknowledge it.\n   * @type {String}\n   */\n  NOTIFY_SENDER_OFF: 'NOTIFY_SENDER_OFF',\n};\n\nmodule.exports.QueueDiscardBehavior = Enum.new(QueueDiscardBehavior);\n","const { Parameter: { isStringOrNothing } } = require('solclient-validate');\n\n/**\n * @classdesc\n * <b>This class abstracts baggage metadata used for distributed\n * message tracing with Solace messaging APIs types. \n * This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\n class Baggage {\n \n    /**\n     * Get the value of the baggage associated with the message.\n     * This method is for internal use only.\n     *\n     * @returns {?String} value of baggage associated with the message\n     * @internal\n     */\n    getBaggage() {\n        return this._baggage || null;\n    }\n \n    /**\n     * Sets the value of the baggage associated with this message\n     * This method is for internal use only.\n     *\n     * @param {?String} value The valid value of baggage associated with this  message\n     * @see {@link https://www.w3.org/TR/2022/WD-baggage-20220928|w3c baggage format specification}  \n     * @internal\n     */\n    setBaggage(value) {\n        this._setBaggage(isStringOrNothing('baggage', value));\n    }\n    _setBaggage(value) {\n        this._baggage = value;\n    }\n \n}\n\nmodule.exports.Baggage = Baggage;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the permissions applicable to a queue.\n *\n * The corresponding endpoint property is\n * {@link solace.QueueProperties#permissions}.\n *\n * The access controls:\n *  * the permissions for all other users of the queue, this only applies to\n *  non-durable queues {@link solace.QueueProperties#permissions};\n *  * for the current Message Consumer  on a queue or endpoint,\n *    {@link solace.MessageConsumer.permissions}\n *\n * For example, creating a temporary topic endpoint with MODIFY_TOPIC will allow\n * other users to modify the topic subscribed to that endpoint.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueuePermissions = {\n  /**\n   * @description No client other than the queue's owner may access the endpoint.\n   */\n  NONE:         'NONE',\n  /**\n   * @description Client may read messages but not consume them.\n   * @type {String}\n   */\n  READ_ONLY:    'READ_ONLY',\n  /**\n   * @description  Client may read and consume messages.\n   * @type {String}\n   */\n  CONSUME:      'CONSUME',\n  /**\n   * @description Client may read and consume messages, and modify topic(s) associated with the\n   * queue.\n   * @type {String}\n   */\n  MODIFY_TOPIC: 'MODIFY_TOPIC',\n  /**\n   * @description Client may read and consume messages, modify topic(s) associated with the\n   * queue, and delete the queue.\n   * @type {String}\n   */\n  DELETE:       'DELETE',\n};\n\nmodule.exports.QueuePermissions = Enum.new(QueuePermissions);\n","const cloneObj = require('./clone'); // using the modified local clone version\n\nconst CLONE_CIRCULAR = false; // If true, handles circular references safely.\nconst CLONE_DEPTH = 1; // Don't deep-clone nested values.\n\n/**\n * @memberof solace\n * @private\n */\nclass APIProperties {\n\n  /**\n   * Base class for all API properties structures. Provides the clone() method to\n   * make all properties cloneable.\n   * Creates an instance of APIProperties. Assigns properties from one or more\n   * objects in increasing priority order.\n   *\n   * @example\n   * super({ foo: 'defaultFoo', bar: 42 }, { foo: 'quux' }); // .foo == quux, .bar = 42\n   *\n   * @param {...any} options The properties sources to assign.\n   *\n   * @since 10.0.0\n   * @constructor\n   */\n  constructor(...options) {\n    Object.assign(this, ...options);\n  }\n\n  /**\n   * Can be overridden.  For instance sessionProperties\n   * overrides this to suppress printing the password.\n   * @returns {String} The string representation of this object\n   * @private\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  clone() {\n    return cloneObj(this, CLONE_CIRCULAR, CLONE_DEPTH);\n  }\n}\n\nmodule.exports.APIProperties = APIProperties;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst EncodeStream = {};\nEncodeStream.encodeStream = function encodeStream(sdtstream) {\n  const buf = [];\n  if (!(sdtstream instanceof SDTStreamContainer)) {\n    return null; // skip!\n  }\n  let sdtfield = null;\n  sdtstream.rewind();\n  while (sdtstream.hasNext()) {\n    sdtfield = sdtstream.getNext();\n    if (sdtfield) {\n      EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n    }\n  } // end iter over stream entries\n  sdtstream.rewind();\n  return buf.join('');\n};\n\nmodule.exports.EncodeStream = EncodeStream;\n","const HTTPLib = require('./http');\nconst { StateBase64 } = require('./state-base64');\nconst { StateBinary } = require('./state-binary');\nconst { StateStreamingAndBinary } = require('./state-streaming-and-binary');\nconst { StateWebSocketBinary } = require('./state-websocket-binary');\nconst { WebTransport } = require('./web-transport');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\nconst { HTTPConnection, HTTPTransportSession } = HTTPLib;\n\nmodule.exports.HTTPConnection = HTTPConnection;\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\nmodule.exports.StateBase64 = StateBase64;\nmodule.exports.StateBinary = StateBinary;\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\nmodule.exports.WebTransport = WebTransport;\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { LogImpl } = require('./log-impl');\n\nconst STUB = () => undefined;\n\nfunction generateLogHeader(levelStr) {\n  const date = new Date();\n  const levelStrPadding = ' '.repeat(6 - levelStr.length);\n  let YY = String(date.getFullYear());\n  let MM = String(date.getMonth() + 1);\n  let DD = String(date.getDate());\n  let hh = String(date.getHours());\n  let mm = String(date.getMinutes());\n  let ss = String(date.getSeconds());\n  let ms = String(date.getMilliseconds());\n\n  YY = '0'.repeat(4 - YY.length) + YY;\n  MM = MM.length < 2 ? `0${MM}` : MM;\n  DD = DD.length < 2 ? `0${DD}` : DD;\n  hh = hh.length < 2 ? `0${hh}` : hh;\n  mm = mm.length < 2 ? `0${mm}` : mm;\n  ss = ss.length < 2 ? `0${ss}` : ss;\n  ms = ms.length < 3 ? `0${ms}` : ms;\n  ms = ms.length < 3 ? `0${ms}` : ms; // twice: pad to 3\n\n  return [`${YY}-${MM}-${DD} ${hh}:${mm}:${ss}.${ms}`, `${levelStr}${levelStrPadding}`];\n}\n\n/**\n * @classdesc\n * A log implementation that uses the global or window console.\n *\n * This is the default log implementation used by the API if no logger was\n * supplied via {@link solace.SolclientFactoryProperties}.\n *\n * @memberof solace\n * @private\n */\nclass ConsoleLogImpl extends LogImpl {\n  /**\n   * @constructor\n   * @param {Object} [consoleIn] The console to which to apply this implementation. If\n   *  not specified, uses the global or window console.\n   */\n  constructor(consoleIn) {\n    /**\n     * Logs the given arguments at TRACE level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#trace\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _trace = STUB;\n\n    /**\n     * Logs the given arguments at DEBUG level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#debug\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _debug = STUB;\n\n    /**\n     * Logs the given arguments at INFO level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#info\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _info = STUB;\n\n    /**\n     * Logs the given arguments at WARN level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.warn\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#warn\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _warn = STUB;\n\n\n    /**\n     * Logs the given arguments at ERROR level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#error\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _error = STUB;\n\n    /**\n     * Logs the given arguments at FATAL level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#fatal\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _fatal = STUB;\n\n    const console = consoleIn || (\n      typeof window === 'undefined'\n        /* eslint-env node */ ? global\n        /* eslint-env browser */ : window\n      ).console;\n    /* eslint-env shared-node-browser */\n\n    if (console && (console.log || console.warn)) {\n      /* eslint-disable no-console */\n      // Where console.log is supported, it is preferred over console.debug\n      // https://developer.mozilla.org/en-US/docs/DOM/console\n      // console methods in IE9 are object, not function, unfortunately\n      //\n      // Also, console.trace outputs a stack trace on some platforms.  So we\n      // use the same underlying logger as debug for trace to avoid the\n      // excessive verbosity that would result.\n      if (console.log && console.log !== undefined) {\n        _trace = Function.prototype.bind.call(console.log, console);\n        _debug = Function.prototype.bind.call(console.log, console);\n      } else if (console.debug && typeof console.debug === 'function') {\n        _trace = Function.prototype.bind.call(console.debug, console);\n        _debug = Function.prototype.bind.call(console.debug, console);\n      }\n\n      // Where console.info exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.info && console.info !== undefined) {\n        _info = Function.prototype.bind.call(console.info, console);\n      } else {\n        _info = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.warn exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.warn && console.warn !== undefined) {\n        _warn = Function.prototype.bind.call(console.warn, console);\n      } else {\n        _warn = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.error exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      //\n      // console.fatal is not present in any known console implementation. Use\n      // console.error or console.log.\n      if (console.error && console.error !== undefined) {\n        _error = Function.prototype.bind.call(console.error, console);\n        _fatal = Function.prototype.bind.call(console.error, console);\n      } else {\n        _error = Function.prototype.bind.call(console.log, console);\n        _fatal = Function.prototype.bind.call(console.log, console);\n      }\n\n      /* eslint-enable no-console */\n    } // else no console implementation was found, so the default (stub) is used for each level.\n\n    super((...args) => { _trace(...generateLogHeader('TRACE'), ...args); },\n          (...args) => { _debug(...generateLogHeader('DEBUG'), ...args); },\n          (...args) => { _info(...generateLogHeader('INFO'), ...args); },\n          (...args) => { _warn(...generateLogHeader('WARN'), ...args); },\n          (...args) => { _error(...generateLogHeader('ERROR'), ...args); },\n          (...args) => { _fatal(...generateLogHeader('FATAL'), ...args); });\n  }\n\n\n}\n\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\n","const DestinationLib = require('solclient-destination');\nconst MessageLib = require('solclient-message');\nconst SolclientFactoryLib = require('solclient-factory');\nconst { assert } = require('solclient-eskit');\nconst { CacheSession,\n        CACHE_REQUEST_PREFIX } = require('solclient-solcache-session');\nconst { CapabilityType } = require('./capability-types');\nconst { Check,\n        Parameter } = require('solclient-validate');\nconst { DefaultCapabilities } = require('./default-capabilities');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError,\n        NotImplementedError,\n        RequestEventCode } = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { GlobalContext } = require('./global-context');\nconst { HostList } = require('./host-list');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageRxCBInfo } = require('./message-rx-cb-info');\nconst { MutableSessionProperty } = require('./mutable-session-properties');\nconst { OutstandingDataRequest } = require('./outstanding-data-request');\nconst { P2PUtil } = require('./p2p-util');\nconst { QueueDescriptor, QueueProperties, QueuePropertiesValidator,\n        QueueType, explainInvalidEndpointName } = require('solclient-queue');\nconst { SDTField,\n        SDTFieldType } = require('solclient-sdt');\nconst { SessionEvent } = require('./session-event');\nconst { ProvisionEvent } = require('./provision-event');\nconst { SessionEventCBInfo } = require('./session-event-cb-info');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSM } = require('./session-fsm');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionOperation } = require('./session-operations');\nconst { SessionProperties } = require('./session-properties');\nconst { SessionPropertiesValidator } = require('./session-properties-validator');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionState } = require('./session-states');\nconst { SessionStateName } = require('./session-state-names');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { TransportCapabilities,\n        TransportProtocol,\n        TransportReturnCode } = require('solclient-transport');\n\nfunction transportProtocolDefaultList() {\n  const { ProfileBinding } = SolclientFactoryLib;\n\n  if (BUILD_ENV.TARGET_NODE) {\n    return [TransportProtocol.WS_BINARY];\n  }\n\n  const result = [];\n  if (TransportCapabilities.web.webSocket()) {\n    result.push(TransportProtocol.WS_BINARY);\n  }\n  const profile = ProfileBinding.value;\n  if (profile.cometEnabled) {\n    if (TransportCapabilities.web.xhrBinary()) {\n      if (TransportCapabilities.web.streaming()) {\n        result.push(TransportProtocol.HTTP_BINARY_STREAMING);\n      }\n      result.push(TransportProtocol.HTTP_BINARY);\n    }\n    result.push(TransportProtocol.HTTP_BASE64);\n  }\n  return result;\n}\n\nfunction isValidADTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol !== TransportProtocol.HTTP_BINARY_STREAMING &&\n          transportProtocol !== TransportProtocol.HTTP_BINARY &&\n          transportProtocol !== TransportProtocol.HTTP_BASE64));\n}\n\nfunction formatEventName(eventName) {\n  return `SessionEventCode.${SessionEventCode.describe(eventName)}`;\n}\n\n/**\n * @private\n */\nconst SOLCLIENT_REQUEST_PREFIX = '#REQ';\n\n/**\n * A callback that returns replies to requests sent via {@link solace.Session#sendRequest}.\n * The replyReceivedCallback <b>must</b> be provided to the API as the third argument of\n * {@link solace.Session#sendRequest}.\n * @callback\n * @function\n * @name solace.Session.replyReceivedCallback\n * @param {solace.Session} session The session object that received the reply.\n * @param {solace.Message} message The reply message received.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * A callback that returns errors associated with requests sent via\n * {@link solace.Session#sendRequest}. The requestFailedCallback <b>must</b> be\n * provided to the API as the fourth argument of\n * {@link solace.Session#sendRequest}\n * @callback\n * @function\n * @name solace.Session.requestFailedCallback\n * @param {solace.Session} session The session object associated with the event.\n * @param {solace.RequestError} error The event associated with the failure.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n *\n * Represents a client Session.\n *\n * Session provides these major functions:\n *  * Subscriber control, such as updating subscriptions;\n *  * Publishes both Direct and Guaranteed Messages to the router;\n *  * Receives direct messages from the router.\n *\n * The Session object is an\n * {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}, and will emit\n * events with event names from {@link solace.SessionEventCode} when Session events occur.\n * Each session event can be subscribed using {@link solace.Session#on} with the corresponding\n * {@link solace.SessionEventCode}. If any of the registered event listeners throw an exception,\n * the exception will be emitted on the 'error' event.\n *\n * @fires solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n * @fires solace.SessionEventCode#CAN_ACCEPT_DATA\n * @fires solace.SessionEventCode#CONNECT_FAILED_ERROR\n * @fires solace.SessionEventCode#DISCONNECTED\n * @fires solace.SessionEventCode#DOWN_ERROR\n * @fires solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n * @fires solace.SessionEventCode#MESSAGE\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_OK\n * @fires solace.SessionEventCode#RECONNECTED_NOTICE\n * @fires solace.SessionEventCode#RECONNECTING_NOTICE\n * @fires solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n * @fires solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n * @fires solace.SessionEventCode#SUBSCRIPTION_ERROR\n * @fires solace.SessionEventCode#SUBSCRIPTION_OK\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n * @fires solace.SessionEventCode#UP_NOTICE\n * @fires solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n * @fires solace.SessionEventCode#PROVISION_OK\n * @fires solace.SessionEventCode#PROVISION_ERROR\n *\n * @hideconstructor\n * @memberof solace\n */\nclass Session extends EventEmitter {\n\n  /*\n   * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n   *\n   * @param {solace.SessionProperties} properties Properties to use for constructing\n   *        the session.\n   * @param {solace.MessageRxCBInfo} [messageCallback] Message callback info. The application can\n   *    also receive message events via\n   *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n   * @param {solace.SessionEventCBInfo} [eventCallback] Event callback info. The application can\n   *    also receive session events via\n   *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n   *\n   * @throws {solace.OperationError} if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * @private\n   * @constructor\n   */\n  constructor(properties, messageCallback, eventCallback) {\n    super({\n      emits:  SessionEventCode.values,\n      direct: SessionEventCode.MESSAGE,\n      formatEventName,\n    });\n    const self = this;\n    this.logger = new LogFormatter();\n    this.logger.formatter = function formatter(...args) {\n      return [`[session=${self._sessionFSM ? self._sessionFSM.sessionIdHex : '(N/A)'}]`, ...args];\n    };\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session constructor called.');\n    if ((properties !== undefined) && (properties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Incoming session properties:\\n', properties);\n    }\n\n    // Default error handler prints the exception:\n    this.on('error', (error) => {\n      const { LOG_ERROR } = self.logger;\n      LOG_ERROR(error.info.error);\n    });\n\n    const sessionProperties = new SessionProperties(properties);\n    {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Eventual session properties:\\n', sessionProperties);\n    }\n    // Callbacks to client application.\n    // Get/set for these is private, so they can only be changed in-API (e.g. by CacheSession)\n    // The user-supplied one cannot be changed.\n    // The configuration of the exceptions generated by these needs to match EventEmitter, so that\n    // the handleGenericErrorEvent above can behave consistently\n    this._messageCallbackInfo = this.wrapMessageCallback(messageCallback);\n    this._eventCallbackInfo = this.wrapEventCallback(eventCallback);\n\n    // client name generation is applicable\n    if (Check.empty(sessionProperties.clientName)) {\n      // Auto-gen clientName\n      sessionProperties.clientName = GlobalContext.GenerateClientName();\n    }\n\n    // generate userIdentification\n    sessionProperties._setUserIdentification(GlobalContext.GenerateUserIdentification());\n\n    // client description generation is applicable\n    if (Check.empty(sessionProperties.applicationDescription)) {\n      // Auto-gen applicationDescription\n      sessionProperties.applicationDescription = GlobalContext.GenerateClientDescription();\n    }\n\n    // Set webTransportProtocolList after validation so we're not basing it on an\n    // invalid transport selection...so we're not checking transportProtocol/\n    // webTransportProtocolList except for parameter conflict.\n\n    // Now that we have touched up the properties as much as possible, validate\n    // This also validates the subordinate MessagePublisherProperties\n    SessionPropertiesValidator.validate(sessionProperties);\n\n    // We want a protocol list, but historically we also accept a single protocol.\n    // Create a web transport protocol list from the transport protocol\n    // option if that is all that was set. (If both were set, we failed validation)\n    if (Check.nothing(sessionProperties.webTransportProtocolList)) {\n      // Create a fallback list that starts with the selected protocol.\n      // If the selected protocol is not in the fallback list, it is not\n      // a valid protocol for the platform so return an empty list.\n      const selectedProtocol = sessionProperties.transportProtocol;\n      const defaultList = transportProtocolDefaultList();\n      const sliceIndex = selectedProtocol ? defaultList.indexOf(selectedProtocol) : 0;\n      if (sliceIndex < 0) {\n        // The user explicitly selected a protocol that wasn't valid\n        throw new OperationError(`Selected transport protocol ${\n                                 TransportProtocol.describe(selectedProtocol)\n                                 } is disabled or invalid for this platform`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      // Slice index is valid\n      sessionProperties.webTransportProtocolList = defaultList.slice(sliceIndex);\n\n      if (sessionProperties.webTransportProtocolList.length === 0) {\n        // Even before AD restrictions, no valid protocols.\n        // User error.\n        throw new OperationError(`No usable transport protocol or fallback from ${\n          TransportProtocol.describe(selectedProtocol)}`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n\n      // Check that the generated list is compatible with AD.\n      const validForAD = sessionProperties.webTransportProtocolList.filter(x =>\n        isValidADTransport(x));\n      if (validForAD.length === 0) {\n        this._adDisabledReason = 'Guaranteed messaging not compatible with any available ' +\n          `transport protocol: ${\n            sessionProperties.webTransportProtocolList.map(k =>\n              TransportProtocol.describe(k)).join(', ')}`;\n      }\n\n      // Don't fold this into the check below -- for that one, every\n      // protocol must be valid because the user explicitly requested all of them.\n      // In this case, we ensure that at least one of our generated list is valid.\n      if (sessionProperties.publisherProperties.enabled) {\n        if (this._adDisabledReason) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n        // AD was not disabled by having no protocols available\n        sessionProperties.webTransportProtocolList = validForAD;\n      }\n      // A valid protocol list is ready to use.\n    } else {\n      // User provided transport protocol list\n      // Check for parameter conflict between session and publisher\n      // Already checked these for parameter conflict; only one will be set\n      // Already checked that user list was not empty\n      const transportProtocols = sessionProperties.webTransportProtocolList;\n      const validForAD = transportProtocols.every(isValidADTransport);\n      if (!validForAD) {\n        const invalid = transportProtocols.filter(x => !isValidADTransport(x));\n        this._adDisabledReason = `Guaranteed messaging incompatible with selected transport protocols: ${\n          invalid.map(k => TransportProtocol.describe(k)).join(', ')}`;\n        if (sessionProperties.publisherProperties.enabled) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n      }\n    }\n\n\n    // Assign the final properties and start the state machine.\n    this._sessionProperties = sessionProperties;\n    this._sessionStats = new Stats();\n    this._hosts = new HostList(sessionProperties);\n    this._sessionFSM = new SessionFSM(\n      this._sessionProperties,\n      this,\n      this._sessionStats,\n      this._hosts\n    );\n    this._sessionFSM.start();\n    this._sessionFSM.createMessagePublisher();\n\n    /**\n     * The following fields are destroyed when disconnect is called\n     * and recreated when connect is called again.\n     * @private\n     */\n    this._outstandingDataReqs = {};\n    this._capabilities = DefaultCapabilities.createDefaultCapabilities(sessionProperties);\n    this._seqNum = 1;\n  }\n\n  /**\n   * Connects the session to the Solace Message Router as configured in\n   * the {@link solace.SessionProperties#url}.\n   *\n   * When the session is successfully connected to the Solace Message Router, the\n   * {@link solace.SessionEventCode#UP_NOTICE} event is emitted if a listener has been registered.\n   *\n   * If {@link solace.SessionProperties#reapplySubscriptions} is set to true, this operation\n   * re-registers previously registered subscriptions. The connected session event\n   * ({@link solace.SessionEventCode#event:UP_NOTICE}) is emitted only when all the subscriptions\n   * are successfully added to the router.\n   *\n   * If the API is unable to connect within {@link solace.SessionProperties#connectTimeoutInMsecs}\n   * or due to login failures, the session's state transitions back to 'disconnected' and an event\n   * is generated.\n   *\n   * **Note:** Before the session's state transitions to 'connected', a client\n   * application cannot use the session; any attempt to call functions will throw\n   * {@link solace.OperationError}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed, already connected or connecting.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the underlying transport cannot be established.\n   *   Subcode: {@link solace.ErrorSubcode.CONNECTION_ERROR}.\n   */\n  connect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session connect called.');\n    const result = this.allowOperation(SessionOperation.CONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * @returns {Boolean} True if the session can be used to acknolwedge a message\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    /*\n     * If the user wants to ack a message, it was received on a session (else ack will throw),\n     * and so we know that the session was connected at some point.\n     *\n     * If the session is in any of the following states, we know it is either connecting or\n     * connected.\n     *\n     * Since we know the session was previously connected, this implies the session is either\n     * RECONNECTING or connected.\n     *\n     * We allow acks when the session is reconnecting or connected.\n     */\n    const statesCanAck = [\n      SessionStateName.CONNECTING,\n      SessionStateName.TRANSPORT_UP,\n      SessionStateName.DISCONNECTING,\n    ];\n    // Allow ack if there is some acceptable state name such that getActiveState returns the state.\n    return statesCanAck.some(stateName => !!this._sessionFSM.getActiveState(stateName));\n  }\n\n  /**\n   * Disconnects the session. The session attempts to disconnect cleanly, concluding all operations\n   * in progress. The disconnected session event {@link solace.SessionEventCode#event:DISCONNECTED}\n   * is emitted when these operations complete and the session has completely disconnected.\n   *\n   * @throws {solace.OperationError} if the session is disposed, or has never been connected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  disconnect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session disconnect called.');\n    const result = this.allowOperation(SessionOperation.DISCONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DISCONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * Release all resources associated with the session.\n   * It is recommended to call disconnect() first for proper handshake with the message-router.\n   */\n  dispose() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session dispose called.');\n    if (this._disposed) return;\n\n    //setImmediate(() => {\n    setTimeout(() => {\n      this._sessionFSM.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.DISPOSE })\n      ); // yield for disconnect if any\n      this._sessionFSM.terminateFsm();\n      this.disableEmitter();\n      this._disposed = true;\n    }, 0);\n  }\n\n  /**\n   * Subscribe to a topic, optionally requesting a confirmation from the router.\n   *\n   * If requestConfirmation is set to true:\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|null|undefined} correlationKey If specified, and if requestConfirmation is true, this value is\n   *                                echoed in the session event within {@link SessionEvent}.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  subscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session subscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    const returnCode = this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.ADD_SUBSCRIPTION,\n      false, // don't force beyond socket buffer limit\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send subscription request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send subscription request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n  updateQueueSubscription(topic, queue, add, messageConsumer, callback, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(\n      'Queue subscribe called for topic ', (topic && topic.toString && topic.toString()),\n      ' for queue ', (queue && queue.toString && queue.toString()));\n\n    LOG_TRACE('queue: ', queue);\n\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n    Parameter.isInstanceOf('queue', queue, DestinationLib.Destination);\n    queue.validate();\n    if ((queue.getType() !== DestinationLib.DestinationType.QUEUE) &&\n    (queue.getType() !== DestinationLib.DestinationType.TEMPORARY_QUEUE)) {\n      throw new OperationError(`Queue is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(queue.getType())}`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    const returnCode = this._sessionFSM.queueSubscriptionUpdate(\n      topic,\n      queue,\n      requestTimeout,\n      add,\n      false, //observe socket buffer size constraint, return NO_SPACE if full.\n      (rxMsgObj, cancelledRequest) =>\n        this.handleQueueSubscriptionUpdateResponse(\n          rxMsgObj,\n          cancelledRequest,\n          callback));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send subscription request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send subscription request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n  /**\n   * Unsubscribe from a topic, and optionally request a confirmation from the router.\n   *\n   * If requestConfirmation is set to true, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is removed\n   * successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|null|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  unsubscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for unsubscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    const returnCode = this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.REMOVE_SUBSCRIPTION,\n      false, // don't force beyond socket buffer limit\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send unsubscribe request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send unsubscribe request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n  /**\n   * Request that a Durable Topic Endpoint stop receiving data on a topic. Unsubscribe\n   * requests are only allowed by the router when no clients are bound to the DTE.\n   * If the unubscribe request is successful, the DTE will stop attracting messages,\n   * and all messages spooled to the DTE will be deleted.\n   *\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK} is generated when the\n   * subscription is removed successfully; otherwise,\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR} is generated.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   *\n   * @param {solace.AbstractQueueDescriptor|solace.QueueDescriptor} queueDescriptor A description\n   *  of the queue to which the topic is subscribed.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  unsubscribeDurableTopicEndpoint(queueDescriptor) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribeDurableTopicEndpoint called for queue descriptor ', (queueDescriptor && queueDescriptor.toString && queueDescriptor.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    // emulate subscription\n    const destination = this.createDestinationFromDescriptor(\n      QueueDescriptor.createFromSpec(queueDescriptor));\n    const requestConfirmation = true;\n    const returnCode = this._sessionFSM.subscriptionUpdate(\n      destination,\n      requestConfirmation,\n      undefined,\n      undefined,\n      SessionRequestType.REMOVE_DTE_SUBSCRIPTION,\n      false, // don't force beyond socket buffer limit\n      (rxMsgObj, cancelledRequest) =>\n        this.handleDTEUnsubscribeResponse(rxMsgObj,\n                                          cancelledRequest));\n\n    const TransportLib = require('solclient-transport');\n    if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n      throw new OperationError('Cannot send subscription request - no space in transport. Please try again later (on CAN_ACCEPT_DATA)',\n          ErrorSubcode.INSUFFICIENT_SPACE,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      throw new OperationError(\"Cannot send subscription request - transport error.\", ErrorSubcode.COMMUNICATION_ERROR,\n          TransportLib.TransportReturnCode.describe(returnCode));\n    }\n    return returnCode;\n  }\n\n\n  /**\n   * Modify a session property after creation of the session.\n   *\n   * This method only works for a select few properties,\n   * and updates their value on the live broker session.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to modify.\n   * @param {Object} newValue The new property value.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, it\n   *                                overwrites readTimeoutInMsecs\n   * @param {Object|String|null|undefined} correlationKey If specified, this value is echoed in the session event within\n   *                                {@link SessionEvent} property in {@link SessionProperties}\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  updateProperty(mutableSessionProperty, newValue, requestTimeout, correlationKey) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session updateProperty called: ', mutableSessionProperty, newValue);\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const { Topic } = DestinationLib;\n\n    LOG_TRACE('Updating property ', mutableSessionProperty, newValue);\n\n    Parameter.isEnumMember('mutableSessionProperty', mutableSessionProperty, MutableSessionProperty);\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    let sessionEvent;\n    /*\n     Response CB to the CLIENTCTRL UPDATE response\n\n     This is pretty complicated: we define the whole process in here\n     using callbacks to preserve state such as the correlationKey of the user\n     request.\n     That is, this entire multi-step process executes under the context of that one call to\n     updateProperty with a single correlationKey value.\n     */\n    const responseCallback = (respMsg) => {\n      const response = respMsg.getResponse();\n      if (response.responseCode === 200) {\n        if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n          // update property and notify client\n          this._sessionProperties.applicationDescription = newValue;\n          sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                            response.responseString,\n                                            response.responseCode,\n                                            0,\n                                            correlationKey,\n                                            null);\n          this.sendEvent(sessionEvent);\n        } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n          // replace P2P subscription: REM and ADD\n          const oldP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            this._sessionProperties.p2pInboxBase);\n          const oldP2pTopic = Topic.createFromName(oldP2pTopicName);\n\n          const newP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            respMsg.getP2PTopicValue());\n          const newP2pTopic = Topic.createFromName(newP2pTopicName);\n\n          const afterAddCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // notify client\n              this._sessionProperties._setP2pInboxBase(respMsg.getP2PTopicValue() || '');\n              this._sessionProperties._setP2pInboxInUse(\n                P2PUtil.getP2PInboxTopic(this._sessionProperties.p2pInboxBase));\n              this._sessionProperties.clientName = newValue;\n              sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                resp.responseString,\n                                                resp.responseCode,\n                                                0,\n                                                correlationKey,\n                                                null);\n              this.sendEvent(sessionEvent);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n                              this._sessionProperties.ignoreDuplicateSubscriptionError) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  0,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_TOO_MANY) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          const afterRemoveCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // second add new P2P\n              // TODO: handle transport error?\n              this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                  true,       // request confirm\n                                                  correlationKey,\n                                                  this._sessionProperties.readTimeoutInMsecs,\n                                                  SessionRequestType.ADD_P2PINBOX,\n                                                  true, // force beyond socket buffer limit because there's no error handling\n                                                  afterAddCallback);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n                  this._sessionProperties.ignoreSubscriptionNotFoundError) {\n                // add new P2P anyway: the error is simply the old P2P\n                // was not found on remove.  It's notable though.\n              // TODO: handle transport error?\n                this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                    true,       // request confirm\n                                                    correlationKey,\n                                                    this._sessionProperties.readTimeoutInMsecs,\n                                                    SessionRequestType.ADD_P2PINBOX,\n                                                    true, // force beyond socket buffer limit because there's no error handling\n                                                    afterAddCallback);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          // first remove old P2P\n              // TODO: handle transport error?\n          this._sessionFSM.subscriptionUpdate(oldP2pTopic,\n                                              true,       // request confirm\n                                              correlationKey,\n                                              this._sessionProperties.readTimeoutInMsecs,\n                                              SessionRequestType.REMOVE_P2PINBOX,\n                                              true, // force beyond socket buffer limit because there's no error handling\n                                              afterRemoveCallback);\n        }\n      } else {\n        // notify client error\n        const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(response.responseCode,\n                                                                        response.responseString);\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          response.responseString,\n                                          response.responseCode,\n                                          errorSubcode,\n                                          correlationKey,\n                                          null);\n        this.sendEvent(sessionEvent);\n      }\n    }; // end CB (response to UPDATE request)\n\n    const returnCode = this._sessionFSM.sendUpdateProperty(mutableSessionProperty,\n                                                           newValue,\n                                                           correlationKey,\n                                                           requestTimeout,\n                                                           responseCallback);\n    if (returnCode !== TransportReturnCode.OK) {\n          // do not change session state\n\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed - no space in transport',\n                                          null,\n                                          ErrorSubcode.INSUFFICIENT_SPACE,\n                                          null,\n                                          null);\n      } else {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed',\n                                          null,\n                                          ErrorSubcode.INVALID_OPERATION,\n                                          null,\n                                          null);\n      }\n      this.sendEvent(sessionEvent);\n    }\n  }\n  /**\n   * Modify (some) authentication-related session properties.\n   * The modifications take effect the next time the session connects or reconnects to the broker.\n   * There is no change to the active connection.\n   * Calling this method does not in itself trigger any kind of reconnection, reauthentication or renegotiation.\n   *\n   * **Note:** the update of \"accessToken\" and \"idToken\" properties is currently supported.\n   * Authentication Properties\n   * - accessToken to update previously set access token required for OAUTH2 authentication.\n   * - idToken to update previously set ID token required for OIDC authentication\n   * Example: updateAuthenticationOnReconnect({accessToken : “my_new_token”});\n   *\n   *\n   * @param {Object} authenticationProperties to be set\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if unsupported properties attempted to be set.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}.\n   */\n  updateAuthenticationOnReconnect(authenticationProperties) {\n    const { LOG_TRACE } = this.logger;\n    const allowedProperties = ['accessToken', 'idToken'];\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    if (!authenticationProperties || typeof authenticationProperties !== 'object') {\n      throw new OperationError('updateAuthenticationOnReconnect parameter must be a non-empty object.', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    var key;\n    for (key in authenticationProperties) {\n      if (!allowedProperties.includes(key)) {\n        throw new OperationError('Invalid property in updateAuthenticationOnReconnect parameter.', ErrorSubcode.PARAMETER_CONFLICT, null);\n      }\n    }\n    const newProps = this.getSessionProperties();\n    Object.assign(newProps, authenticationProperties);\n    SessionPropertiesValidator.validate(newProps);\n    this._sessionProperties = newProps;\n    Object.assign(this._sessionFSM._sessionProperties, authenticationProperties);\n    LOG_TRACE('updateAuthenticationOnReconnect applied new token(s).');\n  }\n\n  /**\n   * Publish (send) a message over the session. The message is sent to its set destination.\n   *\n   * This method is used for sending both direct and Guaranteed Messages.  If the message's\n   * {@link solace.MessageDeliveryModeType} is {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * message is a direct message; otherwise, it is a guaranteed message.\n   *\n   * @param {solace.Message} message The message to send. It must have a destination set.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   * \n   */\n  send(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session send() called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n\n    // check to see if we can send variable length params to the broker\n    if (!this.isCapable(CapabilityType.VAR_LEN_EXT_PARAM)) {\n      LOG_TRACE('Broker session does not support VAR LEN SMF extended parameters');\n      // clear these message properties since var-len extended\n      // properties not supported on broker\n      message.clearExtendedVarLenParams();\n\n      // throw error if these extended var-length message properties are set\n      if(this._failOnExtendedVariableLengthProperties(message)) {\n        throw new OperationError(\n          'Broker does not support variable length SMF extended parameters',\n          ErrorSubcode.INVALID_OPERATION);\n      }\n    }\n    this.validateAndSendMessage(message);\n  }\n\n  _failOnExtendedVariableLengthProperties(message) {\n    return false; // return false since no properties for now\n  }\n\n  /**\n   * Sends a request using user-specified callback functions.\n   *\n   * <p>The API fills in the correlationId and replyTo fields in the request when they are not preset by the application.\n   * This is the preferred use case to ensure replies are directed back to the correct requester.</p>\n   *\n   * @param {solace.Message} message The request message to send.\n   * @param {Number} [timeout] The timeout value (in milliseconds). The minimum value is 100 msecs.\n   * @param {solace.Session.replyReceivedCallback} [replyReceivedCBFunction] The callback to notify\n   *    when a reply is received.\n   * @param {solace.Session.requestFailedCallback} [requestFailedCBFunction] The callback to notify\n   *    when the request failed.\n   * @param {Object} [userObject] An optional correlation object to use in the response callback.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendRequest(message,\n              timeout = undefined,\n              replyReceivedCBFunction = undefined,\n              requestFailedCBFunction = undefined,\n              userObject = undefined\n              ) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendRequest called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n    Parameter.isNumberOrNothing('timeout', timeout);\n    Parameter.isRangeCompareOrNothing('timeout', timeout, '>=', 100);\n    Parameter.isFunctionOrNothing('replyReceivedCBFunction', replyReceivedCBFunction);\n    Parameter.isFunctionOrNothing('requestFailedCBFunction', requestFailedCBFunction);\n\n    // set correlationId and replyTo fields if not set by the application\n    const correlationId = message.getCorrelationId();\n    if (correlationId === null || correlationId === undefined) {\n      message.setCorrelationId(SOLCLIENT_REQUEST_PREFIX + GlobalContext.NextId());\n    }\n    const replyTo = message.getReplyTo();\n    if (replyTo === null || replyTo === undefined) {\n      const replyToTopic = DestinationLib.Topic.createFromName(\n        this._sessionProperties.p2pInboxInUse);\n      message.setReplyTo(replyToTopic);\n    }\n\n    this.validateAndSendMessage(message);\n\n      // enqueue request\n    this.enqueueOutstandingDataReq(message.getCorrelationId(),\n                                   requestFailedCBFunction,\n                                   timeout,\n                                   replyReceivedCBFunction,\n                                   userObject);\n  }\n\n  /**\n   * Sends a reply message to the destination specified in messageToReplyTo.\n   *\n   * If `messageToReplyTo` is non-null:\n   *  * {@link solace.Message#getReplyTo} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setDestination} on `replyMessage`, unless `replyTo` is null.\n   *  * {@link solace.Message#setCorrelationId} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setCorrelationId} on `replyMessage`, unless `correlationId` is null.\n   *\n   * If `messageToReplyTo` is null, the application is responsible for setting\n   * the `destination` and `correlationId` on the `replyMessage`.\n   *\n   * @param {solace.Message} messageToReplyTo The message to which a reply will be sent.\n   * @param {solace.Message} replyMessage The reply to send.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendReply(messageToReplyTo, replyMessage) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendReply called.');\n    const result = this.allowOperation(SessionOperation.SEND, replyMessage);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isInstanceOfOrNothing('messageToReplyTo', messageToReplyTo, MessageLib.Message);\n    Parameter.isInstanceOf('replyMessage', replyMessage, MessageLib.Message);\n\n    replyMessage.setAsReplyMessage(true);\n    if (messageToReplyTo) {\n      replyMessage.setCorrelationId(messageToReplyTo.getCorrelationId());\n      const replyTo = messageToReplyTo.getReplyTo();\n      if (replyTo === null || replyTo === undefined) {\n        throw new OperationError('ReplyTo destination may not be null.',\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n      replyMessage.setDestination(messageToReplyTo.getReplyTo());\n    }\n    this.validateAndSendMessage(replyMessage);\n  }\n\n  /**\n   * Returns the value of a given {@link solace.StatType}.\n   *\n   * @param {solace.StatType} statType The statistic to query.\n   * @returns {Number} The value of the requested statistic.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the StatType is invalid.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   */\n  getStat(statType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getStat called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isEnumMember('statType', statType, StatType);\n    return this._sessionFSM.getStat(statType);\n  }\n\n  /**\n   * Reset session statistics to initial values.\n   *\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  resetStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session resetStats called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    this._sessionFSM.resetStats();\n  }\n\n  /**\n   * Returns a clone of the properties for this session.\n   *\n   * @returns {solace.SessionProperties} A clone of this session's properties.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  getSessionProperties() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionProperties called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const properties = this._sessionProperties.clone();\n    const sessionState = this.getSessionState();\n    if ((sessionState !== SessionStateName.DISCONNECTED) && this._sessionFSM._transport) {\n      properties._setWebTransportProtocolInUse(this._sessionFSM._transport.getTransportProtocol());\n    }\n\n    return properties;\n  }\n\n  /**\n   * Check the value of a boolean router capability.\n   *\n   * This function is a shortcut for {@link solace.Session#getCapability}. It performs the same\n   * operation, but instead of returning a {@link solace.SDTField} wrapping a capability value, it\n   * just returns the boolean value.\n   *\n   *  Attempting to query a non-boolean capability will return `null`.\n   *\n   * @param {solace.CapabilityType} capabilityType The capability to check.\n   *\n   * @returns {Boolean} the value of the capability queried.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  isCapable(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session isCapable called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const caps = this._capabilities;\n    if (!caps) {\n      return false;\n    }\n\n    // Guard for undefined OR non-boolean capability\n    return (typeof caps[capabilityType] === 'boolean') ? caps[capabilityType] : false;\n  }\n\n  /**\n   * Get the value of an router capability, or null if unknown. This function must\n   * be called after connecting the session.\n   *\n   * SDT Type conversions:\n   *\n   *  * {string} values are returned as {@link solace.SDTFieldType.STRING}.\n   *  * {boolean} values are returned as {@link solace.SDTFieldType.BOOL}.\n   *  * All numeric values are returned as {@link solace.SDTFieldType.INT64}.\n   *\n   * @param {solace.CapabilityType} capabilityType The router capability to query.\n   * @returns {solace.SDTField} The result of the capability query.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  getCapability(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getCapability called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const val = this._getCapability(capabilityType);\n    if (typeof val === 'boolean') {\n      return SDTField.create(SDTFieldType.BOOL, val);\n    }\n    if (typeof val === 'number') {\n      return SDTField.create(SDTFieldType.INT64, val);\n    }\n    if (typeof val === 'string') {\n      return SDTField.create(SDTFieldType.STRING, val);\n    }\n\n    return null;\n  }\n\n  _getCapability(capabilityType) {\n    const caps = this._capabilities;\n    if (!caps) return null;\n\n    const value = caps[capabilityType];\n    return (value === undefined) ? null : value;\n  }\n\n  /**\n   * Returns the session's state. This is a third-choice method to determine session\n   * state; the first is notifications on FSM transitions, and the second choice is\n   * the finer-grained states of the FSM that are used in this mapping.\n   *\n   * @returns {SessionState} The current state of the session.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * @internal\n   */\n  getSessionState() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionState called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sessionStateName = this.getFSMState();\n    switch (sessionStateName) {\n      case SessionStateName.FULLY_CONNECTED:\n        return SessionState.CONNECTED;\n      case SessionStateName.DISCONNECTING:\n        return SessionState.DISCONNECTING;\n      case SessionStateName.DISCONNECTED:\n        return SessionState.DISCONNECTED;\n      case SessionStateName.SESSION_ERROR:\n        return SessionState.SESSION_ERROR;\n      case SessionStateName.CONNECTING:\n      case SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT:\n      case SessionStateName.WAITING_FOR_DNS:\n      case SessionStateName.WAITING_FOR_TRANSPORT_UP:\n      case SessionStateName.WAITING_FOR_SESSION_UP:\n      case SessionStateName.WAITING_FOR_LOGIN:\n      case SessionStateName.WAITING_FOR_P2PINBOX_REG:\n      case SessionStateName.WAITING_FOR_PUBFLOW:\n      case SessionStateName.REAPPLYING_SUBSCRIPTIONS:\n        return SessionState.CONNECTING;\n      default:\n        {\n          // State names unaccounted for --\n          // WAITING_FOR_SUBCONFIRM\n          // WAITING_FOR_CAN_ACCEPT_DATA\n          // DISCONNECTING_FLOWS\n          // FLUSHING_TRANSPORT\n          // DESTROYING_TRANSPORT\n          // RECONNECTING\n          // TRANSPORT_FAIL\n          //\n          // Alternatively, we could use StateMachine#isStateActive on key parent states,\n          // instead of having to enumerate all child states.ant\n          const { LOG_INFO } = this.logger;\n          LOG_INFO(`Unmapped session state ${SessionStateName.describe(sessionStateName)}`);\n          return null;\n        }\n    }\n  }\n\n  /**\n   * Gets the fine grained state name from the session FSM.\n   * @returns {solace.SessionStateName} The FSM state name\n   * @private\n   */\n  getFSMState() {\n    return this._sessionFSM.getCurrentStateName();\n  }\n\n  /**\n   * Creates a {@link solace.CacheSession} object that uses this Session to service its\n   * cache requests.\n   *\n   * It should be disposed when the application no longer requires a CacheSession, by calling\n   * {@link solace.CacheSession#dispose}.\n   *\n   * @param {solace.CacheSessionProperties} properties The properties for the cache session.\n   *\n   * @returns {solace.CacheSession} The newly created cache session.\n   *\n   * @throws {solace.OperationError} if a CacheSession is already associated with this Session.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  createCacheSession(properties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createCacheSession called.');\n    return new CacheSession(properties, this, {\n      // bind instead of arrow func for varargs\n      // due to bublé transpiler bug\n      incStat: this._sessionFSM.incStat.bind(this._sessionFSM),\n    });\n  }\n\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a MessageConsumer:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} when Guaranteed Message Consume is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} if Guaranteed Message Consume is not supported on this session.\n   * @target node\n   */\n  createMessageConsumer(consumerProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createMessageConsumer called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide MessageConsumer capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((consumerProperties !== undefined) && (consumerProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createMessageConsumer - Consumer properties:\\n', consumerProperties);\n    }\n    return this._sessionFSM.createMessageConsumer(consumerProperties);\n  }\n \n  /**\n   * Provisons a queue or topic endpoint on the broker without binding a flow or adding a subscription.\n   * The function returns immediately (unless the parameters fail validation in which case an exception is thrown),\n   * but the actual outcome of the operation on the broker is only reported later \n   * in the form of a POVISION_OK or PROVISION_ERROR session event.\n   * Make sure to subscribe for those when using this fuction.\n   *\n   * @param {solace.QueueDescriptor} queueDescriptor The name and type (queue or TE) of the endpoint. Only durable endpoints supported currently.\n   * @param {solace.QueueProperties} queueProperties Optional, in-out parameter.\n   *  In: Properties of the Queue/TE to be created. Empty or undefined fields are left to broker defaults.\n   *  Out (on PROVISION_OK, not on function return): Properties of the endpoint as created.\n   * @param {boolean} ignoreExists Makes the operation idempotent if true, by ignoring \"endpoint already exists\" errors.\n   * @param {Object|String|null|undefined} correlationKey If specified, this is the value identifying the operation \n   * in the resulting PROVISION_OK or PROVISION_ERROR session event {@link SessionEvent}\n   *\n   * @throws {solace.OperationError}  \n   */\n  provisionEndpoint(queueDescriptor, queueProperties, ignoreExists, correlationKey) {\n    Parameter.isBooleanOrNothing('ignoreExists', ignoreExists);\n    Parameter.isInstanceOf('queueDescriptor', queueDescriptor, Object, ErrorSubcode.PARAMETER_INVALID_TYPE, \"queueDescriptor must be supplied, can't be \"+queueDescriptor);\n    Parameter.isString('queueDescriptor.name', queueDescriptor.name, ErrorSubcode.PARAMETER_INVALID_TYPE, \"provisionEndpoint only works on named endpoints\");\n    // Cloning to apply the durable:true default.\n    const queueDescriptor2 = new QueueDescriptor(queueDescriptor);\n    if (!queueDescriptor2.durable) {\n      throw new NotImplementedError('provisionEndpoint() only works for durable endpoints.');\n      //console.log(\"Temporarily allowing durable Create.\");\n    }\n    if (queueProperties) {\n      Parameter.isInstanceOfOrNothing('queueProperties', queueProperties, Object, ErrorSubcode.PARAMETER_INVALID_TYPE, \"queueProperties must be an object, ideally a solace.QueueProperties instance. Can't be \"+queueProperties);\n      QueuePropertiesValidator.validate(queueProperties);\n    }\n    const callback = this.handleProvisionResponse.bind(this, ignoreExists, true);\n    return this._sessionFSM.provisionEndpoint(queueDescriptor2, queueProperties, correlationKey, callback);\n\n\n  }\n\n  /**\n   * Deprovisons a queue or topic endpoint on the broker.\n   * The function returns immediately (unless the parameters fail validation in which case an exception is thrown),\n   * but the actual outcome of the operation on the broker is only reported later \n   * in the form of a POVISION_OK or PROVISION_ERROR session event.\n   * Make sure to subscribe for those when using this fuction.\n   *\n   * @param {solace.QueueDescriptor} queueDescriptor The name and type (queue or TE) of the endpoint. Durability is ignored.\n   * @param {boolean} ignoreMisssing Makes the operation idempotent if true, by ignoring \"endpoint doesn't exist\" errors.\n   * @param {Object|String|null|undefined} correlationKey If specified, this is the value identifying the operation \n   * in the resulting PROVISION_OK or PROVISION_ERROR session event {@link SessionEvent}\n   *\n   * @throws {solace.OperationError}  \n   */\n  deprovisionEndpoint(queueDescriptor, ignoreMissing, correlationKey) {\n    Parameter.isBooleanOrNothing('ignoreMissing', ignoreMissing);\n    if (!(queueDescriptor instanceof Object)) {\n      throw new OperationError('queueDesscriptor object required', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    Parameter.isString('queueDescriptor.name', queueDescriptor.name, ErrorSubcode.PARAMETER_INVALID_TYPE, \"deprovisionEndpoint only works on named endpoints\");\n\n    // Leaving the last two parameters, the SMF response object and the CorrelatedRequest, unbound.\n    const callback = this.handleProvisionResponse.bind(this, ignoreMissing, false);\n\n    return this._sessionFSM.deprovisionEndpoint(queueDescriptor, correlationKey, callback);\n\n  }\n\n  /**\n   * Internal callback for provision/deprovision response handling.\n   * @param {solace.QueueProperties} queueProperties to update from the response (provision only)\n   * @param {boolean} ignore ignoreMissing or ignoreExists was set.\n   * @param {boolean} provision true for provision, false for deprovision.\n   * @param {CorrelatedRequest} request The originating request object\n   * @private\n   */\n  handleProvisionResponse(ignore, provision, msg, request) {\n    const {correlationKey} = request;\n    const responseCode = msg._smfHeader.pm_respcode;\n    const responseString = msg._smfHeader.pm_respstr;\n    const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode, responseString);   \n    const queueDescriptor = new QueueDescriptor();\n    queueDescriptor.durable = undefined;\n    const queueProperties = new QueueProperties();\n    const { DestinationUtil } = DestinationLib;\n\n    if (msg.getQueueNameBytes() && msg.getQueueNameBytes().length > 0) {\n      queueDescriptor.name = DestinationUtil.decodeBytes(msg.getQueueNameBytes()); \n      queueDescriptor.type = QueueType.QUEUE;\n    } else if (msg.getTopicEndpointBytes() && msg.getTopicEndpointBytes().length > 0) {\n      queueDescriptor.name = DestinationUtil.decodeBytes(msg.getTopicEndpointBytes()); \n      queueDescriptor.type = QueueType.TOPIC_ENDPOINT;\n    } else {\n      queueDescriptor.name =  undefined;\n      queueDescriptor.type = undefined;\n    }\n\n    queueDescriptor.durable = msg.getDurability();\n    queueProperties.accessType = msg.getAccessType();\n    queueProperties.discardBehavior = msg.getQueueDiscardBehavior();\n    queueProperties.maxMessageRedelivery = msg.getMaxRedelivery();\n    queueProperties.maxMessageSize = msg.getMaxMsgSize();\n    queueProperties.permissions = msg.getAllOthersPermissions();\n    queueProperties.quotaMB = msg.getQuota();\n    queueProperties.respectsTTL = msg.getRespectsTTL();\n\n    let reason = null;\n    if ((responseCode === 400) && (errorSubcode === ErrorSubcode.INVALID_QUEUE_NAME || errorSubcode === ErrorSubcode.INVALID_TE_NAME)) {\n      reason = explainInvalidEndpointName(queueDescriptor.name);\n    }\n\n\n    let outcome = SessionEventCode.PROVISION_ERROR;\n    if (responseCode === 200) {\n      outcome = SessionEventCode.PROVISION_OK;\n    } else {\n      if (ignore && provision && errorSubcode == ErrorSubcode.ENDPOINT_ALREADY_EXISTS)  {\n        outcome = SessionEventCode.PROVISION_OK;\n      } else if (ignore && !provision && (errorSubcode == ErrorSubcode.UNKNOWN_QUEUE_NAME || errorSubcode == ErrorSubcode.UNKNOWN_TOPIC_ENDPOINT_NAME) ) {\n        outcome = SessionEventCode.PROVISION_OK;\n      }\n    }\n\n    const provisionEvent = new ProvisionEvent(outcome,\n        responseString,\n        responseCode,\n        errorSubcode,\n        correlationKey,\n        reason,\n        queueDescriptor,\n        queueProperties);\n    this.sendEvent(provisionEvent);\n  }\n\n  /**\n   * Creates a {@link solace.QueueBrowser} to browse Guaranteed Messages on a specified queue in\n   * this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The browser properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored. Any values not supplied are set to default values.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the queue browser is created, a queue browser object is returned to the caller. This is\n   * the object from which events are emitted, and upon which operations (for example, starting and\n   * stopping the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a QueueBrowser:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} when Guaranteed Messaging is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.QueueBrowser} to receive Guaranteed Messages in this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the browser is created, a browser object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} if Guaranteed Messaging is not supported on this session.\n   * @target node\n   */\n  createQueueBrowser(browserProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createQueueBrowser called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide QueueBrowser capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((browserProperties !== undefined) && (browserProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createQueueBrowser - Browser properties:\\n', browserProperties);\n    }\n    return this._sessionFSM.createQueueBrowser(browserProperties);\n  }\n\n  /**\n   * Creates a publishing destination from a queue descriptor.\n   *\n   * A MessageConsumer is the only object that has any business\n   * doing this, but it should not be concerned with the internals\n   * which depend on the session.\n   *\n   * @param {AbstractQueueDescriptor|QueueDescriptor} queueDescriptor The consumer's descriptor\n   * @returns {Destination} A destination that publishes to the descriptor.\n   * @memberof Session\n   * @private\n   */\n  createDestinationFromDescriptor(queueDescriptor) {\n    const {\n      DestinationType,\n      Queue,\n      Topic,\n    } = DestinationLib;\n\n    let destinationType = DestinationType.TOPIC;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      destinationType = queueDescriptor.durable\n        ? DestinationType.QUEUE\n        : DestinationType.TEMPORARY_QUEUE;\n    }\n\n    const name = queueDescriptor.name || null;\n\n    if (queueDescriptor.durable) {\n      assert(name, 'Durable endpoint with generated name is not a valid configuration');\n      const factoryMethod = queueDescriptor.getType() === QueueType.QUEUE\n        ? Queue.createFromLocalName\n        : Topic.createFromName;\n      return factoryMethod(name);\n    }\n\n    return this.createTemporaryDestination(destinationType, name);\n  }\n\n  /**\n   * Creates a temporary destination.\n   * @param {DestinationType} destinationType Type of destination\n   * @param {String} [name] Name if any\n   * @returns {Destination} Temporary destination\n   * @private\n   */\n  createTemporaryDestination(destinationType, name) {\n    const { LOG_TRACE } = this.logger;\n    const { DestinationFromNetwork, DestinationUtil } = DestinationLib;\n    // TRANSPORT_UP is chosen because this is when the session tells subscribers\n    // that they may begin connecting\n    const vrn = this.getSessionProperties().virtualRouterName;\n    if (!this.isCapable(CapabilityType.TEMPORARY_ENDPOINT) ||\n        vrn === null || vrn === undefined || vrn.length === 0) {\n      throw new OperationError(\n        'Attempt to generate temporary destination or endpoint without suitable session',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // Non-durable case; avoid re-prefixing\n    const localName = name && name.startsWith('#P2P')\n      ? name\n      : DestinationUtil.createTemporaryName(destinationType, vrn, name);\n    LOG_TRACE('Generated name:', localName);\n    return DestinationFromNetwork.createDestinationFromName(localName);\n  }\n\n  /**\n   * @param {solace.SessionEvent} sessionEvent The event to send\n   * @private\n   */\n  sendEvent(sessionEvent) {\n    if (!sessionEvent) return;\n    if (this._disposed) return;\n\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Sending event ${sessionEvent}`);\n    this._eventCallbackInfo.sessionEventCBFunction(this,\n                                                   sessionEvent,\n                                                   this._eventCallbackInfo.userObject);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} A description of the current session's transport.\n   */\n  getTransportInfo() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getTransportInfo called.');\n    return this._sessionFSM.getTransportInfo();\n  }\n\n  /**\n   * @param {Object} interceptor The transport interceptor to set\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._sessionFSM.injectTransportInterceptor(interceptor);\n  }\n\n  /**\n   * @param {solace.SessionOperation} operationEnum the id of the operation\n   * @param {solace.Message} message The message to send\n   * @returns {?String} error message if not allowed; otherwise null\n   * @private\n   */\n  allowOperation(operationEnum, message) {\n    if (!this._sessionFSM) return false;\n    let allow = true;\n    const sessionStateName = this._sessionFSM.getCurrentStateName();\n\n    if (sessionStateName === SessionStateName.DISPOSED) {\n      allow = false;\n    } else if (Check.anything(operationEnum)) {\n      switch (operationEnum) {\n        case SessionOperation.CONNECT:\n          if (sessionStateName !== SessionStateName.NEW &&\n              sessionStateName !== SessionStateName.DISCONNECTED) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.DISCONNECT:\n          if (sessionStateName === SessionStateName.NEW) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.SEND:\n        case SessionOperation.CTRL:\n          allow =\n            ((sessionStateName === SessionStateName.FULLY_CONNECTED) ||\n            (message && (message.getDeliveryMode() !== MessageLib.MessageDeliveryModeType.DIRECT)));\n          break;\n\n        case SessionOperation.QUERY_OPERATION:\n          allow = true;\n          break;\n        default:\n          allow = false;\n      }\n    } else {\n      allow = false;\n    }\n\n    if (allow) {\n      return null;\n    }\n\n    return `Cannot perform operation ${operationEnum} while in state ${sessionStateName}`;\n  }\n\n  /**\n   * @param {smf.ClientCtrlMessage} routerCapabilities The message containing the router caps\n   * @private\n   */\n  updateCapabilities(routerCapabilities) {\n    this._capabilities = routerCapabilities;\n  }\n\n  /**\n   * @param {solace.Message} message The message to send\n   * @private\n   */\n  validateAndSendMessage(message) {\n    // Sanity checks on the message before attempting to send it\n    //  * do we have a destination?\n    const sendDest = message.getDestination();\n    if (Check.nothing(sendDest) || Check.empty(sendDest.getName())) {\n      throw new OperationError('Message must have a valid Destination', ErrorSubcode.TOPIC_MISSING);\n    }\n\n    const senderTimestamp = message.getSenderTimestamp();\n    const noSenderTimestamp = senderTimestamp === null || senderTimestamp === undefined;\n    if (this._sessionProperties.generateSendTimestamps &&\n        (noSenderTimestamp || message.hasAutoSenderTimestamp)) {\n      const now = new Date();\n      message.setSenderTimestamp(now.getTime());\n      message.hasAutoSenderTimestamp = true;\n    }\n    const sequenceNumber = message.getSequenceNumber();\n    const noSequenceNumber = sequenceNumber === null || sequenceNumber === undefined;\n    if (this._sessionProperties.generateSequenceNumber &&\n        (noSequenceNumber || message.hasAutoSequenceNumber)) {\n      message.setSequenceNumber(this._seqNum++);\n      message.hasAutoSequenceNumber = true;\n    }\n    const senderId = message.getSenderId();\n    const noSenderId = senderId === null || senderId === undefined;\n    if (this._sessionProperties.includeSenderId && noSenderId) {\n      message.setSenderId(this._sessionProperties.clientName);\n    }\n\n    // Allow the FSM and its delegates to prepare and send the message\n    // This may mutate the delegates, so we need to validate first\n    // this may throw if the message is guaranteed and the window is closed.\n    // If this returns true, the message can be sent to the transport\n    // (always true for direct messages whne there is a transport). If\n    // this returns false, the message has been prepared and queued for\n    // transport but may not be sent now.\n    this._sessionFSM.prepareAndSendMessage(message);\n  }\n\n  /**\n   * @param {String} correlationId The internal correlation ID for the message\n   * @param {function(...[*])} reqFailedCb The callback on request failure\n   * @param {Number} reqTimeout The request timeout in ms\n   * @param {function(*)} replyRecvdCb The callback on reply received\n   * @param {Object} userObject A user object to pass back to the callback (legacy)\n   * @private\n   */\n  enqueueOutstandingDataReq(correlationId, reqFailedCb, reqTimeout, replyRecvdCb, userObject) {\n    if (Check.none(correlationId)) {\n      return;\n    }\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    // empty string is valid\n    LOG_TRACE(`Enqueue outstanding data request correlationId=${correlationId}`);\n    const timer = setTimeout(() => {\n      this._sessionFSM.incStat(StatType.TX_REQUEST_TIMEOUT);\n                  // remove request from queue\n      try {\n        const result = delete this._outstandingDataReqs[correlationId];\n        if (!result) {\n          LOG_ERROR(`Cannot delete data request ${correlationId}`);\n        }\n      } catch (e) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n      }\n\n      if (Check.anything(reqFailedCb)) {\n        const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_TIMEOUT,\n                                                'Request timeout',\n                                                correlationId);\n\n        reqFailedCb(this, requestEvent, userObject);\n      }\n    }, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n\n    const outstandingReq = new OutstandingDataRequest(correlationId,\n                                                      timer,\n                                                      replyRecvdCb,\n                                                      reqFailedCb,\n                                                      userObject);\n    this._outstandingDataReqs[correlationId] = outstandingReq;\n  }\n\n  /**\n   * @param {String} correlationId The internal ID of the request to cancel\n   * @returns {OutstandingDataRequest} The request that was cancelled, if any\n   * @private\n   */\n  cancelOutstandingDataReq(correlationId) {\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    if (Check.none(correlationId) || !this._outstandingDataReqs) {\n      return null;\n    }\n\n    const req = this._outstandingDataReqs[correlationId];\n    if (req === undefined || req === null) {\n      return null;\n    }\n    LOG_TRACE(`Cancel outstanding data request correlationId=${correlationId}`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n\n    try {\n      const result = delete this._outstandingDataReqs[correlationId];\n      if (!result) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n    }\n    return req;\n  }\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_TRACE } = this.logger;\n    if (this._outstandingDataReqs) {\n      LOG_TRACE('Cancel all outstanding data requests');\n      Object.keys(this._outstandingDataReqs).forEach((key) => {\n        const dataReq = this.cancelOutstandingDataReq(key);\n        if (dataReq && dataReq.reqFailedCBFunction) {\n          const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_ABORTED,\n                                                  'Request aborted',\n                                                  key);\n          dataReq.reqFailedCBFunction(this, requestEvent, dataReq.userObject);\n        }\n      });\n    }\n  }\n\n  /**\n   * @param {Message} dataMessageIn The received direct TRmsg\n   * @private\n   */\n  handleDataMessage(dataMessageIn) {\n    const { LOG_TRACE, LOG_INFO } = this.logger;\n    const dataMessage = dataMessageIn;\n    if (this._sessionProperties.generateReceiveTimestamps) {\n      const now = new Date();\n      dataMessage._receiverTimestamp = now.getTime();\n    }\n\n    if (dataMessage.isReplyMessage()) {\n      const correlationId = dataMessage.getCorrelationId();\n      if (Check.anything(correlationId)) {\n        const dataReq = this.cancelOutstandingDataReq(correlationId);\n        if (dataReq !== null) {\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_RECVED);\n          LOG_TRACE('Calling application replyReceivedCallback');\n          dataReq.replyReceivedCBFunction(this, dataMessage, dataReq.userObject);\n          LOG_TRACE('application replyReceivedCallback returns');\n          return;\n        }\n\n        if (correlationId.startsWith(SOLCLIENT_REQUEST_PREFIX)) {\n            // if a reply message doesn't have outstanding request and correlationId\n            // starts with #REQ it is assumed to be a delayed reply and has to be discarded\n          LOG_INFO('DROP: Discard reply message due to missing outstanding request');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n\n        if (correlationId.startsWith(CACHE_REQUEST_PREFIX) &&\n              !(CacheSession && this._messageCallbackInfo.userObject instanceof CacheSession)) {\n          // If it's a cache message, only pass it along if the listener is a cache message\n          // listener. The listener may drop it and increment the DISCARD stat if no\n          // cache session recognizes the reply.\n          LOG_INFO('DROP: Discard cache reply due to no cache session active');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n      }\n    }\n\n    // notify client message callback\n    LOG_TRACE('Calling application messageCallback');\n    this._messageCallbackInfo.messageRxCBFunction(this,\n                                                  dataMessage,\n                                                  this._messageCallbackInfo.userObject);\n    LOG_TRACE('application messageCallback returns');\n  }\n\n  /**\n   * Callback function for subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {Boolean} requestConfirm Whether the user asked for confirmation on the request\n   * @private\n   */\n  handleSubscriptionUpdateResponse(smpMsg, request, requestConfirm) {\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const { correlationKey } = request;\n    // If we don't request confirmation, the router doesn't send one for the OK case,\n    // so we don't need to guard for that.\n    // The router always replies on SUBSCRIPTION_ERROR, so we track whether confirmation\n    // was requested and suppress the reply in certain cases.\n    if (responseCode === 200) {\n      // notify client\n      const sessionEvent = SessionEvent.build(SessionEventCode.SUBSCRIPTION_OK,\n                                              responseString,\n                                              responseCode,\n                                              0,\n                                              correlationKey,\n                                              null);\n      this.sendEvent(sessionEvent);\n    } else {\n      const subscriptionStr = StringUtils.stripNullTerminate(smpMsg.encodedUtf8Subscription);\n      this._sessionFSM.handleSubscriptionUpdateError(responseCode,\n                                                     responseString,\n                                                     subscriptionStr,\n                                                     correlationKey,\n                                                     requestConfirm);\n    }\n  }\n\n\n  /**\n   * Callback function for queue subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {function} callback The callback on response\n   * @private\n   */\n  handleQueueSubscriptionUpdateResponse(smpMsg, request, callback) {\n    const { LOG_TRACE } = this.logger;\n\n    if (!smpMsg) { // reuest timed out.\n      LOG_TRACE('handleQueueSubscriptionUpdateResponse called on timeout.');\n      callback(false, ErrorSubcode.TIMEOUT, 0, 'Timeout');\n      return;\n    }\n\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode, responseString);\n    LOG_TRACE('handleQueueSubscriptionUpdateResponse called.', smpMsg);\n    if (responseCode === 200 ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT) ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)\n    ) {\n      callback(true, 0, responseCode, responseString);\n    } else {\n      callback(false, errorSubcode, responseCode, responseString);\n    }\n  }\n\n  /**\n   * Callback function for DTE unsubscribe response\n   *\n   * @param {solace.AdMessage} adCtrlMessage The Guaranteed Message Protocol\n   *                           control response to the DTE unsub message\n   * @param {CorrelatedRequest} request The originating request object\n   * @private\n   */\n  handleDTEUnsubscribeResponse(adCtrlMessage, request) {\n    const response = adCtrlMessage.getResponse();\n    const {\n      responseCode,\n      responseString,\n    } = response;\n    const { correlationKey } = request;\n    const eventCode = responseCode === 200\n      ? SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK\n      : SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR;\n    const subcode = responseCode === 200\n      ? 0\n      : ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                     responseString);\n    this.sendEvent(SessionEvent.build(eventCode,\n                                      responseString,\n                                      responseCode,\n                                      subcode,\n                                      correlationKey\n    ));\n  }\n\n  /**\n   * @param {Number} respCode The returned response code\n   * @param {String} respText The returned response text\n   * @param {String} subscriptionStr The requested topic name\n   * @param {*} correlationKey The user-supplied correlation key\n   * @param {Boolean} requestConfirm Whether confirmation was requested on subscription\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode,\n                                respText,\n                                subscriptionStr,\n                                correlationKey,\n                                requestConfirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    if ((errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n         this._sessionProperties.ignoreDuplicateSubscriptionError) ||\n        (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n          this._sessionProperties.ignoreSubscriptionNotFoundError)) {\n      if (requestConfirm) {\n        // notify client\n        const sessionEvent = SessionEvent.build(\n          SessionEventCode.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          0,\n          correlationKey,\n          null\n        );\n        this.sendEvent(sessionEvent);\n      }\n    } else {\n      // notify client\n      const sessionEvent = SessionEvent.build(\n        SessionEventCode.SUBSCRIPTION_ERROR,\n        respText,\n        respCode,\n        errorSubcode,\n        correlationKey,\n        `Topic: ${subscriptionStr}`\n      );\n      this.sendEvent(sessionEvent);\n    }\n  }\n\n  /**\n   * @returns {SessionEventCBInfo} The session's event callback\n   * @private\n   */\n  getEventCBInfo() {\n    return this._eventCallbackInfo;\n  }\n\n  /**\n   * @param {SessionEventCBInfo} eventCBInfo The new event callback to set\n   * @private\n   */\n  setEventCBInfo(eventCBInfo) {\n    this._eventCallbackInfo = eventCBInfo;\n  }\n\n  /**\n   * @returns {MessageRxCBInfo} The session's message callback\n   * @private\n   */\n  getMessageCBInfo() {\n    return this._messageCallbackInfo;\n  }\n\n  /**\n   * @param {MessageRxCBInfo} messageCBInfo The new message callback to set\n   * @private\n   */\n  setMessageCBInfo(messageCBInfo) {\n    this._messageCallbackInfo = messageCBInfo;\n  }\n\n  /**\n   * @returns {String} The next correlation tag for this session.\n   * @private\n   */\n  getCorrelationTag() {\n    return this._sessionFSM.getCorrelationTag();\n  }\n\n  /**\n   * Wraps a SessionEventCBInfo or a bare function with an event emitting function.\n   * @param {SessionEventCBInfo|function|undefined} eventCallback The callback to wrap\n   * @returns {SessionEventCBInfo} A SessionEventCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapEventCallback(eventCallback) {\n    const { LOG_WARN } = this.logger;\n    const eventCallbackInfo = (() => {\n      if (!eventCallback) return null;\n      if (eventCallback.sessionEventCBFunction) return eventCallback;\n      return new SessionEventCBInfo(eventCallback);\n    })();\n    return new SessionEventCBInfo((session, sessionEvent, obj, rfu) => {\n      const { sessionEventCode } = sessionEvent;\n      if (eventCallbackInfo) {\n        try {\n          eventCallbackInfo.sessionEventCBFunction(session, sessionEvent, obj, rfu);\n        } catch (ex) {\n          const error = Object.assign(new OperationError(\n            `Unhandled error in SessionEventRxCBInfo callback on sessionEventCode ${\n              SessionEventCode.describe(sessionEventCode)}`,\n              ErrorSubcode.CALLBACK_ERROR,\n              `On event: ${[sessionEventCode, sessionEvent, obj, rfu]} ${ex}`\n            ), {\n              stack: ex.stack,\n              info:  {\n                event: {\n                  name:          sessionEventCode,\n                  formattedName: `SessionEventCode.${SessionEventCode.describe(sessionEventCode)}`,\n                  args:          [sessionEvent, obj, rfu],\n                },\n                error: ex,\n              },\n            }\n          );\n          LOG_WARN(error.toString(), error.info);\n        }\n      }\n      this.emit(sessionEventCode, sessionEvent);\n    });\n  }\n\n  /**\n   * Wraps a CBInfo or a bare function with an event emitting function.\n   * @param {MessageCBInfo|function|undefined} messageCallback The callback to wrap\n   * @returns {MessageCBInfo} A MessageCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapMessageCallback(messageCallback) {\n    const { LOG_WARN } = this.logger;\n\n    const messageCallbackInfo = (() => {\n      if (!messageCallback) return null;\n      if (messageCallback.messageRxCBFunction) return messageCallback;\n      return new MessageRxCBInfo(messageCallback);\n    })();\n\n    const formattedName = `SessionEventCode.${SessionEventCode.describe(SessionEventCode.MESSAGE)}`;\n    const buildErrorEvent = (ex, message, object) => Object.assign(\n      new OperationError(`Unhandled error in MessageRxCBInfo callback/handler for ${formattedName}`,\n                         ErrorSubcode.CALLBACK_ERROR),\n      {\n        stack: ex.stack,\n        info:  {\n          event: {\n            name: SessionEventCode.MESSAGE,\n            formattedName,\n            args: [message, object],\n          },\n          error: ex,\n        },\n      });\n\n    return new MessageRxCBInfo((session, message, object) => {\n      if (messageCallbackInfo) {\n        try {\n          messageCallbackInfo.messageRxCBFunction(session, message, object);\n        } catch (ex) {\n          const error = buildErrorEvent(ex, message, object).toString();\n          LOG_WARN(error, error.info, ex);\n        }\n      }\n      try {\n        this.emitDirect(message);\n      } catch (ex) {\n        this.emit('error', buildErrorEvent(ex, message, object));\n      }\n    });\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get adLocallyDisabled() {\n    return !!this._adDisabledReason;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectConsumer() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectPublisher() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'sessionId': this._sessionFSM && this._sessionFSM.sessionIdHex || '(N/A)',\n      'transport': this.getTransportInfo(),\n      'state':     SessionState.describe(this.getSessionState()),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.Session = Session;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary Streaming transport\n * @memberof solace\n * @private\n */\nclass StateStreamingAndBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY_STREAMING, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.streaming() && WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\n","const { Destination } = require('./lib/destination');\nconst { DestinationFromNetwork } = require('./lib/destination-from-network');\nconst { DestinationType } = require('./lib/destination-type');\nconst { DestinationUtil } = require('./lib/destination-util');\nconst { Parameter } = require('solclient-validate');\nconst { Queue } = require('./lib/queue');\nconst { SolclientFactory } = require('solclient-factory');\nconst { Topic } = require('./lib/topic');\n\n\n/**\n * Creates a topic {@link solace.Destination} instance. When the returned Destination is set as\n * the destination of a message via {@link solace.Message#setDestination}, the message will be\n * delivered to direct subscribers or topic endpoints subscribed to the given topic.\n *\n * @param {String} topicName The topic string for the new topic.\n * @returns {solace.Destination} The newly created topic destination.\n * @method\n * @name solace.SolclientFactory.createTopicDestination\n */\nSolclientFactory.createTopicDestination = SolclientFactory.createFactory((topicName) => {\n  Parameter.isString('topicName', topicName);\n  return Topic.createFromName(topicName);\n});\n/* @deprecated @*/\nSolclientFactory.createTopic = SolclientFactory.createFactory(topicName => new Topic(topicName));\n\n/**\n * Creates a durable queue {@link solace.Destination} instance. When the returned Destination is\n * set as the destination of a message via {@link solace.Message#setDestination}, the message will\n * be delivered to the Guaranteed Message queue on the Solace Message Router of the same name.\n *\n * @since 10.0.0\n * @param {String} queueName The queueName of the queue\n * @returns {solace.Destination} The newly created queue destination.\n * @method\n * @name solace.SolclientFactory.createDurableQueueDestination\n */\nSolclientFactory.createDurableQueueDestination = SolclientFactory.createFactory((queueName) => {\n  Parameter.isString('queueName', queueName);\n  return Queue.createFromLocalName(queueName);\n});\n\nmodule.exports.Destination = Destination;\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\nmodule.exports.DestinationType = DestinationType;\nmodule.exports.DestinationUtil = DestinationUtil;\nmodule.exports.Queue = Queue;\nmodule.exports.Topic = Topic;\n","const { AbstractQueueDescriptor } = require('./lib/abstract-queue-descriptor');\nconst { QueueAccessType } = require('./lib/queue-access-types');\nconst { QueueDescriptor } = require('./lib/queue-descriptor');\nconst { QueueDescriptorValidator } = require('./lib/queue-descriptor-validator');\nconst { QueueDiscardBehavior } = require('./lib/queue-discard-behaviors');\nconst { QueuePermissions } = require('./lib/queue-permissions');\nconst { QueueProperties } = require('./lib/queue-properties');\nconst { QueuePropertiesValidator } = require('./lib/queue-properties-validator');\nconst { QueueType } = require('./lib/queue-types');\nconst { EndpointNameComplaint, explainInvalidEndpointName } = require('./lib/endpoint-name-complaint');\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\nmodule.exports.QueueAccessType = QueueAccessType;\nmodule.exports.QueueDescriptor = QueueDescriptor;\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\nmodule.exports.QueueDiscardBehavior = QueueDiscardBehavior;\nmodule.exports.QueuePermissions = QueuePermissions;\nmodule.exports.QueueProperties = QueueProperties;\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\nmodule.exports.QueueType = QueueType;\nmodule.exports.EndpointNameComplaint = EndpointNameComplaint;\nmodule.exports.explainInvalidEndpointName = explainInvalidEndpointName;\n\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlMessageType = {\n  LOGIN:  0x00,\n  UPDATE: 0x01,\n};\n\nmodule.exports.SMFClientCtrlMessageType = Enum.new(SMFClientCtrlMessageType);\n","const NodeSslConstants = require('constants');\nconst PublisherLib = require('solclient-message-publisher');\nconst { APIProperties } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { LOG_WARN } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\n\nfunction makeDefaults() {\n  // Defer binding. Publisher constructor may rely on profile.\n  const { MessagePublisherProperties } = PublisherLib;\n  return {\n    _vpnNameInUse:        '',\n    _virtualRouterName:   '',\n    _p2pInboxInUse:       '',\n    _p2pInboxBase:        '',\n    _userIdentification:  '',\n    _tpProtocolInUse:     null,\n    _tpContentType:       'text/plain',\n    _publisherProperties: new MessagePublisherProperties(),\n    _payloadCompressionLevel:   0,\n  };\n}\n\nconst DEFAULT_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'AES256-GCM-SHA384',\n  'AES256-SHA256',\n  'AES256-SHA',\n  'ECDHE-RSA-DES-CBC3-SHA',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'AES128-GCM-SHA256',\n  'AES128-SHA256',\n  'AES128-SHA',\n].join(',') : null;\n\nconst SUPPORTED_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'AES128-GCM-SHA256',\n  'AES128-SHA',\n  'AES128-SHA256',\n  'AES256-GCM-SHA384',\n  'AES256-SHA',\n  'AES256-SHA256',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-DES-CBC3-SHA',\n] : null;\n\nconst SUPPORTED_SSL_PROTOCOLS = BUILD_ENV.TARGET_NODE\n? [\n  'tlsv1',\n  'tlsv1.1',\n  'tlsv1.2',\n  'tlsv1.3',\n]\n: null;\n\n/**\n * @lends SessionProperties\n *\n */\nclass SessionPropertiesBrowser extends APIProperties {\n  /**\n   * This property is deprecated.  It is recommended to use\n   * {@link solace.SessionProperties#webTransportProtocolList} instead, which explicitly lists all\n   * web transport protocols that may be used when establishing a session.\n   *\n   * This property specifies the web transport protocol that will initially be selected by the\n   * session for its connection attempt. If this protocol fails, the session will attempt other\n   * protocols in accordance with its transport protocol connect policy.\n   *\n   * If {@link solace.FactoryProfile#cometEnabled} is `true`, the selection of\n   * any {@link solace.TransportProtocol} will result in the inclusion of\n   * fallback protocols in {@link solace.SessionProperties#webTransportProtocolList}.\n   * This makes the session incompatible with Guaranteed Messaging.\n   *\n   * To create a Guaranteed Messaging compatible session with\n   * {@link solace.FactoryProfile#cometEnabled} set to `true`, ensure the session's\n   * {@link solace.SessionProperties#webTransportProtocoList} is set to only\n   * {@link solace.TransportProtocol.WS_BINARY}.\n   *\n   *  * Mutually exclusive to property webTransportProtocolList\n   *\n   * @name solace.SessionProperties#transportProtocol\n   * @type {solace.TransportProtocol}\n   * @default null\n   * @deprecated\n   * @target browser\n   */\n  get transportProtocol() {\n    return Check.nothing(this._tpProtocol) ? null : this._tpProtocol;\n  }\n  set transportProtocol(newValue) {\n    this._tpProtocol = newValue;\n  }\n\n\n  /**\n   * @name solace.SessionProperties#transportDowngradeTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout, in milliseconds, that must elapse before the session will abandon a\n   * connection attempt with the current transport protocol if no response is received, and begin\n   * a new connection attempt with a downgraded transport protocol. If no remaining downgrades\n   * exist, the session will continue the current connection attempt until the connection timeout\n   * expires. Note that the WS_BINARY transport will also attempt a downgrade if the underlying\n   * WebSocket fails to connect before this period elapses.\n   *  * The valid range is > 0.\n   * @default 3000\n   * @target browser\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return Check.nothing(this._tpDowngradeTimeout) ? 3000 : this._tpDowngradeTimeout;\n  }\n  set transportDowngradeTimeoutInMsecs(newValue) {\n    this._tpDowngradeTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#webTransportProtocolList\n   * @type {Array.<solace.TransportProtocol>}\n   * @description The user provided web transport protocol list indicating the initial protocol\n   * to be used by the session for its connection attempt, and the protocols to try\n   * subsequently if the attempt fails.\n   *  * Mutually exclusive to property transportProtocol\n   * @default null\n   * @target browser\n   */\n  get webTransportProtocolList() {\n    return Check.nothing(this._transportProtocolList)\n             ? null\n             : this._transportProtocolList;\n  }\n  set webTransportProtocolList(newValue) {\n    this._transportProtocolList = newValue;\n  }\n\n  /**\n   * @private\n   * @name SessionProperties#bufferedAmountQueryIntervalInMsecs\n   * @type {Number}\n   * @description When WebSocket transport protocol is used, SolClient uses this property\n   * and {@link solace.SessionProperties.maxWebPayload} to throttle the publishing rate in order to\n   * avoid network saturation.\n   *  * The valid range is >=4.\n   * @default 100\n   */\n  get bufferedAmountQueryIntervalInMsecs() {\n    return Check.nothing(this._bufferedAmountQueryInterval)\n    ? 100\n    : this._bufferedAmountQueryInterval;\n  }\n  set bufferedAmountQueryIntervalInMsecs(newValue) {\n    this._bufferedAmountQueryInterval = newValue;\n  }\n\n\n  /**\n   *\n   * @name solace.SessionProperties#transportProtocolInUse\n   * @type {String}\n   * @description This property is deprecated.\n   * Use {@link solace.SessionProperties#webTransportProtocolInUse} instead.\n   * @default null\n   * @readonly\n   * @target browser\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#webTransportProtocolInUse\n   * @type {String}\n   * @description A read-only property about the web transport protocol that is currently being\n   * used by the session for its current connection or connection attempt. To determine which\n   * web transport protocol was successfully used by the API, interrogate this property after the\n   * session event UP_NOTICE is dispatched.\n   * @default null\n   * @readonly\n   * @target browser\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#transportContentType\n   * @type {String}\n   * @description Transport content-type override for HTTP transports\n   * @default 'text/plain'\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType || 'text/plain';\n  }\n  set transportContentType(newValue) {\n    this._tpContentType = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'bufferedAmountQueryIntervalInMsecs': this.bufferedAmountQueryIntervalInMsecs,\n      'transportContentType':               this.transportContentType,\n      'transportDowngradeTimeoutInMsecs':   this.transportDowngradeTimeoutInMsecs,\n      'transportProtocol':                  this.transportProtocol,\n      'transportProtocolInUse':             this.transportProtocolInUse,\n      'webTransportProtocolList':           this.webTransportProtocolList,\n    };\n  }\n}\n\nclass SessionPropertiesNode extends APIProperties {\n  /**\n   * @internal\n   */\n  get transportProtocol() {\n    return this._tpProtocol;\n  }\n  set transportProtocol(value) {\n    this._tpProtocol = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolList() {\n    return this._transportProtocolList;\n  }\n  set webTransportProtocolList(value) {\n    this._transportProtocolList = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return this._tpDowngradeTimeout || 86400000; // All day\n  }\n  set transportDowngradeTimeoutInMsecs(value) {\n    this._tpDowngradeTimeout = value;\n  }\n\n  /**\n   * @internal\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType;\n  }\n  set transportContentType(value) {\n    this._tpContentType = value;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name solace.SessionProperties#sslExcludedProtocols\n   * @type {Array.<String>}\n   * @description Deprecated, use {@link solace.SessionProperties#tlsMinProtocol} and {@link solace.SessionProperties#tlsMaxProtocol} instead.\n   * @default null\n   * @target node\n   * @deprecated\n   */\n  get sslExcludedProtocols() {\n    return Check.nothing(this._sslExcludedProtocols)\n      ? null\n      : this._sslExcludedProtocols;\n  }\n  set sslExcludedProtocols(newValue) {\n    this._sslExcludedProtocols = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#tlsMinProtocol\n   * @type {String}\n   * @description The oldest TLS version to accept when connecting to the broker.\n   * Allowed values are: TLSv1.1, TLSv1.2, TLSv1.3\n   * @default \"TLSv1.2\"\n   * @target node\n   */\n  get tlsMinProtocol() {\n    return Check.nothing(this._tlsMinProtocol) ? '' : this._tlsMinProtocol;\n  }\n  set tlsMinProtocol(newValue) {\n    this._tlsMinProtocol = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#tlsMaxProtocol\n   * @type {String}\n   * @description The newest TLS version to negtiate when connecting to the broker.\n   * Allowed values are: TLSv1.1, TLSv1.2, TLSv1.3\n   * @default null\n   * @target node\n   */\n  get tlsMaxProtocol() {\n    return Check.nothing(this._tlsMaxProtocol) ? '' : this._tlsMaxProtocol;\n  }\n  set tlsMaxProtocol(newValue) {\n    this._tlsMaxProtocol = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCipherSuites\n   * @type {String}\n   * @description A comma separated list of cipher suites in order of preference used for TLS\n   * connections using TLSv1.2 or older. Ignored when TLSv1.3 is negotiated.\n   *  * Allowed values:\n   *     * AES128-GCM-SHA256\n   *     * AES128-SHA\n   *     * AES128-SHA256\n   *     * AES256-GCM-SHA384\n   *     * AES256-SHA\n   *     * AES256-SHA256\n   *     * DES-CBC3-SHA\n   *     * ECDHE-RSA-AES128-GCM-SHA256\n   *     * ECDHE-RSA-AES128-SHA\n   *     * ECDHE-RSA-AES128-SHA256\n   *     * ECDHE-RSA-AES256-GCM-SHA384\n   *     * ECDHE-RSA-AES256-SHA\n   *     * ECDHE-RSA-AES256-SHA384\n   *     * ECDHE-RSA-DES-CBC3-SHA\n   *     * RC4-SHA\n   *     * RC4-MD5\n   * @default {@link solace.SessionProperties.DEFAULT_CIPHER_SUITES}\n   * @target node\n   */\n  get sslCipherSuites() {\n    return Check.nothing(this._sslCipherSuites)\n      ? DEFAULT_CIPHER_SUITES\n      : this._sslCipherSuites;\n  }\n  set sslCipherSuites(newValue) {\n    this._sslCipherSuites = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#sslValidateCertificate\n   * @type {Boolean}\n   * @description Whether the server certificate shall be verified against the list of\n   * certificates in the trust stores. If set to false, all certificate validation is disabled,\n   * including date, hostname and common name validation.\n   * @default true\n   * @target node\n   */\n  get sslValidateCertificate() {\n    // if the value is undefined, then use environment variable\n    if (this._sslValidateCert === undefined) return (process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0');\n    if (this._sslValidateCert === null) return true;\n    return this._sslValidateCert;\n  }\n  set sslValidateCertificate(newValue) {\n    this._sslValidateCert = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustStores\n   * @type {Array.<String>}\n   * @description An array of file names of trusted certificates in PEM format.\n   * If not set, and {@link solace.SessionProperties#sslValidateCertificate} is set to true,\n   * the server certificate will be validated against well known \"root\" CAs.\n   *    * Mutually exclusive to sslPfx property when\n   *      {@link solace.SessionProperties#sslValidateCertificate} is set\n   * @default null\n   * @target node\n   */\n  get sslTrustStores() {\n    return Check.nothing(this._sslTrustStores)\n      ? null\n      : this._sslTrustStores;\n  }\n  set sslTrustStores(newValue) {\n    this._sslTrustStores = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustedCommonNameList\n   * @type {Array.<String>}\n   * @description An array of acceptable common names for matching with the server certificate.\n   * If set to a non-empty array, the API will override the default hostname validation logic\n   * provided by Node.js with its own implemenation; if set to empty array, no hostname\n   * validation will be performed.\n   *    * Only relevant when {@link solace.SessionProperties#sslValidateCertificate} is set\n   *      to true\n   *    * Note that leading and trailing whitespaces are considered to be part of the common\n   *      names and are not ignored\n   * @default null\n   * @target node\n   */\n  get sslTrustedCommonNameList() {\n    return Check.nothing(this._sslTrustedCNList)\n      ? null\n      : this._sslTrustedCNList;\n  }\n  set sslTrustedCommonNameList(newValue) {\n    this._sslTrustedCNList = newValue;\n  }\n\n  // Client certificates related\n\n  /**\n   * @name solace.SessionProperties#sslPfx\n   * @type {String}\n   * @description The file name of a file containing private key, certificate and optional\n   * CA certificates of the client in PFX or PKCS12 format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPrivateKey, sslCertificate and sslTrustStores properties\n   * @default \"\"\n   * @target node\n   */\n  get sslPfx() {\n    return Check.nothing(this._sslPfx)\n      ? ''\n      : this._sslPfx;\n  }\n  set sslPfx(newValue) {\n    this._sslPfx = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPfxPassword\n   * @type {String}\n   * @description A string containing password for the client pfx file.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPfxPassword() {\n    return Check.nothing(this._sslPfxPasswd) ? '' : this._sslPfxPasswd;\n  }\n  set sslPfxPassword(newValue) {\n    this._sslPfxPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKey\n   * @type {String}\n   * @description The file name of a file containing private key of the client in PEM format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKey() {\n    return Check.nothing(this._sslPrivateKey) ? '' : this._sslPrivateKey;\n  }\n  set sslPrivateKey(newValue) {\n    this._sslPrivateKey = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKeyPassword\n   * @type {String}\n   * @description A string containg password for the client private key.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKeyPassword() {\n    return Check.nothing(this._sslPrivateKeyPasswd) ? '' : this._sslPrivateKeyPasswd;\n  }\n  set sslPrivateKeyPassword(newValue) {\n    this._sslPrivateKeyPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCertificate\n   * @type {String}\n   * @description The file name of a file containing certificate key of the client in PEM\n   * format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslCertificate() {\n    return Check.nothing(this._sslCertificate) ? '' : this._sslCertificate;\n  }\n  set sslCertificate(newValue) {\n    this._sslCertificate = newValue;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name SessionProperties#sslProtocol\n   * @type {String}\n   * @description The SSL protocols to use.\n   *    * Allowed values are: SSLv3, TLSv1, TLSv1.1, TLSv1.2\n   * @target node\n   */\n  get sslProtocol() {\n    return this._sslProtocol;\n  }\n  set sslProtocol(newValue) {\n    this._sslProtocol = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#compressionLevel\n   * @type {Number}\n   * @description zlib compression level (1-9) or no compression (0)\n   *\n   * When this property is set to a valid, non-zero value (1-9):\n   *\n   * * tcp:// connections are established compressed.\n   * This usually requires connecting to a different tcp port on the router,\n   * 55003 by default.\n   *\n   * * tcps:// connections are established uncompressed,\n   * but then negotiate compression on login.\n   * Compression before encryption allows inference of similarities between messages\n   * from observing packet sizes on the network.\n   * This could lead to chosen Plaintext attacks.\n   * Can be combined with sslDowngradeConnectionTo for no encryption beyond authentication.\n   *\n   * * ws(s):// and http(s):// transports do not support compression and are considered invalid.\n   *\n   * @default 0\n   * @target node\n   */\n\n  get compressionLevel() {\n    return Check.nothing(this._compressionLevel) ? 0 : this._compressionLevel;\n  }\n  set compressionLevel(newValue) {\n    this._compressionLevel = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslConnectionDowngradeTo\n   * @type {solace.SslDowngrade}\n   * @description Disable encryption after authentication\n   *\n   * When set to {@link solace.SslDowngrade.PLAINTEXT},\n   * all message traffic beyond the initial login is unencrypted.\n   * A TLS connection is negotiated on the regular TLS port (55443 by default),\n   * TLS authentication schemes can be used, same as without this option.\n   * After a successful login however, a TLS shutdown is performed,\n   * and the same socket is then used for unencrypted message traffic.\n   *\n   * Please note this way plain text traffic passes on a port\n   * usually associated with encryption (55443 by default)\n   *\n   * This downgrade is only supported for tcps:// connections,\n   * all other URL schemes ignore this option.\n   *\n   * Can be combined with compressionLevel for\n   * non-encrypted, compressed message transfer after login.\n   *\n   * @default {@link solace.SslDowngrade.NONE}\n   * @target node\n   */\n  get sslConnectionDowngradeTo() {\n    return Check.nothing(this._sslConnectionDowngradeTo) ?\n      SslDowngrade.NONE : this._sslConnectionDowngradeTo;\n  }\n\n  set sslConnectionDowngradeTo(newValue) {\n    this._sslConnectionDowngradeTo = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'tlsMinProtocol':           this.tlsMinProtocol,\n      'tlsMaxProtocol':           this.tlsMaxProtocol,\n      'sslCipherSuites':          this.sslCipherSuites,\n      'sslValidateCertificate':   this.sslValidateCertificate,\n      'sslTrustStores':           this.sslTrustStores,\n      'sslTrustedCommonNameList': this.sslTrustedCommonNameList,\n      'sslPfx':                   this.sslPfx,\n      'sslPfxPassword':           this.sslPfxPassword ? '*****' : this.sslPfxPassword,\n      'sslPrivateKey':            this.sslPrivateKey,\n      'sslPrivateKeyPassword':    this.sslPrivateKeyPassword ? '*****' : this.sslPrivateKeyPassword,\n      'sslCertificate':           this.sslCertificate,\n      'sslProtocol':              this.sslProtocol,\n      'compressionLevel':         this.compressionLevel,\n      'sslConnectionDowngradeTo': this.sslConnectionDowngradeTo,\n    };\n  }\n}\n\nconst SessionPropertiesBase = BUILD_ENV.TARGET_NODE\n  ? SessionPropertiesNode\n  : SessionPropertiesBrowser;\n\n/**\n * @classdesc\n * Represents a session properties object. Passed in to\n * {@link solace.SolclientFactory.createSession} when creating a {@link solace.Session} instance.\n * @memberof solace\n * @extends APIProperties\n */\nclass SessionProperties extends SessionPropertiesBase {\n\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(makeDefaults(), options);\n  }\n\n  /**\n   * The authentication scheme used when establishing the session.\n   * @name solace.SessionProperties#authenticationScheme\n   * @type {solace.AuthenticationScheme}\n   * @default {@link solace.AuthenticationScheme.BASIC}\n   */\n  get authenticationScheme() {\n    return Check.nothing(this._authScheme)\n        ? AuthenticationScheme.BASIC\n        : this._authScheme;\n  }\n  set authenticationScheme(newValue) {\n    this._authScheme = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#accessToken\n   * @type {String}\n   * @description The access token required for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get accessToken() {\n    return Check.empty(this._accessToken)\n        ? ''\n        : this._accessToken;\n  }\n\n  set accessToken(newValue) {\n    this._accessToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#idToken\n   * @type {String}\n   * @description The ID token required for OIDC authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get idToken() {\n    return Check.empty(this._idToken)\n        ? ''\n        : this._idToken;\n  }\n\n  set idToken(newValue) {\n    this._idToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#issuerIdentifier\n   * @type {String}\n   * @description The issuer identifier is optional for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get issuerIdentifier() {\n    return Check.empty(this._issuerIdentifier)\n        ? ''\n        : this._issuerIdentifier;\n  }\n\n  set issuerIdentifier(newValue) {\n    if (!Check.type(newValue, 'string')) {\n      LOG_WARN(`Failed to set issuer identifier because the pased value ${''\n                }was not of type String. The passed issuer identifier ${''\n                }must be of type String. Setting issuer identifier to ${''\n                }default value empty string.`);\n      this._issuerIdentifier = '';\n    } else if (Check.empty(newValue)) {\n      LOG_WARN(`Failed to set the issuer identifier because the passed string was empty ${''\n                }or null. The passed issuer identifier must not be empty or null. Setting ${''\n                }issuer identifier to default value empty string.`);\n    } else {\n      this._issuerIdentifier = newValue;\n    }\n  }\n\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https`, `tcp` or `tcps`.\n   *  (Note to developers who also use the browser variant of this SDK:\n   *  Browsers do not support the `tcp` and `tcps` protocols.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. tcp://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target node\n   */\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https'.\n   *  (Note to developers who also ise the NodeJS variant of this SDK:\n   *  NodeJS also supports the 'tcp' and 'tcps' protocols, but browsers do not.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Cross-domain restrictions should be taken into consideration when deploying web\n   *    applications with messaging capabilities. See the API User Guide for more\n   *    information.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. ws://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target browser\n   */\n  get url() {\n    return Check.nothing(this._url) ? '' : this._url;\n  }\n\n  set url(newValue) {\n    this._url = newValue;\n  }\n\n  //  ======================== Credentials  ========================\n\n  /**\n   * @name solace.SessionProperties#password\n   * @type {String}\n   * @description The password required for authentication.\n   * @default \"\"\n   */\n  get password() {\n    return Check.nothing(this._password) ? '' : this._password;\n  }\n\n  set password(newValue) {\n    this._password = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#userName\n   * @type {String}\n   * @description  The client username required for authentication.\n   * @default \"\"\n   */\n  get userName() {\n    return Check.nothing(this._userName) ? '' : this._userName;\n  }\n\n  set userName(newValue) {\n    this._userName = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#clientName\n   * @type {String}\n   * @default '' (automatically generated)\n   * @description The client name that is used during login as a unique identifier for the session\n   * on the Solace Message Router.\n   *  * An empty string causes a unique client name to be generated\n   *     automatically.\n   *  * If specified, it must be a valid Topic name, and a maximum of 160 bytes in length.\n   *  * This property is also used to uniquely identify the sender in\n   *    a message's senderId field if {@link solace.SessionProperties.includeSenderId}\n   *    is set.\n   * @default \"\"\n   */\n  get clientName() {\n    return Check.nothing(this._clientName) ? '' : this._clientName;\n  }\n\n  set clientName(newValue) {\n    this._clientName = newValue;\n  }\n\n  /**\n   * A string that uniquely describes the application instance.\n   *  * If left blank, the API will generate a description string\n   *    using the current user-agent string.\n   * @default \"\"\n   * @name solace.SessionProperties#applicationDescription\n   * @type {String}\n   */\n  get applicationDescription() {\n    return Check.nothing(this._appDesc) ? '' : this._appDesc;\n  }\n  set applicationDescription(newValue) {\n    this._appDesc = newValue;\n  }\n\n  /**\n   * The Message VPN name that the client is requesting for this session.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnName\n   * @type {String}\n   */\n  get vpnName() {\n    return Check.nothing(this._vpnName) ? '' : this._vpnName;\n  }\n  set vpnName(newValue) {\n    this._vpnName = newValue;\n  }\n\n  /**\n   * A read-only session property that indicates which Message\n   * VPN the session is connected to. When not connected, or when not in client mode,\n   * an empty string is returned.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnNameInUse\n   * @type {String}\n   * @readonly\n   */\n  get vpnNameInUse() {\n    return Check.nothing(this._vpnNameInUse) ? '' : this._vpnNameInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The vpn name currently being used.\n   */\n  _setVpnNameInUse(value) {\n    this._vpnNameInUse = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#virtualRouterName\n   * @type {String}\n   * @description A read-only property that indicates the connected Solace Message Router's\n   * virtual router name.\n   * @default \"\"\n   * @readonly\n   */\n  get virtualRouterName() {\n    return Check.nothing(this._virtualRouterName) ? '' : this._virtualRouterName;\n  }\n  /**\n   * @private\n   * @param {String} value The current virtual router name.\n   */\n  _setVirtualRouterName(value) {\n    this._virtualRouterName = value;\n  }\n\n  //  ======================== Connection Strategies ========================\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is 8000.\n   *   * The valid range is > 0.\n   * @default 8000\n   * @target node\n   */\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is calculated as shown below.\n   *   * The valid range is > 0.\n   * @default max(8000, 1000 + webTransportProtocolList.length * transportDowngradeTimeoutInMsecs)\n   * @target browser\n   */\n  get connectTimeoutInMsecs() {\n    if (Check.nothing(this._connectTimeout)) {\n      return this.defaultConnectTimeoutInMsecs;\n    }\n    return this._connectTimeout;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeout = newValue;\n  }\n\n  /**\n   * @internal\n   */\n  get defaultConnectTimeoutInMsecs() {\n    const minTimeout = 8000;\n    const { webTransportProtocolList, transportDowngradeTimeoutInMsecs } = this;\n    const transportCount = webTransportProtocolList ? webTransportProtocolList.length : 1;\n    const margin = transportCount > 1 ? 1000 : 0;\n    const connectDowngradeDefault = transportCount * transportDowngradeTimeoutInMsecs + margin;\n    return Math.max(minTimeout, connectDowngradeDefault);\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting during initial connection setup.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `connectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next connection attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   * If an established connection fails, the reconnection is attempted with\n   * {@link solace.SessionProperties#reconnectRetries} retries instead.\n   *\n   *  * The valid range is connectRetries >= -1.\n   *  * -1 means try to connect forever.\n   *  * 0 means no automatic connection retries; the API will try once and then give up.\n   *  * connectRetries >= 1 means reattempt connection n times.\n   * @default 20\n   */\n  get connectRetries() {\n    return Check.nothing(this._connectRetries) ? 20 : this._connectRetries;\n  }\n  set connectRetries(newValue) {\n    this._connectRetries = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetriesPerHost\n   * @type {Number}\n   * @description When using a host list, this property defines how many times to\n   * try to connect to a single host before moving to the next host in the list.\n   *\n   *  * The valid range is connectRetriesPerHost >= -1.\n   *  * -1 means attempt an infinite number of connection retries. The API will only\n   *    attempt to connect to the first host in the list.\n   *  * 0 means make a single connection attempt per host, with no retries.\n   * @default 0\n   */\n  get connectRetriesPerHost() {\n    return Check.nothing(this._connectRetriesPerHost) ? 0 : this._connectRetriesPerHost;\n  }\n  set connectRetriesPerHost(newValue) {\n    this._connectRetriesPerHost = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetryWaitInMsecs\n   * @type {Number}\n   * @description How much time to wait (in ms) between each attempt to connect to\n   * a host.\n   * If a connect attempt is not successful, the API waits for the amount of time\n   * specified, and then makes another attempt to connect.\n   * {@link solace.SessionProperties#connectRetriesPerHost} sets how many connection\n   * attempts will be made before moving on to the next host in the list.\n   * The valid range is >= 0 and <= 60000.\n   * @default 3000\n   */\n  get reconnectRetryWaitInMsecs() {\n    return Check.nothing(this._reconnectRetryWaitInMsecs) ? 3000 : this._reconnectRetryWaitInMsecs;\n  }\n  set reconnectRetryWaitInMsecs(newValue) {\n    this._reconnectRetryWaitInMsecs = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting after a connected session goes down.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `reconnectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next reconnect attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   *  * The valid range is reconnectRetries >= -1.\n   *  * -1 means try to reconnect forever.\n   *  * 0 means no automatic reconnect retries; the API will try once and then give up.\n   *  * reconnectRetries >= 1 means reattempt reconnect n times.\n   * @default 20\n   */\n  get reconnectRetries() {\n    return Check.nothing(this._reconnectRetries) ? 20 : this._reconnectRetries;\n  }\n  set reconnectRetries(newValue) {\n    this._reconnectRetries = newValue;\n  }\n\n  //  ======================== message properties ========================\n  /**\n   * @name solace.SessionProperties#generateSendTimestamps\n   * @type {Boolean}\n   * @description When enabled, a send timestamp is automatically included\n   * (if not already present) in the Solace-defined fields for\n   * each message sent.\n   * @default  false\n   */\n  get generateSendTimestamps() {\n    return Check.nothing(this._genSendTimestamps) ? false : this._genSendTimestamps;\n  }\n  set generateSendTimestamps(newValue) {\n    this._genSendTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateReceiveTimestamps\n   * @type {Boolean}\n   * @description When enabled, a receive timestamp is recorded for\n   * each message and passed to the session's message callback receive handler.\n   * @default  false\n   */\n  get generateReceiveTimestamps() {\n    return Check.nothing(this._genReceiveTimestamps) ? false : this._genReceiveTimestamps;\n  }\n  set generateReceiveTimestamps(newValue) {\n    this._genReceiveTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#includeSenderId\n   * @type {Boolean}\n   * @description When enabled, a sender ID is automatically included\n   * (if not already present) in the Solace-defined fields for each message\n   * sent.\n   * @default  false\n   */\n  get includeSenderId() {\n    return Check.nothing(this._includeSenderId) ? false : this._includeSenderId;\n  }\n  set includeSenderId(newValue) {\n    this._includeSenderId = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateSequenceNumber\n   * @type {Boolean}\n   * @description When enabled, a sequence number is automatically\n   * included (if not already present) in the Solace-defined fields\n   * for each message sent.\n   * @default  false\n   */\n  get generateSequenceNumber() {\n    return Check.nothing(this._genSequenceNumber) ? false : this._genSequenceNumber;\n  }\n  set generateSequenceNumber(newValue) {\n    this._genSequenceNumber = newValue;\n  }\n\n  //  ======================== Keep Alive ========================\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalInMsecs\n   * @type {Number}\n   * @description The amount of time (in milliseconds) to wait between sending\n   * out keep-alive messages to the Solace Message Router.\n   *  * The valid range is > 0.\n   * @default  3000\n   */\n  get keepAliveIntervalInMsecs() {\n    return Check.nothing(this._kaInterval) ? 3000 : this._kaInterval;\n  }\n  set keepAliveIntervalInMsecs(newValue) {\n    this._kaInterval = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalsLimit\n   * @type {Number}\n   * @description The maximum number of consecutive Keep-Alive messages that\n   * can be sent without receiving a response before the session is declared down\n   * and the connection is closed by the API.\n   *  * The valid range is >= 3.\n   * @default 3\n   */\n  get keepAliveIntervalsLimit() {\n    return Check.nothing(this._kaIntervalsLimit) ? 3 : this._kaIntervalsLimit;\n  }\n  set keepAliveIntervalsLimit(newValue) {\n    this._kaIntervalsLimit = newValue;\n  }\n\n  // ======================== P2P Inbox ========================\n\n  /**\n   * @name solace.SessionProperties#p2pInboxInUse\n   * @type {String}\n   * @description A read-only string that indicates the default\n   * reply-to destination used for any request messages sent from this session.\n   * See {@link solace.Session#sendRequest}.\n   * This parameter is only valid when the session is connected.\n   * @default \"\"\n   * @readonly\n   */\n  get p2pInboxInUse() {\n    return Check.nothing(this._p2pInboxInUse) ? '' : this._p2pInboxInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P subscription.\n   */\n  _setP2pInboxInUse(value) {\n    this._p2pInboxInUse = value;\n  }\n\n  /**\n   * @private\n   *\n   * @name solace.SessionProperties#p2pInboxBase\n   * @description A read-only information string that stores the P2P topic subscription\n   * obtained from the Solace Message Router.\n   * This parameter is only valid when the session is connected.\n   * @default  \"\"\n   * @readonly\n   */\n  get p2pInboxBase() {\n    return Check.nothing(this._p2pInboxBase) ? '' : this._p2pInboxBase;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P inbox root subscription. The subscription on the router\n   *   additionally contains '/>', so extra topic levels can be added to this root and messages to\n   *   those topics will be attracted with the subscription.\n   */\n  _setP2pInboxBase(value) {\n    this._p2pInboxBase = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#userIdentification\n   * @type {String}\n   * @description A read-only string providing information\n   * about the application, such as the name of operating system\n   * that is running the application.\n   * @default  \"\"\n   * @readonly\n   */\n  get userIdentification() {\n    return Check.nothing(this._userIdentification) ? '' : this._userIdentification;\n  }\n  /**\n   * @private\n   * @param {String} value The current userId\n   */\n  _setUserIdentification(value) {\n    this._userIdentification = value;\n  }\n\n  // ================== Subscriptions ========================\n  /**\n   *\n   * @name solace.SessionProperties#subscriberLocalPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority. Subscribers have two priorities; this\n   * priority is for messages published locally.\n   *  * The valid range is 1..4\n   * @default 1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberLocalPriority() {\n    return Check.nothing(this._subLocalPriority) ? 1 : this._subLocalPriority;\n  }\n  set subscriberLocalPriority(newValue) {\n    this._subLocalPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#subscriberNetworkPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority.\n   *\n   * Subscribers have two priorities; this priority is for messages published on Solace Message\n   * Routers other than the one that the client is connected to.\n   *  * The valid range is 1..4\n   * @default  1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberNetworkPriority() {\n    return Check.nothing(this._subNetworkPriority) ? 1 : this._subNetworkPriority;\n  }\n  set subscriberNetworkPriority(newValue) {\n    this._subNetworkPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreDuplicateSubscriptionError\n   * @type {Boolean}\n   * @description Used to ignore duplicate subscription errors on subscribe.\n   * @default  true\n   */\n  get ignoreDuplicateSubscriptionError() {\n    return Check.nothing(this._ignoreDupSubError) ? true : this._ignoreDupSubError;\n  }\n  set ignoreDuplicateSubscriptionError(newValue) {\n    this._ignoreDupSubError = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreSubscriptionNotFoundError\n   * @type {Boolean}\n   * @description Used to ignore subscription not found errors on unsubscribe.\n   * @default  true\n   */\n  get ignoreSubscriptionNotFoundError() {\n    return Check.nothing(this._ignoreSubNotFoundError) ? true : this._ignoreSubNotFoundError;\n  }\n  set ignoreSubscriptionNotFoundError(newValue) {\n    this._ignoreSubNotFoundError = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#reapplySubscriptions\n   * @type {Boolean}\n   * @description Set to 'true' to have the API remember subscriptions and reapply them upon\n   * calling {@link solace.Session#connect} on a disconnected session.\n   * @default  false\n   */\n  get reapplySubscriptions() {\n    return Check.nothing(this._reapplySubcriptions) ? false : this._reapplySubcriptions;\n  }\n  set reapplySubscriptions(newValue) {\n    this._reapplySubcriptions = newValue;\n  }\n\n  // ================== AD configuration ========================\n  /**\n   * Sets the guaranteed messaging publisher properties for the session.\n   * If the supplied value is not a {@link solace.MessagePublisherProperties},\n   * one will be constructed using the supplied value as an argument.\n   *\n   * @name solace.SessionProperties#publisherProperties\n   * @type {solace.MessagePublisherProperties|null|undefined}\n   * @default undefined\n   */\n  get publisherProperties() {\n    return this._publisherProperties;\n  }\n  set publisherProperties(val) {\n    const { MessagePublisherProperties } = PublisherLib;\n    this._publisherProperties = val instanceof MessagePublisherProperties\n      ? val\n      : new MessagePublisherProperties(val);\n  }\n\n  // ================== Transport configuration ========================\n\n  /**\n   *\n   * @name solace.SessionProperties#noLocal\n   * @type {Boolean}\n   * @description Set to 'true' to signal the Solace Message Router that messages published on the\n   * session should not be received on the same session even if the client has a subscription that\n   * matches the published topic. If this restriction is requested, and the Solace Message Router\n   * does not have No Local support, the session connect will fail.\n   * @default  false\n   */\n  get noLocal() {\n    return Check.nothing(this._noLocal) ? false : this._noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#readTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a reply to\n   * come back from the Solace Message Router. This timeout serves as the default\n   * request timeout for {@link solace.Session#subscribe},\n   * {@link solace.Session#unsubscribe}, {@link solace.Session#updateProperty}.\n   *  * The valid range is >= 0.\n   * @default 10000\n   */\n  get readTimeoutInMsecs() {\n    return Check.nothing(this._readTimeout) ? 10000 : this._readTimeout;\n  }\n  set readTimeoutInMsecs(newValue) {\n    this._readTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sendBufferMaxSize\n   * @type {Number}\n   * @description The maximum buffer size for the transport session. This size must be bigger\n   * than the largest message an application intends to send on the session.\n   *\n   * The session buffer size configured using the sendBufferMaxSize\n   * session property controls SolClient buffering of transmit messages. When\n   * sending small messages, the session buffer size should be set to multiple times\n   * the typical message size to improve the performance. Regardless of the buffer\n   * size, SolClient always accepts at least one message to transmit. So even if a\n   * single message exceeds sendBufferMaxSize, it is accepted and\n   * transmitted as long as the current buffered data is zero. However, no more\n   * messages are accepted until the amount of data buffered is reduced\n   * enough to allow room below sendBufferMaxSize.\n   *  * The valid range is > 0.\n   *\n   * @default 65536 (64KB)\n   */\n  get sendBufferMaxSize() {\n    return Check.nothing(this._sendBufferMaxSize) ? (64 * 1024) : this._sendBufferMaxSize;\n  }\n  set sendBufferMaxSize(newValue) {\n    this._sendBufferMaxSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#assumedMaxAdSize\n   * @type {Number}\n   * @description The assumed maximum AD message payload size before the session is established.\n   * This value is irrelevant after session connection establishment,\n   * because at that point the broker-reported AD size limit takes precedence.\n   *\n   * Before the session is connected, messages with payloads larger than this number\n   * are rejected upon send().\n   * The default value of 30000000 is appropriate for appliances, whereas for VMRs it should be set to 10000000.\n   *\n   *  * The valid range is > 0.\n   *\n   * @default 30000000 \n   */\n  get assumedMaxAdSize() {\n    return Check.nothing(this._assumedMaxAdSize) ? 30000000 : this._assumedMaxAdSize;\n  }\n  set assumedMaxAdSize(newValue) {\n    this._assumedMaxAdSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#maxWebPayload\n   * @type {Number}\n   * @description The maximum payload size (in bytes) when sending data using the Web transport\n   * protocol.  Large messages may fail to be sent to the Solace Message Router when the maximum web\n   * payload is set to a small value. To avoid this, use a large maximum web payload.\n   *  * The valid range is >= 100.\n   * @default 1048576 (1MB)\n   */\n  get maxWebPayload() {\n    return Check.nothing(this._maxWebPayload) ? (1024 * 1024) : this._maxWebPayload;\n  }\n  set maxWebPayload(newValue) {\n    this._maxWebPayload = newValue;\n  }\n\n  /**\n   * @private\n   */\n  get nonHTTPTransportPropsSet() {\n      // Calculate on demand based on presence of properties.\n      // Currently not tracking this so no property names listed.\n    return [].filter(k => Check.something(this[k]));\n  }\n\n  // ================== PAYLOAD COMPRESSION ========================\n  /**\n   * @name solace.SessionProperties#payloadCompressionLevel\n   * @type {Number}\n   * @description Valid values for the payload compression level to be applied to the payload of a message published by a client are 0-9.\n   * <p> Value meanings: </p>\n   * <ul>\n   * <li> 0 - disable payload compression (the default) </li>\n   * <li> 1 - lowest CPU impact </li>\n   * <li> 9 - highest compression </li>\n   * </ul>\n   * Values 1-9 are passed straight to zlib, 0 disables the payload compression feature on outgoing messages.\n   * No impact on payload-compressed incoming messages. \n   * <p>\n   * Default: 0\n   * </p>\n   * @default 0\n   */\n  get payloadCompressionLevel(){\n    return Check.nothing(this._payloadCompressionLevel)? 0 : this._payloadCompressionLevel;\n  }\n  set payloadCompressionLevel(newValue){\n    this._payloadCompressionLevel = newValue;\n  }\n\n  /**\n   * @returns {String} A brief description of this object\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(this._lendsInspect(), {\n      'authenticationScheme':             AuthenticationScheme.describe(this.authenticationScheme),\n      'accessToken':                      this.accessToken ? '*****' : 'Not Set',\n      'idToken':                          this.idToken ? '*****' : 'Not Set',\n      'issuerIdentifier':                 this.issuerIdentifier ? '*****' : 'Not Set',\n      'url':                              this.url,\n      'password':                         this.password ? '*****' : this.password,\n      'userName':                         this.userName,\n      'clientName':                       this.clientName,\n      'applicationDescription':           this.applicationDescription,\n      'vpnName':                          this.vpnName,\n      'vpnNameInUse':                     this.vpnNameInUse,\n      'virtualRouterName':                this.virtualRouterName,\n      'connectTimeoutInMsecs':            this.connectTimeoutInMsecs,\n      'connectRetries':                   this.connectRetries,\n      'connectRetriesPerHost':            this.connectRetriesPerHost,\n      'reconnectRetryWaitInMsecs':        this.reconnectRetryWaitInMsecs,\n      'reconnectRetries':                 this.reconnectRetries,\n      'generateSendTimestamps':           this.generateSendTimestamps,\n      'generateReceiveTimestamps':        this.generateReceiveTimestamps,\n      'includeSenderId':                  this.includeSenderId,\n      'generateSequenceNumber':           this.generateSequenceNumber,\n      'keepAliveIntervalInMsecs':         this.keepAliveIntervalInMsecs,\n      'keepAliveIntervalsLimit':          this.keepAliveIntervalsLimit,\n      'p2pInboxInUse':                    this.p2pInboxInUse,\n      'p2pInboxBase':                     this.p2pInboxBase,\n      'userIdentification':               this.userIdentification,\n      'subscriberLocalPriority':          this.subscriberLocalPriority,\n      'subscriberNetworkPriority':        this.subscriberNetworkPriority,\n      'ignoreDuplicateSubscriptionError': this.ignoreDuplicateSubscriptionError,\n      'reapplySubscriptions':             this.reapplySubscriptions,\n      'publisherProperties':              this.publisherProperties,\n      'noLocal':                          this.noLocal,\n      'readTimeoutInMsecs':               this.readTimeoutInMsecs,\n      'sendBufferMaxSize':                this.sendBufferMaxSize,\n      'maxWebPayload':                    this.maxWebPayload,\n      'payloadCompressionLevel':          this.payloadCompressionLevel\n    });\n  }\n\n  /**\n   * @name solace.SessionProperties#toString\n   * @method\n   * @description Returns a human-readable representation of this Session, subject to change.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return super.toString(); // only here for the docs\n  }\n\n}\n\n// Don't try to evaluate these constants in browser mode\nif (BUILD_ENV.TARGET_NODE) {\n  /**\n   * @description The default comma separated list of cipher suites in\n   * order of preference used for pre-TLSv1.3 TLS connections.\n   * @constant\n   * @type {String}\n   */\n  SessionProperties.DEFAULT_CIPHER_SUITES = DEFAULT_CIPHER_SUITES;\n\n  /**\n   * A list of cipher suites supported by the API when using pre-TLSv1.3 TLS connections\n   * @constant\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_CIPHER_SUITES = SUPPORTED_CIPHER_SUITES;\n\n  /**\n   * SSL protocols supported by the API when using TLS connections\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_SSL_PROTOCOLS = SUPPORTED_SSL_PROTOCOLS;\n\n  /* eslint-disable */ // don't mangle import\n  SessionProperties.SslProtocolExcludeConstantMap = {\n    ['sslv2']:   NodeSslConstants['SSL_OP_NO_SSLv2'] || 0,\n    ['sslv3']:   NodeSslConstants['SSL_OP_NO_SSLv3'] || 0,\n    ['tlsv1']:   NodeSslConstants['SSL_OP_NO_TLSv1'] || 0,\n    ['tlsv1.1']: NodeSslConstants['SSL_OP_NO_TLSv1_1'] || 0,\n    ['tlsv1.2']: NodeSslConstants['SSL_OP_NO_TLSv1_2'] || 0,\n    ['tlsv1.3']: 0,\n  };\n  /* eslint-enable */ // don't mangle import\n}\n\n\nmodule.exports.SessionProperties = SessionProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlParam = {\n  SOFTWAREVERSION:              0x00,\n  SOFTWAREDATE:                 0x01,\n  PLATFORM:                     0x02,\n  USERID:                       0x03,\n  CLIENTDESC:                   0x04,\n  CLIENTNAME:                   0x05,\n  MSGVPNNAME:                   0x06,\n  DELIVERTOONEPRIORITY:         0x07,\n  P2PTOPIC:                     0x08,\n  ROUTER_CAPABILITIES:          0x09,\n  VRIDNAME:                     0x0a,\n  PHYSICALROUTERNAME:           0x0c,\n  BRIDGE_MSG_VPN_NAME:          0x0d,\n  BRIDGE_ROUTER_NAME:           0x0e,\n  NO_LOCAL:                     0x0f,\n  BRIDGE_VERSION:               0x10,\n  AUTHENTICATION_SCHEME:        0x11,\n  CONNECTION_TYPE:              0x12,\n  ROUTER_CAPABILITIES_EXTENDED: 0x13,\n  REQUIRES_RELEASE_7:           0x14, // not supported.\n  SSL_DOWNGRADE:                0x15,\n  CLIENT_CAPABILITIES:          0x17,\n  KEEP_ALIVE_INTERVAL:          0x18,\n};\n\n// Internal use only\nconst SMFClientCtrlAuthType = {\n  CLIENT_CERTIFICATE: '\\x01',\n  OAUTH2:             '\\x0a',\n};\n\nmodule.exports.SMFClientCtrlAuthType = Enum.new(SMFClientCtrlAuthType);\nmodule.exports.SMFClientCtrlParam = Enum.new(SMFClientCtrlParam);\n","// This code was written by Tyler Akins and has been placed in the\n// public domain.  It would be nice if you left this header intact.\n// Base64 code from Tyler Akins -- http://rumkin.com\n\n// It has been modified by me (Edward Funnekotter) to improve its\n// efficiency\n\n// It has been modified by me (Justin Bowes) to avoid using it whenever\n// possible in favour of browser or buffer implementations.\n\nconst KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst ENC_LUT = [\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, 99, -1, -1, 99, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  99, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, 62, -1, -1, -1, 63,\n  52, 53, 54, 55, 56, 57, 58, 59,\n  60, 61, -1, -1, -1, 64, -1, -1,\n\n    // 64\n  -1, 0, 1, 2, 3, 4, 5, 6,\n  7, 8, 9, 10, 11, 12, 13, 14,\n  15, 16, 17, 18, 19, 20, 21, 22,\n  23, 24, 25, -1, -1, -1, -1, -1,\n  -1, 26, 27, 28, 29, 30, 31, 32,\n  33, 34, 35, 36, 37, 38, 39, 40,\n  41, 42, 43, 44, 45, 46, 47, 48,\n  49, 50, 51, -1, -1, -1, -1, -1,\n\n    // 128\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n\n    // 192\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1];\n\nclass DecodeError extends Error {\n\n}\n\nconst LegacyEncoder = {\n  /**\n   * Encodes a string in base64\n   * @param {String} input The string to encode in base64.\n   * @returns {String} base64 encoded input\n   * @private\n   */\n  base64_encode(input) {\n    let output = '';\n    let i = 0;\n    do {\n      const chr1 = input.charCodeAt(i++);\n      const chr2 = input.charCodeAt(i++);\n      const chr3 = input.charCodeAt(i++);\n\n      const enc1 = chr1 >> 2;\n      const enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n      let enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n      let enc4 = chr3 & 63;\n\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n\n      output += KEY_STR.charAt(enc1);\n      output += KEY_STR.charAt(enc2);\n      output += KEY_STR.charAt(enc3);\n      output += KEY_STR.charAt(enc4);\n    } while (i < input.length);\n\n    return output;\n  },\n\n  /**\n   * Decodes a base64 string.\n   * @param {String} input The base64 string to decode.\n   * @returns {String} binary output\n   * @private\n   */\n  base64_decode(input) {\n    let output = '';\n    let i = 0;\n\n    do {\n      while (ENC_LUT[input.charCodeAt(i)] > 64) {\n        i++;\n      }\n      const enc1 = ENC_LUT[input.charCodeAt(i++)];\n      const enc2 = ENC_LUT[input.charCodeAt(i++)];\n      const enc3 = ENC_LUT[input.charCodeAt(i++)];\n      const enc4 = ENC_LUT[input.charCodeAt(i++)];\n\n      if (enc1 < 0 || enc2 < 0 || enc3 < 0 || enc4 < 0) {\n        // Invalid character in base64 text\n        // alert(\"enc at \" + i + \": \" + enc1 + \", \" + enc2 + \", \" + enc3 + \", \" + enc4);\n        throw new DecodeError('Invalid base64 character');\n      }\n\n      const chr1 = (enc1 << 2) | (enc2 >> 4);\n      const chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n      const chr3 = ((enc3 & 3) << 6) | enc4;\n\n      output += String.fromCharCode(chr1);\n\n      if (enc3 !== 64) {\n        output += String.fromCharCode(chr2);\n      }\n      if (enc4 !== 64) {\n        output += String.fromCharCode(chr3);\n      }\n    } while (i < input.length - 3);\n\n    return output;\n  },\n};\n\nconst isNode = typeof window === 'undefined'; // !node\nconst hasBuffer = typeof Buffer !== 'undefined';\nconst hasBlob = typeof Blob !== 'undefined'; // !node, !ie9\nconst BufferEncoder = (hasBuffer && (hasBlob || isNode))\n  ? {\n    base64_encode: str => Buffer.from(str, 'binary').toString('base64'),\n    base64_decode: str => Buffer.from(str, 'base64').toString('binary'),\n  }\n  : {};\n/* eslint-env browser */\n/* eslint-disable dot-notation */\nconst WindowEncoder = (typeof window !== 'undefined')\n  ? {\n    base64_encode: window['btoa'] ? b => window['btoa'](b) : null,\n    base64_decode: window['atob'] ? a => window['atob'](a) : null,\n  }\n  : {};\n/* eslint-enable dot-notation */\n\nconst Base64 = {\n  encode: (WindowEncoder.base64_encode ||\n           BufferEncoder.base64_encode ||\n           LegacyEncoder.base64_encode),\n  decode: (WindowEncoder.base64_decode ||\n           BufferEncoder.base64_decode ||\n           LegacyEncoder.base64_decode),\n};\n\nmodule.exports.Base64 = Base64;\n","/**\n * This class is used to efficiently concatenate strings.\n * @private\n */\nclass StringBuffer {\n  /**\n   * @constructor\n   * @param {...*} args Initial buffer contents\n   * @private\n   */\n  constructor(...args) {\n    this.clear();\n    this.append(...args);\n  }\n\n  /**\n   * Appends the given strings to the buffer\n   *\n   * @param {...*} args Objects to add to the buffer. These are immediately\n   *                    coerced to strings.\n   * @returns {StringBuffer} this\n   */\n  append(...args) {\n    [...args].forEach((arg) => {\n      this.buffer[this.index++] = String(arg);\n    });\n    return this;\n  }\n\n  /**\n   * Resets the buffer.\n   */\n  clear() {\n    this.buffer = [];\n    this.index = 0;\n  }\n\n  /**\n   * Returns the buffer as a string. Additional concatenations and renderings\n   * can be performed.\n   * @returns {String} The buffer's contents concatenated to a string.\n   */\n  toString() {\n    return this.buffer.join('');\n  }\n}\n\nmodule.exports.StringBuffer = StringBuffer;\n","const PublisherLib = require('solclient-message-publisher');\nconst SessionPropertiesLib = require('./session-properties');\nconst SMFLib = require('solclient-smf');\nconst { APIPropertiesValidators, parseURL } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN, LOG_INFO } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { TransportProtocol } = require('solclient-transport');\n\nconst {\n  validateInstance,\n  valArrayIsMember,\n  valArrayOfString,\n  valBoolean,\n  valLength,\n  valNotEmpty,\n  valNumber,\n  valRange,\n  valString,\n  valStringOrArray,\n} = APIPropertiesValidators;\n\nconst ALLOWED_PROTOCOLS = ['http:', 'https:', 'ws:', 'wss:', 'tcp:', 'tcps:'];\n\nfunction valClientName(typeDesc, instance, name) {\n  // valString and valLength(160) have already been called.\n  const error =\n    SMFLib.ClientCtrlMessage.validateClientName(\n      instance[name],\n      errorMessage =>\n        new OperationError(`${typeDesc} validation: Property '${name}': ${errorMessage}`,\n                           ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n  if (error) {\n    throw error;\n  }\n}\n\nfunction valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull) {\n  const val = instance[key];\n  if (allowNull && val === null) return;\n  if (typeof (val) !== 'undefined' && !enumInstance.values.some(v => v === val)) {\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }' must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n}\n\n// Works on an array, not an enum. Not very consistent, but it's what I need just now.\nfunction valIsMemberIgnoreCase(typeDesc, instance, key, arr, enumName, allowFalsy) {\n  const val = instance[key];\n  if (allowFalsy && !val ) return;\n  if (typeof (val) !== 'undefined' && !arr.some(v => v.toLowerCase() === val.toLowerCase())) {\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }' must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n}\n\nfunction valSslExcludedProtocols(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.array(val)) {\n    if (val.length > 0) {\n      const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS;\n      val.forEach((protocol) => {\n        const prtcl = protocol.toLowerCase();\n        if (supported.indexOf(prtcl) < 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                   }' contains unsupported protocol: ${protocol}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      });\n    }\n  }\n}\n\nfunction valSslCipherSuites(typeDesc, instance, name) {\n  const val = instance[name];\n  if (val && Check.string(val) && !Check.empty(val)) {\n    const ciphers = val.split(',');\n    const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_CIPHER_SUITES;\n    ciphers.forEach((cipher) => {\n      if (supported.indexOf(cipher.trim()) < 0) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                        }' contains unsupported cipher suite: '${cipher}'`,\n                        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    });\n  }\n}\n\n// maximum number of common names is 16\nfunction valSslTrustedCommonNameList(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.something(val) && Check.array(val) && val.length > 16) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                }' length exceeds limit of 16`,\n                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction valUrlList(typeDesc, instance, name) {\n  const val = instance[name];\n  const valArray = typeof val === 'string' ? val.split(',') : val;\n  if (!Check.array(valArray)) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' not an array or comma-delimited string`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n  valArray.forEach((el) => {\n    let url = null;\n    try {\n      url = parseURL(el);\n    } catch (ex) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained an invalid URL: ${el}`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (!Check.included(url.protocol, ALLOWED_PROTOCOLS)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained a URL'${url.href\n                                }' with an invalid protocol: '${url.protocol}'`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  });\n}\n\nfunction isHttpTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol === TransportProtocol.HTTP_BINARY_STREAMING ||\n          transportProtocol === TransportProtocol.HTTP_BINARY ||\n          transportProtocol === TransportProtocol.HTTP_BASE64));\n}\n\nfunction validatePropsSupportedByTransport(transportProtocol, nonHttpPropsSet) {\n  if (nonHttpPropsSet.length > 0 && isHttpTransport(transportProtocol)) {\n    const propNames = nonHttpPropsSet.length <= 5 ? nonHttpPropsSet : nonHttpPropsSet.slice(0, 5);\n    throw new OperationError(`SessionProperties validation: properties that are not supported by transport protocol ${\n                    transportProtocol} have been set: ${propNames}`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction matchUrl(instance, name, regex, all) {\n  const val = instance[name];\n  if (val instanceof Array) {\n    // host list is used, iterate to find at least one entry\n    const arrayLength = val.length;\n    for (let i = 0; i < arrayLength; i++) {\n      const currententry = val[i];\n      if (!all) {\n        if (Check.string(currententry) && currententry.match(regex)) {\n          return true;\n        }\n      } else if (all) {\n        if (!Check.string(currententry) || !currententry.match(regex)) {\n          return false;\n        }\n      }\n    }\n    if (!all) {\n      return false;\n    } else if (all) {\n      return true;\n    }\n  }\n  return (Check.string(val) && val.match(regex));\n}\n\nfunction useSsl(instance, name, all) {\n  return matchUrl(instance, name, /^(https|wss|tcps):/i, all);\n}\n\nconst SessionPropertiesValidator = {\n  validate(props) {\n    // Validation rules: same as JCSMP\n    const v = validateInstance.bind(null, 'SessionProperties', props);\n    v('url', [valNotEmpty], [valStringOrArray], [valUrlList]);\n    v('userName', [valString], [valLength, 189]);\n    v('password', [valString], [valLength, 128]);\n    v('clientName', [valString], [valLength, 160], [valClientName]);\n    v('applicationDescription', [valString], [valLength, 254]);\n    v('vpnName', [valString], [valLength, 32]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('connectRetriesPerHost', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('connectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetryWaitInMsecs', [valNumber], [valRange, 0, 60000]);\n    v('readTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('sendBufferMaxSize', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('maxWebPayload', [valNumber], [valRange, 100, Number.MAX_VALUE]);\n    if (BUILD_ENV.TARGET_BROWSER) {\n      v('bufferedAmountQueryIntervalInMsecs', [valNumber], [valRange, 4, Number.MAX_VALUE]);\n    }\n    v('generateSendTimestamps', [valBoolean]);\n    v('generateReceiveTimestamps', [valBoolean]);\n    v('includeSenderId', [valBoolean]);\n    v('keepAliveIntervalInMsecs', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('keepAliveIntervalsLimit', [valNumber], [valRange, 3, Number.MAX_VALUE]);\n    v('generateSequenceNumber', [valBoolean]);\n    v('subscriberLocalPriority', [valNumber], [valRange, 1, 4]);\n    v('subscriberNetworkPriority', [valNumber], [valRange, 1, 4]);\n    v('ignoreDuplicateSubscriptionError', [valBoolean]);\n    v('ignoreSubscriptionNotFoundError', [valBoolean]);\n    v('reapplySubscriptions', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('transportDowngradeTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('idToken', [valString]);\n    v('accessToken', [valString]);\n    v('payloadCompressionLevel', [valNumber], [valRange, 0, 9]);\n\n    if (props.transportProtocol && props.webTransportProtocolList) {\n      throw new OperationError(\"SessionProperties validation: Property 'transportProtocol' and \" +\n                               \"'webTransportProtocolList' cannot be set at the same time\",\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (props.webTransportProtocolList !== null && props.webTransportProtocolList !== undefined) {\n      if (!Array.isArray(props.webTransportProtocolList)) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be an array if set\",\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (props.webTransportProtocolList.length === 0) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be non-empty if set\",\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    }\n\n    v('authenticationScheme', [valIsMember, AuthenticationScheme, 'AuthenticationScheme', false]);\n    const useClientCert = props.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    if (!useSsl(props, 'url', true) && useClientCert) {\n      throw new OperationError(\"SessionProperties validation: Property 'authenticationScheme' cannot be set to client certificate \" +\n                               'for unsecured sessions', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (Check.equal(props.authenticationScheme, AuthenticationScheme.OAUTH2)) {\n      if (!useSsl(props, 'url', true)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }cannot be set to '${AuthenticationScheme.OAUTH2}' unless the ${''\n                                 }session property 'url' is written to use a secure ${''\n                                 }communication protocol like tcps or https.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      if (Check.empty(props.idToken) && Check.empty(props.accessToken)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }can be set to ${''\n                                 }'${AuthenticationScheme.OAUTH2}' only if there ${''\n                                 }is an accompanying token set as a session property. The ${''\n                                 }token types that are ${''\n                                 }supported for OAuth authentication are OAuth2.0 Access ${''\n                                 }Tokens and OpenID Connect ID Tokens. To set an access token ${''\n                                 }you can use the accessToken session property. To set an id ${''\n                                 }you can use the idToken session property.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (!Check.empty(props.idToken) || !Check.empty(props.accessToken)) {\n      LOG_INFO(`SessionProperties validation: Property ${''\n               }'authenticationScheme' must be set to ${''\n               }'${AuthenticationScheme.OAUTH2}'in order to use either ${''\n               } an OAUTH2 access token or an OpenID Connect ID token.`);\n    }\n\n\n    if (BUILD_ENV.TARGET_NODE) {\n      // should not happen since transportProtocol and webTransportProtocolList are not public\n      if (Check.something(props.transportProtocol) &&\n          props.transportProtocol !== TransportProtocol.WS_BINARY) {\n        throw new OperationError(\"SessionProperties validation: properties 'transportProtocol' \" +\n                                 'can only be WS_BINARY',\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (Check.something(props.webTransportProtocolList)) {\n        if (!Check.array(props.webTransportProtocolList)) {\n          throw new OperationError('SessionProperties validation: Property ' +\n                                   \"'webTransportProtocolList' should be type Array\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n        if (props.webTransportProtocolList.length !== 1 ||\n            props.webTransportProtocolList[0] !== TransportProtocol.WS_BINARY) {\n          throw new OperationError('SessionProperties validation: properties ' +\n                                   \"'webTransportProtocolList' can only contain element WS_BINARY\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      }\n\n      v('sslExcludedProtocols', [valArrayOfString], [valSslExcludedProtocols]);\n      v('tlsMinProtocol', [valString], [valIsMemberIgnoreCase, SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS, \"SUPPORTED_SSL_PROTOCOLS\" , true]);\n      v('tlsMaxProtocol', [valString], [valIsMemberIgnoreCase, SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS, \"SUPPORTED_SSL_PROTOCOLS\" , true]);\n\n      if (props.tlsMinProtocol && props.tlsMaxProtocol) {\n        const minIndex = SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS.indexOf(props.tlsMinProtocol.toLowerCase())\n        const maxIndex = SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS.indexOf(props.tlsMaxProtocol.toLowerCase())\n        if (minIndex > maxIndex) {\n          throw new OperationError(`SessionProperties validation: Property 'tlsMinProtocol' ` +\n                                   `cannot be higher than 'tlsMaxProtocol'.`,\n                                   ErrorSubcode.PARAMETER_CONFLICT);\n        }\n      }\n\n      if (props.sslExcludedProtocols && (props.tlsMinProtocol || props.tlsMaxProtocol)) {\n        throw new OperationError(\"SessionProperties validation: Can't mix deprecated 'sslExcludedProtocols' \"+\n                                 \"with 'tlsMinProtocol' and 'tlsMaxProtocol'.\",\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n\n      v('sslCipherSuites', [valString], [valSslCipherSuites]);\n      v('sslValidateCertificate', [valBoolean]);\n\n      if (props.sslValidateCertificate || useClientCert) {\n        v('sslTrustStores', [valArrayOfString]);\n        v('sslTrustedCommonNameList', [valArrayOfString], [valSslTrustedCommonNameList]);\n      }\n\n      if (useClientCert) {\n        v('sslPfx', [valString]);\n        v('sslPfxPassword', [valString]);\n        v('sslPrivateKey', [valString]);\n        v('sslPrivateKeyPassword', [valString]);\n        v('sslCertificate', [valString]);\n        // either sslPfx or sslPrivateKey and sslCertificate must be specified,\n        // but not at the same time\n        const sslPfxSet = Check.something(props.sslPfx) && props.sslPfx.length;\n        const sslPrivateKeySet = (\n          Check.something(props.sslPrivateKey) &&\n          props.sslPrivateKey.length\n        );\n        const sslCertSet = (\n          Check.something(props.sslCertificate) &&\n          props.sslCertificate.length\n        );\n        if (!sslPfxSet && !sslPrivateKeySet && !sslCertSet) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Either property 'sslPfx', or 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set when authenticationScheme is client certificate',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if (sslPfxSet && (sslPrivateKeySet || sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPfx' can only be set when 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'are not set',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if ((sslPrivateKeySet && !sslCertSet) || (!sslPrivateKeySet && sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set at the same time',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('compressionLevel', [valNumber], [valRange, 0, 9]);\n      // Compression and web protocols do not mix.\n      if (props.compressionLevel > 0) {\n        if (props.url instanceof Array) {\n          const allTcp = props.url.every(url => Check.string(url) && url.match(/tcps?:/i));\n          if (!allTcp) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but not all URLs in the host list ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else if (Check.string(props.url)) {\n          if (!props.url.match(/tcps?:/i)) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but the url does not ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else {\n          throw new OperationError('SessionProperties validation: Property' +\n                                   \"'url' must be string or array of strings.\" +\n                                   ` instead got ${props.url} ` +\n                                   `of type ${typeof props.url}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('sslConnectionDowngradeTo', [valIsMember, SslDowngrade, 'SslDowngrade', false]);\n    }\n    v('transportProtocol', [valIsMember, TransportProtocol, 'TransportProtocol', true]);\n    v('webTransportProtocolList',\n      [valArrayIsMember, TransportProtocol, 'TransportProtocol',\n        true, false, false]);\n\n    validatePropsSupportedByTransport(props.transportProtocol,\n                                      props.nonHTTPTransportPropsSet);\n\n    if (props.publisherProperties) {\n      PublisherLib.MessagePublisherPropertiesValidator.validate(props.publisherProperties);\n    }\n\n    // Non-errors\n\n    const recommendedMin = props.defaultConnectTimeoutInMsecs;\n    const connectTimeout = props.connectTimeoutInMsecs;\n    const transportCount = props.webTransportProtocolList\n      ? props.webTransportProtocolList.length\n      : 1;\n    if (transportCount > 1 && connectTimeout < recommendedMin) {\n      LOG_WARN(\n        `Connect timeout of ${connectTimeout} msecs is less than default and recommended ` +\n        `minimum of ${recommendedMin} msecs for current transport selection. Transport ` +\n        'downgrades may not complete.');\n    }\n  },\n};\n\nmodule.exports.SessionPropertiesValidator = SessionPropertiesValidator;\n\n","const { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * PublisherFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends {FsmEvent}\n * @private\n */\nclass PublisherFSMEvent extends FsmEvent {\n  /**\n   * @constructor\n   * @param {Object} spec The specification for this event\n   * @param {?Object} details The details to assign to this event object\n   * @param {Message|BaseMessage} smfmessage The message associated with this event\n   */\n  constructor(spec, details, smfmessage) {\n    super(spec);\n    Object.assign(this, details);\n    Object.assign(this, smfmessage);\n  }\n  getEventText() {\n    return this._eventText;\n  }\n}\n\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\n","/**\n * @classdesc\n * Control messages wrap an SMFHeader instance\n * @private\n */\nclass SMFHeader {\n  constructor(protocol = 0, ttl = 0) {\n    // header properties\n    // header block\n    // SMF parameters\n    // payload\n    this._parameters = [];\n\n    // Common SMF header field values\n    this.smf_version = 3;\n    this.smf_uh = 0;\n    this.smf_protocol = protocol;\n    this.smf_priority = 0;\n    this.smf_ttl = ttl;\n    this.smf_msgLen = 0;\n    this.smf_di = 0;\n    this.smf_tqd = 0;\n    this.smf_elidingEligible = 0;\n    this.smf_dto = 0;\n    this.smf_adf = 0;                  // AD\n    this.smf_deadMessageQueueEligible = 0; //DMQ Eligible\n\n    // Common SMF protocol parameters\n    this.pm_userdata = null;\n    this.pm_respcode = 0;\n    this.pm_respstr = null;\n    this.pm_username = null;\n    this.pm_password = null;\n    this.pm_tr_topicname_bytes = null;\n    this.pm_deliverymode = null;\n\n    this.pm_ad_msgid = undefined;      // AD\n    this.pm_ad_prevmsgid = undefined;  // AD\n    this.pm_ad_redelflag = 0;          // AD\n    this.pm_ad_flowredelflag = 0;      // AD\n    this.pm_ad_ttl = undefined;        // AD\n    this.pm_ad_ackimm = undefined;     // AD\n    this.pm_ad_flowid = 0;             // AD\n    this.pm_ad_publisherid = 0;\n    this.pm_ad_publishermsgid = 0;\n\n    this.pm_content_summary = null;\n    this.pm_corrtag = null;\n    this.pm_topic_offset = 0;\n    this.pm_topic_len = 0;\n    this.pm_queue_offset = 0;\n    this.pm_queue_len = 0;\n    this.pm_msg_priority = null;        // {number}\n\n    // extended optional parameters\n    // these fields are header but may not be present\n    // see ../codec/parse-smf.js for details\n    // this.pm_ad_redeliveryCount;\n    // this.pm_ad_spooler_unique_id;\n    // this.pm_ad_local_spooler_message_id;\n    // this.pm_ad_replication_mate_ack_message_id;\n    this.pm_oauth2_access_token = null;\n    this.pm_oidc_id_token = null;\n    this.pm_oauth2_issuer_identifier = null;\n    this.pm_ts_transport_context = null;\n\n    // housekeeping\n    this.unknownProtoFlag = false;\n    this.messageLength = 0;\n    this.payloadLength = 0;\n    this.headerLength = 0;\n    this.payload = null;\n\n    // This message is invalid, but the framing (messageLength) is fine.\n    // set by the parser when UH==2 on an unknown parameter.\n    // The SMF fsm can then discard and increment the stats.\n    this.discardMessage = false;\n  }\n\n  setMessageSizes(headerLength, payloadLength) {\n    this.headerLength = headerLength;\n    this.payloadLength = payloadLength;\n    this.messageLength = headerLength + payloadLength;\n  }\n\n  setPayloadSize(payloadLength) {\n    this.payloadLength = payloadLength;\n  }\n}\n\nmodule.exports.SMFHeader = SMFHeader;\n","const { Enum } = require('solclient-eskit');\n\nconst PrivateFlowEventName = {\n  BIND_WAITING: 'PrivateFlowEventName_bindWaiting',\n};\n\nmodule.exports.PrivateFlowEventName = Enum.new(PrivateFlowEventName);\n","const { Base64 } = require('./lib/base64');\nconst { Bits } = require('./lib/bits');\nconst { Convert } = require('./lib/convert');\nconst { Hex } = require('./lib/hex');\nconst { Long } = require('./lib/long');\n\nmodule.exports.Base64 = Base64;\nmodule.exports.Bits = Bits;\nmodule.exports.Convert = Convert;\nmodule.exports.Hex = Hex;\nmodule.exports.Long = Long;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { BaseMessage } = require('./base-message');\nconst { Convert, Long } = require('solclient-convert');\nconst { DestinationType } = require('solclient-destination');\nconst { LOG_TRACE, LOG_INFO } = require('solclient-log');\nconst { OperationError } = require('solclient-error');\nconst { QueueAccessType,\n        QueueDiscardBehavior } = require('solclient-queue');\nconst { QueuePermissions, QueueType } = require('solclient-queue');\nconst { ReplayStartType } = require('solclient-replaystart');\nconst { MessageOutcome } = require('solclient-message');\nconst { SMFAdProtocolMessageType } = require('../smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('../smf-adprotocol-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFUH } = require('./smf-uh');\nconst { StringUtils } = require('solclient-util');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n  strToInt8,\n  strToInt16,\n  strToUInt32,\n  strToUInt64,\n} = Convert;\n\nconst bUInt8 = BufferImpl.prototype.readUInt8;\nconst bUInt16BE = BufferImpl.prototype.readUInt16BE;\nconst bUInt32BE = BufferImpl.prototype.readUInt32BE;\nconst bUInt64BE = function bUInt64BE(pos) { // invoked with \"this\" as the buffer.\n  return Long.fromBits(this.readUInt32BE(pos + 4), this.readUInt32BE(pos), true);\n};\n\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\n\n// QUEUENAME/TOPICNAME\nconst EndpointTypeToParam = {\n  [DestinationType.TOPIC]: SMFAdProtocolParam.DTENAME,\n  [DestinationType.QUEUE]: SMFAdProtocolParam.QUEUENAME,\n};\n\n//Same as above, but for CREATE.\nconst QueueDescriptorTypeToParam = {\n  [QueueType.TOPIC_ENDPOINT]: SMFAdProtocolParam.DTENAME,\n  [QueueType.QUEUE]:          SMFAdProtocolParam.QUEUENAME,\n};\n\nconst QUEUE_PERMISSIONS_TO_BITS = {\n  [QueuePermissions.NONE]:         0x0000,\n  [QueuePermissions.READ_ONLY]:    0x0001,\n  [QueuePermissions.CONSUME]:      0x0003,\n  [QueuePermissions.MODIFY_TOPIC]: 0x0007,\n  [QueuePermissions.DELETE]:       0x000f,\n};\n\nconst ACCESS_TYPE_INT_TO_ENUM = {\n  0x01: QueueAccessType.EXCLUSIVE,\n  0x02: QueueAccessType.NONEXCLUSIVE,\n};\n\nconst ACCESS_TYPE_ENUM_TO_BITS = {\n  [QueueAccessType.EXCLUSIVE]:    0x01,\n  [QueueAccessType.NONEXCLUSIVE]: 0x02,\n};\n\nconst DUARBILITY_INT_TO_BOOL = {\n  1: true,  // durable\n  2: false, // non-durable guaranteed\n  3: false  // non-durable reliable\n}\n\nconst DISCARD_ENUM_TO_VALUE = {\n  [QueueDiscardBehavior.NOTIFY_SENDER_OFF]: 0x01,\n  [QueueDiscardBehavior.NOTIFY_SENDER_ON]:  0x02,\n};\n\nfunction addQueueProperties(message, queueProperties, skipAccessType = false) {\n  if (!queueProperties) {\n    return;\n  }\n  const {\n    accessType,\n    discardBehavior,\n    maxMessageRedelivery,\n    maxMessageSize,\n    permissions,\n    quotaMB,\n    respectsTTL,\n  } = queueProperties;\n\n\n  // [AssuredCtrl AllOthersPermissions Parameter]\n  if (permissions && (QUEUE_PERMISSIONS_TO_BITS[permissions] !== undefined)) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_ALLOTHER_PERMISSION,\n      QUEUE_PERMISSIONS_TO_BITS[permissions]\n    ));\n  }\n\n  //AccessType\n  if (!skipAccessType &&\n    accessType !== undefined &&\n    ACCESS_TYPE_ENUM_TO_BITS[accessType] !== undefined\n  ) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.ACCESSTYPE,\n      ACCESS_TYPE_ENUM_TO_BITS[accessType]\n    ));\n  }\n\n  // [AssuredCtrl EndpointQuotaMB Parameter]\n  if (quotaMB !== null && quotaMB !== undefined) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_QUOTA,\n      quotaMB\n    ));\n  }\n\n  // [AssuredCtrl EndpointMaxMessageSize Parameter]\n  if (maxMessageSize !== undefined && maxMessageSize !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_MAX_MSGSIZE,\n      maxMessageSize\n    ));\n  }\n\n  let flags = 0x0000;\n  if (discardBehavior !== null && discardBehavior !== undefined) {\n    const discardBehaviorValue = DISCARD_ENUM_TO_VALUE[discardBehavior];\n    flags |= (discardBehaviorValue << 12);\n    // Omit cutThrough, << 14\n  }\n  if (flags /* is nonzero */) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_BEHAVIOUR,\n      flags\n    ));\n  }\n\n  if (maxMessageRedelivery !== undefined && maxMessageRedelivery !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.MAX_REDELIVERY,\n      maxMessageRedelivery\n    ));\n  }\n\n  if (respectsTTL !== undefined && respectsTTL !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_RESPECTS_TTL,\n      (respectsTTL ? 0x1 : 0x0)\n    ));\n  }\n}\n\n/**\n * @internal\n */\nclass AdProtocolMessage extends BaseMessage {\n  /**\n   * @constructor\n   * @param {SMFAdProtocolMessageType} [messageType=SMFAdProtocolMessageType.OPENPUBFLOW]\n   *  The type of message\n   * @param {Number} [version=3] The AD protocol version for the message\n   * @extends {BaseMessage}\n   * @memberof solace\n   * @internal\n   */\n  constructor(messageType = 0, version = 3) {\n    super(new SMFHeader(SMFProtocol.ADCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = version;\n  }\n\n  _readParameter(paramtype, decoder = null, bufMethod = null) {\n    const param = this.getParameter(paramtype);\n    if (param === undefined) return undefined;\n    if (bufMethod && param.getBuffer()) {\n      return bufMethod.call(param.getBuffer(), param.getBegin());\n    }\n    const value = param.getValue();\n    return decoder ? decoder(value) : value;\n  }\n\n  /**\n   * @returns {?QueueAccessType} The access type, if present\n   */\n  getAccessType() {\n    const param = this._readParameter(SMFAdProtocolParam.ACCESSTYPE, strToInt8, bUInt8);\n    return ACCESS_TYPE_INT_TO_ENUM[param];\n  }\n\n  /**\n   * @returns {?Boolean} Durability (durable vs non-durable), if present\n   */\n  getDurability() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_DURABLE, strToInt8, bUInt8);\n    if (param === 3) {\n      LOG_INFO(\"Non durable reliable queue. This does not happen often.\");\n    }\n    return DUARBILITY_INT_TO_BOOL[param];\n  }\n\n  /**\n   * @returns {?Boolean} The active flow indication, if present\n   */\n  getActiveFlow() {\n    return this._readParameter(SMFAdProtocolParam.ACTIVE_FLOW_INDICATION, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?QueueDiscardBehavior} The discard behavior for the endpoint, if present\n   */\n  getQueueDiscardBehavior() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    if (param === undefined) {\n      return undefined;\n    }\n    // Get NotifySender flag\n    const masked = (param & 0x3000) >> 12;\n    if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_OFF]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_OFF;\n    } else if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_ON]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_ON;\n    }\n    return undefined;\n  }\n  /**\n   * @returns {?Boolean} The Delivery Count setting of the endpoint, if present\n   */\n  getEndpointDeliveryCountSent() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    // Get NotifySender flag\n    const masked = (param & 0x0c00) >> 10;\n    switch (masked) {\n      case 0 :\n        return undefined;\n      case 1 :\n        return false;\n      case 2:\n        return true;\n      default:\n        //TODO: log: invalid flag value.\n        return undefined;\n    }\n  }\n\n  /**\n   * @returns {?Number} The endpoint ID, if present\n   */\n  getEndpointId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Boolean} Whether endpoint respects TTL\n   */\n  getRespectsTTL() {\n    const value = this._readParameter(SMFAdProtocolParam.EP_RESPECTS_TTL, strToInt8, bUInt8);\n    if (value === undefined) {\n      LOG_TRACE('respectsTTL missing from response.');\n      return undefined;\n    }\n    LOG_TRACE(`respectsTTL present in response: ${value}`);\n    return !!value;\n  }\n\n  /**\n   * @returns {?String} The router-assigned flow name, if present\n   */\n  getFlowName() {\n    return this._readParameter(SMFAdProtocolParam.FLOWNAME, stripNullTerminate);\n  }\n\n  /**\n   * @returns {?Number} The router-assigned flow ID, if present\n   */\n  getFlowId() {\n    return this._readParameter(SMFAdProtocolParam.FLOWID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The quota on the endpoint, if present\n   */\n  getQuota() {\n    return this._readParameter(SMFAdProtocolParam.EP_QUOTA, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The maximum message size of the endpoint, if present\n   */\n  getMaxMsgSize() {\n    return this._readParameter(SMFAdProtocolParam.EP_MAX_MSGSIZE, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?String} The UTF-8 encoded, null terminated topic endpoint name\n   */\n  getTopicEndpointBytes() {\n    return this._readParameter(SMFAdProtocolParam.DTENAME);\n  }\n\n  /**\n   * @returns {?String} The UTF-8 encoded, null terminated queue name\n   */\n  getQueueNameBytes() {\n    return this._readParameter(SMFAdProtocolParam.QUEUENAME);\n  }\n\n  /**\n   * @returns {?QueuePermissions} The granted permissions for the flow, if present\n   */\n  getGrantedPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.GRANTED_PERMISSIONS, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?QueuePermissions} The permissions for other users for the endpoint, if present\n   */\n  getAllOthersPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.EP_ALLOTHER_PERMISSION, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?Long} The last message ID acked, if present\n   */\n  getLastMsgIdAcked() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDACKED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The last message ID received, if present\n   */\n  getLastMsgIdReceived() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDRECEIVED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Number} The publisher ID, if present\n   */\n  getPublisherId() {\n    return this._readParameter(SMFAdProtocolParam.PUBLISHER_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} Whether we want flow change notifications, if present\n   */\n  getWantFlowChangeNotify() {\n    return !!this._readParameter(SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The Window parameter, if present\n   */\n  getWindow() {\n    return this._readParameter(SMFAdProtocolParam.WINDOW, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max redelivery parameter, if present\n   */\n  getMaxRedelivery() {\n    return this._readParameter(SMFAdProtocolParam.MAX_REDELIVERY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max unacked messages parameter, if present\n   */\n  getMaxUnackedMessages() {\n    return this._readParameter(SMFAdProtocolParam.MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW,\n                               strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Long} The endpointErrorId, if present\n   */\n  getEndpointErrorId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The partitionGroupId, if present\n   */\n  getPartitionGroupId() {\n    return this._readParameter(SMFAdProtocolParam.PARTITION_GROUP_ID,\n                               strToInt16, bUInt16BE);\n  }\n\n  /**\n   * @returns {?Long} The spoolerUniqueId, if present\n   */\n  getSpoolerUniqueId() {\n    return this._readParameter(SMFAdProtocolParam.SPOOLER_UNIQUE_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * Creates a CLOSEPUBFLOW message\n   * @param {Number} flowId The publisher flow to close\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCloseMessagePublisher(flowId,\n                                  correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLOSEPUBFLOW);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    return message;\n  }\n\n\n  /**\n   * Creates a CREATE message\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the create request\n   * @param {?solace.QueueProperties} queueProperties The properties for the create request\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCreate(\n    queueDescriptor,\n    queueProperties,\n    correlationTag\n  ) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CREATE);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    /*\n      {AssuredCtrl QueueName|TopicEndpointName Parameter}\n      {AssuredCtrl Durability Parameter}\n      [AssuredCtrl AllOthersPermission Parameter]\n      [AssuredCtrl AccessType Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]\n    */\n\n    // QueueName/TopicEndpointName : different param type for TE vs queue\n    const endpointTypeParam = QueueDescriptorTypeToParam[queueDescriptor.type];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      nullTerminate(queueDescriptor.name)\n    ));\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      (queueDescriptor.durable ? 1 : 2) // Durable vs Non-Durable-Guaranteed\n    ));\n\n\n    addQueueProperties(message, queueProperties);\n\n    return message;\n  }\n\n  /**\n   * Creates a DELETE message\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the create request, ignoring durability\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getDelete(\n    queueDescriptor,\n    correlationTag\n  ) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.DELETE);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    /*\n      {AssuredCtrl QueueName|TopicEndpointName Parameter}\n    */\n\n    // QueueName/TopicEndpointName : different param type for TE vs queue\n    const endpointTypeParam = QueueDescriptorTypeToParam[queueDescriptor.type];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      nullTerminate(queueDescriptor.name)\n    ));\n\n    return message;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a publisher open-flow request.\n   * @static\n   * @param {?Long} lastMsgIdAcked Last message ID acked, if re-opening\n   * @param {?Long} lastMsgIdSent Last message ID sent, if re-opening\n   * @param {Number} windowSize Desired window size\n   * @param {String} flowName Last flow name in use, if re-opening\n   * @param {Number} correlationTag Correlation tag for the request\n   * @returns {solace.AdProtocolMessage} The OPENPUBFLOW message\n   * @internal\n   */\n  static getOpenMessagePublisher(\n            lastMsgIdAcked,\n            lastMsgIdSent,\n            windowSize,\n            flowName,\n            correlationTag) {\n    const adMsg = new AdProtocolMessage(SMFAdProtocolMessageType.OPENPUBFLOW);\n\n    const smfHeader = adMsg.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n\n    if (lastMsgIdAcked !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDACKED,\n                                          lastMsgIdAcked));\n    }\n    if (lastMsgIdSent !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDSENT,\n                                          lastMsgIdSent));\n    }\n\n    adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                        SMFAdProtocolParam.WINDOW,\n                                        windowSize));\n\n    adMsg.addParameter(new SMFParameter(SMFUH.IGNORE,\n                                        SMFAdProtocolParam.FLOWNAME,\n                                        flowName || ''));\n\n    LOG_TRACE(`Create open publisher: lastMsgIdAcked=${lastMsgIdAcked} lastMsgIdSent=${lastMsgIdSent} window=${windowSize} flowName=${flowName || '(null)'}`);\n\n    return adMsg;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a subscriber (MessageConsumer) bind request.\n   * @static\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the bind request\n   * @param {?solace.QueueProperties} queueProperties The properties for the bind request\n   * @param {solace.Destination} endpoint The endpoint for the bind request\n   * @param {?solace.Topic} topicSubscription The topic endpoint\n   * @param {String} correlationTag The correlation tag for the request\n   * @param {Number} windowSize The desired window size\n   * @param {Boolean} [noLocal=false] If true, local publisher messages are not delivered\n   * @param {Boolean} [wantFlowChangeUpdate] default is true if destination is a {solace.Queue}\n   * @param {Long} [lastMsgIdAcked=Long.UZERO] Last message ID acked, if re-binding\n   * @param {Long} [lastMsgIdReceived=Long.UZERO] Last message ID received, if re-binding\n   * @param {Boolean} [browser=false] If true, flow is a queue browser\n   * @param {ReplayStartLocation} [replayStartLocation=undefined] If set messages\n   *         are first retrieved from the replay log before live messages are received.\n   * @param {Long} [endpointErrorId=undefined] Endpoint Error ID identifying the flow\n   *         when rebinding.\n   *  @param {Long} [partitionGroupId=undefined] Partition Group ID for support of\n   *          Partition Queue feature, associate new flow with the same\n   *          PartitionGroupId as an old flow (e.g due to a reconnect).\n   * @param {Boolean} [hasNackSupport=false] If true, flow is created with Consumer Redelivery\n   * @returns {solace.AdProtocolMessage} The BIND message\n   * @internal\n   */\n  static getOpenMessageConsumer(queueDescriptor,\n                                queueProperties,\n                                endpoint,\n                                topicSubscription,\n                                correlationTag,\n                                windowSize,\n                                noLocal,\n                                wantFlowChangeUpdate,\n                                lastMsgIdAcked = Long.UZERO,\n                                lastMsgIdReceived = Long.UZERO,\n                                browser = false,\n                                replayStartLocation = undefined,\n                                endpointErrorId = undefined,\n                                partitionGroupId = undefined,\n                                hasNackSupport = false) {\n    /*\n    QUEUE FLOW                                      TE FLOW\n\n    {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n\n    {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    ***                                             {AssuredCtrl TopicName Parameter}\n    [AssuredCtrl Last Message Id Acked Parameter]   ***\n    [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n    {AssuredCtrl Transport Window Size Parameter}   {AssuredCtrl Transport Window Size Parameter}\n    [AssuredCtrl Durability Parameter]              [AssuredCtrl Durability Parameter]\n    [AssuredCtrl Message Selector Parameter]        [AssuredCtrl Message Selector Parameter]\n    [AssuredCtrl FlowType Parameter]                [AssuredCtrl FlowType Parameter]\n    [AssuredCtrl Selector Parameter]                [AssuredCtrl Selector Parameter]\n    [AssuredCtrl AllOthersPermissions Parameter]    [AssuredCtrl AllOthersPermissions Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]         [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]  [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl TransactedSessionId Parameter]     [AssuredCtrl TransactedSessionId Parameter]\n    [AssuredCtrl NoLocal Parameter]                 [AssuredCtrl NoLocal Parameter]\n    [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n    [AssuredCtrl qEndpointBehaviourFlags Parameter] [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]           [AssuredCtrl MaxRedelivery Parameter]\n    [AssuredCtrl browser Parameter]                 ***\n    */\n    const durable = queueDescriptor.durable;\n    const endpointBytes = endpoint.bytes;\n    const endpointType = endpoint.type;\n\n    // {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    // [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    // {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.BIND);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    // {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    const endpointTypeParam = EndpointTypeToParam[endpointType];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      endpointBytes\n    ));\n\n    // ***                                             {AssuredCtrl TopicName Parameter}\n    if (topicSubscription) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.TOPICNAME,\n        topicSubscription.bytes\n      ));\n    }\n\n    if (endpointType === DestinationType.QUEUE) {\n      //     [AssuredCtrl Last Message Id Acked Parameter]   ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMsgIdAcked\n      ));\n      //     [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.LASTMSGIDRECEIVED,\n        lastMsgIdReceived\n      ));\n    }\n\n    // {AssuredCtrl Transport Window Size Parameter}\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.WINDOW,\n      windowSize\n    ));\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      durable\n    ));\n\n    // Omit Message Selector\n    // Omit FlowType, CONSUMER assumed (not BROWSER currently)\n    // Omit TransactedSessionId\n\n    addQueueProperties(message, queueProperties, true);\n\n    if (noLocal /* is true */) {\n      // [AssuredCtrl NoLocal Parameter]\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.NOLOCAL,\n        0x1\n      ));\n    }\n\n    if (wantFlowChangeUpdate /* is true */) {\n      // [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY,\n        0x1\n      ));\n    }\n\n    /**\n     * A Flow that has Browser support cannot have NACK support \n     */\n    if (hasNackSupport /* is true */) {\n      // [AssuredCtrl FlowType Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x3 // create flow with Consumer Redelivery support\n      ));\n    } else if (browser /* is true */) {\n      // [AssuredCtrl browser Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x2 // create flow with browser support\n      ));\n    }\n    if (replayStartLocation !== undefined) {\n      // [AssuredCtrl replay start location Parameter]\n      let rsValue = replayStartLocation._replayStartValue;\n      if (replayStartLocation._type === ReplayStartType.DATE) {\n        const replayStartTimeMs = Long.fromNumber(replayStartLocation._replayStartValue, true);\n        const replayStartTimeNs = replayStartTimeMs.multiply(1000000);\n        rsValue = replayStartTimeNs;\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.REPLAY_START_LOCATION,\n        {\n          type:  replayStartLocation._type,\n          value: rsValue,\n        }\n      ));\n    }\n\n    if (endpointErrorId !== undefined) {\n      // [AssuredCtrl EndpointErrorId Parameter]    ***\n      LOG_TRACE(`Adding endpointErrorId to message: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n\n    // support for PartitionGroupId. Only send when not null and undefined\n    if (partitionGroupId !== undefined && partitionGroupId !== null) {\n      // [AssuredCtrl PartitionGroupId Parameter]    ***\n      LOG_TRACE(`Adding partitionGroupId to message: ${partitionGroupId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.PARTITION_GROUP_ID,\n        partitionGroupId\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * Creates an UNBIND request\n   * @param {Number} flowId The flow ID to unbind\n   * @param {Number} correlationTag The correlation tag for the request\n   * @param {?Long} lastMessageIdAcked The last message ID marked as locally acked\n   * @returns {AdProtocolMessage} The new UNBIND request\n   * @static\n   * @internal\n   */\n  static getCloseMessageConsumer(flowId,\n                                 correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    // linger: assume no\n\n    return message;\n  }\n\n  static getDTEUnsubscribeMessage(correlationTag,\n                                  topic) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNSUBSCRIBE);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.DTENAME,\n      topic.getBytes()\n    ));\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @param {?Long} [windowSize=undefined] The size to which the flow window should be set.\n   * @param {?Map.<Array.<Array.<Long>>>} [applicationAckRanges=undefined] Low-high ID pairs of\n   *  message IDs to acknowledge at the application level. To application ack a single message,\n   *  pass `Map.set( MessageOutcome.ACCEPTED, [ [singleMessageId, singleMessageId] ] )`.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getAck(flowId,\n                lastMessageIdAcked = undefined,\n                windowSize = undefined,\n                applicationAckRanges = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLIENTACK);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (lastMessageIdAcked) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMessageIdAcked\n      ));\n    }\n\n    if (windowSize !== undefined && windowSize !== null) {\n      // There are two windowSize options; we'll use the legacy one for smaller\n      // window sizes\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        (windowSize <= 0xFF) ? SMFAdProtocolParam.WINDOW : SMFAdProtocolParam.TRANSPORT_WINDOW,\n        windowSize\n      ));\n    }\n\n    if (applicationAckRanges && (applicationAckRanges.size > 0)) {\n      // aggregate the total length of the ack/nack ranges\n      let totalRangeLen  = 0;\n      const allOutcomes = MessageOutcome.values;\n      for(let i = 0; i < allOutcomes.length; i ++) {\n        totalRangeLen += applicationAckRanges.has(allOutcomes[i]) ? applicationAckRanges.get(allOutcomes[i]).length : 0;\n      }\n\n      if (totalRangeLen > AdProtocolMessage.MAX_CLIENT_ACK_RANGES) {\n        throw new OperationError('Application ack range count exceeds limit of 64');\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.APPLICATION_ACK,\n        applicationAckRanges // DANGER: this needs to be encoded immediately, or else deep-cloned\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [endpointErrorId=undefined] endpoint error id\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getUnbindAck(flowId, endpointErrorId = undefined, lastMessageIdAcked = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (endpointErrorId) {\n      LOG_TRACE(`Adding endpointErrorId to unbind ack: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n    LOG_TRACE(`Not adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //if (lastMessageIdAcked) {\n    //  LOG_TRACE(`Adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //  message.addParameter(new SMFParameter(\n    //    SMFUH.REJECT,\n    //    SMFAdProtocolParam.LASTMSGIDACKED,\n    //    lastMessageIdAcked\n    //  ));\n    //}\n    return message;\n  }\n}\n\n\nAdProtocolMessage.MAX_CLIENT_ACK_RANGES = 64;\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\n","const Bits = {\n  get(val, shift, numBits) {\n    return (val >>> shift) & ((0x01 << numBits) - 1);\n  },\n\n  set(dataIn, val, shift, numBits) {\n    const curMask = (1 << numBits) - 1;\n    const shiftedVal = (val & curMask) << shift;\n    const data = dataIn & ~(curMask << shift);\n    return (data | shiftedVal);\n  },\n};\n\nmodule.exports.Bits = Bits;\n","module.exports = require(\"fs\");","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst TransportReturnCode = {\n  OK:                          0,\n  FAIL:                        1,\n  NO_SPACE:                    2,\n  DATA_DECODE_ERROR:           3,\n  INVALID_STATE_FOR_OPERATION: 4,\n  CONNECTION_ERROR:            5,\n};\n\nmodule.exports.TransportReturnCode = Enum.new(TransportReturnCode);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70031\nmodule.exports.TransportReturnCode._setCanonical({\n  'OK':                          TransportReturnCode.OK,\n  'FAIL':                        TransportReturnCode.FAIL,\n  'NO_SPACE':                    TransportReturnCode.NO_SPACE,\n  'DATA_DECODE_ERROR':           TransportReturnCode.DATA_DECODE_ERROR,\n  'INVALID_STATE_FOR_OPERATION': TransportReturnCode.INVALID_STATE_FOR_OPERATION,\n  'CONNECTION_ERROR':           TransportReturnCode.CONNECTION_ERROR\n});\n/* eslint-enable */\n","const { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_TRACE } = require('solclient-log');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMPMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int32ToStr,\n} = Convert;\n\nconst SMP = {};\nSMP.parseSMPAt = function parseSMPAt(dataBuf, offset) {\n  if ((offset + 6) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG('Not enough data to read an SMP message.');\n    return false;\n  }\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgUh = bits(onebyte, 7, 1);\n  const msgType = bits(onebyte, 0, 7);\n  const smpMsg = new SMPMessage();\n\n  if (!(msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Found unsupported SMP messageType ${msgType}`);\n    return false; // unsupported type\n  }\n\n  LOG_TRACE('SMP.parseSMPAt called, ', dataBuf.toString('latin1'));\n\n  const msgLength = dataBuf.readUInt32BE(pos);\n  pos += 4;\n  if ((offset + msgLength) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG(`Invalid declared length of ${msgLength}, unable to read SMP message.`);\n    return false;\n  }\n  const msgFlags = dataBuf.readUInt8(pos);\n  pos++;\n\n  smpMsg.msgType = msgType;\n  smpMsg.smpFlags = msgFlags;\n  if (msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n    msgType === SMFSMPMessageType.REMSUBSCRIPTION) {\n    // 6 is the base len (msgLength - 6)\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + msgLength - 6);\n  } else {\n    const queueLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8QueueName = dataBuf.toString('latin1', pos, pos + queueLength);\n    pos += queueLength;\n    const subsLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + subsLength);\n    pos += subsLength;\n  }\n  return smpMsg;\n};\n\nSMP.encSmp = function encSmp(smpMsg) {\n  if (!(smpMsg.msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Unsupported SMP message for encoding: ${smpMsg}`);\n    return false;\n  }\n\n  LOG_TRACE('encSmp called.', smpMsg);\n  const data = [];\n  let onebyte = 0;\n  onebyte = setBits(onebyte, 1, 7, 1);\n  onebyte = setBits(onebyte, smpMsg.msgType, 0, 7);\n  data.push(int8ToStr(onebyte));\n  let msgLength = 6 + smpMsg.encodedUtf8Subscription.length;\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    msgLength += 2 + smpMsg.encodedUtf8QueueName.length; //both strings have a 1-byte length.\n  }\n  data.push(int32ToStr(msgLength)); // length\n  data.push(int8ToStr(smpMsg.smpFlags));\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    //TODO: validate the lengths are < 251 including null termination!\n    // Somewhere else though.\n    data.push(int8ToStr(smpMsg.encodedUtf8QueueName.length));\n    data.push(smpMsg.encodedUtf8QueueName);\n    data.push(int8ToStr(smpMsg.encodedUtf8Subscription.length));\n    data.push(smpMsg.encodedUtf8Subscription);\n  } else {\n    data.push(smpMsg.encodedUtf8Subscription);\n  }\n  return data.join('');\n};\n\nmodule.exports.SMP = SMP;\n","const { WebTransportCapabilities } = require('./web');\n\nconst TransportCapabilities = {\n  web: WebTransportCapabilities,\n};\n\nmodule.exports.TransportCapabilities = TransportCapabilities;\n","const {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR } = require('solclient-log');\n\nconst { ArrayUtils } = require('solclient-util');\nconst { Convert,\n        Hex } = require('solclient-convert');\nconst { ErrorSubcode } = require('solclient-error');\nconst { mixin } = require('solclient-eskit');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\nconst { WebSocketCloseCodes } = require('./websocket-close-codes');\nconst { WebTransportSessionBase } = require('./web-transport-session-base');\n\nconst http = require('http');\nconst https = require('https');\n\nconst {\n  stringToArrayBuffer,\n} = Convert;\nconst {\n  formatHexString,\n} = Hex;\nconst {\n  includes,\n} = ArrayUtils;\n\n/* eslint-env browser */\n// closure mangles window.WebSocket\nconst globalContext = (typeof window === 'undefined' ? global : window);\nlet MyWebSocket = globalContext.WebSocket;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-disable no-global-assign */\n  /* eslint-disable global-require */\n  MyWebSocket = /** @type {WebSocket} */ (require('ws'));\n  /* eslint-enable no-global-assign */\n  /* eslint-enable global-require */\n}\n/* eslint-env shared-browser-node */\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `ws${v[2]}`;\n}\n\n\n/**\n * @classdesc\n * @private\n * @memberof solace\n */\nclass WebSocketTransportSession extends WebTransportSessionBase {\n\n  /**\n   * @constructor\n   * @param {String} url The url to connect to\n   * @param {function} eventCB The callback for transport events\n   * @param {SMFClient} client The SMF client for data events\n   * @param {Object} props Properties for the transport session\n   */\n  constructor(url, eventCB, client, props) {\n    super(url, eventCB, client, props);\n    /**\n     * @type {String}\n     */\n    this._url = adaptURL(url);\n\n    /**\n     * @type {?WebSocket}\n     */\n    this._socket = null;\n\n    /**\n     * @type {?string}\n     */\n    this._sessionId = new Date().getTime();\n\n    if (BUILD_ENV.TARGET_BROWSER) {\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalInMsecs = props.bufferedAmountQueryIntervalInMsecs;\n      /**\n       * @type {?number}\n       */\n      this._bufferedAmountQueryTimer = null;\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n    }\n  }\n\n\n  /**\n   * @private\n   */\n  onOpen() {\n    this.cancelConnectTimeout();\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at the time of callback registration,\n   * safety against stray calls after socket is destroyed.\n   * @param {Event} event The websocket event causing the close\n   * @private\n   */\n  onClose(originalSocket, event) {\n    if (originalSocket !== this._socket) {\n      LOG_DEBUG('Websocket Transport Session stray onClose for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msgBuf = [];\n    const code = WebSocketCloseCodes[event.code] || WebSocketCloseCodes[0];\n    msgBuf.push(`${event.code} ${code.name} (${code.description})`);\n    if (event.wasClean !== undefined) {\n      msgBuf.push(`clean closure: ${event.wasClean}`);\n    }\n    if (event.reason) {\n      msgBuf.push(`reason: ${event.reason}`);\n    }\n    const msg = msgBuf.join(', ');\n    LOG_DEBUG(`WebSocket transport connection is closed ${msg}`);\n    LOG_TRACE(`Event { type: ${event.type} wasClean: ${event.wasClean} code: ${event.code} reason: ${event.reason} }`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this.destroy(`Connection closed: ${msg}`, ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  onDrain() {\n    LOG_TRACE('Drained socket');\n    this.maybeEmitCanSend();\n    this.maybeEmitFlush();\n  }\n\n  onBufferedAmountPoll() {\n    if (this.getBufferedAmount() === 0) {\n      this.onDrain();\n    } else if (this.scheduleQuery) {\n      this.scheduleQuery();\n    }\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at callback registration.\n   * @param {TransportSessionEvent} event The event causing the error\n   * @private\n   */\n  onError(originalSocket, event) {\n    LOG_INFO(`Websocket Transport Session onError for socket ${originalSocket} while socket is ${this._socket}`);\n    if (originalSocket !== this._socket) {\n      LOG_INFO('Websocket Transport Session stray onError for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msg = (event.message) ? (`: ${event.message}`) : '';\n    LOG_INFO(`WebSocket transport connection error ${msg} while in state ${this._state}`);\n    // There won't be an onClose call to clean up unless we are connected already.\n    if (this._state === TransportSessionState.WAITING_FOR_CONNECT) {\n      this.cancelConnectTimeout();\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.destroy(`Connection failed: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else { // Sending error event only, onClose will clean up in due time.\n      this._eventCB(\n            new TransportSessionEvent(\n                TransportSessionEventCode.SEND_ERROR,\n                `Connection error${msg}`,\n                null,\n                ErrorSubcode.CONNECTION_ERROR, null));\n    }\n  }\n\n  /**\n   * @param {TransportSessionEvent} event The data event\n   * @private\n   */\n  onMessage(event) {\n    if (this._client) {\n      this._client.rxDataArrayBuffer(event.data);\n    }\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connectTimerExpiry() {\n    LOG_INFO('WebSocket transport connect timeout');\n    this.state = TransportSessionState.CONNECTION_FAILED;\n    this._eventCB(new TransportSessionEvent(\n      TransportSessionEventCode.CONNECT_TIMEOUT,\n      'Connection timed out',\n      null,\n      ErrorSubcode.TIMEOUT\n    ));\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (this._socket) {\n      this.onError('Socket already connected');\n    }\n\n    LOG_INFO('Establishing WebSocket transport session');\n    try {\n      this.createConnectTimeout();\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      if (BUILD_ENV.TARGET_NODE && !this._socketOptions) {\n        LOG_DEBUG('Creating Node websocket options');\n        this._socketOptions = this.createWebSocketOptions(this.onDrain.bind(this));\n      }\n      LOG_INFO('Constructing socket');\n      if (BUILD_ENV.TARGET_BROWSER) {\n        /**\n         * @type {WebSocket}\n         */\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com');\n      } else {\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com', this._socketOptions);\n        this._socket.ondrain = this.onDrain.bind(this);\n      }\n      // Closure is generally faster than bind\n      LOG_TRACE('Assigning properties to socket');\n      // Closure using Browser profile to avoid mangling this\n      this._socket.binaryType = 'arraybuffer';\n      this._socket.onopen = this.onOpen.bind(this);\n      this._socket.onmessage = this.onMessage.bind(this);\n      this._socket.onclose = this.onClose.bind(this, this._socket);\n      this._socket.onerror = this.onError.bind(this, this._socket);\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_INFO(`Error connecting: ${error.message}`);\n      LOG_TRACE('Error details', error.stack || error);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (error instanceof TransportError) {\n        this._connError = error;\n      } else {\n        throw new TransportError(`Could not create WebSocket: ${error.message}`,\n                                 error.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_INFO('WebSocket is connecting');\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @param {String} data The binary string data to send.\n   * @param {Boolean} [force=false] If true, send even if buffer is full.\n   */\n  send(data, force = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    const dataLen = data.length;\n    const bufferAllow = (this._sendBufferMaxSize - this.getBufferedAmount()) >= 0;\n    // LOG_DEBUG('Websocket send:', dataLen, force, bufferAllow);\n    if (!(force || bufferAllow)) {\n      this._canSendNeeded = true;\n      if (this.scheduleQuery) this.scheduleQuery();\n      return TransportReturnCode.NO_SPACE;\n    }\n\n    // LOG_TRACE(`websocket.send: len=${data.length}`);\n    // Slice messages per maxPayloadBytes\n    const maxPayloadBytes = this._maxPayloadBytes;\n    const ab = stringToArrayBuffer(data);\n    if (dataLen > maxPayloadBytes) {\n      for (let i = 0; i < dataLen; i += maxPayloadBytes) {\n        this._socket.send(ab.slice(i, i + maxPayloadBytes));\n      }\n    } else {\n      this._socket.send(ab);\n    }\n    // LOG_TRACE(`websocket.send: after send getBufferedAmount=${this.getBufferedAmount()}`);\n    this._clientstats.bytesWritten += dataLen;\n    ++this._clientstats.msgWritten;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @returns {Number} The number of already buffered bytes in this transport.\n   * @private\n   */\n  getBufferedAmount() {\n    // Access as string property because this is a defineProperty on node websocket,\n    // meaning it is not mangled by Closure Compiler\n    return this._socket ? this._socket['bufferedAmount'] : 0; // eslint-disable-line dot-notation\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    this._flushCallback = callback;\n    this.maybeEmitFlush();\n  }\n\n  maybeEmitCanSend() {\n    if (this._canSendNeeded && this.getBufferedAmount() < this._sendBufferMaxSize) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  maybeEmitFlush() {\n    if (!this._flushCallback) return;\n    if (BUILD_ENV.TARGET_BROWSER && this.getBufferedAmount() > 0) {\n      // Ensure we have a query scheduled, but don't interrupt a query in progress\n      if (!this._bufferedAmountQueryTimer) {\n        this.scheduleQuery();\n      }\n      return;\n    }\n\n    // Node is automatically flushed by socket.end(), which is called in non-error cases\n    LOG_DEBUG('Transport emitting FLUSH');\n    const cb = this._flushCallback;\n    this._flushCallback = null;\n    cb();\n  }\n\n  /**\n   * @override\n   */\n  destroy(message, subcode) {\n    // We can destroy (and get a notice) even if the socket is freshly created.\n    // But this will only work once.\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_INFO(`Destroy WebSocket transport: ${message}`);\n\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      if (this._socket) {\n        this._socket.close();\n        this._socket.onopen = null;\n        this._socket.onmessage = null;\n        this._socket.onclose = null;\n        this._socket.onerror = function onerrorStub() { }; // Prevent unhandled errors\n        this._socket = null;\n      }\n\n      if (this._connectTimer) {\n        clearTimeout(this._connectTimer);\n        this._connectTimer = undefined;\n      }\n\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this.cancelQuery();\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n\n      this._canSendNeeded = false;\n\n      this._state = TransportSessionState.DOWN;\n\n      this._client = null; // Don't accept data.\n    }\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    if (this._eventCB) {\n      // Fire this *almost* instantly, but follow the HTTP\n      // transport pattern by guaranteeing an async callback.\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              message || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @returns {String} A description of this object.\n   */\n  getInfoStr() {\n    const str = `WebSocketTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  static browserSupportsBinaryWebSockets() {\n    LOG_DEBUG('websocket browserSupportBinaryCheck - ' +\n              'if WebSocket, ArrayBuffer and Uint8Array are supported');\n\n    const exists = ['function', 'object'];\n    if (!includes(exists, typeof MyWebSocket) ||\n        !includes(exists, typeof ArrayBuffer) ||\n        !includes(exists, typeof Uint8Array)) {\n      LOG_INFO('websocket browserSupportBinaryCheck: false - some required classes not supported');\n      return false;\n    }\n\n    LOG_DEBUG('websocket browserSupportBinaryCheck - if WebSocket supports binaryType');\n    if ('binaryType' in MyWebSocket.prototype) {\n      LOG_INFO('websocket browserSupportBinaryCheck: true - WebSocket supports binaryType');\n      return true;\n    }\n\n    LOG_INFO('websocket browserSupportBinaryCheck: false - WebSocket does not support binaryType');\n    return false;\n  }\n\n}\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  mixin(WebSocketTransportSession, class WebSocketTransportSessionBrowser {\n    /**\n     * @private\n     */\n    scheduleQuery() {\n      const bufferedAmount = this.getBufferedAmount();\n      if (bufferedAmount > 0 && this._bufferedAmountQueryIntervalInMsecs > 0) {\n        this.cancelQuery();\n        if (this._bufferedAmountQueryIntervalDelayMultiplier > 1) {\n          LOG_DEBUG(`$$ schedule bufferedAmount query timer in ${\n                    this._bufferedAmountQueryIntervalInMsecs *\n                    this._bufferedAmountQueryIntervalDelayMultiplier} ms`);\n        }\n        const timeout = this._bufferedAmountQueryIntervalInMsecs *\n                        this._bufferedAmountQueryIntervalDelayMultiplier;\n        this._bufferedAmountQueryTimer = setTimeout(() => {\n          this.cancelQuery();\n          try {\n            this.onBufferedAmountPoll();\n          } catch (e) {\n            LOG_ERROR(`Error occurred in onBufferedAmountPoll: ${e.message}`);\n            LOG_TRACE('Error details:', e.stack || e);\n          }\n        }, timeout);\n      }\n    }\n\n    cancelQuery() {\n      if (this._bufferedAmountQueryTimer) {\n        clearTimeout(this._bufferedAmountQueryTimer);\n        this._bufferedAmountQueryTimer = null;\n      }\n    }\n  });\n} else {\n  // Node TLS socket options formulation shared with TCP transport\n  // eslint-disable-next-line global-require\n  const { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\n  mixin(WebTransportSessionBase, NodeTLSOptsMixin);\n  // Node-specific methods of this class go here\n  mixin(WebTransportSessionBase, class WebTransportSessionBaseNode {\n\n    /**\n     * @name solace.WebTransportSession#createWebSocketOptions\n     * @param {Function} onDrainCallback handler function for socket onDrain event\n     * @returns {Object} A WebSocket options object for the current configuration\n     * @private\n     */\n    createWebSocketOptions(onDrainCallback) {\n      let options = {};\n      if (this._ssl) {\n        options = this.createTLSOptions();\n        // use custom agent for client certificate support, ssl resume session support\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new https.Agent({\n          keepAlive: false,\n        });\n      } else { // else no TLS:\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new http.Agent();\n      }\n      // eslint-disable-next-line dot-notation\n      const wsAgent = options['agent'];\n      const origCreateConnection = wsAgent.createConnection;\n      wsAgent.createConnection = function newCreateConnection(opts, callback) {\n        const socket = origCreateConnection.call(this, opts, callback);\n        socket.on('drain', onDrainCallback);\n        return socket;\n      };\n      LOG_DEBUG('WebSocket options', options);\n      return options;\n    }\n  });\n}\n\nmodule.exports.WebSocketTransportSession = WebSocketTransportSession;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(5237);\n"],"names":["Worker","Object","defineProperty","exports","value","e","node_worker_1","c","_","msg","transfer","cb","done","w","eval","on","m","Error","postMessage","terminate","prototype","call","__","___","____","setImmediate","NOP","u8","Uint8Array","u16","Uint16Array","i32","Int32Array","fleb","fdeb","clim","freb","eb","start","b","i","r","j","_a","fl","revfl","_b","fd","revfd","rev","x","hMap","cd","mb","s","length","l","co","le","rvb","sv","r_1","v","flt","fdt","flm","flrm","fdm","fdrm","max","a","bits","d","p","o","bits16","shft","slc","subarray","FlateErrorCode","UnexpectedEOF","InvalidBlockType","InvalidLengthLiteral","InvalidDistance","StreamFinished","NoStreamHandler","InvalidHeader","NoCallback","InvalidUTF8","ExtraFieldTooLong","InvalidDate","FilenameTooLong","StreamFinishing","InvalidZipData","UnknownCompressionMethod","ec","err","ind","nt","code","captureStackTrace","inflt","dat","st","buf","dict","sl","dl","f","noBuf","resize","noSt","cbuf","bl","nbuf","Math","set","final","pos","bt","lm","dm","lbt","dbt","n","tbts","type","t","hLit","hcLen","tl","ldt","clt","clb","clbmsk","clm","lt","dt","lms","dms","lpos","sym","add","dsym","end","shift","dend","min","wbits","wbits16","hTree","push","t2","slice","et","sort","i0","i1","i2","maxSym","tr","mbt","ln","lft","cst","i2_1","i2_2","i2_3","lc","cl","cli","cln","cls","clen","cf","wfblk","out","wblk","syms","lf","df","li","bs","dlt","mlb","ddt","mdb","_c","lclt","nlc","_d","lcdt","ndc","lcfreq","_e","lct","mlcb","nlcc","ll","flen","ftlen","dtlen","llm","lcts","it","clct","len","dst","deo","dflt","lvl","plvl","pre","post","z","ceil","lst","opt","msk_1","prev","head","h","bs1_1","bs2_1","hsh","lc_1","wi","hv","imod","pimod","rem","ch_1","dif","maxn","maxd","ml","nl","mmd","md","ti","lin","din","crct","k","crc","cr","adler","dopt","dictionary","newDat","level","mem","log","mrg","wcln","fn","fnStr","td","toString","ks","indexOf","lastIndexOf","replace","split","st_1","spInd","ch","wrkr","fns","init","id","td_1","default","buffer","constructor","cbfs","bInflt","inflateSync","pbf","gopt","bDflt","deflateSync","gze","gzh","gzhl","wbytes","guze","gzs","gzl","zle","zlh","zule","zls","size","cbify","opts","consume","astrm","strm","ondata","ev","data","astrmify","ext","Array","isArray","b2","b4","b8","filename","mtime","floor","Date","now","charCodeAt","flg","zs","lv","StrmOpt","this","Deflate","chunk","endLen","newBuf","AsyncDeflate","onmessage","deflate","Inflate","bts","AsyncInflate","inflate","Gzip","raw","Compress","AsyncGzip","gzip","gzipSync","AsyncCompress","compress","compressSync","Gunzip","onmember","AsyncGunzip","_this_1","offset","gunzip","gunzipSync","Zlib","AsyncZlib","zlibSync","zlib","Unzlib","AsyncUnzlib","unzlib","unzlibSync","Decompress","G","I","Z","_this_2","apply","arguments","AsyncDecompress","decompress","decompressSync","fltn","val","op","te","TextEncoder","TextDecoder","tds","decode","stream","dutf8","String","fromCharCode","DecodeUTF8","EncodeUTF8","strToU8","str","latin1","ar_1","encode","ar","ai","strFromU8","dbf","slzh","zh","fnl","es","z64e","sc","su","off","exfl","ex","wzh","u","ce","extra","col","exl","os","flag","compression","y","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","attrs","exf","wzf","ZipPassThrough","process","ZipDeflate","AsyncZipDeflate","Zip","file","fl_1","com","comment","hl_1","header","chks_1","pAll_1","_i","chks_2","chk","tr_1","ind_1","uf_1","nxt","cl_1","dd","splice","zip","keys","tot","slft","files","term","tAll","cbd","mt","cbf","oe","cdl","badd","loc","_loop_1","ms","cbl","zipSync","UnzipPassThrough","UnzipInflate","AsyncUnzipInflate","sz","Unzip","onfile","toAdd","is","oc","_loop_2","sig","this_1","bf","cmp_1","chks_3","unshift","d_1","sc_1","su_1","fn_1","file_1","name","ctr","chks_4","originalSize","register","decoder","queueMicrotask","setTimeout","unzip","ze","fltr","filter","_loop_3","c_1","no","infl","unzipSync","c_2","ConsumerLib","PublisherLib","SMFLib","SolclientFactoryLib","TransportLib","assert","CapabilityType","Check","CorrelatedRequest","Destination","ErrorResponseSubcodeMapper","ErrorSubcode","OperationError","FsmEvent","State","StateMachine","Hex","LogFormatter","Message","MessageOutcome","MessageDeliveryModeType","P2PUtil","SessionEvent","SessionEventCode","SessionEventName","SessionFSMEvent","SessionRequestType","SessionStateName","SslDowngrade","StatType","StatsByMode","StringUtils","SubscriptionUpdateTimeoutMessages","Codec","SDTCodec","Convert","anythingToBuffer","formatHexString","stripNullTerminate","STAT_TX_BYMODE_BYTES","STAT_TX_BYMODE_MSGS","STAT_RX_BYMODE_BYTES","STAT_RX_BYMODE_MSGS","STAT_TX_BYMODE_REDELIVERED","STAT_TX_BYMODE_BYTES_REDELIVERED","module","SessionFSM","sessionProperties","session","stats","hosts","super","fsm","logger","args","sessionIdHex","getCurrentStateName","LOG_TRACE","LOG_DEBUG","LOG_INFO","wrap","_sessionProperties","_session","_sessionStatistics","_hosts","_consumers","ConsumerFlows","_flowInterfaceFactory","flow","getCorrelationTag","bind","incStat","sendData","message","send","sendToTransport","sendControl","enqueueRequest","enqueueOutstandingCorrelatedReq","createDestinationFromDescriptor","createTemporaryDestination","isCapable","getCapability","updateQueueSubscription","canAck","_userBackpressured","clearCurrentError","initial","transitionTo","SessionDisconnected","context","getStateMachine","reset","unhandledEventReaction","sEvent","curState","getCurrentState","getName","CREATE_SUBSCRIBER","guaranteedFlowObject","DISPOSE","disposeInternal","FLOW_UP","SessionConnecting","CONNECTING","parentContext","handleTransportDestroyed","clearConnectTimer","_currentHost","getNextHost","transitionToExitPoint","connectWaitTimeInMsecs","_connectWaitTimer","processEvent","CONNECT_WAIT_TIMEOUT","WaitingForInterConnectTimeout","WaitingForTransport","entry","setConnectTimer","entryPoint","wasConnected","undefined","disconnected","_connectFailEvent","DISCONNECTED","_connectSuccessEvent","DestroyingTransport","DOWN_ERROR","RECONNECTED_NOTICE","_reconnectRetries","_currentError","eventText","responseCode","errorSubcode","eventReason","setPostEventAction","emitSessionEvent","build","RECONNECTING_NOTICE","CONNECT_FAILED_ERROR","UP_NOTICE","resolveHosts","setCurrentError","UNRESOLVED_HOSTS","EXCEPTION","DNS_RESOLUTION_COMPLETE","WaitingForDNS","reaction","DISCONNECT","transitionToEntryPoint","CONNECT_TIMEOUT","TIMEOUT","SEND_ERROR","sessionEvent","errEvent","TRANSPORT_DESTROYED","exit","clearTimeout","exitPoint","currentHostToString","CAN_ACCEPT_DATA","SessionTransportUp","WAITING_FOR_DNS","DESTROYING_TRANSPORT","destroyTransportSession","WAITING_FOR_INTERCONNECT_TIMEOUT","WAITING_FOR_TRANSPORT","errorMessage","initTransport","subcode","INTERNAL_ERROR","WaitingForTransportUp","WAITING_FOR_TRANSPORT_UP","_justEntered","returnCode","_transport","connect","TransportReturnCode","OK","CONNECTION_ERROR","describe","sessionId","internalTransition","TRANSPORT_UP","sendClientCtrlLogin","WaitingForLogin","LOGIN_FAILURE","WAITING_FOR_LOGIN","setClientCtrlTimer","TRANSPORT_PROTOCOL_CLIENTCTRL","clientCtrlMsg","smfMsg","response","getResponse","respCode","_responseCode","checkNoLocal","checkCompressedSsl","updateReadonlySessionProps","WaitForTransportChange","assign","COMPRESSED_TLS_NOT_SUPPORTED","NO_LOCAL_NOT_SUPPORTED","rawSubcode","getErrorSubcode","responseString","UNKNOWN_ERROR","DOWNGRADE_TIMEOUT","requestDowngrade","clearClientCtrlTimer","WAITING_FOR_TRANSPORT_CHANGE","rc","updateTransportCompression","newTransport","TRANSPORT_CHANGE_DONE","ReapplyingSubscriptions","REAPPLYING_SUBSCRIPTIONS","copySubscriptionCacheKeys","reapplySubscriptions","WaitForSubConfirm","WaitForCanAcceptData","SUBSCRIBE_TIMEOUT","clearSubscriptionCacheKeys","WAITING_FOR_SUBCONFIRM","TRANSPORT_PROTOCOL_SMP","smfRespHeader","smfHeader","subscriptionStr","encodedUtf8Subscription","pm_respcode","respText","pm_respstr","DestroyTransport","canConnectPublisher","_defaultPublisher","isBindWaiting","WaitingForMessagePublisher","WAITING_FOR_CAN_ACCEPT_DATA","TRANSPORT_CAN_ACCEPT_DATA","WAITING_FOR_PUBFLOW","sendPublisherSessionUpEvent","FLOW_FAILED","canConnectConsumer","flows","forEach","consumer","sendConsumerSessionUpEvent","reconnectingFlows","FullyConnected","SessionDisconnecting","cleanupSession","handleSubscriptionUpdateError","clearKeepAlive","FULLY_CONNECTED","scheduleKeepAlive","CONNECT","DISCONNECTING","DisconnectingFlows","DISCONNECTING_FLOWS","gatherPendingFlows","MessageConsumerEventName","isGathering","adaptedListenForDestroy","installfn","downEvents","known","has","pending","onFlowDown","event","_removeListener","delete","checkPendingFlows","_disconnectSession","_once","DOWN","proceed","FLOWS_DISCONNECTED","Set","FlushingTransport","FLUSHING_TRANSPORT","flushTransport","flushTransportSession","onTransportFlushed","TRANSPORT_FLUSHED","addToSubscriptionCache","destination","nothing","_subscriptionCache","key","_subscriptionCacheCount","cancelOutstandingCorrelatedReq","correlationTag","_correlatedReqs","req","LOG_ERROR","timer","ConsumerFSMEvent","ConsumerFSMEventNames","processFSMEvent","SESSION_DOWN","PublisherFSMEvent","PublisherFSMEventNames","_clientCtrlTimer","_connectTimer","_keepAliveTimer","clearInterval","resetKeepAliveCounter","noLocalSupported","noLocal","caps","getRouterCapabilities","NO_LOCAL","_compressedTLS","COMPRESSED_SSL","checkSessionDestinationCapability","error","getType","getSubscriptionInfo","isShare","isNoExport","SHARED_SUBSCRIPTIONS","SHARED_SUBSCRIPTIONS_NOT_SUPPORTED","_subscriptionCacheKeys","p2pTopic","getP2PTopicSubscription","p2pInboxBase","createMessagePublisher","publisherProperties","enabled","MessagePublisher","MessagePublisherEventName","publisher","properties","sessionInterfaceFactory","UP","description","REJECTED_MESSAGE","ctrlMessage","getADErrorSubcode","REJECTED_MESSAGE_ERROR","getCorrelationKey","ACKNOWLEDGED_MESSAGE","FLOW_NAME_CHANGED","messages","count","REPUBLISHING_UNACKED_MESSAGES","CAN_SEND","GUARANTEED_MESSAGING_DOWN","GUARANTEED_MESSAGE_PUBLISHER_DOWN","SESSION_UP","SESSION_UP_NO_AD","isAD","createMessageConsumer","MessageConsumer","consumerProperties","getProperties","topicEndpointSubscription","LOG_WARN","settlementOutcomes","requiredSettlementOutcomes","some","FAILED","REJECTED","AD_APP_ACK_FAILED","outcomeNotSupportedError","map","nameOf","join","INVALID_OPERATION","info","createQueueBrowser","MessageConsumerAcknowledgeMode","QueueBrowser","queueDescriptor","acknowledgeMode","CLIENT","browser","hasOwnProperty","connectTimeoutInMsecs","connectAttempts","windowSize","transportAcknowledgeTimeoutInMsecs","transportAcknowledgeThresholdPercentage","destroy","_smfClient","_disposed","operations","resetStats","_kaStats","removeFromSubscriptionCache","dispose","disposeAll","operationKey","operation","sendEvent","reqTimeoutCb","reqTimeout","correlationKey","respRecvCallback","readTimeoutInMsecs","outstandingReq","errorInFsm","errorEventText","stack","callback","flush","nextCorrelationTag","currentState","getFinalState","DISPOSED","getStat","statType","TX_TOTAL_DATA_MSGS","TX_DIRECT_MSGS","TX_PERSISTENT_MSGS","TX_NONPERSISTENT_MSGS","TX_TOTAL_DATA_BYTES","TX_DIRECT_BYTES","TX_PERSISTENT_BYTES","TX_NONPERSISTENT_BYTES","getTransportInfo","getInfoStr","handleADCtrlMessage","flowId","getFlowId","pm_corrtag","updateRxStats","cancelledRequest","respRecvdCallback","RX_REPLY_MSG_DISCARD","msgType","SMFAdProtocolMessageType","CLIENTACK","CLIENTNACK","CLOSEPUBFLOW","getFlowById","disposed","handleUncorrelatedControlMessage","RX_DISCARD_NO_MATCHING_CONSUMER","handleADTrMessage","pm_ad_flowid","handleDataMessage","handleApiSubscriptionTimeout","timeoutMsg","handleClientCtrlMessage","SMFClientCtrlMessageType","LOGIN","SMFClient","SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG","handleClientCtrlResponse","handleClientCtrlTimeout","handleConnectTimeout","handleUpdatePropertyTimeout","PROPERTY_UPDATE_ERROR","handleRejectedTrMessage","topicNameRaw","pm_tr_topicname_bytes","topicName","handleSMFMessage","discardMessage","RX_DISCARD_SMF_UNKNOWN_ELEMENT","smf_protocol","SMFProtocol","TRMSG","smf_adf","ADCTRL","CLIENTCTRL","SMP","handleSMPMessage","KEEPALIVE","KEEPALIVEV2","handleUnknownProtocolMessage","handleSMFParseError","transportError","PROTOCOL_ERROR","request","confirm","SUBSCRIPTION_ALREADY_PRESENT","SUBSCRIPTION_NOT_FOUND","handleSubscriptionTimeout","result","handleTransportEvent","transportEvent","infoStr","getTransportEventCode","TransportSessionEventCode","getSessionId","DESTROYED_NOTICE","getSubcode","GuaranteedFlowControlledRelief","DATA_DECODE_ERROR","PARSE_FAILURE","TSESSION","messageType","host","lastMsgWritten","lastBytesWritten","rxData","rxError","TransportFactory","createTransport","clone","injectTransportInterceptor","_transportInterceptor","interceptor","setInterceptor","keepAliveTimeout","_keepAliveCounter","keepAliveIntervalsLimit","KEEP_ALIVE_FAILURE","clientStats","getClientStats","prestatMsgWritten","msgWritten","prestatBytesWritten","bytesWritten","kaMsg","KeepAliveMessage","prepareAndSendMessage","payloadCompressionLevel","anything","_binaryAttachment","_structuredContainer","compressedAttachment","origSize","options","constants","Z_FINISH","getSdtContainer","encodedContainer","encodeSingleElement","_setCompressedBinaryAttachment","getHttpContentEncoding","_compressedCE","deliveryMode","getDeliveryMode","DIRECT","_payload_is_memoized","_memoized_csumm","_memoized_payload","PERSISTENT","NON_PERSISTENT","reason","adLocallyDisabled","GM_UNAVAILABLE","_gmSendDisallowed","prepareAdMessageAndSend","_getCompressedBinaryAttachment","NO_SPACE","INSUFFICIENT_SPACE","SolclientFactory","createTopicDestination","requestConfirmation","topicDestination","sendSubscribe","topic","sub","_eventCode","keepAliveIntervalInMsecs","setInterval","statTarget","forceAllowEnqueue","content","Encode","encodeCompoundMessage","updateTxStats","compressionLevel","match","_plaintextTLS","sslConnectionDowngradeTo","PLAINTEXT","ClientCtrlMessage","getLogin","rxMsgObj","requestTimeout","smpMsg","SMPMessage","getSubscriptionMessage","sendUpdateProperty","mutableSessionProperty","newValue","getUpdate","provisionEndpoint","queueDescriptior","queueProperties","AdProtocolMessage","getCreate","deprovisionEndpoint","getDelete","transportDowngradeTimeoutInMsecs","source","target","subscriptionUpdate","subject","requestType","force","isSMP","REMOVE_DTE_SUBSCRIPTION","ADD_SUBSCRIPTION","ADD_P2PINBOX","getDTEUnsubscribeMessage","REMOVE_SUBSCRIPTION","queueSubscriptionUpdate","queue","getQueueSubscriptionMessage","origReq","smfMessage","pm_deliverymode","msgStatKey","bytesStatKey","msgLength","messageLength","RX_TOTAL_DATA_MSGS","RX_TOTAL_DATA_BYTES","smf_di","RX_DISCARD_MSG_INDICATION","RX_CONTROL_MSGS","RX_CONTROL_BYTES","getReplyTo","TX_REQUEST_SENT","isRedelivered","TX_CONTROL_MSGS","TX_CONTROL_BYTES","clientCtrlRespMsg","props","_setVpnNameInUse","getVpnNameInUseValue","oldVirtualRouterName","virtualRouterName","newVirtualRouterName","getVridInUseValue","_setVirtualRouterName","handleVirtualRouterNameChange","_setP2pInboxBase","getP2PTopicValue","_setP2pInboxInUse","getP2PInboxTopic","updateCapabilities","gmCap","_getCapability","GUARANTEED_MESSAGE_PUBLISH","oldName","newName","onVRNChanged","VIRTUALROUTER_NAME_CHANGED","severTls","startCompression","Flow","PrivateFlowEventName","MessagePublisherProperties","PublisherFSM","direct","emits","values","_fsm","_makeFSM","formatter","_bindWaiting","BIND_WAITING","_onBindWaiting","_onBindFailed","_onDown","_onUp","sessionInterface","_sessionInterface","_properties","_flowId","_flowName","publisherId","_publisherId","FLOW_CLOSE","getDisposedEvent","handleAck","ACK","ack","handleNack","nack","getLastMsgIdAcked","FLOW_UNBOUND","dataMsg","util_inspect","_disposeFSM","_isDisconnected","isDisconnected","Enum","WebTransportState","new","DOWNGRADING","DESTROYING","UUID","generateUUID","getTime","random","NODE_OS_TYPES","Darwin","Windows_NT","window","global","NODE_PROCESS","product","platform","agent","ostype","osname","nodeVersionStr","version","substr","release","arch","Process","Iterator","arr","_arr","_index","_end","deref","incr","makeIterator","REMOVE_P2PINBOX","MessageConsumerEvent","MessageConsumerProperties","QueueBrowserEventName","QueueBrowserProperties","require","CacheRequestResult","_returnCode","_subcode","_topic","_error","getReturnCode","getReturnSubcode","getTopic","getError","Debug","HTTPLib","WebSocketTransportSession","HTTPConnection","WebTransportCapabilities","webSocket","browserSupportsBinaryWebSockets","xhrBinary","browserSupportsXhrBinary","streaming","browserSupportsStreamingResponse","EncodeSingleElementLib","UtilLib","EncodeHeader","SDTDataTypes","SDTMapContainer","encodeHeader","EncodeMap","encodeMap","sdtmap","getKeys","sdtfield","strKeyField","strKeyName","getField","nullTerminate","EncodeSingleElement","encodeSingleElementToBuf","StringBuffer","LUT_PRINTABLE","tmp","padLeftRight","minLen","padSide","padChar","append","charAt","leastSpaces","line","spaces","capitalizeWord","toUpperCase","isEmptyFun","isEmpty","notEmpty","toSafeChars","padLeft","padRight","hexdump","output","printable","spacer","linelen","sLength","ccode","clear","heredoc","literals","substitutions","subst","lines","reduce","Infinity","substring","C_2_32","pow","leftPad","repeat","GlobalContext","sessionCounter","idCounter","RandId","toFixed","NextSessionCounter","NextId","GenerateClientName","GenerateUserIdentification","GenerateClientDescription","TransportBase","url","eventCB","client","transportProps","_url","_ssl","useSsl","_client","_eventCB","_props","immediate","forceFailure","getTransportProtocol","transportProtocol","beginDowngrade","_interceptor","removed","installed","urlParts","validSchemes","PARAMETER_OUT_OF_RANGE","MessageLib","BidiMap","PriorityUserCosMap","MessageUserCosType","COS1","COS2","COS3","BaseSMFClient","rxSmfCB","rxMessageErrorCB","_rxSmfCB","_rxMessageErrorCB","_correlationCounter","SMF_MAX_CORRELATION","CacheReturnCode","FAIL","INCOMPLETE","APIPropertiesValidators","MessagePublisherAcknowledgeMode","validateInstance","valBoolean","valIsMember","valNumber","valRange","MessagePublisherPropertiesValidator","validate","instance","Number","MAX_VALUE","DestinationLib","SDTMapContainerLib","SDTStreamContainerLib","ValidateLib","SDTFieldType","baseTypes","BOOL","UINT8","INT8","UINT16","INT16","UINT32","INT32","UINT64","INT64","WCHAR","STRING","BYTEARRAY","FLOATTYPE","DOUBLETYPE","failInvalidParameter","valueType","PARAMETER_INVALID_TYPE","validateSdtField","MAP","instanceOf","STREAM","SDTStreamContainer","DESTINATION","ACCEPTED","kForOnEventAttribute","kListener","kCode","Symbol","kData","kError","kMessage","kReason","kTarget","kType","kWasClean","Event","enumerable","CloseEvent","wasClean","ErrorEvent","MessageEvent","EventTarget","addEventListener","handler","listener","listeners","wrapper","isBinary","callListener","_closeFrameReceived","_closeFrameSent","once","removeEventListener","removeListener","thisArg","handleEvent","LogLevel","state","impl","INFO","LogBinding","GlobalBinding","ReplayStartLocation","ReplayStartType","ReplayStartLocationBeginning","_type","BEGINNING","DestinationType","SubscriptionInfo","ucs2ToUtf8","utf8ToUcs2","ProfileBinding","DESTINATION_PREFIX_FROM_TYPE","QUEUE","TEMPORARY_QUEUE","createPrefix","createOperationError","errorStr","INVALID_TOPIC_SYNTAX","legacyValidate","bytes","exceptionCreator","nameLength","bytesLength","isWildcarded","encodeBytes","topicUtf8Encode","prefix","networkName","DestinationUtil","createTemporaryName","vrid","TOPIC","decodeBytes","validateAndEncode","constError","subscriptionInfo","prefixType","startsWith","errorConst","subInfo","subInfoConst","parseFromName","QueueAccessType","QueueDiscardBehavior","QueuePermissions","QueuePropertiesValidator","permissions","accessType","quotaMB","maxMessageSize","respectsTTL","discardBehavior","maxMessageRedelivery","FactoryProfile","guaranteedMessagingEnabled","cometEnabled","byteArrayAsString","legacyInstance","v10Instance","forwardInstance","SolclientFactoryProfiles","_legacy","_v10","_forward","_default","version7","version10","version10_5","Lazy","Bits","ContentSummaryElement","ContentSummaryType","SMFUH","lazyValue","int8ToStr","int16ToStr","int24ToStr","int32ToStr","delModeEnumBidiMap","el","lutDelModeToEnum","forward","lutEnumToDelMode","reverse","uhTypeMap","paramTypeCount","uh","byte1","lenMap","fill","idx","lightMap","lenCount","ContentSummaryDecodeMap","XML_META","XML_PAYLOAD","BINARY_ATTACHMENT","CID_LIST","BINARY_METADATA","ParamParse","FIVE","SIX","dataBuf","readUInt8","paramLen","readInt32BE","delmode","lookup","get","elements","cumulativeSize","elementType","elementDeclaredLength","elementSize","readUInt16BE","readUIntBE","currentElement","contentSummaryArr","messageElementDescriptions","currentContentSummary","currentSizeStr","firstByte","paramtype","forcedLengthMode","lengthModeMap","lengthMode","lengthString","FORCED_LENGTH_MODE","byte2","SDTDestType","SDTField","SDTUnsupportedValueError","SDTValueErrorSubcode","Parameter","BinaryMetaBlock","payload","asEncodedSmf","smf","fromEncodedSmf","bufSmf","chunkCount","fourbyte","payloadLen","payloadOffset","Mixin","targetProto","addProto","getOwnPropertyNames","getOwnPropertyDescriptor","APIProperties","getDefaultLogLevel","SolclientFactoryProperties","logLevel","profile","_profile","number","_logLevel","_logger","Duplex","randomFillSync","PerMessageDeflate","EMPTY_BUFFER","kWebSocket","NOOP","isBlob","isValidStatusCode","mask","applyMask","toBuffer","kByteLength","maskBuffer","Buffer","alloc","RANDOM_POOL_SIZE","randomPool","randomPoolPointer","Sender","socket","extensions","generateMask","_extensions","_generateMask","_maskBuffer","_socket","_firstFragment","_compress","_bufferedBytes","_queue","_state","onerror","frame","dataLength","merge","skipMasking","from","readOnly","payloadLength","allocUnsafe","fin","opcode","rsv1","writeUInt16BE","writeUIntBE","close","TypeError","byteLength","RangeError","write","enqueue","dispatch","sendFrame","ping","getBlobData","pong","perMessageDeflate","extensionName","binary","params","_isServer","_threshold","blob","arrayBuffer","then","destroyed","nextTick","callCallbacks","dequeue","catch","onError","Reflect","list","cork","uncork","sender","ProvisionEvent","sessionEventCode","_queueDescriptor","_queueProperties","spec","details","ArrayUtils","parseURL","TimingBucket","Version","TransportCapabilities","defaultEnablePublisher","globallyEnabled","webSocketAvailable","web","getDefaults","acknowledgeTimeoutInMsecs","PER_MESSAGE","connectRetryCount","_enabled","defined","_windowSize","_acknowledgeTimeoutInMsecs","_acknowledgeMode","_connectRetryCount","_connectTimeoutInMsecs","EventEmitter","https","http","net","tls","randomBytes","createHash","Readable","URL","Receiver","BINARY_TYPES","GUID","kStatusCode","format","parse","kAborted","protocolVersions","readyStates","subprotocolRegex","WebSocket","address","protocols","_binaryType","_closeCode","_closeMessage","_closeTimer","_errorEmitted","_paused","_protocol","_readyState","_receiver","_sender","_bufferedAmount","_redirects","initAsClient","_autoPong","autoPong","binaryType","includes","bufferedAmount","_writableState","isPaused","onclose","onopen","protocol","readyState","setSocket","receiver","allowSynchronousEvents","isServer","maxPayload","skipUTF8Validation","receiverOnConclude","receiverOnDrain","receiverOnError","receiverOnMessage","receiverOnPing","receiverOnPong","senderOnError","setNoDelay","socketOnClose","socketOnData","socketOnEnd","socketOnError","OPEN","emit","emitClose","CLOSED","cleanup","removeAllListeners","CLOSING","errorEmitted","setCloseTimer","abortHandshake","_req","pause","sendAfterClose","resume","needDrain","websocket","protocolVersion","followRedirects","maxRedirects","socketPath","hostname","timeout","method","path","port","parsedUrl","SyntaxError","href","isSecure","isIpcUrl","invalidUrlMessage","pathname","hash","emitErrorAndClose","defaultPort","protocolSet","createConnection","tlsConnect","netConnect","headers","Connection","Upgrade","search","handshakeTimeout","offer","test","origin","Origin","username","password","auth","parts","_originalIpc","_originalSecure","_originalHostOrSocketPath","entries","toLowerCase","listenerCount","isSameHost","authorization","cookie","res","location","statusCode","addr","abort","upgrade","digest","update","serverProt","protError","secWebSocketExtensions","extensionNames","accept","finishRequest","servername","isIP","setHeader","receiverOnFinish","_readableState","endEmitted","read","finished","property","FATAL","ERROR","WARN","DEBUG","TRACE","ESKit","Factory","FSM","Log","MessageTracing","Publisher","SDT","Session","SMF","SolcacheSession","TestEnv","Transport","Util","Validate","fields","getExtraStringInfo","SMFParameter","begin","_value","_uh","_buffer","_begin","getValue","getUh","getBuffer","getBegin","getEnd","Long","DEFAULTS","_lastAcked","fromNumber","_lastSent","_next","longToString","MessageIds","lastAcked","fromValue","lastSent","setLastSent","next","HTTPTransportSession","TransportProtocol","TransportProtocolHandler","WebTransportEvent","WebTransportFSM","WebTransport","getId","webTransportProtocolList","_transportHandler","_webTransportFsm","notifyEvent","handleDestroyed","_transportSession","wEvent","_transportEvent","DOWNGRADE_FAILED","_lastDowngradeSucceeded","DOWNGRADE_SUCCEEDED","connectInternal","tpProtocol","HTTP_BASE64","HTTP_BINARY","HTTP_BINARY_STREAMING","evt","WS_BINARY","DESTROY","_destroyMsg","errorMsg","canCompleteDowngrade","destroyInternal","completeDowngrade","getConnError","_connError","DOWNGRADE","_downgradeMsg","DebugLib","SolclientDestinationLib","SolclientMessageLib","Baggage","TraceContextSetter","SolclientSDTLib","stringToUint8Array","parseAdpAt","parseCCAt","ParseSMF","parseSMFAt","parseSMPAt","parseTsSmfMsgAt","userCosForPriority","BIN_STRUCTYPES","MessageType","TEXT","adaptBinaryMetaToMessage","binaryMeta","messageIn","messageSdt","parseSingleElement","sdtstream","getNext","preambleByte0","_setPayloadCompressed","_messageType","BINARY","preambleByte1","setAsReplyMessage","sdtMap","setUserPropertyMap","headerMap","ci","mi","rt","si","sn","ts","ct","bag","ctx","setCorrelationId","setApplicationMessageId","setApplicationMessageType","setReplyTo","setSenderId","setSequenceNumber","getValueNoThrow","setSenderTimestamp","setGMExpiration","setHttpContentEncoding","setHttpContentType","_baggageObj","setBaggage","_setBaggage","_traceContextSetter","fromTraceContext","_setCreationContext","Decode","decodeCompoundMessage","payloadPosition","headerLength","_smfHeader","_setDeliverToOne","smf_dto","_setDeliveryMode","_setDestination","DestinationFromNetwork","createDestinationFromBytes","_setDiscardIndication","_setElidingEligible","smf_elidingEligible","_setDMQEligible","smf_deadMessageQueueEligible","_setUserCos","smf_priority","_setPriority","pm_msg_priority","pm_userdata","_setUserData","setRedelivered","pm_ad_redelflag","pm_ad_flowredelflag","setFlowId","setGuaranteedMessageId","pm_ad_msgid","setGuaranteedPreviousMessageId","pm_ad_prevmsgid","setPublisherId","pm_ad_publisherid","setPublisherMessageId","pm_ad_publishermsgid","setTopicSequenceNumber","pm_ad_topicSequenceNumber","setDeliveryCount","pm_ad_redeliveryCount","pm_ad_spooler_unique_id","_setSpoolerUniqueId","pm_ad_replication_mate_ack_message_id","_setSpoolerMessageId","pm_ad_local_spooler_message_id","isLong","pm_ad_ttl","setTimeToLive","toNumber","pm_ts_transport_context","_setTransportContext","cs","pm_content_summary","currentChunk","chunkBegin","position","chunkEnd","_setBinaryAttachment","binaryMetadataChunk","_setXmlMetadata","_setXmlContentInternal","_getPayloadCompressed","endsWith","inflatedAttachment","trim","_httpContentEncoding","newCE","trimRight","adaptSmfToMessage","formatDumpBytes","SMFSMPMessageTypeFlags","FLAG_FILTER","FLAG_PERSIST","SMF_SMP_FLAG_TOPIC","SMF_SMP_FLAG_RESPREQUIRED","SMF_SMP_FLAG_DELIVERALWAYS","setBits","encAdp0Param","encAdp8Param","encAdp16Param","encAdp32Param","encAdp64Param","int64ToStr","RSValueLenMap","encAdpReplayParam","valType","valObj","DATE","RGMID","suid","messageId","encAdp64AckPairParam","outcome","paramLength","encAdpUTF8NTParam","onebyte","adpVersion","twobyte","readUInt32BE","adpMsg","paramUH","paramType","paramValueLen","smfParam","addParameter","encAdp","paramspace","paramarray","getParameterArray","param","SMFAdProtocolParam","WINDOW","EP_DURABLE","ACCESSTYPE","FLOWTYPE","EP_RESPECTS_TTL","TRANSACTION_CTRL_MESSAGE_TYPE","TRANSACTED_SESSION_STATE","ACTIVE_FLOW_INDICATION","WANT_FLOW_CHANGE_NOTIFY","MAX_REDELIVERY","EP_BEHAVIOUR","PARTITION_GROUP_ID","FLOWID","TRANSPORT_WINDOW","EP_ALLOTHER_PERMISSION","EP_QUOTA","EP_MAX_MSGSIZE","GRANTED_PERMISSION","TRANSACTED_SESSION_ID","PUBLISHER_ID","LASTMSGIDSENT","LASTMSGIDACKED","LASTMSGIDRECEIVED","TRANSACTION_ID","ENDPOINT_ERROR_ID","REPLAY_START_LOCATION","replayParamVal","APPLICATION_ACK","ranges","settlementRanges","range","QUEUENAME","DTENAME","TOPICNAME","FLOWNAME","SELECTOR","TRANSACTED_SESSION_NAME","TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY","TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK","TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK","NOLOCAL","CUT_THROUGH","APPLICATION_PUB_ACK","paramdata","threebytes","padBytes","twobytes","TransportAckResult","DUPLICATE","OUT_OF_ORDER","TransportAcks","base","_acksPending","ZERO","tryReceive","messageID","prevMessageID","_lastReceived","gte","setAcked","acksPending","lastReceived","DestinationUtilLib","Queue","getOffset","_offset","createFromLocalName","queueName","encoding","isValidated","ShuntableTransport","_shunted","_dontEnd","_underlyingTransport","underlyingTransport","_interimBuffer","_transportDrained","_connected","shunt","dontEnd","_write","INVALID_STATE_FOR_OPERATION","_read","unpause","rxDataBuffer","onConnect","onClose","onDrain","resendBuffer","arg","shunted","StateLib","FsmObject","StateContext","logPadding","ancestorList","func","initialReaction","action","ReactionResult","caller","destState","getAncestorList","onInitial","external","processReactionResult","curContext","destStateIter","lowestCommonAncestor","onExit","getParent","onEntry","destInitial","reactionResult","destAncestorList","setLogPadding","padding","isRunning","TransportClientStats","TransportSessionState","WebTransportSessionBase","_connectTimeout","_clientstats","_sendBufferMaxSize","sendBufferMaxSize","_maxPayloadBytes","maxWebPayload","_queuedData","_queuedDataSize","_canSendNeeded","createConnectTimeout","connectTimerExpiry","cancelConnectTimeout","allowEnqueue","datalen","enqueueFailNoSpace","getQueuedDataToSend","bytesAllowed","getBufferedAmount","payloadSize","elem","elemLength","TSHState","StateWebSocketBinary","exitCb","nextState","validateLegal","NO_OBJ","subcodeSummary","expected","got","expectedStr","gotStr","check","validatorArgs","validateError","typename","boolean","orNothing","memberOfEnum","names","member","function","orNull","orUndefined","isMember","memberOf","object","objectValues","isNumber","isNumberOrNothing","isNumberOrNull","isRangeCompare","operator","operand","rangeCompare","isRangeCompareOrNothing","isStringOrNull","string","isString","isStringOrNothing","isValue","equal","Topic","QUEUE_PREFIX","createDestinationFromName","networkTopicName","networkTopicBytes","SMFTransportSessionMessageType","CREATE","CREATE_RESP","DESTROY_RESP","DATA","DATA_TOKEN","DATA_STREAM_TOKEN","SessionOperation","CTRL","SEND","QUERY_OPERATION","SESSION_DISCONNECT","FLOW_ACTIVE_IND","FLOW_OPEN","ACK_TIMEOUT","BIND_TIMEOUT","CREATE_TIMEOUT","UNBIND_TIMEOUT","TRANSPORT_ERROR","RECONNECT_INTERVAL_TIMEOUT","BIND_RESPONSE","CREATE_FAILED","CREATE_SUCCESS","LogImpl","trace","debug","warn","fatal","extension","subprotocol","keyRegex","server","STATUS_CODES","abortHandshakeOrEmitwsClientError","handleProtocols","clientTracking","verifyClient","noServer","backlog","_server","createServer","body","writeHead","listen","emitConnection","_removeListeners","addListeners","listening","handleUpgrade","clients","_shouldEmitClose","shouldHandle","index","secWebSocketProtocol","offers","secure","authorized","encrypted","verified","completeUpgrade","readable","writable","ws","concat","TX_REQUEST_TIMEOUT","RX_DIRECT_BYTES","RX_DIRECT_MSGS","RX_REPLY_MSG_RECVED","CACHE_REQUEST_SENT","CACHE_REQUEST_OK_RESPONSE","CACHE_REQUEST_FAIL_RESPONSE","CACHE_REQUEST_FULFILL_DISCARD_RESPONSE","RX_CACHE_MSG","CACHE_REQUEST_INCOMPLETE_RESPONSE","CACHE_REQUEST_LIVE_DATA_FULFILL","TX_PERSISTENT_BYTES_REDELIVERED","TX_PERSISTENT_REDELIVERED","TX_NONPERSISTENT_BYTES_REDELIVERED","TX_NONPERSISTENT_REDELIVERED","TX_ACKS_RXED","TX_WINDOW_CLOSE","TX_ACK_TIMEOUT","RX_PERSISTENT_BYTES","RX_PERSISTENT_MSGS","RX_NONPERSISTENT_BYTES","RX_NONPERSISTENT_MSGS","RX_ACKED","RX_DISCARD_DUPLICATE","RX_DISCARD_OUT_OF_ORDER","RX_SETTLE_REJECTED","RX_SETTLE_FAILED","RX_SETTLE_ACCEPTED","EXCLUSIVE","NONEXCLUSIVE","ccMsg","paramUh","smfP","encCC","paramSpace","paramArray","currentParam","currentParamOneByte","paramData","MessageCacheStatus","MessageDumpFlag","MessageDumpUtil","RgmidFactory","MessageTracingSupport","TraceContext","isBoolean","isEnumMember","isInstanceOf","isInstanceOfOrNothing","MESSAGE_CLONE_OPTIONS","circular","includeNonEnumerable","initMessage","_deliveryMode","_userCos","_cacheStatus","LIVE","_spoolerUniqueId","_priority","_deliveryCount","_creationContext","_transportContext","_baggage","_applicationMessageId","getApplicationMessageId","_applicationMessageType","getApplicationMessageType","getBinaryAttachment","setBinaryAttachment","getCacheRequestId","_cacheRequestId","_setCacheRequestID","cacheRequestID","getCorrelationId","_correlationId","_correlationKey","setCorrelationKey","isDeliverToOne","_deliverToOne","setDeliverToOne","setDeliveryMode","getDestination","_destination","setDestination","isDiscardIndication","_discardIndication","setDiscardIndication","isElidingEligible","_elidingEligible","setElidingEligible","getHttpContentType","_httpContentType","getPublisherId","getPublisherMessageId","_publisherMsgId","getTimeToLive","_timeToLive","isNaN","getGMExpiration","_expiration","isDMQEligible","_dmqEligible","setDMQEligible","getGuaranteedPreviousMessageId","_guaranteedPrevMsgId","_getSpoolerUniqueId","INVALID_SUID","getMessageConsumer","_consumer","setMessageConsumer","getGuaranteedMessageId","_guaranteedMsgId","_spoolerMessageId","getReplicationGroupMessageId","eq","smid","msgid","getTopicSequenceNumber","_topicSequenceNumber","topicSeqNo","getDeliveryCount","deliveryCount","settle","messageSettlementOutcome","_acked","MESSAGE_ALREADY_ACKNOWLEDGED","MESSAGE_DELIVERY_MODE_MISMATCH","SESSION_NOT_CONNECTED","hasAutoAckSupport","settlementOutcome","doesConsumerSupportOutcome","applicationSettle","isSettled","_validateBeforeAcknowledge","acknowledge","applicationAck","_autoAcknowledge","isAcknowledged","isAcknowledgeImmediately","_ackImmediately","setAcknowledgeImmediately","_setAcknowledgeImmediately","getCacheStatus","_setCacheStatus","cacheStatus","isReplyMessage","_replyMessage","_redelivered","getReceiverTimestamp","_receiverTimestamp","_replyTo","getSenderId","_senderId","getSenderTimestamp","_senderTimestamp","getSequenceNumber","_sequenceNumberError","_sequenceNumber","_autoSequenceNumber","getUserCos","getPriority","setUserCos","setPriority","getUserData","_userData","setUserData","getXmlContent","_xmlContent","getXmlContentDecoded","setXmlContent","setValue","unescape","encodeURIComponent","setXmlMetadata","_xmlMetadata","getXmlMetadata","_binaryMetaChunk","meta","hasAutoSequenceNumber","hasAutoSenderTimestamp","_autoSenderTimestamp","getUserPropertyMap","_userPropertyMap","setSdtContainer","container","structuredContainer","binaryAttachment","binaryAttachmentLength","_compressedBinaryAttachment","_payloadCompressed","getTraceContextSetter","getCreationContext","getTransportContext","setTransportContext","contextSetter","getBaggage","dump","flags","MSGDUMP_FULL","validFlags","clearExtendedVarLenParams","SOLCLIENT_USER_PROP_QUEUE_PARTITION_KEY","fs","SolclientSessionLib","NodeTLSOptsMixin","checkCertificateCNs","cert","sslTrustedCommonNameList","valid","cn","createTLSOptions","useClientCert","authenticationScheme","AuthenticationScheme","CLIENT_CERTIFICATE","constMap","SessionProperties","SslProtocolExcludeConstantMap","sslExcludedProtocols","tlsMinProtocol","tlsMaxProtocol","sslCipherSuites","default_tls13_ciphers","DEFAULT_CIPHERS","trimmed","cipher","sslValidateCertificate","sslTrustStores","tsContents","tsFile","readFileSync","FAILED_LOADING_TRUSTSTORE","sslPfx","sslPfxPassword","FAILED_LOADING_CERTIFICATE_AND_KEY","sslPrivateKey","sslPrivateKeyPassword","sslCertificate","ParseSingleElementLib","ParseFieldHeader","ParseMap","mapObj","keyFieldHeader","parseFieldHeader","create","keyString","valueFieldHeader","valueField","ParseSingleElement","addField","DEFAULT_PROPERTY_OPTIONS","setPropertyValue","lazyProperty","evalFn","configurable","lazyProperties","obj","SolaceError","sourceData","inspect","getSourceData","tag","valueLen","byte0","strSdtLen","Map","Stream","MessageRxCBInfo","messageRxCBFunction","userObject","TransportSMFMessage","remains","parseTsSmfHdrAt","smfheader","transportSMFMessage","tsHdrLen","tsHeaderLength","rtrTagLen","routerTag","tsHeaderPreLength","tsDestroyHeaderPreSid","tsCreateHeader","tsDataTokenPreSid","tsDataStreamTokenPreSid","genTsCreateHeader","genTsDestroyHeader","sid","genTsDataTokenMsg","genTsDataStreamTokenMsg","paddingBytes","genTsDataMsgHeaderParts","FlowOperation","START","STOP","GET_STATS","RESET_STATS","GET_PROPERTIES","GET_DESTINATION","PEER_SOFTWARE_VERSION","PEER_SOFTWARE_DATE","PEER_PLATFORM","PEER_PORT_SPEED","PEER_PORT_TYPE","MAX_DIRECT_MSG_SIZE","PEER_ROUTER_NAME","MESSAGE_ELIDING","GUARANTEED_MESSAGE_CONSUME","TEMPORARY_ENDPOINT","GUARANTEED_MESSAGE_BROWSE","ENDPOINT_MGMT","MAX_GUARANTEED_MSG_SIZE","ACTIVE_CONSUMER_INDICATION","COMPRESSION","ENDPOINT_DISCARD_BEHAVIOR","ENDPOINT_MESSAGE_TTL","JNDI","PER_TOPIC_SEQUENCE_NUMBERING","QUEUE_SUBSCRIPTIONS","SUBSCRIPTION_MANAGER","TRANSACTED_SESSION","MESSAGE_REPLAY","BR_REPLAY_ERRORID","VAR_LEN_EXT_PARAM","ClientCapabilityType","UNBIND_ACK","BR_ERRORID","PQ","ParseDestination","ParseFloat","ParseInteger","ParseStream","parseFloatField","parseIntegerField","parseMapAt","parseStreamAt","parseDestination","fieldHeader","elemValLen","Null","NULLTYPE","Boolean","Integer","UnsignedInteger","Float","Char","ByteArray","SMFMessage","SMF_MESSAGE","UNKNOWN","StringToBuffer","stringToBuffer","makeMap","keyValuePairs","QueueLib","AUTO","activeIndicationEnabled","_browser","replayStartLocation","reconnectAttempts","reconnectIntervalInMsecs","createIfMissing","something","AbstractQueueDescriptor","QueueDescriptor","QueueProperties","_bindTimeoutInMsecs","_connectAttempts","_topicEndpointSubscription","createFromName","_requiredSettlementOutcomes","array","_transportAcknowledgeTimeoutInMsecs","acknowledgeThreshold","_transportAcknowledgeThresholdPercentage","_activeIndicationEnabled","_noLocal","_replayStartLocation","_reconnectAttempts","_reconnectIntervalInMsecs","_createIfMissing","SolclientSession","PublisherStateNames","ConnectReason","flowIdDec","_publisher","_stateEvents","_guaranteedEnabled","_sendWindow","_resetConnectedInfo","_notifiedWindowClosed","_transportFlowControlled","PublisherUnbound","TRANSPORT_FULL","UNBOUND","emitDownAndBindWaiting","PublisherOpenFlowSent","OPENFLOWSENT","emitOpenFlowFailedError","handleOpenFlowResponse","OPENPUBFLOW","respStr","mappedSubcode","lastMsgIDAcked","getWindow","flowName","getFlowName","_messageIds","_unackedList","_connectReason","_renumber","payloadSizeLimit","_handleAck","_firstUnackedToSend","handleOpenFlowTimeout","handleUnknownFlowName","externalTransitionTo","sendOpenFlow","openPubFlowMsg","getOpenMessagePublisher","PublisherCloseFlowSent","PublisherUp","pEvent","UNKNOWN_FLOW_NAME","CLOSEFLOWSENT","handleCloseFlowResponse","handleCloseFlowTimeout","sendCloseFlow","closePubFlowMsg","getCloseMessagePublisher","_handleAckEvent","emitFlowUp","PublisherRetransmitting","PublisherDataXfer","_scheduleStateEvents","DATA_XFER","_maybeEmitCanSend","PublisherFlowControlled","FLOW_CONTROLLED","RETRANSMITTING","retransmit","_resendFromUnacked","RESEND_COMPLETE","getActiveState","TX_WINDOW_CLOSED","unackedList","dupMsg","adaptMessageToSmf_payloadMemoize","MESSAGE_TOO_LARGE","_cloneNumbers","msgId","_startAckTimer","pop","openFlow","messageIds","reportAcked","reportNacked","numAcked","lastAckedMessage","_resetAckTimer","_clearAckTimer","resendIndex","failover","_ackTimer","_emitStateEvents","pair","_handleAckTimeout","current","fromMsg","toMsg","_setPostEventAction","desc","_postEventAction","streamObj","formatEventName","eventName","messageConsumer","MESSAGE","_messageConsumer","_setupEventListers","_onConsumerUp","_onConsumerConnectFailed","_onConsumerDown","_onConsumerDownError","_onConsumerMessage","_onConsumerDisposed","GM_DISABLED","_onConsumerGMDisabled","disconnect","stop","removeMessageFromQueue","hasBlob","Blob","Stats","parent","_parent","_statsMap","TransportError","CacheCBInfo","CacheContext","CacheLiveDataAction","CacheRequest","CacheReturnSubcode","CacheSession","CacheSessionProperties","CACHE_REQUEST_PREFIX","ConsoleLogImpl","isFunction","getImpl","getLogLevel","setImpl","setLogLevel","forwarder","addGlobalFuncs","newLevel","addInitializer","Binding","_formatter","self","genericFunction","targetSelf","TransportSessionEvent","strToByteArray","strToHexArray","PacketReadState","BufferImpl","baseUrl","_haveToken","_confMaxWebPayload","_destroyTimer","_destroyTimeout","_createUrl","_routerUrl","_rxChannelClient","_httpSendConn","_httpReceiveConn","_smfDataTokenTSHeader","_routerTag","_sid","_transportProtocol","_useBinaryTransport","_useStreamingTransport","_streamingTransportPadding","_incomingBuffer","_packetReadState","navigator","userAgent","transportContentType","_contentType","destroyCleanup","updateMaxWebPayload","trLessEncapSMF","_createConn","handleCreateResponse","handleCreateConnFailure","createMsg","WAITING_FOR_CREATE","connError","CONNECTION_FAILED","WAITING_FOR_DESTROY","destroyTimerExpiry","handleRxDataToken","handleSendFailure","destroyMsg","dataIn","enqueueData","remainder","transportPacketLen","_smfDataTSHeaderParts","dataLen","initPreformattedHeaders","_flushCallback","sendQueuedData","tsRc","parsedResponse","smfresponse","useBase64","useStreaming","handleRxStreaming","handleSmfMessage","handleSmfParseError","handleRxData","handleDestroyResponse","cancelDestroyTimeout","innerResponse","tsmsg","TotalPayloadToRead","smfErrResponse","responseErrStr","recStat","rxDataString","handleRxError","isSMFHeaderAvailable","isSMFHeaderValid","errorInfo","status","asyncSendEvent","finalize","nameChecks","EndpointNameComplaint","EMPTY_STRING","LT","GT","ASTERISK","QUESTION_MARK","AMPERSAND","SEMICOLON","LEADING_SLASH","TRAILING_SLASH","DOUBLE_SLASH","TOO_LONG","NO_ISSUE","explainInvalidEndpointName","isTE","triplet","flatten","BaseChecks","instanceOfAny","types","empty","truthy","rangeGe","rangeMinInclusive","rangeGt","rangeMin","rangeLe","rangeMaxInclusive","rangeLt","rangeMax","epsilon","abs","NaN","included","none","cacheRequestCorrelationId","bufferUtil","Limiter","FastBuffer","species","TRAILER","kPerMessageDeflate","kTotalLength","kCallback","kBuffers","zlibLimiter","deflateOnData","inflateOnData","_maxPayload","inflateOnError","_inflate","_options","threshold","_deflate","concurrency","concurrencyLimit","serverNoContextTakeover","server_no_context_takeover","clientNoContextTakeover","client_no_context_takeover","serverMaxWindowBits","server_max_window_bits","clientMaxWindowBits","client_max_window_bits","configurations","normalizeParams","acceptAsServer","acceptAsClient","accepted","find","num","isInteger","_decompress","endpoint","windowBits","Z_DEFAULT_WINDOWBITS","createInflateRaw","zlibInflateOptions","createDeflateRaw","zlibDeflateOptions","Z_SYNC_FLUSH","byteOffset","BaseMessage","SMFHeader","SMFSMPMessageType","encodedUtf8QueueName","smpFlags","_encodedQueueName","_encodedClientName","isFlag","flagMask","setFlag","requestConfirm","smp","ADDSUBSCRIPTION","REMSUBSCRIPTION","getBytes","ADDQUEUESUBSCRIPTION","REMQUEUESUBSCRIPTION","SMF_SMP_FLAG_PERSIST","Timer","cancel","newInterval","interval","onInterval","timerRef","newTimeout","onExpire","XHRFactory","allowFail","xhr","XMLHttpRequest","CREATE_XHR_FAILED","SessionState","CONNECTED","SESSION_ERROR","smf_uh","messageConsumerEventName","_messageConsumerEventName","_infoStr","_errorSubcode","_reason","requestEventCode","VALUE_OUTSIDE_SUPPORTED_RANGE","_mask","_unmask","totalLength","toArrayBuffer","isBuffer","ArrayBuffer","isView","unmask","env","WS_NO_BUFFER_UTIL","readFloatBE","readDoubleBE","BASIC","AUTHENTICATION_SCHEME_BASIC","AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE","OAUTH2","CodecLib","SMFClientCtrlParam","SMFParameterType","SMFExtendedParameterType","ConsumerStateNames","UNBOUND_AWAIT_SESSION_UP","UNBOUND_AWAIT_FLOWOPEN","UNBOUND_AWAIT_ANY","BIND_SENT","FLOW_UP_XFER","FLOW_UP_XFER_INACTIVE","UNBIND_SENT","RECONNECTING","RECONNECTING_BIND_SENT","RECONNECTING_AWAIT_SESSION_UP","RECONNECTING_AWAIT_TIMER","CREATE_SENT","ADDSUBSCRIPTIONFORCLIENTNAME","REMSUBSCRIPTIONFORCLIENTNAME","eventQueue","finalState","handleUncaughtException","exc","processingEvents","_onEventCompletion","terminateFsm","postEventAction","activeStates","isStateActive","handleUnhandledEvent","uncaughtExceptionReaction","exitCallback","_exitCallback","_nextState","_unsupportedRuntimeMessage","getNextState","setNextState","getUseSsl","onEnter","duplexOnEnd","duplexOnError","terminateOnDestroy","duplex","autoDestroy","objectMode","writableObjectMode","_destroy","called","_final","MessageDumpUtilLib","MessageDumpStandardProvider","fpDestination","dest","fpSenderId","fpAppmsgType","fpAppMsgId","fpSequenceNumber","sequenceNum","fpTopicSequenceNumber","fpCorrelationId","fpHttpContentType","fpHttpContentEncoding","fpSendTimestamp","timestamp","formatDate","fpRcvTimestamp","fpClassOfService","fpDeliveryMode","fpGuaranteedMsgId","fpReplicationGroupMessageId","rgmid","fpTimeToLive","timeToLive","mdu","fpExpiration","fpMessageDMQEligible","fpMessageRedelivered","fpMessageDeliveryCount","fpDiscardIndication","fpAckImmediately","fpElidingEligible","fpReplyMessage","fpReplyTo","replyTo","fpDeliverToOne","fpCacheMessage","fpCacheRequestId","cacheRequestId","fpUserPropertyMap","propMap","detailValue","printMap","fpCorrelationTag","strValue","fpUserData","fpXmlMetadata","xmlMetadata","fpTracingCreationContext","isPresent","getTraceId","getSpanId","fpTracingTransportContext","fpTracingBaggage","fpSdtStream","sdtFieldValue","countItems","printStream","fpSdtMap","fpBinaryAttachment","att","fpXmlContent","xml","DISCONNECT_FAILED_ERROR","mixin","TcpTlsTransport","_drained","_tlsSocket","_writable","_socketError","_sessionId","setClientStats","rehome","parseHostPort","urlString","urlParsed","_compressionLevel","onData","originalSocket","_rawSocket","hadError","COMMUNICATION_ERROR","onOpen","Socket","tlsOptions","onerrorStub","bufferSize","prevCallback","EncodeInteger","EncodeStream","IEEE754LIB","int48ToStr","encodeStream","C_2_48","fieldVal","toIEEE754Single","toIEEE754Double","hdr","MSGDUMP_BRIEF","_instanceof","nativeMap","nativeSet","nativePromise","Promise","depth","allParents","allChildren","useBuffer","_clone","child","proto","resolve","reject","__isArray","__isRegExp","RegExp","__getRegExpFlags","lastIndex","__isDate","copy","getPrototypeOf","keyChild","valueChild","entryChild","getOwnPropertySymbols","symbols","symbol","descriptor","allPropertyNames","propertyName","__objToStr","regExpOptions","ignoreCase","multiline","clonePrototype","emptyCloneFunc","StateBinary","FULFILL","FLOW_THRU","buckets","bucketCount","normalized","cont","Resolver","compoundKey","rawPath","pathArr","commonSource","keySource","traversePath","toIEEE754","vIn","ebits","fbits","bias","LN2","parseInt","fromIEEE754","byteI","strToByteArr","byteArrToStr","fromIEEE754Double","fromIEEE754Single","CacheGetResultCode","INVALID","matchTopic","sessionID","isSuspect","hasMore","hasTimestamps","messageStream","clusterNameStream","CacheGetResult","readFromStream","hasNext","TcpRawTransport","CompressedTransport","TlsOnlyTransport","compressingLayer","plaintextTransport","setUnderlyingTransport","tlsLayer","uncompressedTransport","encryptedTransport","precallback","tlsShutdown","Base64","base64Encode","uint8ArrayToString","encContentSummary","encDeliveryMode","encLightSMFParam","encodeSMFParam","encodeSMFExtendedParam","encSmp","priorityForUserCos","addContentElementToArrays","csumm","payloadArray","dataChunk","cstype","cse","addToMapIfPresent","encodedSdtPayload","getEncodedTraceContext","sdtPreamble","sdtStreamContainer","adaptMessageToBinaryMeta","binaryMetaSMF","MAX_24BITS","adaptMessageToSmf","smfHeaderIn","payloadBytes","adaptMessageToSmf_payloadFinalize","pm_ad_publishermsgId","pm_ad_ackimm","pm_queue_len","pm_queue_offset","userData","adaptMessageToSmf_nonPayload","maskValues","bitRange","DI_BIT","ELIDING_ELIGIBLE_BIT","DTO_BIT","ADF_BIT","DMQE_BIT","VERSION_BITS","UH_BITS","PROTOCOL_BITS","PRIORITY_BITS","TTL_BITS","QT_OFFSET_BYTES","QT_LEN_BYTES","encodeSMF","w1","smf_version","smf_ttl","TR_TOPICNAME","LIGHT_QUEUE_NAME_OFFSET","pm_topic_len","LIGHT_TOPIC_NAME_OFFSET","pm_topic_offset","LIGHT_CORRELATION","LIGHT_ACK_IMMEDIATELY","MESSAGEPRIORITY","USERDATA","pm_username","USERNAME","pm_password","PASSWORD","RESPONSE","DELIVERY_MODE","ASSURED_MESSAGE_ID","ASSURED_PREVMESSAGE_ID","ASSURED_FLOWID","ASSURED_REDELIVERED_FLAG","AD_TIMETOLIVE","pm_ad_publisherMsgId","PUBLISHER_MSGID","MESSAGE_CONTENT_SUMMARY","extendedStreamContents","extendedUH","pm_oauth2_access_token","OAUTH2_ACCESS_TOKEN","pm_oidc_id_token","OIDC_ID_TOKEN","pm_oauth2_issuer_identifier","OAUTH2_ISSUER_IDENTIFIER","TS_TRANSPORT_CONTEXT","EXTENDED_TYPE_STREAM","encodedParams","hdrlen","msglen","setMessageSizes","setPayloadSize","kDone","kRun","jobs","job","binding","hostListDNSFilter","dns","dnsLookupPromise","resolved","errno","syscall","urls","promises","all","CacheRequestType","BULK_MSG","REGISTER_REQUEST","REGISTER_RESPONSE","HEARTBEAT_REQUEST","HEARTBEAT_RESPONSE","EVENT_NOTIFY","EVENT_ACK","ACTION_REQUEST","ACTION_RESPONSE","GET_REQUEST","GET_RESPONSE","GET_NEXT_REQUEST","GET_NEXT_RESPONSE","SET_REQUEST","SET_RESPONSE","GET_MSG_REQUEST","GET_MSG_RESPONSE","GET_NEXT_MSG_REQUEST","GET_NEXT_MSG_RESPONSE","UNREGISTER_IND","BULK_SET_REQUEST","BULK_SET_RESPONSE","PURGE_MSG_SEQUENCE_REQUEST","PURGE_MSG_SEQUENCE_RESPONSE","GET_MSG_SEQUENCE_REQUEST","GET_NEXT_MSG_SEQUENCE_REQUEST","GET_TOPIC_INFO_REQUEST","GET_TOPIC_INFO_RESPONSE","READY_MARKER","GET_TOPIC_INFO_REQUEST_RANGE","SYNC_READY_MARKER","VACUUM_REQUEST","VACUUM_RESPONSE","wasm","WebAssembly","Instance","Module","low","high","unsigned","ctz32","clz32","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","radixToPower","power","mul","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","div","rem1","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lessThanOrEqual","lte","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","b00","divide","divisor","approx","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","mod","countLeadingZeros","clz","countTrailingZeros","ctz","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","toBytesBE","hi","lo","fromBytes","fromBytesLE","fromBytesBE","MutableSessionProperty","SessionEventCBInfo","createSession","createFactory","messageCallbackInfo","eventCallbackInfo","ExitPoint","outerState","exitPointName","innerState","getDestState","typeDesc","validator","valInstance","typeInstance","typeInstanceDesc","valNotEmpty","valLength","valString","enumInstance","enumName","allowNull","valStringOrArray","valArrayIsMember","allowUndefined","allowEmpty","allowDuplicate","ele","valArrayOfString","valTopicString","typedesc","valTopicStringOrEmpty","CSPF","CSMP","PUBMSG","XMLLINK","WSE","SEMP","SUBCTRL","PUBCTRL","SMRP","SMF_IN_SMF","SMF_IN_RV","ADCTRL_PASSTHROUGH","TRANSPORT_PRIORITY","LINGER_OPTION","GRANTED_PERMISSIONS","NUM_MESSAGES_SPOOLED","PUBLISHER_FLAGS","APP_MSG_ID_TYPE","QUEUE_ENDPOINT_HASH","PAYLOAD","ENDPOINT_ID","ACK_SEQUENCE_NUMBER","ACK_RECONCILE_REQUEST","START_OF_ACK_RECONCILE","TIMESTAMP","MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW","SPOOLER_UNIQUE_ID","StateBase64","NO_ERROR","INVALID_SESSION_OPERATION","MESSAGE_VPN_NOT_ALLOWED","MESSAGE_VPN_UNAVAILABLE","CLIENT_USERNAME_IS_SHUTDOWN","DYNAMIC_CLIENTS_NOT_ALLOWED","CLIENT_NAME_ALREADY_IN_USE","CLIENT_NAME_INVALID","CLIENT_DELETE_IN_PROGRESS","TOO_MANY_CLIENTS","INVALID_VIRTUAL_ADDRESS","CLIENT_ACL_DENIED","SUBSCRIPTION_ACL_DENIED","PUBLISH_ACL_DENIED","PARAMETER_CONFLICT","OUT_OF_RESOURCES","TOPIC_MISSING","XML_PARSE_ERROR","SUBSCRIPTION_INVALID","SUBSCRIPTION_ERROR_OTHER","SUBSCRIPTION_TOO_MANY","SUBSCRIPTION_ATTRIBUTES_CONFLICT","DATA_ERROR_OTHER","INACTIVITY_TIMEOUT","UNKNOWN_TRANSPORT_SESSION_ID","AD_MESSAGING_NOT_SUPPORTED","CREATE_WEBSOCKET_FAILED","REPLICATION_IS_STANDBY","BASIC_AUTHENTICATION_IS_SHUTDOWN","CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN","ALREADY_BOUND","INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT","UNKNOWN_QUEUE_NAME","UNKNOWN_TOPIC_ENDPOINT_NAME","MAX_CLIENTS_FOR_QUEUE","MAX_CLIENTS_FOR_TE","UNEXPECTED_UNBIND","QUEUE_NOT_FOUND","SPOOL_OVER_QUOTA","QUEUE_SHUTDOWN","TOPIC_ENDPOINT_SHUTDOWN","NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT","ENDPOINT_ALREADY_EXISTS","PERMISSION_NOT_ALLOWED","INVALID_SELECTOR","MAX_MESSAGE_USAGE_EXCEEDED","ENDPOINT_PROPERTY_MISMATCH","NO_SUBSCRIPTION_MATCH","SUBSCRIPTION_DOES_NOT_MATCH","SELECTOR_DOES_NOT_MATCH","INVALID_DTE_NAME","UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND","CALLBACK_ERROR","NOLOCAL_DISCARD","GM_NOT_READY","LOW_PRIORITY_MSG_CONGESTION","QUOTA_OUT_OF_RANGE","REPLAY_NOT_SUPPORTED","REPLAY_DISABLED","CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED","REPLAY_TEMPORARY_NOT_SUPPORTED","UNKNOWN_START_LOCATION_TYPE","REPLAY_CANCELLED","REPLAY_MESSAGE_UNAVAILABLE","REPLAY_START_TIME_NOT_AVAILABLE","REPLAY_MESSAGE_REJECTED","REPLAY_LOG_MODIFIED","MISMATCHED_ENDPOINT_ERROR_ID","OUT_OF_REPLAY_RESOURCES","TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT","REPLAY_FAILED","REPLAY_STARTED","SHARED_SUBSCRIPTIONS_NOT_ALLOWED","SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED","REPLAY_START_MESSAGE_NOT_AVAILABLE","MESSAGE_ID_NOT_COMPARABLE","REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED","PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED","PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED","REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED","SYNC_REPLICATION_INELIGIBLE","INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY","INVALID_QUEUE_NAME","INVALID_TE_NAME","MESSAGE_SIZE_OUT_OF_RANGE","UNSUPPORTED_PERMISSIONS","MAX_ENDPOINTS_EXCEEDED","ASSURED_DELIVERY_NOT_READY","COPY_FROM_QUEUE_TEMPLATE_MISSING","COPY_FROM_TE_TEMPLATE_MISSING","_name","_bytes","_isValidated","_isWildcarded","_subscriptionInfo","valueOf","WebSocketCloseCodes","WebTransportsLib","lutTransportProtocols","StateStreamingAndBinary","useSSL","transport","downgradeTransport","TransportConstructor","switchState","newState","sessionEventCBFunction","SC","ROOT_MAPPING","AD_MAPPING","getSubcodeMappingInner","root","respErrorCode","codeMap","searchKey","foundKey","mapKey","getSubcodeMapping","ReplayStartLocationDate","_replayStartValue","createReplayStartLocationDate","dateTime","pairs","setValues","SUBSCRIPTION_LAYER_PARSER_FROM_TYPE","_layers","NOEXPORT_PREFIX","SHARE_PREFIX","shareGroup","groupIndex","LEVEL_DELIMETER_LEN","LEVEL_DELIMETER","dispatchTopicIndex","layers","parseLayers","constOffset","constResult","subscriptionStringParse","_isShare","_isNoExport","_dispatchTopicIndex","_shareGroup","parser","factoryState","initializeCount","initializers","factoryProps","initializer","_getInitializeCount","profiles","destType","destBytes","SDTFieldLib","_stream","_readPt","rewind","typeOrField","NotImplementedError","hexStringToUint8Array","traceContextSetter","_traceId","traceId","_spanId","spanId","_isSampled","isSampled","_traceState","traceState","_version","toClone","newContextSetter","_setSpanId","_setTraceId","_setSampled","getIsSampled","_setTraceState","getTraceState","_setVersion","getVersion","MAX_TRACE_STATE_LENGTH","getTruncatedTraceState","_standardTraceStateTruncation","traceStateLength","contentBuffer","offsetPos","contentBufferDataView","DataView","setUint8","traceId16byte","spanId8byte","setUint16","truncatedTraceState","traceStateLengthBytes","traceStateBytes","maxTraceStateLength","ignoredMembers","traceStateBuilderArray","traceStateBuilderArrayLength","listMembers","listMember","currentMemberLength","currentMember","isUtf8","_isValidUTF8","toStringTag","isValidUTF8","tokenChars","WS_NO_UTF_8_VALIDATE","EntryPoint","entryPointName","paramName","mustUnescape","isEscaping","inQuotes","token","BufferQueue","logPeekBuffer","bufPair","peekView","remaining","_rxDataCB","rxDataArrayBuffer","putSuccess","put","messageLen","msgBuffer","incomingMsg","advance","WINDOWED","NodeEventEmitter","NODE_DEFAULT_EVENTS","BLACKLIST_DIRECT","DISABLED_ACTIONS","ignore","fail","unsafe","bareEmit","_installDirectFilter","_installErrorHandlers","_installEmitVerifier","_listenerVerificationFilter","emitSet","emitArray","buildFilter","_emits","_defaultEmitDirect","emitDirect","_directEventName","_verifyListenerEvent","ret","_setEmitDirect","addListener","prependListener","prependOnceListener","directListenerCount","setOnFirstDirectListener","firstDirect","_onFirstDirectListener","onListener","throwInternal","emitBase","_internalError","formatErrorEvent","formattedName","innerEx","isDirect","disableEmitter","extraStringInfo","QueueType","QueueDescriptorValidator","TRANSPORT_FAIL","transportIn","WebTransportDown","WebTransportConnecting","WebTransportDestroying","_eventReason","attemptDowngrade","WebTransportUp","WebTransportDowngrading","notifyDowngradeFailed","tsEvent","TOPIC_ENDPOINT","ReplicationGroupMessageId","createMessage","createReplicationGroupMessageId","defaultComparator","astr","bstr","ArrayOperations","insertOrdered","element","comparator","inplaceInsertOrdered","Writable","_allowSynchronousEvents","_skipUTF8Validation","_buffers","_compressed","_payloadLength","_fragmented","_masked","_fin","_opcode","_totalPayloadLength","_messageLength","_fragments","_errored","_loop","startLoop","getInfo","getPayloadLength16","getPayloadLength64","getMask","getData","createError","compressed","haveLength","controlMessage","dataMessage","fragments","ErrorCtor","errorCode","TRANSPORT_PARSE_ERROR","SUBSCRIPTION_ERROR","SUBSCRIPTION_OK","REQUEST_ABORTED","REQUEST_TIMEOUT","PROPERTY_UPDATE_OK","UNSUBSCRIBE_TE_TOPIC_OK","UNSUBSCRIBE_TE_TOPIC_ERROR","PROVISION_ERROR","PROVISION_OK","sendXhrBinary","sendXhrText","arrayBufferToString","prependOrigin","WaitedToken","HadToken","ReturnedToken","base64Enc","streamProgressEvents","rxDataCb","connectionErrorCb","contentType","connectionClose","Options","_streamProgressBytes","_xhr","_rxDataCb","_connErrorCb","_reqActive","_REQCOUNTER","_REQBASE","_handleAbortedReq","attempt","maxRetry","open","onreadystatechange","xhrStateChange","sentdata","RS_LOADING","LOADING","RS_DONE","DONE","responseType","responseText","decodedData","statusText","responseTextLen","sentdataLen","responseTextDump","nextMaxRetry","isUsingBase64","onprogress","NONE","DefaultCapabilities","createDefaultCapabilities","assumedMaxAdSize","RMID_VERSION_1_PREFIX","validRmidHexRegex","spoolerUniqueId","effectiveMessageId","_suid","_messageId","otherReplicationGroupMessageId","oId","hexString","rgmidStr","rmidBufs","rmidHex","rmidBuffer","buflen","ConsumerFSM","MessageConsumerPropertiesValidator","localCounter","applyProperties","superFormatter","_active","endpointErrorId","partitionGroupId","_on","ACTIVE","_onFlowActive","INACTIVE","_onFlowDisconnected","_onFlowUp","_operationCheck","requestStartDispatchUser","requestStopDispatchUser","isAutoAcked","acceptMessage","UNBIND","getEndpointErrorId","FLOWCHANGEUPDATE","active","getActiveFlow","_accessType","_emit","queueDiscardBehavior","_queueDiscardBehavior","_respectsTTL","_permissions","isActive","wantFlowChangeNotify","maxWindowSize","addSubscription","success","subCode","removeSubscription","apiEnv","envObject","SMFClientCtrlAuthType","strToInt8","strToInt16","strToInt32","BOOLEAN_CAPS_BITS","CLIENT_CAPS_VALUES","p2pParam","getParameter","P2PTOPIC","vpnParam","MSGVPNNAME","vridParam","VRIDNAME","getUserIdValue","userIdParam","USERID","capParam","ROUTER_CAPABILITIES","prmParseCapabilitiesValue","SOFTWAREVERSION","SOFTWAREDATE","PLATFORM","PHYSICALROUTERNAME","prmGetDtoPriorityValue","dto","local","network","prmParseDtoPriorityValue","strDtoPriority","strCapabilities","capsIn","CT","boolCapCount","capsByte","bitIndex","msbIndex","capsKey","capLen","sprop","compressedTLS","plaintextTLS","cc","isClientCert","userName","subscriberLocalPriority","subscriberNetworkPriority","DELIVERTOONEPRIORITY","vpnName","applicationDescription","CLIENTDESC","userIdentification","AUTHENTICATION_SCHEME","idToken","accessToken","issuerIdentifier","CLIENTNAME","clientName","mode","formattedDate","SSL_DOWNGRADE","clientCaps","clientCapList","highestCap","capBits","cap","clientCapsToStr","CLIENT_CAPABILITIES","keepaliveVal","KEEP_ALIVE_INTERVAL","UPDATE","CLIENT_DESCRIPTION","appdesc","CLIENT_NAME","validateClientName","strName","encodeResult","valTopicEndpointSubscription","isDurable","rawProperties","durable","SessionLib","CacheSessionSubscribeInfo","noOp","privateInterface","_validateProps","cacheName","maxAgeSec","maxMessages","timeoutMsec","_outstandingRequests","_outstandingIDs","_nextMessageCallbackInfo","_nextSessionEventCallbackInfo","_sessionIF","_connectToSession","getEventCBInfo","getMessageCBInfo","setMessageCBInfo","_handleMessage","setEventCBInfo","_createCompoundEventCB","nextDelegate","rfuObject","_handleSessionEvent","_processSessionEvent","cbUserObject","_sendToNextDelegate","_checkSubscriptionStatus","cacheSession","_getOutstandingRequest","correlationID","_handleSubscriptionSuccess","_handleSubscriptionError","requestIn","subscriptionWaiting","_startCacheRequest","_terminateRequest","_checkRequestCompletion","childRequests","timeoutHandle","replyReceived","parentRequest","_unregisterRequest","SUSPECT_DATA","dataReceived","liveDataFulfilled","LIVE_DATA_FULFILL","REQUEST_COMPLETE","NO_DATA","_sendSeeOther","cacheGetResult","clusterName","childRequest","requestID","liveDataAction","addChild","_registerRequest","startRequestTimeout","_handleCacheRequestTimeout","_sendGetNext","nextRequest","_relevantLiveData","clearRequestTimeout","streamField","ERROR_RESPONSE","_incStat","getRootRequest","INVALID_SESSION","_decodeMessageStream","exception","every","checkCID","_performLiveDataAction","queuedLiveData","_fulfillRequest","_trackCompletionStats","_notifyCallback","CACHE_SESSION_DISPOSED","sendCacheRequest","subscribe","cbInfo","_notifyCallbackError","matchingRequestKeys","conflictKeys","conflictRequest","REQUEST_ALREADY_IN_PROGRESS","waitingForSubscribeInfo","_subscriptionWaiting","_handleCacheRequestFailed","getRequestID","suppressClusters","cachePrefix","getSessionProperties","p2pInboxInUse","cacheMessageType","VERSION","REPLY_SIZE_LIMIT","includeOtherClusters","round","getCallback","innerMessage","SUSPECT","CACHED","cacheRequest","getUserObject","cacheCBFunction","_waitForSocketDrain","_waitForCompressorDrain","_socketDrained","_compressorDrained","_compressor","_decompressor","newUnderlyingTransoprt","onZlibError","stage2destroy","highWaterMark","sendCompressed","onCompressorDrain","unpipe","_hadError","RequestError","RequestEventCode","MessageDispatcher","emitter","autoAck","_dispatchOne","_dispatchOneAutoAck","_dispatchOneBare","_onFirstMessageListener","_availableListener","_flush","caught","RECONNECTED","OutstandingDataRequest","correlationId","replyReceivedCBFunction","reqFailedCBFunction","BIND","UNSUBSCRIBE","DELETE","TRANSACTIONCTRL","XACTRL","getUnderlyingTransport","_shuntableTransport","duplexOptions","tlsShutdownStage2","_clonedContextSetter","TRACE_ID_BYTES_LENGTH","SPAN_ID_BYTES_LENGTH","setVersion","setTraceId","setSpanId","setSampled","setTraceState","traceContextValue","traceContextBuffer","traceContextBytes","bytesRead","getUint8","traceId16Bytes","spanId8Bytes","getUint16","getCacheName","setCacheName","getMaxMessageAgeSec","setMaxMessageAgeSec","getMaxMessages","setMaxMessages","getTimeoutMsec","setTimeoutMsec","reactions","entryPoints","exitPoints","getEntryPointDestState","getExitPointDestState","appEntryFunc","appExitFunc","eventUnhandled","tsEventCode","_transportEventCode","transportEventCode","getResponseCode","setError","parseURLs","rawURLs","rawURL","HostInfo","waitTime","HostList","connectRetries","reconnectRetries","connectRetriesPerHost","reconnectRetryWaitInMsecs","connectTryCount","POSITIVE_INFINITY","reconnectTryCount","connectTryCountPerHost","_mutableState","succeeded","hostPointer","hostTries","listTries","exhausted","lastHostInfo","hostTriesMax","listTriesMax","isNewList","isNewHost","didJustFinishList","hostInfo","hostNumber","thenGen","doOp","elseFn","when","condition","unless","sendXhrBinaryMSIE10","overrideMimeType","setRequestHeader","sendXhrBinaryXHR2","connClose","SetOperations","_map","deleteField","ApplicationAckState","UNACKED","ACKED_NOT_SENT","ACKED_SENT","ApplicationAck","exists","ApplicationAckRingBuffer","_size","_insertIndex","insert","beforeEvictCallback","insertIndex","inserting","evicting","front","firstIndex","rawIndex","updateAckState","existing","createWebSocketStream","Server","WebSocketServer","PADDING","SUB_ID_LIST","GENERIC_ATTACHMENT","AD_FLOWREDELIVERED_FLAG","AD_TOPICSEQUENCE_NUMBER","AD_ACK_MESSAGE_ID","AD_SPOOLER_UNIQUE_ID","AD_REPL_MATE_ACK_MSGID","AD_REDELIVERY_COUNT","PARTITION_KEY_HASH","FactoryLib","solace","_internal","inplaceUnion","setA","setB","inplaceDifference","inplaceIntersection","isSuperset","subset","difference","intersection","union","TWO_ZEROES_STR","THREE_ZEROES_STR","FOUR_ZEROES_STR","BYTEARRAY_CONVERT_CHUNK","ARRAY_BUFFER_CONVERT_CHUNK","arrayBuf","uint8Array","int32","strToUInt32","ab","stringToArrayBuffer","uint8DataArray","padStart","int8","int16","int24","strToInt24","int64","strToUInt64","byteArrayToStr","byteArray","ucs2","utf8","decodeURIComponent","escape","base64Decode","parseSMFExtendedStream","streamLen","pUH","isSMFAvailable","readHeaderOnly","word1","headerLen","word3","paramByte1","prmUh","lwpType","lwpLen","lwpValueLen","parsedQueueOffsets","parseTopicQueueOffsets","parsedTopicOffsets","pStart","pType","pValueLen","pLen","parseResponseParam","parseDeliveryMode","contentSummary","parseContentSummary","TransportSessionStates","buildType","Superclass","superclassArgs","_sessionEventCode","errorSubCode","SUPERCLASS_FOR_SESSION_EVENT","SUPERCLASS_ARGS","sec","ck","TYPE_CACHE","TYPE_DESCRIPTION","DESINATION_TYPE_TO_DESCRIPTOR_TYPE","queueSpec","maybeAdaptFromDestination","_durable","PRINTABLE_LUT","showDecode","leftPadding","ascii","lineBytes","parseSMFStream","IGNORE","REJECT","_parameters","ALWAYS_OPS","flowProperties","emitterOptions","emitterOptionsFull","_disposing","_userDisconnected","_stats","_privateEventEmitter","clearStats","userDisconnected","_midDispatch","terminateWithRunningFSM","_setCanonical","acc","childIn","removeChild","childIndex","collapse","getCBInfo","getLiveDataAction","cacheSessionTimeoutCB","DEFAULT_REPLY_SIZE_LIMIT","MessageDumpStandardProviderLib","MessageDumpState","dumpProviders","providers","getOutOfRangeValue","rawData","sdtField","indent","strIndent","sdtStream","timeStamp","separator","colPadding","sb","theSeparator","needSeparator","theColPadding","provider","autoDecodeVarLengthNumber","elemType","lenBytes","elemLen","SUBCODE_FROM_EC","eventCode","_requestEventCode","superObj","numToHex","_allFlows","_reconnectingFlows","_flowsById","flowUp","flowDisposed","flowDown","matches","defineProperties","_canonical","enumValue","noneValue","unknownValue","isEnum","ofStrings","strings","ofNumbers","createFromSpec","ZERO_APP_ACK","_acknowledgeThreshold","_localPreferredWindowSize","_localMaxWindowSize","_hasAutoAckSupport","_messageDispatch","_resetRemoteConnectionState","_resetLocalConnectionState","_errorCausingReconnect","emitEventActionType","startDispatchActionType","stopDispatchActionType","postEventActions","preprocessPostEventActions","startIndex","actionLocations","cancelAction","firstActionName","cancellingActionName","firstLocation","processPostEventActions","preprocessedActions","requestStartDispatchFSM","addPostEventAction","newEvent","emitBindFailed","verifyNackSettlementOutcomesSupport","checkCapabilitiesChoicePoint","verifyEndpointSubscription","Unbound","CreateSent","BindSent","checkCapabilitiesChoicePointOnRebind","externalTransition","Reconnecting","RBindSent","_addEventToEmit","_requestStartDispatch","_requestStopDispatch","requestStopDispatchFSM","transitionToUnbound","_dispose","getCloseMessageConsumer","handleAccidentalBind","emitDisabledEvent","AwaitSessionUp","AwaitFlowOpen","emitBindWaiting","BindSentExtensions","sendBindRequest","transportAcks","_transportAcks","_endpointEnsure","_endpoint","subscription","_subscription","getOpenMessageConsumer","handleBindTimeout","handleBindResponse","cancelBindRequestTimer","bindRequestTimer","handleExpectedBind","partitionGroupIdValue","getPartitionGroupId","_clearPartitionGroupId","lastMsgIdAcked","getAccessType","topicEndpointBytes","getTopicEndpointBytes","grantedPermissions","getGrantedPermissions","allOthersPermissions","getAllOthersPermissions","getRespectsTTL","activeFlow","getWantFlowChangeNotify","getQueueDiscardBehavior","deliveryCountSent","getEndpointDeliveryCountSent","endpointId","getEndpointId","maxUnackedMessages","getMaxUnackedMessages","getSpoolerUniqueId","quota","getQuota","maxMsgSize","getMaxMsgSize","maxRedelivery","getMaxRedelivery","_remoteWindowSize","PROTOTOCOL_ERROR","respEvent","UnbindSent","FlowUp","RAwaitSessionUp","RAwaitTimer","emitRebindFailed","handleReconnectIntervalTimeout","cancelReconnectIntervalTimer","reconnectIntervalTimer","flowUpFSM","XferInactive","Xfer","transitionToUnboundFromUp","_sendAcks","sendUnbindRequest","_endpointClear","handleUnbindTimeout","handleUnbindResponse","sendCreateRequest","handleCreateTimeout","idstr","_fsmDispatch","messageSuid","ackResult","transportAckRequired","maxPendingAcks","_applicationAcks","_oldUnacked","_setTransportAckTimer","dupAckRanges","_sendAck","applicationAckRequired","messageOutcome","oldAckRanges","UNBOUND_AWAITING_FLOWOPEN","_userDispatch","applyStartDispatch","unbindAck","getUnbindAck","_clearTransportAckTimer","_transportAckTimer","_unacked","applicationAcks","transportAck","getAck","_addAckToRanges","acksPendingState","currentRange","ackRanges","allMessageOutcomes","currentRangeLength","totalRangeLen","MAX_CLIENT_ACK_RANGES","bareRanges","hasAnyBareRanges","forceTransportAck","failedBareRanges","rejectedBareRanges","g","ackRange","concatFrom","buf0","readUInt32BEFrag","bufList","listOffsetParam","byteIndexParam","listOffset","byteIndex","maxSize","_maxSize","oIndex","adaptData","createField","isSigned","readInt8","readInt16BE","longValue","field","_quotaMB","_maxMessageSize","_discardBehavior","_maxMessageRedelivery","createReplayStartLocationBeginning","MODE","FORMATTED_DATE","pad","SUMMARY","NOTIFY_SENDER_ON","NOTIFY_SENDER_OFF","READ_ONLY","CONSUME","MODIFY_TOPIC","cloneObj","STUB","generateLogHeader","levelStr","date","levelStrPadding","YY","MM","DD","hh","mm","ss","getMilliseconds","consoleIn","_trace","_debug","_info","_warn","_fatal","console","Function","SessionPropertiesValidator","isValidADTransport","SOLCLIENT_REQUEST_PREFIX","messageCallback","eventCallback","_sessionFSM","_messageCallbackInfo","wrapMessageCallback","_eventCallbackInfo","wrapEventCallback","_setUserIdentification","selectedProtocol","defaultList","transportProtocolDefaultList","sliceIndex","validForAD","_adDisabledReason","transportProtocols","invalid","_sessionStats","_outstandingDataReqs","_capabilities","_seqNum","allowOperation","stateName","isBooleanOrNothing","handleSubscriptionUpdateResponse","handleQueueSubscriptionUpdateResponse","unsubscribe","unsubscribeDurableTopicEndpoint","handleDTEUnsubscribeResponse","updateProperty","respMsg","oldP2pTopicName","oldP2pTopic","newP2pTopicName","newP2pTopic","afterAddCallback","smpResp","resp","ignoreDuplicateSubscriptionError","afterRemoveCallback","ignoreSubscriptionNotFoundError","updateAuthenticationOnReconnect","authenticationProperties","allowedProperties","newProps","_failOnExtendedVariableLengthProperties","validateAndSendMessage","sendRequest","requestFailedCBFunction","isFunctionOrNothing","replyToTopic","enqueueOutstandingDataReq","sendReply","messageToReplyTo","replyMessage","getSessionState","_setWebTransportProtocolInUse","capabilityType","sessionStateName","getFSMState","WAITING_FOR_SESSION_UP","WAITING_FOR_P2PINBOX_REG","createCacheSession","ignoreExists","queueDescriptor2","handleProvisionResponse","ignoreMissing","provision","getQueueNameBytes","getDurability","provisionEvent","browserProperties","destinationType","vrn","localName","operationEnum","allow","NEW","routerCapabilities","sendDest","senderTimestamp","noSenderTimestamp","generateSendTimestamps","sequenceNumber","noSequenceNumber","generateSequenceNumber","senderId","noSenderId","includeSenderId","reqFailedCb","replyRecvdCb","requestEvent","cancelOutstandingDataReq","dataReq","dataMessageIn","generateReceiveTimestamps","adCtrlMessage","eventCBInfo","messageCBInfo","rfu","buildErrorEvent","createTopic","createDurableQueueDestination","NodeSslConstants","DEFAULT_CIPHER_SUITES","SUPPORTED_CIPHER_SUITES","SUPPORTED_SSL_PROTOCOLS","SessionPropertiesBase","_tpProtocol","_transportProtocolList","_tpDowngradeTimeout","transportProtocolInUse","_tpProtocolInUse","_setTransportProtocolInUse","webTransportProtocolInUse","_tpContentType","_sslExcludedProtocols","_tlsMinProtocol","_tlsMaxProtocol","_sslCipherSuites","_sslValidateCert","NODE_TLS_REJECT_UNAUTHORIZED","_sslTrustStores","_sslTrustedCNList","_sslPfx","_sslPfxPasswd","_sslPrivateKey","_sslPrivateKeyPasswd","_sslCertificate","sslProtocol","_sslProtocol","_sslConnectionDowngradeTo","_lendsInspect","_vpnNameInUse","_virtualRouterName","_p2pInboxInUse","_p2pInboxBase","_userIdentification","_publisherProperties","_payloadCompressionLevel","makeDefaults","_authScheme","_accessToken","_idToken","_issuerIdentifier","_password","_userName","_clientName","_appDesc","_vpnName","vpnNameInUse","defaultConnectTimeoutInMsecs","transportCount","connectDowngradeDefault","_connectRetries","_connectRetriesPerHost","_reconnectRetryWaitInMsecs","_genSendTimestamps","_genReceiveTimestamps","_includeSenderId","_genSequenceNumber","_kaInterval","_kaIntervalsLimit","_subLocalPriority","_subNetworkPriority","_ignoreDupSubError","_ignoreSubNotFoundError","_reapplySubcriptions","_readTimeout","_assumedMaxAdSize","_maxWebPayload","nonHTTPTransportPropsSet","BRIDGE_MSG_VPN_NAME","BRIDGE_ROUTER_NAME","BRIDGE_VERSION","CONNECTION_TYPE","ROUTER_CAPABILITIES_EXTENDED","REQUIRES_RELEASE_7","KEY_STR","ENC_LUT","DecodeError","LegacyEncoder","base64_encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","base64_decode","isNode","hasBuffer","BufferEncoder","WindowEncoder","SessionPropertiesLib","ALLOWED_PROTOCOLS","valClientName","valIsMemberIgnoreCase","allowFalsy","valSslExcludedProtocols","supported","prtcl","valSslCipherSuites","ciphers","valSslTrustedCommonNameList","valUrlList","valArray","validatePropsSupportedByTransport","nonHttpPropsSet","isHttpTransport","propNames","regex","arrayLength","currententry","matchUrl","sslPfxSet","sslPrivateKeySet","sslCertSet","recommendedMin","connectTimeout","smfmessage","getEventText","_eventText","ttl","smf_msgLen","smf_tqd","unknownProtoFlag","bUInt8","bUInt16BE","bUInt32BE","bUInt64BE","EndpointTypeToParam","QueueDescriptorTypeToParam","QUEUE_PERMISSIONS_TO_BITS","ACCESS_TYPE_INT_TO_ENUM","ACCESS_TYPE_ENUM_TO_BITS","DUARBILITY_INT_TO_BOOL","DISCARD_ENUM_TO_VALUE","addQueueProperties","skipAccessType","_readParameter","bufMethod","masked","getLastMsgIdReceived","endpointTypeParam","lastMsgIdSent","adMsg","topicSubscription","wantFlowChangeUpdate","lastMsgIdReceived","hasNackSupport","endpointBytes","endpointType","rsValue","lastMessageIdAcked","applicationAckRanges","allOutcomes","curMask","msgFlags","queueLength","subsLength","MyWebSocket","createWebSocketOptions","onDrainCallback","Agent","keepAlive","wsAgent","origCreateConnection","adaptURL","msgBuf","maybeEmitCanSend","maybeEmitFlush","onBufferedAmountPoll","scheduleQuery","WAITING_FOR_CONNECT","onMessage","_socketOptions","ondrain","bufferAllow","maxPayloadBytes","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}